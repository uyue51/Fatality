// generated on: Mon Nov 18 16:22:34 2024
#ifndef SDK_SCHEMA_OFFSETS_H
#define SDK_SCHEMA_OFFSETS_H

#include <cstdint>

namespace sdk {
	namespace offsets {
		namespace schema {
			namespace client
			{

				namespace CDestructiblePartRuntimeDataVector {
					constexpr auto destructible_parts_runtime_data = 0x0; // Name: m_DestructiblePartsRuntimeData Offset: 0x0
				} // namespace CDestructiblePartRuntimeDataVector

				namespace CLogicRelay {
					constexpr auto on_trigger = 0x568; // Name: m_OnTrigger Offset: 0x568
					constexpr auto on_spawn = 0x590; // Name: m_OnSpawn Offset: 0x590
					constexpr auto b_disabled = 0x5B8; // Name: m_bDisabled Offset: 0x5B8
					constexpr auto b_wait_for_refire = 0x5B9; // Name: m_bWaitForRefire Offset: 0x5B9
					constexpr auto b_trigger_once = 0x5BA; // Name: m_bTriggerOnce Offset: 0x5BA
					constexpr auto b_fast_retrigger = 0x5BB; // Name: m_bFastRetrigger Offset: 0x5BB
					constexpr auto b_passthough_caller = 0x5BC; // Name: m_bPassthoughCaller Offset: 0x5BC
				} // namespace CLogicRelay

				namespace C_CSGO_TeamSelectCharacterPosition {
				} // namespace C_CSGO_TeamSelectCharacterPosition

				namespace C_InfoInstructorHintHostageRescueZone {
				} // namespace C_InfoInstructorHintHostageRescueZone

				namespace CSkeletonInstance {
					constexpr auto model_state = 0x170; // Name: m_modelState Offset: 0x170
					constexpr auto b_is_animation_enabled = 0x3A0; // Name: m_bIsAnimationEnabled Offset: 0x3A0
					constexpr auto b_use_parent_render_bounds = 0x3A1; // Name: m_bUseParentRenderBounds Offset: 0x3A1
					constexpr auto b_disable_solid_collisions_for_hierarchy = 0x3A2; // Name: m_bDisableSolidCollisionsForHierarchy Offset: 0x3A2
					constexpr auto b_dirty_motion_type = 0x0; // Name: m_bDirtyMotionType Offset: 0x0
					constexpr auto b_is_generating_latched_parent_space_state = 0x0; // Name: m_bIsGeneratingLatchedParentSpaceState Offset: 0x0
					constexpr auto material_group = 0x3A4; // Name: m_materialGroup Offset: 0x3A4
					constexpr auto n_hitbox_set = 0x3A8; // Name: m_nHitboxSet Offset: 0x3A8
				} // namespace CSkeletonInstance

				namespace CCSPlayer_MovementServices {
					constexpr auto vec_ladder_normal = 0x218; // Name: m_vecLadderNormal Offset: 0x218
					constexpr auto n_ladder_surface_prop_index = 0x224; // Name: m_nLadderSurfacePropIndex Offset: 0x224
					constexpr auto fl_duck_amount = 0x228; // Name: m_flDuckAmount Offset: 0x228
					constexpr auto fl_duck_speed = 0x22C; // Name: m_flDuckSpeed Offset: 0x22C
					constexpr auto b_duck_override = 0x230; // Name: m_bDuckOverride Offset: 0x230
					constexpr auto b_desires_duck = 0x231; // Name: m_bDesiresDuck Offset: 0x231
					constexpr auto fl_duck_offset = 0x234; // Name: m_flDuckOffset Offset: 0x234
					constexpr auto n_duck_time_msecs = 0x238; // Name: m_nDuckTimeMsecs Offset: 0x238
					constexpr auto n_duck_jump_time_msecs = 0x23C; // Name: m_nDuckJumpTimeMsecs Offset: 0x23C
					constexpr auto n_jump_time_msecs = 0x240; // Name: m_nJumpTimeMsecs Offset: 0x240
					constexpr auto fl_last_duck_time = 0x244; // Name: m_flLastDuckTime Offset: 0x244
					constexpr auto vec_last_position_at_full_crouch_speed = 0x250; // Name: m_vecLastPositionAtFullCrouchSpeed Offset: 0x250
					constexpr auto duck_until_on_ground = 0x258; // Name: m_duckUntilOnGround Offset: 0x258
					constexpr auto b_has_walk_moved_since_last_jump = 0x259; // Name: m_bHasWalkMovedSinceLastJump Offset: 0x259
					constexpr auto b_in_stuck_test = 0x25A; // Name: m_bInStuckTest Offset: 0x25A
					constexpr auto fl_stuck_check_time = 0x268; // Name: m_flStuckCheckTime Offset: 0x268
					constexpr auto n_trace_count = 0x468; // Name: m_nTraceCount Offset: 0x468
					constexpr auto stuck_last = 0x46C; // Name: m_StuckLast Offset: 0x46C
					constexpr auto b_speed_cropped = 0x470; // Name: m_bSpeedCropped Offset: 0x470
					constexpr auto fl_ground_move_efficiency = 0x474; // Name: m_flGroundMoveEfficiency Offset: 0x474
					constexpr auto n_old_water_level = 0x478; // Name: m_nOldWaterLevel Offset: 0x478
					constexpr auto fl_water_entry_time = 0x47C; // Name: m_flWaterEntryTime Offset: 0x47C
					constexpr auto vec_forward = 0x480; // Name: m_vecForward Offset: 0x480
					constexpr auto vec_left = 0x48C; // Name: m_vecLeft Offset: 0x48C
					constexpr auto vec_up = 0x498; // Name: m_vecUp Offset: 0x498
					constexpr auto n_game_code_has_moved_player_after_command = 0x4A4; // Name: m_nGameCodeHasMovedPlayerAfterCommand Offset: 0x4A4
					constexpr auto b_old_jump_pressed = 0x4A8; // Name: m_bOldJumpPressed Offset: 0x4A8
					constexpr auto fl_jump_pressed_time = 0x4AC; // Name: m_flJumpPressedTime Offset: 0x4AC
					constexpr auto f_stash_grenade_parameter_when = 0x4B0; // Name: m_fStashGrenadeParameterWhen Offset: 0x4B0
					constexpr auto n_button_down_mask_prev = 0x4B8; // Name: m_nButtonDownMaskPrev Offset: 0x4B8
					constexpr auto fl_offset_tick_complete_time = 0x4C0; // Name: m_flOffsetTickCompleteTime Offset: 0x4C0
					constexpr auto fl_offset_tick_stashed_speed = 0x4C4; // Name: m_flOffsetTickStashedSpeed Offset: 0x4C4
					constexpr auto fl_stamina = 0x4C8; // Name: m_flStamina Offset: 0x4C8
					constexpr auto fl_height_at_jump_start = 0x4CC; // Name: m_flHeightAtJumpStart Offset: 0x4CC
					constexpr auto fl_max_jump_height_this_jump = 0x4D0; // Name: m_flMaxJumpHeightThisJump Offset: 0x4D0
					constexpr auto fl_max_jump_height_last_jump = 0x4D4; // Name: m_flMaxJumpHeightLastJump Offset: 0x4D4
					constexpr auto fl_stamina_at_jump_start = 0x4D8; // Name: m_flStaminaAtJumpStart Offset: 0x4D8
					constexpr auto fl_accumulated_jump_error = 0x4DC; // Name: m_flAccumulatedJumpError Offset: 0x4DC
				} // namespace CCSPlayer_MovementServices

				namespace CAnimEventQueueListener {
				} // namespace CAnimEventQueueListener

				namespace CCSObserver_MovementServices {
				} // namespace CCSObserver_MovementServices

				namespace ResponseFollowup {
					constexpr auto followup_concept = 0x0; // Name: followup_concept Offset: 0x0
					constexpr auto followup_contexts = 0x8; // Name: followup_contexts Offset: 0x8
					constexpr auto followup_delay = 0x10; // Name: followup_delay Offset: 0x10
					constexpr auto followup_target = 0x14; // Name: followup_target Offset: 0x14
					constexpr auto followup_entityiotarget = 0x1C; // Name: followup_entityiotarget Offset: 0x1C
					constexpr auto followup_entityioinput = 0x24; // Name: followup_entityioinput Offset: 0x24
					constexpr auto followup_entityiodelay = 0x2C; // Name: followup_entityiodelay Offset: 0x2C
					constexpr auto b_fired = 0x30; // Name: bFired Offset: 0x30
				} // namespace ResponseFollowup

				namespace CompositeMaterialEditorPoint_t {
					constexpr auto model_name = 0x0; // Name: m_ModelName Offset: 0x0
					constexpr auto n_sequence_index = 0xE0; // Name: m_nSequenceIndex Offset: 0xE0
					constexpr auto fl_cycle = 0xE4; // Name: m_flCycle Offset: 0xE4
					constexpr auto kvmodel_state_choices = 0xE8; // Name: m_KVModelStateChoices Offset: 0xE8
					constexpr auto b_enable_child_model = 0xF8; // Name: m_bEnableChildModel Offset: 0xF8
					constexpr auto child_model_name = 0x100; // Name: m_ChildModelName Offset: 0x100
					constexpr auto vec_composite_material_assembly_procedures = 0x1E0; // Name: m_vecCompositeMaterialAssemblyProcedures Offset: 0x1E0
					constexpr auto vec_composite_materials = 0x1F8; // Name: m_vecCompositeMaterials Offset: 0x1F8
				} // namespace CompositeMaterialEditorPoint_t

				namespace C_Item {
					constexpr auto p_reticle_hint_text_name = 0x1668; // Name: m_pReticleHintTextName Offset: 0x1668
				} // namespace C_Item

				namespace C_Chicken_GraphController {
					constexpr auto param_activity = 0x60; // Name: m_paramActivity Offset: 0x60
					constexpr auto param_end_activity_immediately = 0x88; // Name: m_paramEndActivityImmediately Offset: 0x88
					constexpr auto param_snap_to_squatting = 0xA8; // Name: m_paramSnapToSquatting Offset: 0xA8
					constexpr auto s_activity_finished = 0xC8; // Name: m_sActivityFinished Offset: 0xC8
					constexpr auto fl_squat_probability = 0xE0; // Name: m_flSquatProbability Offset: 0xE0
				} // namespace C_Chicken_GraphController

				namespace C_HEGrenade {
				} // namespace C_HEGrenade

				namespace C_SoundOpvarSetPathCornerEntity {
				} // namespace C_SoundOpvarSetPathCornerEntity

				namespace C_PointClientUIHUD {
					constexpr auto b_check_cssclasses = 0xD60; // Name: m_bCheckCSSClasses Offset: 0xD60
					constexpr auto b_ignore_input = 0xEE0; // Name: m_bIgnoreInput Offset: 0xEE0
					constexpr auto fl_width = 0xEE4; // Name: m_flWidth Offset: 0xEE4
					constexpr auto fl_height = 0xEE8; // Name: m_flHeight Offset: 0xEE8
					constexpr auto fl_dpi = 0xEEC; // Name: m_flDPI Offset: 0xEEC
					constexpr auto fl_interact_distance = 0xEF0; // Name: m_flInteractDistance Offset: 0xEF0
					constexpr auto fl_depth_offset = 0xEF4; // Name: m_flDepthOffset Offset: 0xEF4
					constexpr auto un_owner_context = 0xEF8; // Name: m_unOwnerContext Offset: 0xEF8
					constexpr auto un_horizontal_align = 0xEFC; // Name: m_unHorizontalAlign Offset: 0xEFC
					constexpr auto un_vertical_align = 0xF00; // Name: m_unVerticalAlign Offset: 0xF00
					constexpr auto un_orientation = 0xF04; // Name: m_unOrientation Offset: 0xF04
					constexpr auto b_allow_interaction_from_all_scene_worlds = 0xF08; // Name: m_bAllowInteractionFromAllSceneWorlds Offset: 0xF08
					constexpr auto vec_cssclasses = 0xF10; // Name: m_vecCSSClasses Offset: 0xF10
				} // namespace C_PointClientUIHUD

				namespace CBodyComponentBaseAnimGraph {
					constexpr auto animation_controller = 0x490; // Name: m_animationController Offset: 0x490
				} // namespace CBodyComponentBaseAnimGraph

				namespace CBreakableStageHelper {
					constexpr auto n_current_stage = 0x8; // Name: m_nCurrentStage Offset: 0x8
					constexpr auto n_stage_count = 0xC; // Name: m_nStageCount Offset: 0xC
				} // namespace CBreakableStageHelper

				namespace C_FuncMover {
				} // namespace C_FuncMover

				namespace C_WeaponM4A1 {
				} // namespace C_WeaponM4A1

				namespace C_TriggerLerpObject {
				} // namespace C_TriggerLerpObject

				namespace thinkfunc_t {
					constexpr auto h_fn = 0x8; // Name: m_hFn Offset: 0x8
					constexpr auto n_context = 0x10; // Name: m_nContext Offset: 0x10
					constexpr auto n_next_think_tick = 0x14; // Name: m_nNextThinkTick Offset: 0x14
					constexpr auto n_last_think_tick = 0x18; // Name: m_nLastThinkTick Offset: 0x18
				} // namespace thinkfunc_t

				namespace sky3dparams_t {
					constexpr auto scale = 0x8; // Name: scale Offset: 0x8
					constexpr auto origin = 0xC; // Name: origin Offset: 0xC
					constexpr auto b_clip3_dsky_box_near_to_world_far = 0x18; // Name: bClip3DSkyBoxNearToWorldFar Offset: 0x18
					constexpr auto fl_clip3_dsky_box_near_to_world_far_offset = 0x1C; // Name: flClip3DSkyBoxNearToWorldFarOffset Offset: 0x1C
					constexpr auto fog = 0x20; // Name: fog Offset: 0x20
					constexpr auto n_world_group_id = 0x88; // Name: m_nWorldGroupID Offset: 0x88
				} // namespace sky3dparams_t

				namespace C_SoundEventPathCornerEntity {
					constexpr auto vec_corner_pairs_networked = 0x628; // Name: m_vecCornerPairsNetworked Offset: 0x628
				} // namespace C_SoundEventPathCornerEntity

				namespace CEnvSoundscapeTriggerable {
				} // namespace CEnvSoundscapeTriggerable

				namespace CCSObserver_ObserverServices {
					constexpr auto h_last_observer_target = 0x58; // Name: m_hLastObserverTarget Offset: 0x58
					constexpr auto vec_observer_interpolate_offset = 0x5C; // Name: m_vecObserverInterpolateOffset Offset: 0x5C
					constexpr auto vec_observer_interp_start_pos = 0x68; // Name: m_vecObserverInterpStartPos Offset: 0x68
					constexpr auto fl_obs_interp__path_length = 0x74; // Name: m_flObsInterp_PathLength Offset: 0x74
					constexpr auto q_obs_interp__orientation_start = 0x80; // Name: m_qObsInterp_OrientationStart Offset: 0x80
					constexpr auto q_obs_interp__orientation_travel_dir = 0x90; // Name: m_qObsInterp_OrientationTravelDir Offset: 0x90
					constexpr auto obs_interp_state = 0xA0; // Name: m_obsInterpState Offset: 0xA0
					constexpr auto b_observer_interpolation_needs_deferred_setup = 0xA4; // Name: m_bObserverInterpolationNeedsDeferredSetup Offset: 0xA4
				} // namespace CCSObserver_ObserverServices

				namespace C_HostageCarriableProp {
				} // namespace C_HostageCarriableProp

				namespace C_WeaponM249 {
				} // namespace C_WeaponM249

				namespace C_PlayerPing {
					constexpr auto h_player = 0x598; // Name: m_hPlayer Offset: 0x598
					constexpr auto h_pinged_entity = 0x59C; // Name: m_hPingedEntity Offset: 0x59C
					constexpr auto i_type = 0x5A0; // Name: m_iType Offset: 0x5A0
					constexpr auto b_urgent = 0x5A4; // Name: m_bUrgent Offset: 0x5A4
					constexpr auto sz_place_name = 0x5A5; // Name: m_szPlaceName Offset: 0x5A5
				} // namespace C_PlayerPing

				namespace C_Chicken {
					constexpr auto h_holiday_hat_addon = 0x1230; // Name: m_hHolidayHatAddon Offset: 0x1230
					constexpr auto jumped_this_frame = 0x1234; // Name: m_jumpedThisFrame Offset: 0x1234
					constexpr auto leader = 0x1238; // Name: m_leader Offset: 0x1238
					constexpr auto attribute_manager = 0x1240; // Name: m_AttributeManager Offset: 0x1240
					constexpr auto b_attributes_initialized = 0x16E8; // Name: m_bAttributesInitialized Offset: 0x16E8
					constexpr auto h_water_wake_particles = 0x16EC; // Name: m_hWaterWakeParticles Offset: 0x16EC
					constexpr auto b_is_preview_model = 0x16F0; // Name: m_bIsPreviewModel Offset: 0x16F0
				} // namespace C_Chicken

				namespace C_CSGameRules {
					constexpr auto b_freeze_period = 0x40; // Name: m_bFreezePeriod Offset: 0x40
					constexpr auto b_warmup_period = 0x41; // Name: m_bWarmupPeriod Offset: 0x41
					constexpr auto f_warmup_period_end = 0x44; // Name: m_fWarmupPeriodEnd Offset: 0x44
					constexpr auto f_warmup_period_start = 0x48; // Name: m_fWarmupPeriodStart Offset: 0x48
					constexpr auto b_server_paused = 0x4C; // Name: m_bServerPaused Offset: 0x4C
					constexpr auto b_terrorist_time_out_active = 0x4D; // Name: m_bTerroristTimeOutActive Offset: 0x4D
					constexpr auto b_cttime_out_active = 0x4E; // Name: m_bCTTimeOutActive Offset: 0x4E
					constexpr auto fl_terrorist_time_out_remaining = 0x50; // Name: m_flTerroristTimeOutRemaining Offset: 0x50
					constexpr auto fl_cttime_out_remaining = 0x54; // Name: m_flCTTimeOutRemaining Offset: 0x54
					constexpr auto n_terrorist_time_outs = 0x58; // Name: m_nTerroristTimeOuts Offset: 0x58
					constexpr auto n_cttime_outs = 0x5C; // Name: m_nCTTimeOuts Offset: 0x5C
					constexpr auto b_technical_time_out = 0x60; // Name: m_bTechnicalTimeOut Offset: 0x60
					constexpr auto b_match_waiting_for_resume = 0x61; // Name: m_bMatchWaitingForResume Offset: 0x61
					constexpr auto i_round_time = 0x64; // Name: m_iRoundTime Offset: 0x64
					constexpr auto f_match_start_time = 0x68; // Name: m_fMatchStartTime Offset: 0x68
					constexpr auto f_round_start_time = 0x6C; // Name: m_fRoundStartTime Offset: 0x6C
					constexpr auto fl_restart_round_time = 0x70; // Name: m_flRestartRoundTime Offset: 0x70
					constexpr auto b_game_restart = 0x74; // Name: m_bGameRestart Offset: 0x74
					constexpr auto fl_game_start_time = 0x78; // Name: m_flGameStartTime Offset: 0x78
					constexpr auto time_until_next_phase_starts = 0x7C; // Name: m_timeUntilNextPhaseStarts Offset: 0x7C
					constexpr auto game_phase = 0x80; // Name: m_gamePhase Offset: 0x80
					constexpr auto total_rounds_played = 0x84; // Name: m_totalRoundsPlayed Offset: 0x84
					constexpr auto n_rounds_played_this_phase = 0x88; // Name: m_nRoundsPlayedThisPhase Offset: 0x88
					constexpr auto n_overtime_playing = 0x8C; // Name: m_nOvertimePlaying Offset: 0x8C
					constexpr auto i_hostages_remaining = 0x90; // Name: m_iHostagesRemaining Offset: 0x90
					constexpr auto b_any_hostage_reached = 0x94; // Name: m_bAnyHostageReached Offset: 0x94
					constexpr auto b_map_has_bomb_target = 0x95; // Name: m_bMapHasBombTarget Offset: 0x95
					constexpr auto b_map_has_rescue_zone = 0x96; // Name: m_bMapHasRescueZone Offset: 0x96
					constexpr auto b_map_has_buy_zone = 0x97; // Name: m_bMapHasBuyZone Offset: 0x97
					constexpr auto b_is_queued_matchmaking = 0x98; // Name: m_bIsQueuedMatchmaking Offset: 0x98
					constexpr auto n_queued_matchmaking_mode = 0x9C; // Name: m_nQueuedMatchmakingMode Offset: 0x9C
					constexpr auto b_is_valve_ds = 0xA0; // Name: m_bIsValveDS Offset: 0xA0
					constexpr auto b_logo_map = 0xA1; // Name: m_bLogoMap Offset: 0xA1
					constexpr auto b_play_all_step_sounds_on_server = 0xA2; // Name: m_bPlayAllStepSoundsOnServer Offset: 0xA2
					constexpr auto i_spectator_slot_count = 0xA4; // Name: m_iSpectatorSlotCount Offset: 0xA4
					constexpr auto match_device = 0xA8; // Name: m_MatchDevice Offset: 0xA8
					constexpr auto b_has_match_started = 0xAC; // Name: m_bHasMatchStarted Offset: 0xAC
					constexpr auto n_next_map_in_mapgroup = 0xB0; // Name: m_nNextMapInMapgroup Offset: 0xB0
					constexpr auto sz_tournament_event_name = 0xB4; // Name: m_szTournamentEventName Offset: 0xB4
					constexpr auto sz_tournament_event_stage = 0x2B4; // Name: m_szTournamentEventStage Offset: 0x2B4
					constexpr auto sz_match_stat_txt = 0x4B4; // Name: m_szMatchStatTxt Offset: 0x4B4
					constexpr auto sz_tournament_predictions_txt = 0x6B4; // Name: m_szTournamentPredictionsTxt Offset: 0x6B4
					constexpr auto n_tournament_predictions_pct = 0x8B4; // Name: m_nTournamentPredictionsPct Offset: 0x8B4
					constexpr auto fl_cmmitem_drop_reveal_start_time = 0x8B8; // Name: m_flCMMItemDropRevealStartTime Offset: 0x8B8
					constexpr auto fl_cmmitem_drop_reveal_end_time = 0x8BC; // Name: m_flCMMItemDropRevealEndTime Offset: 0x8BC
					constexpr auto b_is_dropping_items = 0x8C0; // Name: m_bIsDroppingItems Offset: 0x8C0
					constexpr auto b_is_quest_eligible = 0x8C1; // Name: m_bIsQuestEligible Offset: 0x8C1
					constexpr auto b_is_hltv_active = 0x8C2; // Name: m_bIsHltvActive Offset: 0x8C2
					constexpr auto arr_prohibited_item_indices = 0x8C4; // Name: m_arrProhibitedItemIndices Offset: 0x8C4
					constexpr auto arr_tournament_active_caster_accounts = 0x98C; // Name: m_arrTournamentActiveCasterAccounts Offset: 0x98C
					constexpr auto num_best_of_maps = 0x99C; // Name: m_numBestOfMaps Offset: 0x99C
					constexpr auto n_halloween_mask_list_seed = 0x9A0; // Name: m_nHalloweenMaskListSeed Offset: 0x9A0
					constexpr auto b_bomb_dropped = 0x9A4; // Name: m_bBombDropped Offset: 0x9A4
					constexpr auto b_bomb_planted = 0x9A5; // Name: m_bBombPlanted Offset: 0x9A5
					constexpr auto i_round_win_status = 0x9A8; // Name: m_iRoundWinStatus Offset: 0x9A8
					constexpr auto e_round_win_reason = 0x9AC; // Name: m_eRoundWinReason Offset: 0x9AC
					constexpr auto b_tcant_buy = 0x9B0; // Name: m_bTCantBuy Offset: 0x9B0
					constexpr auto b_ctcant_buy = 0x9B1; // Name: m_bCTCantBuy Offset: 0x9B1
					constexpr auto i_match_stats__round_results = 0x9B4; // Name: m_iMatchStats_RoundResults Offset: 0x9B4
					constexpr auto i_match_stats__players_alive__ct = 0xA2C; // Name: m_iMatchStats_PlayersAlive_CT Offset: 0xA2C
					constexpr auto i_match_stats__players_alive__t = 0xAA4; // Name: m_iMatchStats_PlayersAlive_T Offset: 0xAA4
					constexpr auto team_respawn_wave_times = 0xB1C; // Name: m_TeamRespawnWaveTimes Offset: 0xB1C
					constexpr auto fl_next_respawn_wave = 0xB9C; // Name: m_flNextRespawnWave Offset: 0xB9C
					constexpr auto n_server_quest_id = 0xC1C; // Name: m_nServerQuestID Offset: 0xC1C
					constexpr auto v_minimap_mins = 0xC20; // Name: m_vMinimapMins Offset: 0xC20
					constexpr auto v_minimap_maxs = 0xC2C; // Name: m_vMinimapMaxs Offset: 0xC2C
					constexpr auto minimap_vertical_section_heights = 0xC38; // Name: m_MinimapVerticalSectionHeights Offset: 0xC38
					constexpr auto b_spawned_terror_hunt_heavy = 0xC58; // Name: m_bSpawnedTerrorHuntHeavy Offset: 0xC58
					constexpr auto n_end_match_map_group_vote_types = 0xC5C; // Name: m_nEndMatchMapGroupVoteTypes Offset: 0xC5C
					constexpr auto n_end_match_map_group_vote_options = 0xC84; // Name: m_nEndMatchMapGroupVoteOptions Offset: 0xC84
					constexpr auto n_end_match_map_vote_winner = 0xCAC; // Name: m_nEndMatchMapVoteWinner Offset: 0xCAC
					constexpr auto i_num_consecutive_ctloses = 0xCB0; // Name: m_iNumConsecutiveCTLoses Offset: 0xCB0
					constexpr auto i_num_consecutive_terrorist_loses = 0xCB4; // Name: m_iNumConsecutiveTerroristLoses Offset: 0xCB4
					constexpr auto b_mark_client_stop_record_at_round_end = 0xCD0; // Name: m_bMarkClientStopRecordAtRoundEnd Offset: 0xCD0
					constexpr auto n_match_aborted_early_reason = 0xD78; // Name: m_nMatchAbortedEarlyReason Offset: 0xD78
					constexpr auto b_has_triggered_round_start_music = 0xD7C; // Name: m_bHasTriggeredRoundStartMusic Offset: 0xD7C
					constexpr auto b_switching_teams_at_round_reset = 0xD7D; // Name: m_bSwitchingTeamsAtRoundReset Offset: 0xD7D
					constexpr auto p_game_mode_rules = 0xD98; // Name: m_pGameModeRules Offset: 0xD98
					constexpr auto retake_rules = 0xDA0; // Name: m_RetakeRules Offset: 0xDA0
					constexpr auto n_match_end_count = 0xEB8; // Name: m_nMatchEndCount Offset: 0xEB8
					constexpr auto n_tteam_intro_variant = 0xEBC; // Name: m_nTTeamIntroVariant Offset: 0xEBC
					constexpr auto n_ctteam_intro_variant = 0xEC0; // Name: m_nCTTeamIntroVariant Offset: 0xEC0
					constexpr auto b_team_intro_period = 0xEC4; // Name: m_bTeamIntroPeriod Offset: 0xEC4
					constexpr auto i_round_end_winner_team = 0xEC8; // Name: m_iRoundEndWinnerTeam Offset: 0xEC8
					constexpr auto e_round_end_reason = 0xECC; // Name: m_eRoundEndReason Offset: 0xECC
					constexpr auto b_round_end_show_timer_defend = 0xED0; // Name: m_bRoundEndShowTimerDefend Offset: 0xED0
					constexpr auto i_round_end_timer_time = 0xED4; // Name: m_iRoundEndTimerTime Offset: 0xED4
					constexpr auto s_round_end_fun_fact_token = 0xED8; // Name: m_sRoundEndFunFactToken Offset: 0xED8
					constexpr auto i_round_end_fun_fact_player_slot = 0xEE0; // Name: m_iRoundEndFunFactPlayerSlot Offset: 0xEE0
					constexpr auto i_round_end_fun_fact_data1 = 0xEE4; // Name: m_iRoundEndFunFactData1 Offset: 0xEE4
					constexpr auto i_round_end_fun_fact_data2 = 0xEE8; // Name: m_iRoundEndFunFactData2 Offset: 0xEE8
					constexpr auto i_round_end_fun_fact_data3 = 0xEEC; // Name: m_iRoundEndFunFactData3 Offset: 0xEEC
					constexpr auto s_round_end_message = 0xEF0; // Name: m_sRoundEndMessage Offset: 0xEF0
					constexpr auto i_round_end_player_count = 0xEF8; // Name: m_iRoundEndPlayerCount Offset: 0xEF8
					constexpr auto b_round_end_no_music = 0xEFC; // Name: m_bRoundEndNoMusic Offset: 0xEFC
					constexpr auto i_round_end_legacy = 0xF00; // Name: m_iRoundEndLegacy Offset: 0xF00
					constexpr auto n_round_end_count = 0xF04; // Name: m_nRoundEndCount Offset: 0xF04
					constexpr auto i_round_start_round_number = 0xF08; // Name: m_iRoundStartRoundNumber Offset: 0xF08
					constexpr auto n_round_start_count = 0xF0C; // Name: m_nRoundStartCount Offset: 0xF0C
					constexpr auto fl_last_perf_sample_time = 0x4F18; // Name: m_flLastPerfSampleTime Offset: 0x4F18
				} // namespace C_CSGameRules

				namespace C_BaseCSGrenade {
					constexpr auto b_client_predict_delete = 0x1B20; // Name: m_bClientPredictDelete Offset: 0x1B20
					constexpr auto b_redraw = 0x1B21; // Name: m_bRedraw Offset: 0x1B21
					constexpr auto b_is_held_by_player = 0x1B22; // Name: m_bIsHeldByPlayer Offset: 0x1B22
					constexpr auto b_pin_pulled = 0x1B23; // Name: m_bPinPulled Offset: 0x1B23
					constexpr auto b_jump_throw = 0x1B24; // Name: m_bJumpThrow Offset: 0x1B24
					constexpr auto b_throw_animating = 0x1B25; // Name: m_bThrowAnimating Offset: 0x1B25
					constexpr auto f_throw_time = 0x1B28; // Name: m_fThrowTime Offset: 0x1B28
					constexpr auto fl_throw_strength = 0x1B2C; // Name: m_flThrowStrength Offset: 0x1B2C
					constexpr auto fl_throw_strength_approach = 0x1B30; // Name: m_flThrowStrengthApproach Offset: 0x1B30
					constexpr auto f_drop_time = 0x1B34; // Name: m_fDropTime Offset: 0x1B34
					constexpr auto f_pin_pull_time = 0x1B38; // Name: m_fPinPullTime Offset: 0x1B38
					constexpr auto b_just_pulled_pin = 0x1B3C; // Name: m_bJustPulledPin Offset: 0x1B3C
					constexpr auto n_next_hold_tick = 0x1B40; // Name: m_nNextHoldTick Offset: 0x1B40
					constexpr auto fl_next_hold_frac = 0x1B44; // Name: m_flNextHoldFrac Offset: 0x1B44
					constexpr auto h_switch_to_weapon_after_throw = 0x1B48; // Name: m_hSwitchToWeaponAfterThrow Offset: 0x1B48
				} // namespace C_BaseCSGrenade

				namespace C_Fish {
					constexpr auto pos = 0xF88; // Name: m_pos Offset: 0xF88
					constexpr auto vel = 0xF94; // Name: m_vel Offset: 0xF94
					constexpr auto angles = 0xFA0; // Name: m_angles Offset: 0xFA0
					constexpr auto local_life_state = 0xFAC; // Name: m_localLifeState Offset: 0xFAC
					constexpr auto death_depth = 0xFB0; // Name: m_deathDepth Offset: 0xFB0
					constexpr auto death_angle = 0xFB4; // Name: m_deathAngle Offset: 0xFB4
					constexpr auto buoyancy = 0xFB8; // Name: m_buoyancy Offset: 0xFB8
					constexpr auto wiggle_timer = 0xFC0; // Name: m_wiggleTimer Offset: 0xFC0
					constexpr auto wiggle_phase = 0xFD8; // Name: m_wigglePhase Offset: 0xFD8
					constexpr auto wiggle_rate = 0xFDC; // Name: m_wiggleRate Offset: 0xFDC
					constexpr auto actual_pos = 0xFE0; // Name: m_actualPos Offset: 0xFE0
					constexpr auto actual_angles = 0xFEC; // Name: m_actualAngles Offset: 0xFEC
					constexpr auto pool_origin = 0xFF8; // Name: m_poolOrigin Offset: 0xFF8
					constexpr auto water_level = 0x1004; // Name: m_waterLevel Offset: 0x1004
					constexpr auto got_update = 0x1008; // Name: m_gotUpdate Offset: 0x1008
					constexpr auto x = 0x100C; // Name: m_x Offset: 0x100C
					constexpr auto y = 0x1010; // Name: m_y Offset: 0x1010
					constexpr auto z = 0x1014; // Name: m_z Offset: 0x1014
					constexpr auto angle = 0x1018; // Name: m_angle Offset: 0x1018
					constexpr auto error_history = 0x101C; // Name: m_errorHistory Offset: 0x101C
					constexpr auto error_history_index = 0x106C; // Name: m_errorHistoryIndex Offset: 0x106C
					constexpr auto error_history_count = 0x1070; // Name: m_errorHistoryCount Offset: 0x1070
					constexpr auto average_error = 0x1074; // Name: m_averageError Offset: 0x1074
				} // namespace C_Fish

				namespace C_GameRulesProxy {
				} // namespace C_GameRulesProxy

				namespace C_EnvProjectedTexture {
				} // namespace C_EnvProjectedTexture

				namespace CBodyComponentSkeletonInstance {
					constexpr auto skeleton_instance = 0x50; // Name: m_skeletonInstance Offset: 0x50
				} // namespace CBodyComponentSkeletonInstance

				namespace C_WeaponCZ75a {
				} // namespace C_WeaponCZ75a

				namespace C_EnvCombinedLightProbeVolume {
					constexpr auto entity__color = 0x15C8; // Name: m_Entity_Color Offset: 0x15C8
					constexpr auto entity_fl_brightness = 0x15CC; // Name: m_Entity_flBrightness Offset: 0x15CC
					constexpr auto entity_h_cubemap_texture = 0x15D0; // Name: m_Entity_hCubemapTexture Offset: 0x15D0
					constexpr auto entity_b_custom_cubemap_texture = 0x15D8; // Name: m_Entity_bCustomCubemapTexture Offset: 0x15D8
					constexpr auto entity_h_light_probe_texture = 0x15E0; // Name: m_Entity_hLightProbeTexture Offset: 0x15E0
					constexpr auto entity_h_light_probe_direct_light_indices_texture = 0x15E8; // Name: m_Entity_hLightProbeDirectLightIndicesTexture Offset: 0x15E8
					constexpr auto entity_h_light_probe_direct_light_scalars_texture = 0x15F0; // Name: m_Entity_hLightProbeDirectLightScalarsTexture Offset: 0x15F0
					constexpr auto entity_h_light_probe_direct_light_shadows_texture = 0x15F8; // Name: m_Entity_hLightProbeDirectLightShadowsTexture Offset: 0x15F8
					constexpr auto entity_v_box_mins = 0x1600; // Name: m_Entity_vBoxMins Offset: 0x1600
					constexpr auto entity_v_box_maxs = 0x160C; // Name: m_Entity_vBoxMaxs Offset: 0x160C
					constexpr auto entity_b_moveable = 0x1618; // Name: m_Entity_bMoveable Offset: 0x1618
					constexpr auto entity_n_handshake = 0x161C; // Name: m_Entity_nHandshake Offset: 0x161C
					constexpr auto entity_n_env_cube_map_array_index = 0x1620; // Name: m_Entity_nEnvCubeMapArrayIndex Offset: 0x1620
					constexpr auto entity_n_priority = 0x1624; // Name: m_Entity_nPriority Offset: 0x1624
					constexpr auto entity_b_start_disabled = 0x1628; // Name: m_Entity_bStartDisabled Offset: 0x1628
					constexpr auto entity_fl_edge_fade_dist = 0x162C; // Name: m_Entity_flEdgeFadeDist Offset: 0x162C
					constexpr auto entity_v_edge_fade_dists = 0x1630; // Name: m_Entity_vEdgeFadeDists Offset: 0x1630
					constexpr auto entity_n_light_probe_size_x = 0x163C; // Name: m_Entity_nLightProbeSizeX Offset: 0x163C
					constexpr auto entity_n_light_probe_size_y = 0x1640; // Name: m_Entity_nLightProbeSizeY Offset: 0x1640
					constexpr auto entity_n_light_probe_size_z = 0x1644; // Name: m_Entity_nLightProbeSizeZ Offset: 0x1644
					constexpr auto entity_n_light_probe_atlas_x = 0x1648; // Name: m_Entity_nLightProbeAtlasX Offset: 0x1648
					constexpr auto entity_n_light_probe_atlas_y = 0x164C; // Name: m_Entity_nLightProbeAtlasY Offset: 0x164C
					constexpr auto entity_n_light_probe_atlas_z = 0x1650; // Name: m_Entity_nLightProbeAtlasZ Offset: 0x1650
					constexpr auto entity_b_enabled = 0x1669; // Name: m_Entity_bEnabled Offset: 0x1669
				} // namespace C_EnvCombinedLightProbeVolume

				namespace CBasePlayerController {
					constexpr auto n_final_predicted_tick = 0x570; // Name: m_nFinalPredictedTick Offset: 0x570
					constexpr auto command_context = 0x578; // Name: m_CommandContext Offset: 0x578
					constexpr auto n_in_buttons_which_are_toggles = 0x620; // Name: m_nInButtonsWhichAreToggles Offset: 0x620
					constexpr auto n_tick_base = 0x628; // Name: m_nTickBase Offset: 0x628
					constexpr auto h_pawn = 0x62C; // Name: m_hPawn Offset: 0x62C
					constexpr auto b_known_team_mismatch = 0x630; // Name: m_bKnownTeamMismatch Offset: 0x630
					constexpr auto h_predicted_pawn = 0x634; // Name: m_hPredictedPawn Offset: 0x634
					constexpr auto n_split_screen_slot = 0x638; // Name: m_nSplitScreenSlot Offset: 0x638
					constexpr auto h_split_owner = 0x63C; // Name: m_hSplitOwner Offset: 0x63C
					constexpr auto h_split_screen_players = 0x640; // Name: m_hSplitScreenPlayers Offset: 0x640
					constexpr auto b_is_hltv = 0x658; // Name: m_bIsHLTV Offset: 0x658
					constexpr auto i_connected = 0x65C; // Name: m_iConnected Offset: 0x65C
					constexpr auto isz_player_name = 0x660; // Name: m_iszPlayerName Offset: 0x660
					constexpr auto steam_id = 0x6E8; // Name: m_steamID Offset: 0x6E8
					constexpr auto b_is_local_player_controller = 0x6F0; // Name: m_bIsLocalPlayerController Offset: 0x6F0
					constexpr auto i_desired_fov = 0x6F4; // Name: m_iDesiredFOV Offset: 0x6F4
				} // namespace CBasePlayerController

				namespace C_BaseModelEntity {
					constexpr auto crender_component = 0xA50; // Name: m_CRenderComponent Offset: 0xA50
					constexpr auto chitbox_component = 0xA58; // Name: m_CHitboxComponent Offset: 0xA58
					constexpr auto last_hit_group = 0xA80; // Name: m_LastHitGroup Offset: 0xA80
					constexpr auto b_init_model_effects = 0xAA8; // Name: m_bInitModelEffects Offset: 0xAA8
					constexpr auto b_is_static_prop = 0xAA9; // Name: m_bIsStaticProp Offset: 0xAA9
					constexpr auto n_last_add_decal = 0xAAC; // Name: m_nLastAddDecal Offset: 0xAAC
					constexpr auto n_decals_added = 0xAB0; // Name: m_nDecalsAdded Offset: 0xAB0
					constexpr auto i_old_health = 0xAB4; // Name: m_iOldHealth Offset: 0xAB4
					constexpr auto n_render_mode = 0xAB8; // Name: m_nRenderMode Offset: 0xAB8
					constexpr auto n_render_fx = 0xAB9; // Name: m_nRenderFX Offset: 0xAB9
					constexpr auto b_allow_fade_in_view = 0xABA; // Name: m_bAllowFadeInView Offset: 0xABA
					constexpr auto clr_render = 0xAD8; // Name: m_clrRender Offset: 0xAD8
					constexpr auto vec_render_attributes = 0xAE0; // Name: m_vecRenderAttributes Offset: 0xAE0
					constexpr auto b_render_to_cubemaps = 0xB48; // Name: m_bRenderToCubemaps Offset: 0xB48
					constexpr auto b_no_interpolate = 0xB49; // Name: m_bNoInterpolate Offset: 0xB49
					constexpr auto collision = 0xB50; // Name: m_Collision Offset: 0xB50
					constexpr auto glow = 0xC00; // Name: m_Glow Offset: 0xC00
					constexpr auto fl_glow_backface_mult = 0xC58; // Name: m_flGlowBackfaceMult Offset: 0xC58
					constexpr auto fade_min_dist = 0xC5C; // Name: m_fadeMinDist Offset: 0xC5C
					constexpr auto fade_max_dist = 0xC60; // Name: m_fadeMaxDist Offset: 0xC60
					constexpr auto fl_fade_scale = 0xC64; // Name: m_flFadeScale Offset: 0xC64
					constexpr auto fl_shadow_strength = 0xC68; // Name: m_flShadowStrength Offset: 0xC68
					constexpr auto n_object_culling = 0xC6C; // Name: m_nObjectCulling Offset: 0xC6C
					constexpr auto n_add_decal = 0xC70; // Name: m_nAddDecal Offset: 0xC70
					constexpr auto v_decal_position = 0xC74; // Name: m_vDecalPosition Offset: 0xC74
					constexpr auto v_decal_forward_axis = 0xC80; // Name: m_vDecalForwardAxis Offset: 0xC80
					constexpr auto fl_decal_heal_blood_rate = 0xC8C; // Name: m_flDecalHealBloodRate Offset: 0xC8C
					constexpr auto fl_decal_heal_height_rate = 0xC90; // Name: m_flDecalHealHeightRate Offset: 0xC90
					constexpr auto config_entities_to_propagate_material_decals_to = 0xC98; // Name: m_ConfigEntitiesToPropagateMaterialDecalsTo Offset: 0xC98
					constexpr auto vec_view_offset = 0xCB0; // Name: m_vecViewOffset Offset: 0xCB0
					constexpr auto p_client_alpha_property = 0xCE0; // Name: m_pClientAlphaProperty Offset: 0xCE0
					constexpr auto client_override_tint = 0xCE8; // Name: m_ClientOverrideTint Offset: 0xCE8
					constexpr auto b_use_client_override_tint = 0xCEC; // Name: m_bUseClientOverrideTint Offset: 0xCEC
				} // namespace C_BaseModelEntity

				namespace CCSGO_WingmanIntroCounterTerroristPosition {
				} // namespace CCSGO_WingmanIntroCounterTerroristPosition

				namespace C_SoundEventEntityAlias_snd_event_point {
				} // namespace C_SoundEventEntityAlias_snd_event_point

				namespace C_FootstepControl {
					constexpr auto source = 0xD30; // Name: m_source Offset: 0xD30
					constexpr auto destination = 0xD38; // Name: m_destination Offset: 0xD38
				} // namespace C_FootstepControl

				namespace CTripWireFireProjectile {
				} // namespace CTripWireFireProjectile

				namespace C_LightSpotEntity {
				} // namespace C_LightSpotEntity

				namespace C_EnvDetailController {
					constexpr auto fl_fade_start_dist = 0x568; // Name: m_flFadeStartDist Offset: 0x568
					constexpr auto fl_fade_end_dist = 0x56C; // Name: m_flFadeEndDist Offset: 0x56C
				} // namespace C_EnvDetailController

				namespace EventProfileStorageAvailable_t {
					constexpr auto n_split_screen_slot = 0x0; // Name: m_nSplitScreenSlot Offset: 0x0
				} // namespace EventProfileStorageAvailable_t

				namespace C_SpotlightEnd {
					constexpr auto fl_light_scale = 0xD28; // Name: m_flLightScale Offset: 0xD28
					constexpr auto radius = 0xD2C; // Name: m_Radius Offset: 0xD2C
				} // namespace C_SpotlightEnd

				namespace C_EnvDecal {
					constexpr auto h_decal_material = 0xD28; // Name: m_hDecalMaterial Offset: 0xD28
					constexpr auto fl_width = 0xD30; // Name: m_flWidth Offset: 0xD30
					constexpr auto fl_height = 0xD34; // Name: m_flHeight Offset: 0xD34
					constexpr auto fl_depth = 0xD38; // Name: m_flDepth Offset: 0xD38
					constexpr auto n_render_order = 0xD3C; // Name: m_nRenderOrder Offset: 0xD3C
					constexpr auto b_project_on_world = 0xD40; // Name: m_bProjectOnWorld Offset: 0xD40
					constexpr auto b_project_on_characters = 0xD41; // Name: m_bProjectOnCharacters Offset: 0xD41
					constexpr auto b_project_on_water = 0xD42; // Name: m_bProjectOnWater Offset: 0xD42
					constexpr auto fl_depth_sort_bias = 0xD44; // Name: m_flDepthSortBias Offset: 0xD44
				} // namespace C_EnvDecal

				namespace CEconItemAttribute {
					constexpr auto i_attribute_definition_index = 0x30; // Name: m_iAttributeDefinitionIndex Offset: 0x30
					constexpr auto fl_value = 0x34; // Name: m_flValue Offset: 0x34
					constexpr auto fl_initial_value = 0x38; // Name: m_flInitialValue Offset: 0x38
					constexpr auto n_refundable_currency = 0x3C; // Name: m_nRefundableCurrency Offset: 0x3C
					constexpr auto b_set_bonus = 0x40; // Name: m_bSetBonus Offset: 0x40
				} // namespace CEconItemAttribute

				namespace C_PointCamera {
					constexpr auto fov = 0x568; // Name: m_FOV Offset: 0x568
					constexpr auto resolution = 0x56C; // Name: m_Resolution Offset: 0x56C
					constexpr auto b_fog_enable = 0x570; // Name: m_bFogEnable Offset: 0x570
					constexpr auto fog_color = 0x571; // Name: m_FogColor Offset: 0x571
					constexpr auto fl_fog_start = 0x578; // Name: m_flFogStart Offset: 0x578
					constexpr auto fl_fog_end = 0x57C; // Name: m_flFogEnd Offset: 0x57C
					constexpr auto fl_fog_max_density = 0x580; // Name: m_flFogMaxDensity Offset: 0x580
					constexpr auto b_active = 0x584; // Name: m_bActive Offset: 0x584
					constexpr auto b_use_screen_aspect_ratio = 0x585; // Name: m_bUseScreenAspectRatio Offset: 0x585
					constexpr auto fl_aspect_ratio = 0x588; // Name: m_flAspectRatio Offset: 0x588
					constexpr auto b_no_sky = 0x58C; // Name: m_bNoSky Offset: 0x58C
					constexpr auto f_brightness = 0x590; // Name: m_fBrightness Offset: 0x590
					constexpr auto fl_zfar = 0x594; // Name: m_flZFar Offset: 0x594
					constexpr auto fl_znear = 0x598; // Name: m_flZNear Offset: 0x598
					constexpr auto b_can_hltvuse = 0x59C; // Name: m_bCanHLTVUse Offset: 0x59C
					constexpr auto b_align_with_parent = 0x59D; // Name: m_bAlignWithParent Offset: 0x59D
					constexpr auto b_dof_enabled = 0x59E; // Name: m_bDofEnabled Offset: 0x59E
					constexpr auto fl_dof_near_blurry = 0x5A0; // Name: m_flDofNearBlurry Offset: 0x5A0
					constexpr auto fl_dof_near_crisp = 0x5A4; // Name: m_flDofNearCrisp Offset: 0x5A4
					constexpr auto fl_dof_far_crisp = 0x5A8; // Name: m_flDofFarCrisp Offset: 0x5A8
					constexpr auto fl_dof_far_blurry = 0x5AC; // Name: m_flDofFarBlurry Offset: 0x5AC
					constexpr auto fl_dof_tilt_to_ground = 0x5B0; // Name: m_flDofTiltToGround Offset: 0x5B0
					constexpr auto target_fov = 0x5B4; // Name: m_TargetFOV Offset: 0x5B4
					constexpr auto degrees_per_second = 0x5B8; // Name: m_DegreesPerSecond Offset: 0x5B8
					constexpr auto b_is_on = 0x5BC; // Name: m_bIsOn Offset: 0x5BC
					constexpr auto p_next = 0x5C0; // Name: m_pNext Offset: 0x5C0
				} // namespace C_PointCamera

				namespace C_LightDirectionalEntity {
				} // namespace C_LightDirectionalEntity

				namespace CCSPointScriptExtensions_weapon_cs_base {
				} // namespace CCSPointScriptExtensions_weapon_cs_base

				namespace C_BarnLight {
					constexpr auto b_enabled = 0xD28; // Name: m_bEnabled Offset: 0xD28
					constexpr auto n_color_mode = 0xD2C; // Name: m_nColorMode Offset: 0xD2C
					constexpr auto color = 0xD30; // Name: m_Color Offset: 0xD30
					constexpr auto fl_color_temperature = 0xD34; // Name: m_flColorTemperature Offset: 0xD34
					constexpr auto fl_brightness = 0xD38; // Name: m_flBrightness Offset: 0xD38
					constexpr auto fl_brightness_scale = 0xD3C; // Name: m_flBrightnessScale Offset: 0xD3C
					constexpr auto n_direct_light = 0xD40; // Name: m_nDirectLight Offset: 0xD40
					constexpr auto n_baked_shadow_index = 0xD44; // Name: m_nBakedShadowIndex Offset: 0xD44
					constexpr auto n_luminaire_shape = 0xD48; // Name: m_nLuminaireShape Offset: 0xD48
					constexpr auto fl_luminaire_size = 0xD4C; // Name: m_flLuminaireSize Offset: 0xD4C
					constexpr auto fl_luminaire_anisotropy = 0xD50; // Name: m_flLuminaireAnisotropy Offset: 0xD50
					constexpr auto light_style_string = 0xD58; // Name: m_LightStyleString Offset: 0xD58
					constexpr auto fl_light_style_start_time = 0xD60; // Name: m_flLightStyleStartTime Offset: 0xD60
					constexpr auto queued_light_style_strings = 0xD68; // Name: m_QueuedLightStyleStrings Offset: 0xD68
					constexpr auto light_style_events = 0xD80; // Name: m_LightStyleEvents Offset: 0xD80
					constexpr auto light_style_targets = 0xD98; // Name: m_LightStyleTargets Offset: 0xD98
					constexpr auto style_event = 0xDB0; // Name: m_StyleEvent Offset: 0xDB0
					constexpr auto h_light_cookie = 0xE50; // Name: m_hLightCookie Offset: 0xE50
					constexpr auto fl_shape = 0xE58; // Name: m_flShape Offset: 0xE58
					constexpr auto fl_soft_x = 0xE5C; // Name: m_flSoftX Offset: 0xE5C
					constexpr auto fl_soft_y = 0xE60; // Name: m_flSoftY Offset: 0xE60
					constexpr auto fl_skirt = 0xE64; // Name: m_flSkirt Offset: 0xE64
					constexpr auto fl_skirt_near = 0xE68; // Name: m_flSkirtNear Offset: 0xE68
					constexpr auto v_size_params = 0xE6C; // Name: m_vSizeParams Offset: 0xE6C
					constexpr auto fl_range = 0xE78; // Name: m_flRange Offset: 0xE78
					constexpr auto v_shear = 0xE7C; // Name: m_vShear Offset: 0xE7C
					constexpr auto n_bake_specular_to_cubemaps = 0xE88; // Name: m_nBakeSpecularToCubemaps Offset: 0xE88
					constexpr auto v_bake_specular_to_cubemaps_size = 0xE8C; // Name: m_vBakeSpecularToCubemapsSize Offset: 0xE8C
					constexpr auto n_cast_shadows = 0xE98; // Name: m_nCastShadows Offset: 0xE98
					constexpr auto n_shadow_map_size = 0xE9C; // Name: m_nShadowMapSize Offset: 0xE9C
					constexpr auto n_shadow_priority = 0xEA0; // Name: m_nShadowPriority Offset: 0xEA0
					constexpr auto b_contact_shadow = 0xEA4; // Name: m_bContactShadow Offset: 0xEA4
					constexpr auto n_bounce_light = 0xEA8; // Name: m_nBounceLight Offset: 0xEA8
					constexpr auto fl_bounce_scale = 0xEAC; // Name: m_flBounceScale Offset: 0xEAC
					constexpr auto fl_min_roughness = 0xEB0; // Name: m_flMinRoughness Offset: 0xEB0
					constexpr auto v_alternate_color = 0xEB4; // Name: m_vAlternateColor Offset: 0xEB4
					constexpr auto f_alternate_color_brightness = 0xEC0; // Name: m_fAlternateColorBrightness Offset: 0xEC0
					constexpr auto n_fog = 0xEC4; // Name: m_nFog Offset: 0xEC4
					constexpr auto fl_fog_strength = 0xEC8; // Name: m_flFogStrength Offset: 0xEC8
					constexpr auto n_fog_shadows = 0xECC; // Name: m_nFogShadows Offset: 0xECC
					constexpr auto fl_fog_scale = 0xED0; // Name: m_flFogScale Offset: 0xED0
					constexpr auto b_fog_mixed_shadows = 0xED4; // Name: m_bFogMixedShadows Offset: 0xED4
					constexpr auto fl_fade_size_start = 0xED8; // Name: m_flFadeSizeStart Offset: 0xED8
					constexpr auto fl_fade_size_end = 0xEDC; // Name: m_flFadeSizeEnd Offset: 0xEDC
					constexpr auto fl_shadow_fade_size_start = 0xEE0; // Name: m_flShadowFadeSizeStart Offset: 0xEE0
					constexpr auto fl_shadow_fade_size_end = 0xEE4; // Name: m_flShadowFadeSizeEnd Offset: 0xEE4
					constexpr auto b_precomputed_fields_valid = 0xEE8; // Name: m_bPrecomputedFieldsValid Offset: 0xEE8
					constexpr auto v_precomputed_bounds_mins = 0xEEC; // Name: m_vPrecomputedBoundsMins Offset: 0xEEC
					constexpr auto v_precomputed_bounds_maxs = 0xEF8; // Name: m_vPrecomputedBoundsMaxs Offset: 0xEF8
					constexpr auto v_precomputed_obborigin = 0xF04; // Name: m_vPrecomputedOBBOrigin Offset: 0xF04
					constexpr auto v_precomputed_obbangles = 0xF10; // Name: m_vPrecomputedOBBAngles Offset: 0xF10
					constexpr auto v_precomputed_obbextent = 0xF1C; // Name: m_vPrecomputedOBBExtent Offset: 0xF1C
					constexpr auto n_precomputed_sub_frusta = 0xF28; // Name: m_nPrecomputedSubFrusta Offset: 0xF28
					constexpr auto v_precomputed_obborigin0 = 0xF2C; // Name: m_vPrecomputedOBBOrigin0 Offset: 0xF2C
					constexpr auto v_precomputed_obbangles0 = 0xF38; // Name: m_vPrecomputedOBBAngles0 Offset: 0xF38
					constexpr auto v_precomputed_obbextent0 = 0xF44; // Name: m_vPrecomputedOBBExtent0 Offset: 0xF44
					constexpr auto v_precomputed_obborigin1 = 0xF50; // Name: m_vPrecomputedOBBOrigin1 Offset: 0xF50
					constexpr auto v_precomputed_obbangles1 = 0xF5C; // Name: m_vPrecomputedOBBAngles1 Offset: 0xF5C
					constexpr auto v_precomputed_obbextent1 = 0xF68; // Name: m_vPrecomputedOBBExtent1 Offset: 0xF68
					constexpr auto v_precomputed_obborigin2 = 0xF74; // Name: m_vPrecomputedOBBOrigin2 Offset: 0xF74
					constexpr auto v_precomputed_obbangles2 = 0xF80; // Name: m_vPrecomputedOBBAngles2 Offset: 0xF80
					constexpr auto v_precomputed_obbextent2 = 0xF8C; // Name: m_vPrecomputedOBBExtent2 Offset: 0xF8C
					constexpr auto v_precomputed_obborigin3 = 0xF98; // Name: m_vPrecomputedOBBOrigin3 Offset: 0xF98
					constexpr auto v_precomputed_obbangles3 = 0xFA4; // Name: m_vPrecomputedOBBAngles3 Offset: 0xFA4
					constexpr auto v_precomputed_obbextent3 = 0xFB0; // Name: m_vPrecomputedOBBExtent3 Offset: 0xFB0
					constexpr auto v_precomputed_obborigin4 = 0xFBC; // Name: m_vPrecomputedOBBOrigin4 Offset: 0xFBC
					constexpr auto v_precomputed_obbangles4 = 0xFC8; // Name: m_vPrecomputedOBBAngles4 Offset: 0xFC8
					constexpr auto v_precomputed_obbextent4 = 0xFD4; // Name: m_vPrecomputedOBBExtent4 Offset: 0xFD4
					constexpr auto v_precomputed_obborigin5 = 0xFE0; // Name: m_vPrecomputedOBBOrigin5 Offset: 0xFE0
					constexpr auto v_precomputed_obbangles5 = 0xFEC; // Name: m_vPrecomputedOBBAngles5 Offset: 0xFEC
					constexpr auto v_precomputed_obbextent5 = 0xFF8; // Name: m_vPrecomputedOBBExtent5 Offset: 0xFF8
					constexpr auto b_initial_bone_setup = 0x1048; // Name: m_bInitialBoneSetup Offset: 0x1048
					constexpr auto vis_clusters = 0x1050; // Name: m_VisClusters Offset: 0x1050
				} // namespace C_BarnLight

				namespace CPlayer_ViewModelServices {
				} // namespace CPlayer_ViewModelServices

				namespace C_EnvWind {
					constexpr auto env_wind_shared = 0x568; // Name: m_EnvWindShared Offset: 0x568
				} // namespace C_EnvWind

				namespace C_TriggerPhysics {
					constexpr auto gravity_scale = 0xD30; // Name: m_gravityScale Offset: 0xD30
					constexpr auto linear_limit = 0xD34; // Name: m_linearLimit Offset: 0xD34
					constexpr auto linear_damping = 0xD38; // Name: m_linearDamping Offset: 0xD38
					constexpr auto angular_limit = 0xD3C; // Name: m_angularLimit Offset: 0xD3C
					constexpr auto angular_damping = 0xD40; // Name: m_angularDamping Offset: 0xD40
					constexpr auto linear_force = 0xD44; // Name: m_linearForce Offset: 0xD44
					constexpr auto fl_frequency = 0xD48; // Name: m_flFrequency Offset: 0xD48
					constexpr auto fl_damping_ratio = 0xD4C; // Name: m_flDampingRatio Offset: 0xD4C
					constexpr auto vec_linear_force_point_at = 0xD50; // Name: m_vecLinearForcePointAt Offset: 0xD50
					constexpr auto b_collapse_to_force_point = 0xD5C; // Name: m_bCollapseToForcePoint Offset: 0xD5C
					constexpr auto vec_linear_force_point_at_world = 0xD60; // Name: m_vecLinearForcePointAtWorld Offset: 0xD60
					constexpr auto vec_linear_force_direction = 0xD6C; // Name: m_vecLinearForceDirection Offset: 0xD6C
					constexpr auto b_convert_to_debris_when_possible = 0xD78; // Name: m_bConvertToDebrisWhenPossible Offset: 0xD78
				} // namespace C_TriggerPhysics

				namespace C_BaseCombatCharacter {
					constexpr auto h_my_wearables = 0x1120; // Name: m_hMyWearables Offset: 0x1120
					constexpr auto left_foot_attachment = 0x1138; // Name: m_leftFootAttachment Offset: 0x1138
					constexpr auto right_foot_attachment = 0x1139; // Name: m_rightFootAttachment Offset: 0x1139
					constexpr auto n_water_wake_mode = 0x113C; // Name: m_nWaterWakeMode Offset: 0x113C
					constexpr auto fl_water_world_z = 0x1140; // Name: m_flWaterWorldZ Offset: 0x1140
					constexpr auto fl_water_next_trace_time = 0x1144; // Name: m_flWaterNextTraceTime Offset: 0x1144
				} // namespace C_BaseCombatCharacter

				namespace C_FlashbangProjectile {
				} // namespace C_FlashbangProjectile

				namespace CScriptUniformRandomStream {
					constexpr auto h_script_scope = 0x8; // Name: m_hScriptScope Offset: 0x8
					constexpr auto n_initial_seed = 0x9C; // Name: m_nInitialSeed Offset: 0x9C
				} // namespace CScriptUniformRandomStream

				namespace C_SoundEventSphereEntity {
					constexpr auto fl_radius = 0x628; // Name: m_flRadius Offset: 0x628
				} // namespace C_SoundEventSphereEntity

				namespace C_BaseEntity {
					constexpr auto cbody_component = 0x38; // Name: m_CBodyComponent Offset: 0x38
					constexpr auto network_transmit_component = 0x40; // Name: m_NetworkTransmitComponent Offset: 0x40
					constexpr auto n_last_think_tick = 0x320; // Name: m_nLastThinkTick Offset: 0x320
					constexpr auto p_game_scene_node = 0x328; // Name: m_pGameSceneNode Offset: 0x328
					constexpr auto p_render_component = 0x330; // Name: m_pRenderComponent Offset: 0x330
					constexpr auto p_collision = 0x338; // Name: m_pCollision Offset: 0x338
					constexpr auto i_max_health = 0x340; // Name: m_iMaxHealth Offset: 0x340
					constexpr auto i_health = 0x344; // Name: m_iHealth Offset: 0x344
					constexpr auto life_state = 0x348; // Name: m_lifeState Offset: 0x348
					constexpr auto b_takes_damage = 0x349; // Name: m_bTakesDamage Offset: 0x349
					constexpr auto n_take_damage_flags = 0x350; // Name: m_nTakeDamageFlags Offset: 0x350
					constexpr auto n_platform_type = 0x358; // Name: m_nPlatformType Offset: 0x358
					constexpr auto ub_interpolation_frame = 0x359; // Name: m_ubInterpolationFrame Offset: 0x359
					constexpr auto h_scene_object_controller = 0x35C; // Name: m_hSceneObjectController Offset: 0x35C
					constexpr auto n_no_interpolation_tick = 0x360; // Name: m_nNoInterpolationTick Offset: 0x360
					constexpr auto n_visibility_no_interpolation_tick = 0x364; // Name: m_nVisibilityNoInterpolationTick Offset: 0x364
					constexpr auto fl_proxy_random_value = 0x368; // Name: m_flProxyRandomValue Offset: 0x368
					constexpr auto i_eflags = 0x36C; // Name: m_iEFlags Offset: 0x36C
					constexpr auto n_water_type = 0x370; // Name: m_nWaterType Offset: 0x370
					constexpr auto b_interpolate_even_with_no_model = 0x371; // Name: m_bInterpolateEvenWithNoModel Offset: 0x371
					constexpr auto b_prediction_eligible = 0x372; // Name: m_bPredictionEligible Offset: 0x372
					constexpr auto b_apply_layer_match_idto_model = 0x373; // Name: m_bApplyLayerMatchIDToModel Offset: 0x373
					constexpr auto tok_layer_match_id = 0x374; // Name: m_tokLayerMatchID Offset: 0x374
					constexpr auto n_subclass_id = 0x378; // Name: m_nSubclassID Offset: 0x378
					constexpr auto n_simulation_tick = 0x388; // Name: m_nSimulationTick Offset: 0x388
					constexpr auto i_current_think_context = 0x38C; // Name: m_iCurrentThinkContext Offset: 0x38C
					constexpr auto a_think_functions = 0x390; // Name: m_aThinkFunctions Offset: 0x390
					constexpr auto b_disabled_context_thinks = 0x3A8; // Name: m_bDisabledContextThinks Offset: 0x3A8
					constexpr auto fl_anim_time = 0x3AC; // Name: m_flAnimTime Offset: 0x3AC
					constexpr auto fl_simulation_time = 0x3B0; // Name: m_flSimulationTime Offset: 0x3B0
					constexpr auto n_scene_object_override_flags = 0x3B4; // Name: m_nSceneObjectOverrideFlags Offset: 0x3B4
					constexpr auto b_has_successfully_interpolated = 0x3B5; // Name: m_bHasSuccessfullyInterpolated Offset: 0x3B5
					constexpr auto b_has_added_vars_to_interpolation = 0x3B6; // Name: m_bHasAddedVarsToInterpolation Offset: 0x3B6
					constexpr auto b_render_even_when_not_successfully_interpolated = 0x3B7; // Name: m_bRenderEvenWhenNotSuccessfullyInterpolated Offset: 0x3B7
					constexpr auto n_interpolation_latch_dirty_flags = 0x3B8; // Name: m_nInterpolationLatchDirtyFlags Offset: 0x3B8
					constexpr auto list_entry = 0x3C0; // Name: m_ListEntry Offset: 0x3C0
					constexpr auto fl_create_time = 0x3D8; // Name: m_flCreateTime Offset: 0x3D8
					constexpr auto fl_speed = 0x3DC; // Name: m_flSpeed Offset: 0x3DC
					constexpr auto ent_client_flags = 0x3E0; // Name: m_EntClientFlags Offset: 0x3E0
					constexpr auto b_client_side_ragdoll = 0x3E2; // Name: m_bClientSideRagdoll Offset: 0x3E2
					constexpr auto i_team_num = 0x3E3; // Name: m_iTeamNum Offset: 0x3E3
					constexpr auto spawnflags = 0x3E4; // Name: m_spawnflags Offset: 0x3E4
					constexpr auto n_next_think_tick = 0x3E8; // Name: m_nNextThinkTick Offset: 0x3E8
					constexpr auto f_flags = 0x3EC; // Name: m_fFlags Offset: 0x3EC
					constexpr auto vec_abs_velocity = 0x3F0; // Name: m_vecAbsVelocity Offset: 0x3F0
					constexpr auto vec_velocity = 0x400; // Name: m_vecVelocity Offset: 0x400
					constexpr auto vec_base_velocity = 0x430; // Name: m_vecBaseVelocity Offset: 0x430
					constexpr auto h_effect_entity = 0x43C; // Name: m_hEffectEntity Offset: 0x43C
					constexpr auto h_owner_entity = 0x440; // Name: m_hOwnerEntity Offset: 0x440
					constexpr auto move_collide = 0x444; // Name: m_MoveCollide Offset: 0x444
					constexpr auto move_type = 0x445; // Name: m_MoveType Offset: 0x445
					constexpr auto n_actual_move_type = 0x446; // Name: m_nActualMoveType Offset: 0x446
					constexpr auto fl_water_level = 0x448; // Name: m_flWaterLevel Offset: 0x448
					constexpr auto f_effects = 0x44C; // Name: m_fEffects Offset: 0x44C
					constexpr auto h_ground_entity = 0x450; // Name: m_hGroundEntity Offset: 0x450
					constexpr auto n_ground_body_index = 0x454; // Name: m_nGroundBodyIndex Offset: 0x454
					constexpr auto fl_friction = 0x458; // Name: m_flFriction Offset: 0x458
					constexpr auto fl_elasticity = 0x45C; // Name: m_flElasticity Offset: 0x45C
					constexpr auto fl_gravity_scale = 0x460; // Name: m_flGravityScale Offset: 0x460
					constexpr auto fl_time_scale = 0x464; // Name: m_flTimeScale Offset: 0x464
					constexpr auto b_animated_every_tick = 0x468; // Name: m_bAnimatedEveryTick Offset: 0x468
					constexpr auto fl_nav_ignore_until_time = 0x46C; // Name: m_flNavIgnoreUntilTime Offset: 0x46C
					constexpr auto h_think = 0x470; // Name: m_hThink Offset: 0x470
					constexpr auto f_bbox_vis_flags = 0x480; // Name: m_fBBoxVisFlags Offset: 0x480
					constexpr auto b_predictable = 0x481; // Name: m_bPredictable Offset: 0x481
					constexpr auto b_render_with_view_models = 0x482; // Name: m_bRenderWithViewModels Offset: 0x482
					constexpr auto n_split_user_player_prediction_slot = 0x484; // Name: m_nSplitUserPlayerPredictionSlot Offset: 0x484
					constexpr auto n_first_predictable_command = 0x488; // Name: m_nFirstPredictableCommand Offset: 0x488
					constexpr auto n_last_predictable_command = 0x48C; // Name: m_nLastPredictableCommand Offset: 0x48C
					constexpr auto h_old_move_parent = 0x490; // Name: m_hOldMoveParent Offset: 0x490
					constexpr auto particles = 0x498; // Name: m_Particles Offset: 0x498
					constexpr auto vec_predicted_script_floats = 0x4C0; // Name: m_vecPredictedScriptFloats Offset: 0x4C0
					constexpr auto vec_predicted_script_float_ids = 0x4D8; // Name: m_vecPredictedScriptFloatIDs Offset: 0x4D8
					constexpr auto n_next_script_var_record_id = 0x508; // Name: m_nNextScriptVarRecordID Offset: 0x508
					constexpr auto vec_ang_velocity = 0x518; // Name: m_vecAngVelocity Offset: 0x518
					constexpr auto data_change_event_ref = 0x524; // Name: m_DataChangeEventRef Offset: 0x524
					constexpr auto dependencies = 0x528; // Name: m_dependencies Offset: 0x528
					constexpr auto n_creation_tick = 0x540; // Name: m_nCreationTick Offset: 0x540
					constexpr auto b_anim_time_changed = 0x54D; // Name: m_bAnimTimeChanged Offset: 0x54D
					constexpr auto b_simulation_time_changed = 0x54E; // Name: m_bSimulationTimeChanged Offset: 0x54E
					constexpr auto s_unique_hammer_id = 0x558; // Name: m_sUniqueHammerID Offset: 0x558
					constexpr auto n_blood_type = 0x560; // Name: m_nBloodType Offset: 0x560
				} // namespace C_BaseEntity

				namespace C_MolotovGrenade {
				} // namespace C_MolotovGrenade

				namespace C_SoundAreaEntitySphere {
					constexpr auto fl_radius = 0x590; // Name: m_flRadius Offset: 0x590
				} // namespace C_SoundAreaEntitySphere

				namespace C_DynamicPropAlias_cable_dynamic {
				} // namespace C_DynamicPropAlias_cable_dynamic

				namespace C_SceneEntity {
					constexpr auto b_is_playing_back = 0x570; // Name: m_bIsPlayingBack Offset: 0x570
					constexpr auto b_paused = 0x571; // Name: m_bPaused Offset: 0x571
					constexpr auto b_multiplayer = 0x572; // Name: m_bMultiplayer Offset: 0x572
					constexpr auto b_autogenerated = 0x573; // Name: m_bAutogenerated Offset: 0x573
					constexpr auto fl_force_client_time = 0x574; // Name: m_flForceClientTime Offset: 0x574
					constexpr auto n_scene_string_index = 0x578; // Name: m_nSceneStringIndex Offset: 0x578
					constexpr auto b_client_only = 0x57A; // Name: m_bClientOnly Offset: 0x57A
					constexpr auto h_owner = 0x57C; // Name: m_hOwner Offset: 0x57C
					constexpr auto h_actor_list = 0x580; // Name: m_hActorList Offset: 0x580
					constexpr auto b_was_playing = 0x598; // Name: m_bWasPlaying Offset: 0x598
					constexpr auto queued_events = 0x5A8; // Name: m_QueuedEvents Offset: 0x5A8
					constexpr auto fl_current_time = 0x5C0; // Name: m_flCurrentTime Offset: 0x5C0
				} // namespace C_SceneEntity

				namespace CPlayer_CameraServices {
					constexpr auto vec_cs_view_punch_angle = 0x40; // Name: m_vecCsViewPunchAngle Offset: 0x40
					constexpr auto n_cs_view_punch_angle_tick = 0x4C; // Name: m_nCsViewPunchAngleTick Offset: 0x4C
					constexpr auto fl_cs_view_punch_angle_tick_ratio = 0x50; // Name: m_flCsViewPunchAngleTickRatio Offset: 0x50
					constexpr auto player_fog = 0x58; // Name: m_PlayerFog Offset: 0x58
					constexpr auto h_color_correction_ctrl = 0x98; // Name: m_hColorCorrectionCtrl Offset: 0x98
					constexpr auto h_view_entity = 0x9C; // Name: m_hViewEntity Offset: 0x9C
					constexpr auto h_tonemap_controller = 0xA0; // Name: m_hTonemapController Offset: 0xA0
					constexpr auto audio = 0xA8; // Name: m_audio Offset: 0xA8
					constexpr auto post_processing_volumes = 0x120; // Name: m_PostProcessingVolumes Offset: 0x120
					constexpr auto fl_old_player_z = 0x138; // Name: m_flOldPlayerZ Offset: 0x138
					constexpr auto fl_old_player_view_offset_z = 0x13C; // Name: m_flOldPlayerViewOffsetZ Offset: 0x13C
					constexpr auto current_fog = 0x140; // Name: m_CurrentFog Offset: 0x140
					constexpr auto h_old_fog_controller = 0x1A8; // Name: m_hOldFogController Offset: 0x1A8
					constexpr auto b_override_fog_color = 0x1AC; // Name: m_bOverrideFogColor Offset: 0x1AC
					constexpr auto override_fog_color = 0x1B1; // Name: m_OverrideFogColor Offset: 0x1B1
					constexpr auto b_override_fog_start_end = 0x1C5; // Name: m_bOverrideFogStartEnd Offset: 0x1C5
					constexpr auto f_override_fog_start = 0x1CC; // Name: m_fOverrideFogStart Offset: 0x1CC
					constexpr auto f_override_fog_end = 0x1E0; // Name: m_fOverrideFogEnd Offset: 0x1E0
					constexpr auto h_active_post_processing_volume = 0x1F4; // Name: m_hActivePostProcessingVolume Offset: 0x1F4
					constexpr auto ang_demo_view_angles = 0x1F8; // Name: m_angDemoViewAngles Offset: 0x1F8
				} // namespace CPlayer_CameraServices

				namespace CCSGameModeRules {
					constexpr auto _m_p_chain_entity = 0x8; // Name: __m_pChainEntity Offset: 0x8
				} // namespace CCSGameModeRules

				namespace CountdownTimer {
					constexpr auto duration = 0x8; // Name: m_duration Offset: 0x8
					constexpr auto timestamp = 0xC; // Name: m_timestamp Offset: 0xC
					constexpr auto timescale = 0x10; // Name: m_timescale Offset: 0x10
					constexpr auto n_world_group_id = 0x14; // Name: m_nWorldGroupId Offset: 0x14
				} // namespace CountdownTimer

				namespace C_FuncMonitor {
					constexpr auto target_camera = 0xD28; // Name: m_targetCamera Offset: 0xD28
					constexpr auto n_resolution_enum = 0xD30; // Name: m_nResolutionEnum Offset: 0xD30
					constexpr auto b_render_shadows = 0xD34; // Name: m_bRenderShadows Offset: 0xD34
					constexpr auto b_use_unique_color_target = 0xD35; // Name: m_bUseUniqueColorTarget Offset: 0xD35
					constexpr auto brush_model_name = 0xD38; // Name: m_brushModelName Offset: 0xD38
					constexpr auto h_target_camera = 0xD40; // Name: m_hTargetCamera Offset: 0xD40
					constexpr auto b_enabled = 0xD44; // Name: m_bEnabled Offset: 0xD44
					constexpr auto b_draw3_dskybox = 0xD45; // Name: m_bDraw3DSkybox Offset: 0xD45
				} // namespace C_FuncMonitor

				namespace C_TriggerMultiple {
				} // namespace C_TriggerMultiple

				namespace C_SoundEventAABBEntity {
					constexpr auto v_mins = 0x628; // Name: m_vMins Offset: 0x628
					constexpr auto v_maxs = 0x634; // Name: m_vMaxs Offset: 0x634
				} // namespace C_SoundEventAABBEntity

				namespace C_Inferno {
					constexpr auto nfx_fire_damage_effect = 0xD68; // Name: m_nfxFireDamageEffect Offset: 0xD68
					constexpr auto h_inferno_points_snapshot = 0xD70; // Name: m_hInfernoPointsSnapshot Offset: 0xD70
					constexpr auto h_inferno_filler_points_snapshot = 0xD78; // Name: m_hInfernoFillerPointsSnapshot Offset: 0xD78
					constexpr auto h_inferno_outline_points_snapshot = 0xD80; // Name: m_hInfernoOutlinePointsSnapshot Offset: 0xD80
					constexpr auto h_inferno_climbing_outline_points_snapshot = 0xD88; // Name: m_hInfernoClimbingOutlinePointsSnapshot Offset: 0xD88
					constexpr auto h_inferno_decals_snapshot = 0xD90; // Name: m_hInfernoDecalsSnapshot Offset: 0xD90
					constexpr auto fire_positions = 0xD98; // Name: m_firePositions Offset: 0xD98
					constexpr auto fire_parent_positions = 0x1098; // Name: m_fireParentPositions Offset: 0x1098
					constexpr auto b_fire_is_burning = 0x1398; // Name: m_bFireIsBurning Offset: 0x1398
					constexpr auto burn_normal = 0x13D8; // Name: m_BurnNormal Offset: 0x13D8
					constexpr auto fire_count = 0x16D8; // Name: m_fireCount Offset: 0x16D8
					constexpr auto n_inferno_type = 0x16DC; // Name: m_nInfernoType Offset: 0x16DC
					constexpr auto n_fire_lifetime = 0x16E0; // Name: m_nFireLifetime Offset: 0x16E0
					constexpr auto b_in_post_effect_time = 0x16E4; // Name: m_bInPostEffectTime Offset: 0x16E4
					constexpr auto last_fire_count = 0x16E8; // Name: m_lastFireCount Offset: 0x16E8
					constexpr auto n_fire_effect_tick_begin = 0x16EC; // Name: m_nFireEffectTickBegin Offset: 0x16EC
					constexpr auto drawable_count = 0x82F0; // Name: m_drawableCount Offset: 0x82F0
					constexpr auto blos_check = 0x82F4; // Name: m_blosCheck Offset: 0x82F4
					constexpr auto nlosperiod = 0x82F8; // Name: m_nlosperiod Offset: 0x82F8
					constexpr auto max_fire_half_width = 0x82FC; // Name: m_maxFireHalfWidth Offset: 0x82FC
					constexpr auto max_fire_height = 0x8300; // Name: m_maxFireHeight Offset: 0x8300
					constexpr auto min_bounds = 0x8304; // Name: m_minBounds Offset: 0x8304
					constexpr auto max_bounds = 0x8310; // Name: m_maxBounds Offset: 0x8310
					constexpr auto fl_last_grass_burn_think = 0x831C; // Name: m_flLastGrassBurnThink Offset: 0x831C
				} // namespace C_Inferno

				namespace AmmoIndex_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace AmmoIndex_t

				namespace C_GlobalLight {
					constexpr auto wind_cloth_force_handle = 0xA30; // Name: m_WindClothForceHandle Offset: 0xA30
				} // namespace C_GlobalLight

				namespace C_RopeKeyframe_CPhysicsDelegate {
					constexpr auto p_keyframe = 0x8; // Name: m_pKeyframe Offset: 0x8
				} // namespace C_RopeKeyframe_CPhysicsDelegate

				namespace C_EnvVolumetricFogVolume {
					constexpr auto b_active = 0x568; // Name: m_bActive Offset: 0x568
					constexpr auto v_box_mins = 0x56C; // Name: m_vBoxMins Offset: 0x56C
					constexpr auto v_box_maxs = 0x578; // Name: m_vBoxMaxs Offset: 0x578
					constexpr auto b_start_disabled = 0x584; // Name: m_bStartDisabled Offset: 0x584
					constexpr auto fl_strength = 0x588; // Name: m_flStrength Offset: 0x588
					constexpr auto n_falloff_shape = 0x58C; // Name: m_nFalloffShape Offset: 0x58C
					constexpr auto fl_falloff_exponent = 0x590; // Name: m_flFalloffExponent Offset: 0x590
					constexpr auto fl_height_fog_depth = 0x594; // Name: m_flHeightFogDepth Offset: 0x594
					constexpr auto f_height_fog_edge_width = 0x598; // Name: m_fHeightFogEdgeWidth Offset: 0x598
					constexpr auto f_indirect_light_strength = 0x59C; // Name: m_fIndirectLightStrength Offset: 0x59C
					constexpr auto f_sun_light_strength = 0x5A0; // Name: m_fSunLightStrength Offset: 0x5A0
					constexpr auto f_noise_strength = 0x5A4; // Name: m_fNoiseStrength Offset: 0x5A4
					constexpr auto b_override_indirect_light_strength = 0x5A8; // Name: m_bOverrideIndirectLightStrength Offset: 0x5A8
					constexpr auto b_override_sun_light_strength = 0x5A9; // Name: m_bOverrideSunLightStrength Offset: 0x5A9
					constexpr auto b_override_noise_strength = 0x5AA; // Name: m_bOverrideNoiseStrength Offset: 0x5AA
					constexpr auto b_allow_lpvindirect = 0x5AB; // Name: m_bAllowLPVIndirect Offset: 0x5AB
				} // namespace C_EnvVolumetricFogVolume

				namespace CBodyComponent {
					constexpr auto p_scene_node = 0x8; // Name: m_pSceneNode Offset: 0x8
					constexpr auto _m_p_chain_entity = 0x20; // Name: __m_pChainEntity Offset: 0x20
				} // namespace CBodyComponent

				namespace C_LightGlow {
					constexpr auto n_horizontal_size = 0xD28; // Name: m_nHorizontalSize Offset: 0xD28
					constexpr auto n_vertical_size = 0xD2C; // Name: m_nVerticalSize Offset: 0xD2C
					constexpr auto n_min_dist = 0xD30; // Name: m_nMinDist Offset: 0xD30
					constexpr auto n_max_dist = 0xD34; // Name: m_nMaxDist Offset: 0xD34
					constexpr auto n_outer_max_dist = 0xD38; // Name: m_nOuterMaxDist Offset: 0xD38
					constexpr auto fl_glow_proxy_size = 0xD3C; // Name: m_flGlowProxySize Offset: 0xD3C
					constexpr auto fl_hdrcolor_scale = 0xD40; // Name: m_flHDRColorScale Offset: 0xD40
					constexpr auto glow_overlay = 0xD48; // Name: m_GlowOverlay Offset: 0xD48
				} // namespace C_LightGlow

				namespace EntitySpottedState_t {
					constexpr auto b_spotted = 0x8; // Name: m_bSpotted Offset: 0x8
					constexpr auto b_spotted_by_mask = 0xC; // Name: m_bSpottedByMask Offset: 0xC
				} // namespace EntitySpottedState_t

				namespace CGameSceneNodeHandle {
					constexpr auto h_owner = 0x8; // Name: m_hOwner Offset: 0x8
					constexpr auto name = 0xC; // Name: m_name Offset: 0xC
				} // namespace CGameSceneNodeHandle

				namespace CCSPlayerController_DamageServices {
					constexpr auto n_send_update = 0x40; // Name: m_nSendUpdate Offset: 0x40
					constexpr auto damage_list = 0x48; // Name: m_DamageList Offset: 0x48
				} // namespace CCSPlayerController_DamageServices

				namespace C_PlayerSprayDecal {
					constexpr auto n_unique_id = 0xD28; // Name: m_nUniqueID Offset: 0xD28
					constexpr auto un_account_id = 0xD2C; // Name: m_unAccountID Offset: 0xD2C
					constexpr auto un_trace_id = 0xD30; // Name: m_unTraceID Offset: 0xD30
					constexpr auto rt_gc_time = 0xD34; // Name: m_rtGcTime Offset: 0xD34
					constexpr auto vec_end_pos = 0xD38; // Name: m_vecEndPos Offset: 0xD38
					constexpr auto vec_start = 0xD44; // Name: m_vecStart Offset: 0xD44
					constexpr auto vec_left = 0xD50; // Name: m_vecLeft Offset: 0xD50
					constexpr auto vec_normal = 0xD5C; // Name: m_vecNormal Offset: 0xD5C
					constexpr auto n_player = 0xD68; // Name: m_nPlayer Offset: 0xD68
					constexpr auto n_entity = 0xD6C; // Name: m_nEntity Offset: 0xD6C
					constexpr auto n_hitbox = 0xD70; // Name: m_nHitbox Offset: 0xD70
					constexpr auto fl_creation_time = 0xD74; // Name: m_flCreationTime Offset: 0xD74
					constexpr auto n_tint_id = 0xD78; // Name: m_nTintID Offset: 0xD78
					constexpr auto n_version = 0xD7C; // Name: m_nVersion Offset: 0xD7C
					constexpr auto ub_signature = 0xD7D; // Name: m_ubSignature Offset: 0xD7D
					constexpr auto spray_render_helper = 0xE08; // Name: m_SprayRenderHelper Offset: 0xE08
				} // namespace C_PlayerSprayDecal

				namespace C_CSTeam {
					constexpr auto sz_team_match_stat = 0x620; // Name: m_szTeamMatchStat Offset: 0x620
					constexpr auto num_map_victories = 0x820; // Name: m_numMapVictories Offset: 0x820
					constexpr auto b_surrendered = 0x824; // Name: m_bSurrendered Offset: 0x824
					constexpr auto score_first_half = 0x828; // Name: m_scoreFirstHalf Offset: 0x828
					constexpr auto score_second_half = 0x82C; // Name: m_scoreSecondHalf Offset: 0x82C
					constexpr auto score_overtime = 0x830; // Name: m_scoreOvertime Offset: 0x830
					constexpr auto sz_clan_teamname = 0x834; // Name: m_szClanTeamname Offset: 0x834
					constexpr auto i_clan_id = 0x8B8; // Name: m_iClanID Offset: 0x8B8
					constexpr auto sz_team_flag_image = 0x8BC; // Name: m_szTeamFlagImage Offset: 0x8BC
					constexpr auto sz_team_logo_image = 0x8C4; // Name: m_szTeamLogoImage Offset: 0x8C4
				} // namespace C_CSTeam

				namespace PredictedDamageTag_t {
					constexpr auto n_tag_tick = 0x30; // Name: nTagTick Offset: 0x30
					constexpr auto fl_flinch_mod_small = 0x34; // Name: flFlinchModSmall Offset: 0x34
					constexpr auto fl_flinch_mod_large = 0x38; // Name: flFlinchModLarge Offset: 0x38
					constexpr auto fl_friendly_fire_damage_reduction_ratio = 0x3C; // Name: flFriendlyFireDamageReductionRatio Offset: 0x3C
				} // namespace PredictedDamageTag_t

				namespace CDestructiblePartRuntimeData {
					constexpr auto n_health_remaining = 0x0; // Name: m_nHealthRemaining Offset: 0x0
				} // namespace CDestructiblePartRuntimeData

				namespace C_ClientRagdoll {
					constexpr auto b_fade_out = 0xF88; // Name: m_bFadeOut Offset: 0xF88
					constexpr auto b_important = 0xF89; // Name: m_bImportant Offset: 0xF89
					constexpr auto fl_effect_time = 0xF8C; // Name: m_flEffectTime Offset: 0xF8C
					constexpr auto gib_despawn_time = 0xF90; // Name: m_gibDespawnTime Offset: 0xF90
					constexpr auto i_current_friction = 0xF94; // Name: m_iCurrentFriction Offset: 0xF94
					constexpr auto i_min_friction = 0xF98; // Name: m_iMinFriction Offset: 0xF98
					constexpr auto i_max_friction = 0xF9C; // Name: m_iMaxFriction Offset: 0xF9C
					constexpr auto i_friction_anim_state = 0xFA0; // Name: m_iFrictionAnimState Offset: 0xFA0
					constexpr auto b_release_ragdoll = 0xFA4; // Name: m_bReleaseRagdoll Offset: 0xFA4
					constexpr auto i_eye_attachment = 0xFA5; // Name: m_iEyeAttachment Offset: 0xFA5
					constexpr auto b_fading_out = 0xFA6; // Name: m_bFadingOut Offset: 0xFA6
					constexpr auto fl_scale_end = 0xFA8; // Name: m_flScaleEnd Offset: 0xFA8
					constexpr auto fl_scale_time_start = 0xFD0; // Name: m_flScaleTimeStart Offset: 0xFD0
					constexpr auto fl_scale_time_end = 0xFF8; // Name: m_flScaleTimeEnd Offset: 0xFF8
				} // namespace C_ClientRagdoll

				namespace CCopyRecipientFilter {
					constexpr auto flags = 0x8; // Name: m_Flags Offset: 0x8
					constexpr auto recipients = 0x10; // Name: m_Recipients Offset: 0x10
				} // namespace CCopyRecipientFilter

				namespace C_CSPlayerResource {
					constexpr auto b_hostage_alive = 0x568; // Name: m_bHostageAlive Offset: 0x568
					constexpr auto is_hostage_following_someone = 0x574; // Name: m_isHostageFollowingSomeone Offset: 0x574
					constexpr auto i_hostage_entity_ids = 0x580; // Name: m_iHostageEntityIDs Offset: 0x580
					constexpr auto bombsite_center_a = 0x5B0; // Name: m_bombsiteCenterA Offset: 0x5B0
					constexpr auto bombsite_center_b = 0x5BC; // Name: m_bombsiteCenterB Offset: 0x5BC
					constexpr auto hostage_rescue_x = 0x5C8; // Name: m_hostageRescueX Offset: 0x5C8
					constexpr auto hostage_rescue_y = 0x5D8; // Name: m_hostageRescueY Offset: 0x5D8
					constexpr auto hostage_rescue_z = 0x5E8; // Name: m_hostageRescueZ Offset: 0x5E8
					constexpr auto b_end_match_next_map_all_voted = 0x5F8; // Name: m_bEndMatchNextMapAllVoted Offset: 0x5F8
					constexpr auto found_goal_positions = 0x5F9; // Name: m_foundGoalPositions Offset: 0x5F9
				} // namespace C_CSPlayerResource

				namespace C_InfoLadderDismount {
				} // namespace C_InfoLadderDismount

				namespace EventSimpleLoopFrameUpdate_t {
					constexpr auto loop_state = 0x0; // Name: m_LoopState Offset: 0x0
					constexpr auto fl_real_time = 0x28; // Name: m_flRealTime Offset: 0x28
					constexpr auto fl_frame_time = 0x2C; // Name: m_flFrameTime Offset: 0x2C
				} // namespace EventSimpleLoopFrameUpdate_t

				namespace WrappedPhysicsJoint_t {
				} // namespace WrappedPhysicsJoint_t

				namespace CBodyComponentPoint {
					constexpr auto scene_node = 0x50; // Name: m_sceneNode Offset: 0x50
				} // namespace CBodyComponentPoint

				namespace C_SunGlowOverlay {
					constexpr auto b_modulate_by_dot = 0xD0; // Name: m_bModulateByDot Offset: 0xD0
				} // namespace C_SunGlowOverlay

				namespace CClientGapTypeQueryRegistration {
				} // namespace CClientGapTypeQueryRegistration

				namespace C_SmokeGrenadeProjectile {
					constexpr auto n_smoke_effect_tick_begin = 0x1210; // Name: m_nSmokeEffectTickBegin Offset: 0x1210
					constexpr auto b_did_smoke_effect = 0x1214; // Name: m_bDidSmokeEffect Offset: 0x1214
					constexpr auto n_random_seed = 0x1218; // Name: m_nRandomSeed Offset: 0x1218
					constexpr auto v_smoke_color = 0x121C; // Name: m_vSmokeColor Offset: 0x121C
					constexpr auto v_smoke_detonation_pos = 0x1228; // Name: m_vSmokeDetonationPos Offset: 0x1228
					constexpr auto voxel_frame_data = 0x1238; // Name: m_VoxelFrameData Offset: 0x1238
					constexpr auto n_voxel_frame_data_size = 0x1250; // Name: m_nVoxelFrameDataSize Offset: 0x1250
					constexpr auto n_voxel_update = 0x1254; // Name: m_nVoxelUpdate Offset: 0x1254
					constexpr auto b_smoke_volume_data_received = 0x1258; // Name: m_bSmokeVolumeDataReceived Offset: 0x1258
					constexpr auto b_smoke_effect_spawned = 0x1259; // Name: m_bSmokeEffectSpawned Offset: 0x1259
				} // namespace C_SmokeGrenadeProjectile

				namespace EventClientOutput_t {
					constexpr auto loop_state = 0x0; // Name: m_LoopState Offset: 0x0
					constexpr auto fl_render_time = 0x28; // Name: m_flRenderTime Offset: 0x28
					constexpr auto fl_real_time = 0x2C; // Name: m_flRealTime Offset: 0x2C
					constexpr auto fl_render_frame_time_unbounded = 0x30; // Name: m_flRenderFrameTimeUnbounded Offset: 0x30
					constexpr auto b_render_only = 0x34; // Name: m_bRenderOnly Offset: 0x34
				} // namespace EventClientOutput_t

				namespace CPulseAnimFuncs {
				} // namespace CPulseAnimFuncs

				namespace C_CSGO_MapPreviewCameraPath {
					constexpr auto fl_zfar = 0x568; // Name: m_flZFar Offset: 0x568
					constexpr auto fl_znear = 0x56C; // Name: m_flZNear Offset: 0x56C
					constexpr auto b_loop = 0x570; // Name: m_bLoop Offset: 0x570
					constexpr auto b_vertical_fov = 0x571; // Name: m_bVerticalFOV Offset: 0x571
					constexpr auto b_constant_speed = 0x572; // Name: m_bConstantSpeed Offset: 0x572
					constexpr auto fl_duration = 0x574; // Name: m_flDuration Offset: 0x574
					constexpr auto fl_path_length = 0x5B8; // Name: m_flPathLength Offset: 0x5B8
					constexpr auto fl_path_duration = 0x5BC; // Name: m_flPathDuration Offset: 0x5BC
				} // namespace C_CSGO_MapPreviewCameraPath

				namespace CCSGO_WingmanIntroTerroristPosition {
				} // namespace CCSGO_WingmanIntroTerroristPosition

				namespace HullFlags_t {
					constexpr auto b_hull__human = 0x0; // Name: m_bHull_Human Offset: 0x0
					constexpr auto b_hull__small_centered = 0x1; // Name: m_bHull_SmallCentered Offset: 0x1
					constexpr auto b_hull__wide_human = 0x2; // Name: m_bHull_WideHuman Offset: 0x2
					constexpr auto b_hull__tiny = 0x3; // Name: m_bHull_Tiny Offset: 0x3
					constexpr auto b_hull__medium = 0x4; // Name: m_bHull_Medium Offset: 0x4
					constexpr auto b_hull__tiny_centered = 0x5; // Name: m_bHull_TinyCentered Offset: 0x5
					constexpr auto b_hull__large = 0x6; // Name: m_bHull_Large Offset: 0x6
					constexpr auto b_hull__large_centered = 0x7; // Name: m_bHull_LargeCentered Offset: 0x7
					constexpr auto b_hull__medium_tall = 0x8; // Name: m_bHull_MediumTall Offset: 0x8
					constexpr auto b_hull__small = 0x9; // Name: m_bHull_Small Offset: 0x9
				} // namespace HullFlags_t

				namespace C_CSGO_TerroristWingmanIntroCamera {
				} // namespace C_CSGO_TerroristWingmanIntroCamera

				namespace C_WeaponSawedoff {
				} // namespace C_WeaponSawedoff

				namespace PointCameraSettings_t {
					constexpr auto fl_near_blurry_distance = 0x0; // Name: m_flNearBlurryDistance Offset: 0x0
					constexpr auto fl_near_crisp_distance = 0x4; // Name: m_flNearCrispDistance Offset: 0x4
					constexpr auto fl_far_crisp_distance = 0x8; // Name: m_flFarCrispDistance Offset: 0x8
					constexpr auto fl_far_blurry_distance = 0xC; // Name: m_flFarBlurryDistance Offset: 0xC
				} // namespace PointCameraSettings_t

				namespace C_WeaponMP7 {
				} // namespace C_WeaponMP7

				namespace CPlayer_WeaponServices {
					constexpr auto h_my_weapons = 0x40; // Name: m_hMyWeapons Offset: 0x40
					constexpr auto h_active_weapon = 0x58; // Name: m_hActiveWeapon Offset: 0x58
					constexpr auto h_last_weapon = 0x5C; // Name: m_hLastWeapon Offset: 0x5C
					constexpr auto i_ammo = 0x60; // Name: m_iAmmo Offset: 0x60
				} // namespace CPlayer_WeaponServices

				namespace CCSPlayerController {
					constexpr auto p_in_game_money_services = 0x720; // Name: m_pInGameMoneyServices Offset: 0x720
					constexpr auto p_inventory_services = 0x728; // Name: m_pInventoryServices Offset: 0x728
					constexpr auto p_action_tracking_services = 0x730; // Name: m_pActionTrackingServices Offset: 0x730
					constexpr auto p_damage_services = 0x738; // Name: m_pDamageServices Offset: 0x738
					constexpr auto i_ping = 0x740; // Name: m_iPing Offset: 0x740
					constexpr auto b_has_communication_abuse_mute = 0x744; // Name: m_bHasCommunicationAbuseMute Offset: 0x744
					constexpr auto sz_crosshair_codes = 0x748; // Name: m_szCrosshairCodes Offset: 0x748
					constexpr auto i_pending_team_num = 0x750; // Name: m_iPendingTeamNum Offset: 0x750
					constexpr auto fl_force_team_time = 0x754; // Name: m_flForceTeamTime Offset: 0x754
					constexpr auto i_comp_teammate_color = 0x758; // Name: m_iCompTeammateColor Offset: 0x758
					constexpr auto b_ever_played_on_team = 0x75C; // Name: m_bEverPlayedOnTeam Offset: 0x75C
					constexpr auto fl_previous_force_join_team_time = 0x760; // Name: m_flPreviousForceJoinTeamTime Offset: 0x760
					constexpr auto sz_clan = 0x768; // Name: m_szClan Offset: 0x768
					constexpr auto s_sanitized_player_name = 0x770; // Name: m_sSanitizedPlayerName Offset: 0x770
					constexpr auto i_coaching_team = 0x778; // Name: m_iCoachingTeam Offset: 0x778
					constexpr auto n_player_dominated = 0x780; // Name: m_nPlayerDominated Offset: 0x780
					constexpr auto n_player_dominating_me = 0x788; // Name: m_nPlayerDominatingMe Offset: 0x788
					constexpr auto i_competitive_ranking = 0x790; // Name: m_iCompetitiveRanking Offset: 0x790
					constexpr auto i_competitive_wins = 0x794; // Name: m_iCompetitiveWins Offset: 0x794
					constexpr auto i_competitive_rank_type = 0x798; // Name: m_iCompetitiveRankType Offset: 0x798
					constexpr auto i_competitive_ranking_predicted__win = 0x79C; // Name: m_iCompetitiveRankingPredicted_Win Offset: 0x79C
					constexpr auto i_competitive_ranking_predicted__loss = 0x7A0; // Name: m_iCompetitiveRankingPredicted_Loss Offset: 0x7A0
					constexpr auto i_competitive_ranking_predicted__tie = 0x7A4; // Name: m_iCompetitiveRankingPredicted_Tie Offset: 0x7A4
					constexpr auto n_end_match_next_map_vote = 0x7A8; // Name: m_nEndMatchNextMapVote Offset: 0x7A8
					constexpr auto un_active_quest_id = 0x7AC; // Name: m_unActiveQuestId Offset: 0x7AC
					constexpr auto n_quest_progress_reason = 0x7B0; // Name: m_nQuestProgressReason Offset: 0x7B0
					constexpr auto un_player_tv_control_flags = 0x7B4; // Name: m_unPlayerTvControlFlags Offset: 0x7B4
					constexpr auto i_draft_index = 0x7E0; // Name: m_iDraftIndex Offset: 0x7E0
					constexpr auto ms_queued_mode_disconnection_timestamp = 0x7E4; // Name: m_msQueuedModeDisconnectionTimestamp Offset: 0x7E4
					constexpr auto ui_abandon_recorded_reason = 0x7E8; // Name: m_uiAbandonRecordedReason Offset: 0x7E8
					constexpr auto b_cannot_be_kicked = 0x7EC; // Name: m_bCannotBeKicked Offset: 0x7EC
					constexpr auto b_ever_fully_connected = 0x7ED; // Name: m_bEverFullyConnected Offset: 0x7ED
					constexpr auto b_abandon_allows_surrender = 0x7EE; // Name: m_bAbandonAllowsSurrender Offset: 0x7EE
					constexpr auto b_abandon_offers_instant_surrender = 0x7EF; // Name: m_bAbandonOffersInstantSurrender Offset: 0x7EF
					constexpr auto b_disconnection1_min_warning_printed = 0x7F0; // Name: m_bDisconnection1MinWarningPrinted Offset: 0x7F0
					constexpr auto b_score_reported = 0x7F1; // Name: m_bScoreReported Offset: 0x7F1
					constexpr auto n_disconnection_tick = 0x7F4; // Name: m_nDisconnectionTick Offset: 0x7F4
					constexpr auto b_controlling_bot = 0x800; // Name: m_bControllingBot Offset: 0x800
					constexpr auto b_has_controlled_bot_this_round = 0x801; // Name: m_bHasControlledBotThisRound Offset: 0x801
					constexpr auto b_has_been_controlled_by_player_this_round = 0x802; // Name: m_bHasBeenControlledByPlayerThisRound Offset: 0x802
					constexpr auto n_bots_controlled_this_round = 0x804; // Name: m_nBotsControlledThisRound Offset: 0x804
					constexpr auto b_can_control_observed_bot = 0x808; // Name: m_bCanControlObservedBot Offset: 0x808
					constexpr auto h_player_pawn = 0x80C; // Name: m_hPlayerPawn Offset: 0x80C
					constexpr auto h_observer_pawn = 0x810; // Name: m_hObserverPawn Offset: 0x810
					constexpr auto b_pawn_is_alive = 0x814; // Name: m_bPawnIsAlive Offset: 0x814
					constexpr auto i_pawn_health = 0x818; // Name: m_iPawnHealth Offset: 0x818
					constexpr auto i_pawn_armor = 0x81C; // Name: m_iPawnArmor Offset: 0x81C
					constexpr auto b_pawn_has_defuser = 0x820; // Name: m_bPawnHasDefuser Offset: 0x820
					constexpr auto b_pawn_has_helmet = 0x821; // Name: m_bPawnHasHelmet Offset: 0x821
					constexpr auto n_pawn_character_def_index = 0x822; // Name: m_nPawnCharacterDefIndex Offset: 0x822
					constexpr auto i_pawn_lifetime_start = 0x824; // Name: m_iPawnLifetimeStart Offset: 0x824
					constexpr auto i_pawn_lifetime_end = 0x828; // Name: m_iPawnLifetimeEnd Offset: 0x828
					constexpr auto i_pawn_bot_difficulty = 0x82C; // Name: m_iPawnBotDifficulty Offset: 0x82C
					constexpr auto h_original_controller_of_current_pawn = 0x830; // Name: m_hOriginalControllerOfCurrentPawn Offset: 0x830
					constexpr auto i_score = 0x834; // Name: m_iScore Offset: 0x834
					constexpr auto recent_kill_queue = 0x838; // Name: m_recentKillQueue Offset: 0x838
					constexpr auto n_first_kill = 0x840; // Name: m_nFirstKill Offset: 0x840
					constexpr auto n_kill_count = 0x841; // Name: m_nKillCount Offset: 0x841
					constexpr auto b_mvp_no_music = 0x842; // Name: m_bMvpNoMusic Offset: 0x842
					constexpr auto e_mvp_reason = 0x844; // Name: m_eMvpReason Offset: 0x844
					constexpr auto i_music_kit_id = 0x848; // Name: m_iMusicKitID Offset: 0x848
					constexpr auto i_music_kit_mvps = 0x84C; // Name: m_iMusicKitMVPs Offset: 0x84C
					constexpr auto i_mvps = 0x850; // Name: m_iMVPs Offset: 0x850
					constexpr auto b_is_player_name_dirty = 0x854; // Name: m_bIsPlayerNameDirty Offset: 0x854
					constexpr auto b_fire_bullets_seed_synchronized = 0x855; // Name: m_bFireBulletsSeedSynchronized Offset: 0x855
				} // namespace CCSPlayerController

				namespace C_WeaponMag7 {
				} // namespace C_WeaponMag7

				namespace C_CSGO_MapPreviewCameraPathNode {
					constexpr auto sz_parent_path_unique_id = 0x568; // Name: m_szParentPathUniqueID Offset: 0x568
					constexpr auto n_path_index = 0x570; // Name: m_nPathIndex Offset: 0x570
					constexpr auto v_in_tangent_local = 0x574; // Name: m_vInTangentLocal Offset: 0x574
					constexpr auto v_out_tangent_local = 0x580; // Name: m_vOutTangentLocal Offset: 0x580
					constexpr auto fl_fov = 0x58C; // Name: m_flFOV Offset: 0x58C
					constexpr auto fl_camera_speed = 0x590; // Name: m_flCameraSpeed Offset: 0x590
					constexpr auto fl_ease_in = 0x594; // Name: m_flEaseIn Offset: 0x594
					constexpr auto fl_ease_out = 0x598; // Name: m_flEaseOut Offset: 0x598
					constexpr auto v_in_tangent_world = 0x59C; // Name: m_vInTangentWorld Offset: 0x59C
					constexpr auto v_out_tangent_world = 0x5A8; // Name: m_vOutTangentWorld Offset: 0x5A8
				} // namespace C_CSGO_MapPreviewCameraPathNode

				namespace C_DEagle {
				} // namespace C_DEagle

				namespace C_CSPlayerPawn {
					constexpr auto p_bullet_services = 0x1518; // Name: m_pBulletServices Offset: 0x1518
					constexpr auto p_hostage_services = 0x1520; // Name: m_pHostageServices Offset: 0x1520
					constexpr auto p_buy_services = 0x1528; // Name: m_pBuyServices Offset: 0x1528
					constexpr auto p_glow_services = 0x1530; // Name: m_pGlowServices Offset: 0x1530
					constexpr auto p_action_tracking_services = 0x1538; // Name: m_pActionTrackingServices Offset: 0x1538
					constexpr auto p_damage_react_services = 0x1540; // Name: m_pDamageReactServices Offset: 0x1540
					constexpr auto fl_health_shot_boost_expiration_time = 0x1548; // Name: m_flHealthShotBoostExpirationTime Offset: 0x1548
					constexpr auto fl_last_fired_weapon_time = 0x154C; // Name: m_flLastFiredWeaponTime Offset: 0x154C
					constexpr auto b_has_female_voice = 0x1550; // Name: m_bHasFemaleVoice Offset: 0x1550
					constexpr auto fl_landing_time_seconds = 0x1554; // Name: m_flLandingTimeSeconds Offset: 0x1554
					constexpr auto fl_old_fall_velocity = 0x1558; // Name: m_flOldFallVelocity Offset: 0x1558
					constexpr auto sz_last_place_name = 0x155C; // Name: m_szLastPlaceName Offset: 0x155C
					constexpr auto b_prev_defuser = 0x156E; // Name: m_bPrevDefuser Offset: 0x156E
					constexpr auto b_prev_helmet = 0x156F; // Name: m_bPrevHelmet Offset: 0x156F
					constexpr auto n_prev_armor_val = 0x1570; // Name: m_nPrevArmorVal Offset: 0x1570
					constexpr auto n_prev_grenade_ammo_count = 0x1574; // Name: m_nPrevGrenadeAmmoCount Offset: 0x1574
					constexpr auto un_previous_weapon_hash = 0x1578; // Name: m_unPreviousWeaponHash Offset: 0x1578
					constexpr auto un_weapon_hash = 0x157C; // Name: m_unWeaponHash Offset: 0x157C
					constexpr auto b_in_buy_zone = 0x1580; // Name: m_bInBuyZone Offset: 0x1580
					constexpr auto b_previously_in_buy_zone = 0x1581; // Name: m_bPreviouslyInBuyZone Offset: 0x1581
					constexpr auto aim_punch_angle = 0x1584; // Name: m_aimPunchAngle Offset: 0x1584
					constexpr auto aim_punch_angle_vel = 0x1590; // Name: m_aimPunchAngleVel Offset: 0x1590
					constexpr auto aim_punch_tick_base = 0x159C; // Name: m_aimPunchTickBase Offset: 0x159C
					constexpr auto aim_punch_tick_fraction = 0x15A0; // Name: m_aimPunchTickFraction Offset: 0x15A0
					constexpr auto aim_punch_cache = 0x15A8; // Name: m_aimPunchCache Offset: 0x15A8
					constexpr auto b_in_landing = 0x15C8; // Name: m_bInLanding Offset: 0x15C8
					constexpr auto fl_landing_start_time = 0x15CC; // Name: m_flLandingStartTime Offset: 0x15CC
					constexpr auto b_in_hostage_rescue_zone = 0x15D0; // Name: m_bInHostageRescueZone Offset: 0x15D0
					constexpr auto b_in_bomb_zone = 0x15D1; // Name: m_bInBombZone Offset: 0x15D1
					constexpr auto b_is_buy_menu_open = 0x15D2; // Name: m_bIsBuyMenuOpen Offset: 0x15D2
					constexpr auto fl_time_of_last_injury = 0x15D4; // Name: m_flTimeOfLastInjury Offset: 0x15D4
					constexpr auto fl_next_spray_decal_time = 0x15D8; // Name: m_flNextSprayDecalTime Offset: 0x15D8
					constexpr auto i_retakes_offering = 0x1730; // Name: m_iRetakesOffering Offset: 0x1730
					constexpr auto i_retakes_offering_card = 0x1734; // Name: m_iRetakesOfferingCard Offset: 0x1734
					constexpr auto b_retakes_has_defuse_kit = 0x1738; // Name: m_bRetakesHasDefuseKit Offset: 0x1738
					constexpr auto b_retakes_mvplast_round = 0x1739; // Name: m_bRetakesMVPLastRound Offset: 0x1739
					constexpr auto i_retakes_mvpboost_item = 0x173C; // Name: m_iRetakesMVPBoostItem Offset: 0x173C
					constexpr auto retakes_mvpboost_extra_utility = 0x1740; // Name: m_RetakesMVPBoostExtraUtility Offset: 0x1740
					constexpr auto b_need_to_re_apply_gloves = 0x1760; // Name: m_bNeedToReApplyGloves Offset: 0x1760
					constexpr auto econ_gloves = 0x1768; // Name: m_EconGloves Offset: 0x1768
					constexpr auto n_econ_gloves_changed = 0x1BB0; // Name: m_nEconGlovesChanged Offset: 0x1BB0
					constexpr auto b_must_sync_ragdoll_state = 0x1BB1; // Name: m_bMustSyncRagdollState Offset: 0x1BB1
					constexpr auto n_ragdoll_damage_bone = 0x1BB4; // Name: m_nRagdollDamageBone Offset: 0x1BB4
					constexpr auto v_ragdoll_damage_force = 0x1BB8; // Name: m_vRagdollDamageForce Offset: 0x1BB8
					constexpr auto v_ragdoll_damage_position = 0x1BC4; // Name: m_vRagdollDamagePosition Offset: 0x1BC4
					constexpr auto sz_ragdoll_damage_weapon_name = 0x1BD0; // Name: m_szRagdollDamageWeaponName Offset: 0x1BD0
					constexpr auto b_ragdoll_damage_headshot = 0x1C10; // Name: m_bRagdollDamageHeadshot Offset: 0x1C10
					constexpr auto v_ragdoll_server_origin = 0x1C14; // Name: m_vRagdollServerOrigin Offset: 0x1C14
					constexpr auto b_last_head_bone_transform_is_valid = 0x2290; // Name: m_bLastHeadBoneTransformIsValid Offset: 0x2290
					constexpr auto last_land_time = 0x2294; // Name: m_lastLandTime Offset: 0x2294
					constexpr auto b_on_ground_last_tick = 0x2298; // Name: m_bOnGroundLastTick Offset: 0x2298
					constexpr auto q_death_eye_angles = 0x22B4; // Name: m_qDeathEyeAngles Offset: 0x22B4
					constexpr auto b_skip_one_head_constraint_update = 0x22C0; // Name: m_bSkipOneHeadConstraintUpdate Offset: 0x22C0
					constexpr auto b_left_handed = 0x22C1; // Name: m_bLeftHanded Offset: 0x22C1
					constexpr auto f_switched_handedness_time = 0x22C4; // Name: m_fSwitchedHandednessTime Offset: 0x22C4
					constexpr auto fl_viewmodel_offset_x = 0x22C8; // Name: m_flViewmodelOffsetX Offset: 0x22C8
					constexpr auto fl_viewmodel_offset_y = 0x22CC; // Name: m_flViewmodelOffsetY Offset: 0x22CC
					constexpr auto fl_viewmodel_offset_z = 0x22D0; // Name: m_flViewmodelOffsetZ Offset: 0x22D0
					constexpr auto fl_viewmodel_fov = 0x22D4; // Name: m_flViewmodelFOV Offset: 0x22D4
					constexpr auto vec_player_patch_econ_indices = 0x22D8; // Name: m_vecPlayerPatchEconIndices Offset: 0x22D8
					constexpr auto gun_game_immunity_color = 0x2310; // Name: m_GunGameImmunityColor Offset: 0x2310
					constexpr auto vec_bullet_hit_models = 0x2360; // Name: m_vecBulletHitModels Offset: 0x2360
					constexpr auto b_is_walking = 0x2378; // Name: m_bIsWalking Offset: 0x2378
					constexpr auto third_person_heading = 0x2380; // Name: m_thirdPersonHeading Offset: 0x2380
					constexpr auto fl_slope_drop_offset = 0x2398; // Name: m_flSlopeDropOffset Offset: 0x2398
					constexpr auto fl_slope_drop_height = 0x23A8; // Name: m_flSlopeDropHeight Offset: 0x23A8
					constexpr auto v_head_constraint_offset = 0x23B8; // Name: m_vHeadConstraintOffset Offset: 0x23B8
					constexpr auto entity_spotted_state = 0x23D0; // Name: m_entitySpottedState Offset: 0x23D0
					constexpr auto b_is_scoped = 0x23E8; // Name: m_bIsScoped Offset: 0x23E8
					constexpr auto b_resume_zoom = 0x23E9; // Name: m_bResumeZoom Offset: 0x23E9
					constexpr auto b_is_defusing = 0x23EA; // Name: m_bIsDefusing Offset: 0x23EA
					constexpr auto b_is_grabbing_hostage = 0x23EB; // Name: m_bIsGrabbingHostage Offset: 0x23EB
					constexpr auto i_blocking_use_action_in_progress = 0x23EC; // Name: m_iBlockingUseActionInProgress Offset: 0x23EC
					constexpr auto fl_emit_sound_time = 0x23F0; // Name: m_flEmitSoundTime Offset: 0x23F0
					constexpr auto b_in_no_defuse_area = 0x23F4; // Name: m_bInNoDefuseArea Offset: 0x23F4
					constexpr auto n_which_bomb_zone = 0x23F8; // Name: m_nWhichBombZone Offset: 0x23F8
					constexpr auto i_shots_fired = 0x23FC; // Name: m_iShotsFired Offset: 0x23FC
					constexpr auto fl_flinch_stack = 0x2400; // Name: m_flFlinchStack Offset: 0x2400
					constexpr auto fl_velocity_modifier = 0x2404; // Name: m_flVelocityModifier Offset: 0x2404
					constexpr auto fl_hit_heading = 0x2408; // Name: m_flHitHeading Offset: 0x2408
					constexpr auto n_hit_body_part = 0x240C; // Name: m_nHitBodyPart Offset: 0x240C
					constexpr auto b_wait_for_no_attack = 0x2410; // Name: m_bWaitForNoAttack Offset: 0x2410
					constexpr auto ignore_ladder_jump_time = 0x2414; // Name: m_ignoreLadderJumpTime Offset: 0x2414
					constexpr auto b_killed_by_headshot = 0x2419; // Name: m_bKilledByHeadshot Offset: 0x2419
					constexpr auto armor_value = 0x241C; // Name: m_ArmorValue Offset: 0x241C
					constexpr auto un_current_equipment_value = 0x2420; // Name: m_unCurrentEquipmentValue Offset: 0x2420
					constexpr auto un_round_start_equipment_value = 0x2422; // Name: m_unRoundStartEquipmentValue Offset: 0x2422
					constexpr auto un_freezetime_end_equipment_value = 0x2424; // Name: m_unFreezetimeEndEquipmentValue Offset: 0x2424
					constexpr auto n_last_killer_index = 0x2428; // Name: m_nLastKillerIndex Offset: 0x2428
					constexpr auto b_old_is_scoped = 0x242C; // Name: m_bOldIsScoped Offset: 0x242C
					constexpr auto b_has_death_info = 0x242D; // Name: m_bHasDeathInfo Offset: 0x242D
					constexpr auto fl_death_info_time = 0x2430; // Name: m_flDeathInfoTime Offset: 0x2430
					constexpr auto vec_death_info_origin = 0x2434; // Name: m_vecDeathInfoOrigin Offset: 0x2434
					constexpr auto grenade_parameter_stash_time = 0x2440; // Name: m_grenadeParameterStashTime Offset: 0x2440
					constexpr auto b_grenade_parameters_stashed = 0x2444; // Name: m_bGrenadeParametersStashed Offset: 0x2444
					constexpr auto ang_stashed_shoot_angles = 0x2448; // Name: m_angStashedShootAngles Offset: 0x2448
					constexpr auto vec_stashed_grenade_throw_position = 0x2454; // Name: m_vecStashedGrenadeThrowPosition Offset: 0x2454
					constexpr auto vec_stashed_velocity = 0x2460; // Name: m_vecStashedVelocity Offset: 0x2460
					constexpr auto ang_shoot_angle_history = 0x246C; // Name: m_angShootAngleHistory Offset: 0x246C
					constexpr auto vec_throw_position_history = 0x2484; // Name: m_vecThrowPositionHistory Offset: 0x2484
					constexpr auto vec_velocity_history = 0x249C; // Name: m_vecVelocityHistory Offset: 0x249C
					constexpr auto predicted_damage_tags = 0x24B8; // Name: m_PredictedDamageTags Offset: 0x24B8
					constexpr auto n_prev_highest_received_damage_tag_tick = 0x2508; // Name: m_nPrevHighestReceivedDamageTagTick Offset: 0x2508
					constexpr auto n_highest_applied_damage_tag_tick = 0x250C; // Name: m_nHighestAppliedDamageTagTick Offset: 0x250C
				} // namespace C_CSPlayerPawn

				namespace C_Melee {
				} // namespace C_Melee

				namespace EventServerPollNetworking_t {
				} // namespace EventServerPollNetworking_t

				namespace C_RagdollPropAttached {
					constexpr auto bone_index_attached = 0x1000; // Name: m_boneIndexAttached Offset: 0x1000
					constexpr auto ragdoll_attached_object_index = 0x1004; // Name: m_ragdollAttachedObjectIndex Offset: 0x1004
					constexpr auto attachment_point_bone_space = 0x1008; // Name: m_attachmentPointBoneSpace Offset: 0x1008
					constexpr auto attachment_point_ragdoll_space = 0x1014; // Name: m_attachmentPointRagdollSpace Offset: 0x1014
					constexpr auto vec_offset = 0x1020; // Name: m_vecOffset Offset: 0x1020
					constexpr auto parent_time = 0x102C; // Name: m_parentTime Offset: 0x102C
					constexpr auto b_has_parent = 0x1030; // Name: m_bHasParent Offset: 0x1030
				} // namespace C_RagdollPropAttached

				namespace CInfoDynamicShadowHint {
					constexpr auto b_disabled = 0x568; // Name: m_bDisabled Offset: 0x568
					constexpr auto fl_range = 0x56C; // Name: m_flRange Offset: 0x56C
					constexpr auto n_importance = 0x570; // Name: m_nImportance Offset: 0x570
					constexpr auto n_light_choice = 0x574; // Name: m_nLightChoice Offset: 0x574
					constexpr auto h_light = 0x578; // Name: m_hLight Offset: 0x578
				} // namespace CInfoDynamicShadowHint

				namespace GameAmmoTypeInfo_t {
					constexpr auto n_buy_size = 0x38; // Name: m_nBuySize Offset: 0x38
					constexpr auto n_cost = 0x3C; // Name: m_nCost Offset: 0x3C
				} // namespace GameAmmoTypeInfo_t

				namespace C_BaseCSGrenadeProjectile {
					constexpr auto v_initial_position = 0x1170; // Name: m_vInitialPosition Offset: 0x1170
					constexpr auto v_initial_velocity = 0x117C; // Name: m_vInitialVelocity Offset: 0x117C
					constexpr auto n_bounces = 0x1188; // Name: m_nBounces Offset: 0x1188
					constexpr auto n_explode_effect_index = 0x1190; // Name: m_nExplodeEffectIndex Offset: 0x1190
					constexpr auto n_explode_effect_tick_begin = 0x1198; // Name: m_nExplodeEffectTickBegin Offset: 0x1198
					constexpr auto vec_explode_effect_origin = 0x119C; // Name: m_vecExplodeEffectOrigin Offset: 0x119C
					constexpr auto fl_spawn_time = 0x11A8; // Name: m_flSpawnTime Offset: 0x11A8
					constexpr auto vec_last_trail_line_pos = 0x11AC; // Name: vecLastTrailLinePos Offset: 0x11AC
					constexpr auto fl_next_trail_line_time = 0x11B8; // Name: flNextTrailLineTime Offset: 0x11B8
					constexpr auto b_explode_effect_began = 0x11BC; // Name: m_bExplodeEffectBegan Offset: 0x11BC
					constexpr auto b_can_create_grenade_trail = 0x11BD; // Name: m_bCanCreateGrenadeTrail Offset: 0x11BD
					constexpr auto n_snapshot_trajectory_effect_index = 0x11C0; // Name: m_nSnapshotTrajectoryEffectIndex Offset: 0x11C0
					constexpr auto h_snapshot_trajectory_particle_snapshot = 0x11C8; // Name: m_hSnapshotTrajectoryParticleSnapshot Offset: 0x11C8
					constexpr auto arr_trajectory_trail_points = 0x11D0; // Name: m_arrTrajectoryTrailPoints Offset: 0x11D0
					constexpr auto arr_trajectory_trail_point_creation_times = 0x11E8; // Name: m_arrTrajectoryTrailPointCreationTimes Offset: 0x11E8
					constexpr auto fl_trajectory_trail_effect_creation_time = 0x1200; // Name: m_flTrajectoryTrailEffectCreationTime Offset: 0x1200
				} // namespace C_BaseCSGrenadeProjectile

				namespace C_BaseTrigger {
					constexpr auto b_disabled = 0xD28; // Name: m_bDisabled Offset: 0xD28
					constexpr auto b_client_side_predicted = 0xD29; // Name: m_bClientSidePredicted Offset: 0xD29
				} // namespace C_BaseTrigger

				namespace CFootstepTableHandle {
				} // namespace CFootstepTableHandle

				namespace C_WeaponBaseItem {
					constexpr auto sequence_complete_timer = 0x1B20; // Name: m_SequenceCompleteTimer Offset: 0x1B20
					constexpr auto b_redraw = 0x1B38; // Name: m_bRedraw Offset: 0x1B38
				} // namespace C_WeaponBaseItem

				namespace CEffectData {
					constexpr auto v_origin = 0x8; // Name: m_vOrigin Offset: 0x8
					constexpr auto v_start = 0x14; // Name: m_vStart Offset: 0x14
					constexpr auto v_normal = 0x20; // Name: m_vNormal Offset: 0x20
					constexpr auto v_angles = 0x2C; // Name: m_vAngles Offset: 0x2C
					constexpr auto h_entity = 0x38; // Name: m_hEntity Offset: 0x38
					constexpr auto h_other_entity = 0x3C; // Name: m_hOtherEntity Offset: 0x3C
					constexpr auto fl_scale = 0x40; // Name: m_flScale Offset: 0x40
					constexpr auto fl_magnitude = 0x44; // Name: m_flMagnitude Offset: 0x44
					constexpr auto fl_radius = 0x48; // Name: m_flRadius Offset: 0x48
					constexpr auto n_surface_prop = 0x4C; // Name: m_nSurfaceProp Offset: 0x4C
					constexpr auto n_effect_index = 0x50; // Name: m_nEffectIndex Offset: 0x50
					constexpr auto n_damage_type = 0x58; // Name: m_nDamageType Offset: 0x58
					constexpr auto n_penetrate = 0x5C; // Name: m_nPenetrate Offset: 0x5C
					constexpr auto n_material = 0x5E; // Name: m_nMaterial Offset: 0x5E
					constexpr auto n_hit_box = 0x60; // Name: m_nHitBox Offset: 0x60
					constexpr auto n_color = 0x62; // Name: m_nColor Offset: 0x62
					constexpr auto f_flags = 0x63; // Name: m_fFlags Offset: 0x63
					constexpr auto n_attachment_index = 0x64; // Name: m_nAttachmentIndex Offset: 0x64
					constexpr auto n_attachment_name = 0x68; // Name: m_nAttachmentName Offset: 0x68
					constexpr auto i_effect_name = 0x6C; // Name: m_iEffectName Offset: 0x6C
					constexpr auto n_explosion_type = 0x6E; // Name: m_nExplosionType Offset: 0x6E
				} // namespace CEffectData

				namespace CCSPlayer_CameraServices {
					constexpr auto fl_death_cam_tilt = 0x228; // Name: m_flDeathCamTilt Offset: 0x228
					constexpr auto v_client_scope_inaccuracy = 0x230; // Name: m_vClientScopeInaccuracy Offset: 0x230
				} // namespace CCSPlayer_CameraServices

				namespace C_SensorGrenadeProjectile {
				} // namespace C_SensorGrenadeProjectile

				namespace C_BreakableProp {
					constexpr auto cprop_data_component = 0xFC8; // Name: m_CPropDataComponent Offset: 0xFC8
					constexpr auto on_break = 0x1008; // Name: m_OnBreak Offset: 0x1008
					constexpr auto on_health_changed = 0x1030; // Name: m_OnHealthChanged Offset: 0x1030
					constexpr auto on_take_damage = 0x1058; // Name: m_OnTakeDamage Offset: 0x1058
					constexpr auto impact_energy_scale = 0x1080; // Name: m_impactEnergyScale Offset: 0x1080
					constexpr auto i_min_health_dmg = 0x1084; // Name: m_iMinHealthDmg Offset: 0x1084
					constexpr auto fl_pressure_delay = 0x1088; // Name: m_flPressureDelay Offset: 0x1088
					constexpr auto fl_def_burst_scale = 0x108C; // Name: m_flDefBurstScale Offset: 0x108C
					constexpr auto v_def_burst_offset = 0x1090; // Name: m_vDefBurstOffset Offset: 0x1090
					constexpr auto h_breaker = 0x109C; // Name: m_hBreaker Offset: 0x109C
					constexpr auto performance_mode = 0x10A0; // Name: m_PerformanceMode Offset: 0x10A0
					constexpr auto fl_prevent_damage_before_time = 0x10A4; // Name: m_flPreventDamageBeforeTime Offset: 0x10A4
					constexpr auto breakable_contents_type = 0x10A8; // Name: m_BreakableContentsType Offset: 0x10A8
					constexpr auto str_breakable_contents_prop_group_override = 0x10B0; // Name: m_strBreakableContentsPropGroupOverride Offset: 0x10B0
					constexpr auto str_breakable_contents_particle_override = 0x10B8; // Name: m_strBreakableContentsParticleOverride Offset: 0x10B8
					constexpr auto b_has_break_pieces_or_commands = 0x10C0; // Name: m_bHasBreakPiecesOrCommands Offset: 0x10C0
					constexpr auto explode_damage = 0x10C4; // Name: m_explodeDamage Offset: 0x10C4
					constexpr auto explode_radius = 0x10C8; // Name: m_explodeRadius Offset: 0x10C8
					constexpr auto explosion_delay = 0x10D0; // Name: m_explosionDelay Offset: 0x10D0
					constexpr auto explosion_buildup_sound = 0x10D8; // Name: m_explosionBuildupSound Offset: 0x10D8
					constexpr auto explosion_custom_effect = 0x10E0; // Name: m_explosionCustomEffect Offset: 0x10E0
					constexpr auto explosion_custom_sound = 0x10E8; // Name: m_explosionCustomSound Offset: 0x10E8
					constexpr auto explosion_modifier = 0x10F0; // Name: m_explosionModifier Offset: 0x10F0
					constexpr auto h_physics_attacker = 0x10F8; // Name: m_hPhysicsAttacker Offset: 0x10F8
					constexpr auto fl_last_physics_influence_time = 0x10FC; // Name: m_flLastPhysicsInfluenceTime Offset: 0x10FC
					constexpr auto fl_default_fade_scale = 0x1100; // Name: m_flDefaultFadeScale Offset: 0x1100
					constexpr auto h_last_attacker = 0x1104; // Name: m_hLastAttacker Offset: 0x1104
					constexpr auto h_flare_ent = 0x1108; // Name: m_hFlareEnt Offset: 0x1108
					constexpr auto no_ghost_collision = 0x110C; // Name: m_noGhostCollision Offset: 0x110C
				} // namespace C_BreakableProp

				namespace C_BaseButton {
					constexpr auto glow_entity = 0xD28; // Name: m_glowEntity Offset: 0xD28
					constexpr auto usable = 0xD2C; // Name: m_usable Offset: 0xD2C
					constexpr auto sz_display_text = 0xD30; // Name: m_szDisplayText Offset: 0xD30
				} // namespace C_BaseButton

				namespace CCSPlayer_ViewModelServices {
					constexpr auto h_view_model = 0x40; // Name: m_hViewModel Offset: 0x40
				} // namespace CCSPlayer_ViewModelServices

				namespace CInfoParticleTarget {
				} // namespace CInfoParticleTarget

				namespace CPlayer_MovementServices_Humanoid {
					constexpr auto fl_step_sound_time = 0x1D8; // Name: m_flStepSoundTime Offset: 0x1D8
					constexpr auto fl_fall_velocity = 0x1DC; // Name: m_flFallVelocity Offset: 0x1DC
					constexpr auto b_in_crouch = 0x1E0; // Name: m_bInCrouch Offset: 0x1E0
					constexpr auto n_crouch_state = 0x1E4; // Name: m_nCrouchState Offset: 0x1E4
					constexpr auto fl_crouch_transition_start_time = 0x1E8; // Name: m_flCrouchTransitionStartTime Offset: 0x1E8
					constexpr auto b_ducked = 0x1EC; // Name: m_bDucked Offset: 0x1EC
					constexpr auto b_ducking = 0x1ED; // Name: m_bDucking Offset: 0x1ED
					constexpr auto b_in_duck_jump = 0x1EE; // Name: m_bInDuckJump Offset: 0x1EE
					constexpr auto ground_normal = 0x1F0; // Name: m_groundNormal Offset: 0x1F0
					constexpr auto fl_surface_friction = 0x1FC; // Name: m_flSurfaceFriction Offset: 0x1FC
					constexpr auto surface_props = 0x200; // Name: m_surfaceProps Offset: 0x200
					constexpr auto n_stepside = 0x210; // Name: m_nStepside Offset: 0x210
				} // namespace CPlayer_MovementServices_Humanoid

				namespace C_Item_Healthshot {
				} // namespace C_Item_Healthshot

				namespace C_WeaponAug {
				} // namespace C_WeaponAug

				namespace CFlashlightEffect {
					constexpr auto b_is_on = 0x10; // Name: m_bIsOn Offset: 0x10
					constexpr auto b_muzzle_flash_enabled = 0x20; // Name: m_bMuzzleFlashEnabled Offset: 0x20
					constexpr auto fl_muzzle_flash_brightness = 0x24; // Name: m_flMuzzleFlashBrightness Offset: 0x24
					constexpr auto quat_muzzle_flash_orientation = 0x30; // Name: m_quatMuzzleFlashOrientation Offset: 0x30
					constexpr auto vec_muzzle_flash_origin = 0x40; // Name: m_vecMuzzleFlashOrigin Offset: 0x40
					constexpr auto fl_fov = 0x4C; // Name: m_flFov Offset: 0x4C
					constexpr auto fl_far_z = 0x50; // Name: m_flFarZ Offset: 0x50
					constexpr auto fl_linear_atten = 0x54; // Name: m_flLinearAtten Offset: 0x54
					constexpr auto b_casts_shadows = 0x58; // Name: m_bCastsShadows Offset: 0x58
					constexpr auto fl_current_pull_back_dist = 0x5C; // Name: m_flCurrentPullBackDist Offset: 0x5C
					constexpr auto flashlight_texture = 0x60; // Name: m_FlashlightTexture Offset: 0x60
					constexpr auto muzzle_flash_texture = 0x68; // Name: m_MuzzleFlashTexture Offset: 0x68
					constexpr auto texture_name = 0x70; // Name: m_textureName Offset: 0x70
				} // namespace CFlashlightEffect

				namespace CEnvSoundscapeProxyAlias_snd_soundscape_proxy {
				} // namespace CEnvSoundscapeProxyAlias_snd_soundscape_proxy

				namespace C_ColorCorrectionVolume {
					constexpr auto last_enter_weight = 0xD30; // Name: m_LastEnterWeight Offset: 0xD30
					constexpr auto last_enter_time = 0xD34; // Name: m_LastEnterTime Offset: 0xD34
					constexpr auto last_exit_weight = 0xD38; // Name: m_LastExitWeight Offset: 0xD38
					constexpr auto last_exit_time = 0xD3C; // Name: m_LastExitTime Offset: 0xD3C
					constexpr auto b_enabled = 0xD40; // Name: m_bEnabled Offset: 0xD40
					constexpr auto max_weight = 0xD44; // Name: m_MaxWeight Offset: 0xD44
					constexpr auto fade_duration = 0xD48; // Name: m_FadeDuration Offset: 0xD48
					constexpr auto weight = 0xD4C; // Name: m_Weight Offset: 0xD4C
					constexpr auto lookup_filename = 0xD50; // Name: m_lookupFilename Offset: 0xD50
				} // namespace C_ColorCorrectionVolume

				namespace C_CSGO_TeamIntroTerroristPosition {
				} // namespace C_CSGO_TeamIntroTerroristPosition

				namespace C_PointClientUIWorldPanel {
					constexpr auto b_force_recreate_next_update = 0xD60; // Name: m_bForceRecreateNextUpdate Offset: 0xD60
					constexpr auto b_move_view_to_player_next_think = 0xD61; // Name: m_bMoveViewToPlayerNextThink Offset: 0xD61
					constexpr auto b_check_cssclasses = 0xD62; // Name: m_bCheckCSSClasses Offset: 0xD62
					constexpr auto anchor_delta_transform = 0xD70; // Name: m_anchorDeltaTransform Offset: 0xD70
					constexpr auto p_off_screen_indicator = 0xF08; // Name: m_pOffScreenIndicator Offset: 0xF08
					constexpr auto b_ignore_input = 0xF30; // Name: m_bIgnoreInput Offset: 0xF30
					constexpr auto b_lit = 0xF31; // Name: m_bLit Offset: 0xF31
					constexpr auto b_follow_player_across_teleport = 0xF32; // Name: m_bFollowPlayerAcrossTeleport Offset: 0xF32
					constexpr auto fl_width = 0xF34; // Name: m_flWidth Offset: 0xF34
					constexpr auto fl_height = 0xF38; // Name: m_flHeight Offset: 0xF38
					constexpr auto fl_dpi = 0xF3C; // Name: m_flDPI Offset: 0xF3C
					constexpr auto fl_interact_distance = 0xF40; // Name: m_flInteractDistance Offset: 0xF40
					constexpr auto fl_depth_offset = 0xF44; // Name: m_flDepthOffset Offset: 0xF44
					constexpr auto un_owner_context = 0xF48; // Name: m_unOwnerContext Offset: 0xF48
					constexpr auto un_horizontal_align = 0xF4C; // Name: m_unHorizontalAlign Offset: 0xF4C
					constexpr auto un_vertical_align = 0xF50; // Name: m_unVerticalAlign Offset: 0xF50
					constexpr auto un_orientation = 0xF54; // Name: m_unOrientation Offset: 0xF54
					constexpr auto b_allow_interaction_from_all_scene_worlds = 0xF58; // Name: m_bAllowInteractionFromAllSceneWorlds Offset: 0xF58
					constexpr auto vec_cssclasses = 0xF60; // Name: m_vecCSSClasses Offset: 0xF60
					constexpr auto b_opaque = 0xF78; // Name: m_bOpaque Offset: 0xF78
					constexpr auto b_no_depth = 0xF79; // Name: m_bNoDepth Offset: 0xF79
					constexpr auto b_render_backface = 0xF7A; // Name: m_bRenderBackface Offset: 0xF7A
					constexpr auto b_use_off_screen_indicator = 0xF7B; // Name: m_bUseOffScreenIndicator Offset: 0xF7B
					constexpr auto b_exclude_from_save_games = 0xF7C; // Name: m_bExcludeFromSaveGames Offset: 0xF7C
					constexpr auto b_grabbable = 0xF7D; // Name: m_bGrabbable Offset: 0xF7D
					constexpr auto b_only_render_to_texture = 0xF7E; // Name: m_bOnlyRenderToTexture Offset: 0xF7E
					constexpr auto b_disable_mip_gen = 0xF7F; // Name: m_bDisableMipGen Offset: 0xF7F
					constexpr auto n_explicit_image_layout = 0xF80; // Name: m_nExplicitImageLayout Offset: 0xF80
				} // namespace C_PointClientUIWorldPanel

				namespace C_EconItemView {
					constexpr auto b_inventory_image_rgba_requested = 0x60; // Name: m_bInventoryImageRgbaRequested Offset: 0x60
					constexpr auto b_inventory_image_tried_cache = 0x61; // Name: m_bInventoryImageTriedCache Offset: 0x61
					constexpr auto n_inventory_image_rgba_width = 0x80; // Name: m_nInventoryImageRgbaWidth Offset: 0x80
					constexpr auto n_inventory_image_rgba_height = 0x84; // Name: m_nInventoryImageRgbaHeight Offset: 0x84
					constexpr auto sz_current_load_cached_file_name = 0x88; // Name: m_szCurrentLoadCachedFileName Offset: 0x88
					constexpr auto b_restore_custom_material_after_precache = 0x1B8; // Name: m_bRestoreCustomMaterialAfterPrecache Offset: 0x1B8
					constexpr auto i_item_definition_index = 0x1BA; // Name: m_iItemDefinitionIndex Offset: 0x1BA
					constexpr auto i_entity_quality = 0x1BC; // Name: m_iEntityQuality Offset: 0x1BC
					constexpr auto i_entity_level = 0x1C0; // Name: m_iEntityLevel Offset: 0x1C0
					constexpr auto i_item_id = 0x1C8; // Name: m_iItemID Offset: 0x1C8
					constexpr auto i_item_idhigh = 0x1D0; // Name: m_iItemIDHigh Offset: 0x1D0
					constexpr auto i_item_idlow = 0x1D4; // Name: m_iItemIDLow Offset: 0x1D4
					constexpr auto i_account_id = 0x1D8; // Name: m_iAccountID Offset: 0x1D8
					constexpr auto i_inventory_position = 0x1DC; // Name: m_iInventoryPosition Offset: 0x1DC
					constexpr auto b_initialized = 0x1E8; // Name: m_bInitialized Offset: 0x1E8
					constexpr auto b_disallow_soc = 0x1E9; // Name: m_bDisallowSOC Offset: 0x1E9
					constexpr auto b_is_store_item = 0x1EA; // Name: m_bIsStoreItem Offset: 0x1EA
					constexpr auto b_is_trade_item = 0x1EB; // Name: m_bIsTradeItem Offset: 0x1EB
					constexpr auto i_entity_quantity = 0x1EC; // Name: m_iEntityQuantity Offset: 0x1EC
					constexpr auto i_rarity_override = 0x1F0; // Name: m_iRarityOverride Offset: 0x1F0
					constexpr auto i_quality_override = 0x1F4; // Name: m_iQualityOverride Offset: 0x1F4
					constexpr auto i_origin_override = 0x1F8; // Name: m_iOriginOverride Offset: 0x1F8
					constexpr auto un_client_flags = 0x1FC; // Name: m_unClientFlags Offset: 0x1FC
					constexpr auto un_override_style = 0x1FD; // Name: m_unOverrideStyle Offset: 0x1FD
					constexpr auto attribute_list = 0x210; // Name: m_AttributeList Offset: 0x210
					constexpr auto networked_dynamic_attributes = 0x270; // Name: m_NetworkedDynamicAttributes Offset: 0x270
					constexpr auto sz_custom_name = 0x2D0; // Name: m_szCustomName Offset: 0x2D0
					constexpr auto sz_custom_name_override = 0x371; // Name: m_szCustomNameOverride Offset: 0x371
					constexpr auto b_initialized_tags = 0x440; // Name: m_bInitializedTags Offset: 0x440
				} // namespace C_EconItemView

				namespace C_CSMinimapBoundary {
				} // namespace C_CSMinimapBoundary

				namespace CPathSimpleAPI {
				} // namespace CPathSimpleAPI

				namespace CCSGameModeRules_Deathmatch {
					constexpr auto fl_dmbonus_start_time = 0x30; // Name: m_flDMBonusStartTime Offset: 0x30
					constexpr auto fl_dmbonus_time_length = 0x34; // Name: m_flDMBonusTimeLength Offset: 0x34
					constexpr auto s_dmbonus_weapon = 0x38; // Name: m_sDMBonusWeapon Offset: 0x38
				} // namespace CCSGameModeRules_Deathmatch

				namespace C_CSGO_EndOfMatchCharacterPosition {
				} // namespace C_CSGO_EndOfMatchCharacterPosition

				namespace C_EnvWindShared {
					constexpr auto fl_start_time = 0x8; // Name: m_flStartTime Offset: 0x8
					constexpr auto i_wind_seed = 0xC; // Name: m_iWindSeed Offset: 0xC
					constexpr auto i_min_wind = 0x10; // Name: m_iMinWind Offset: 0x10
					constexpr auto i_max_wind = 0x12; // Name: m_iMaxWind Offset: 0x12
					constexpr auto wind_radius = 0x14; // Name: m_windRadius Offset: 0x14
					constexpr auto i_min_gust = 0x18; // Name: m_iMinGust Offset: 0x18
					constexpr auto i_max_gust = 0x1A; // Name: m_iMaxGust Offset: 0x1A
					constexpr auto fl_min_gust_delay = 0x1C; // Name: m_flMinGustDelay Offset: 0x1C
					constexpr auto fl_max_gust_delay = 0x20; // Name: m_flMaxGustDelay Offset: 0x20
					constexpr auto fl_gust_duration = 0x24; // Name: m_flGustDuration Offset: 0x24
					constexpr auto i_gust_dir_change = 0x28; // Name: m_iGustDirChange Offset: 0x28
					constexpr auto location = 0x2C; // Name: m_location Offset: 0x2C
					constexpr auto isz_gust_sound = 0x38; // Name: m_iszGustSound Offset: 0x38
					constexpr auto i_wind_dir = 0x3C; // Name: m_iWindDir Offset: 0x3C
					constexpr auto fl_wind_speed = 0x40; // Name: m_flWindSpeed Offset: 0x40
					constexpr auto current_wind_vector = 0x44; // Name: m_currentWindVector Offset: 0x44
					constexpr auto current_sway_vector = 0x50; // Name: m_CurrentSwayVector Offset: 0x50
					constexpr auto prev_sway_vector = 0x5C; // Name: m_PrevSwayVector Offset: 0x5C
					constexpr auto i_initial_wind_dir = 0x68; // Name: m_iInitialWindDir Offset: 0x68
					constexpr auto fl_initial_wind_speed = 0x6C; // Name: m_flInitialWindSpeed Offset: 0x6C
					constexpr auto fl_variation_time = 0x70; // Name: m_flVariationTime Offset: 0x70
					constexpr auto fl_sway_time = 0x74; // Name: m_flSwayTime Offset: 0x74
					constexpr auto fl_sim_time = 0x78; // Name: m_flSimTime Offset: 0x78
					constexpr auto fl_switch_time = 0x7C; // Name: m_flSwitchTime Offset: 0x7C
					constexpr auto fl_ave_wind_speed = 0x80; // Name: m_flAveWindSpeed Offset: 0x80
					constexpr auto b_gusting = 0x84; // Name: m_bGusting Offset: 0x84
					constexpr auto fl_wind_angle_variation = 0x88; // Name: m_flWindAngleVariation Offset: 0x88
					constexpr auto fl_wind_speed_variation = 0x8C; // Name: m_flWindSpeedVariation Offset: 0x8C
					constexpr auto h_ent_owner = 0x90; // Name: m_hEntOwner Offset: 0x90
				} // namespace C_EnvWindShared

				namespace CAnimEventListener {
				} // namespace CAnimEventListener

				namespace EngineLoopState_t {
					constexpr auto n_plat_window_width = 0x18; // Name: m_nPlatWindowWidth Offset: 0x18
					constexpr auto n_plat_window_height = 0x1C; // Name: m_nPlatWindowHeight Offset: 0x1C
					constexpr auto n_render_width = 0x20; // Name: m_nRenderWidth Offset: 0x20
					constexpr auto n_render_height = 0x24; // Name: m_nRenderHeight Offset: 0x24
				} // namespace EngineLoopState_t

				namespace C_Knife {
					constexpr auto b_first_attack = 0x1B20; // Name: m_bFirstAttack Offset: 0x1B20
				} // namespace C_Knife

				namespace CMapInfo {
					constexpr auto i_buying_status = 0x568; // Name: m_iBuyingStatus Offset: 0x568
					constexpr auto fl_bomb_radius = 0x56C; // Name: m_flBombRadius Offset: 0x56C
					constexpr auto i_pet_population = 0x570; // Name: m_iPetPopulation Offset: 0x570
					constexpr auto b_use_normal_spawns_for_dm = 0x574; // Name: m_bUseNormalSpawnsForDM Offset: 0x574
					constexpr auto b_disable_auto_generated_dmspawns = 0x575; // Name: m_bDisableAutoGeneratedDMSpawns Offset: 0x575
					constexpr auto fl_bot_max_vision_distance = 0x578; // Name: m_flBotMaxVisionDistance Offset: 0x578
					constexpr auto i_hostage_count = 0x57C; // Name: m_iHostageCount Offset: 0x57C
					constexpr auto b_fade_player_visibility_far_z = 0x580; // Name: m_bFadePlayerVisibilityFarZ Offset: 0x580
					constexpr auto b_rain_trace_to_sky_enabled = 0x581; // Name: m_bRainTraceToSkyEnabled Offset: 0x581
				} // namespace CMapInfo

				namespace C_SoundOpvarSetAABBEntity {
				} // namespace C_SoundOpvarSetAABBEntity

				namespace C_GameRules {
					constexpr auto _m_p_chain_entity = 0x8; // Name: __m_pChainEntity Offset: 0x8
					constexpr auto n_total_paused_ticks = 0x30; // Name: m_nTotalPausedTicks Offset: 0x30
					constexpr auto n_pause_start_tick = 0x34; // Name: m_nPauseStartTick Offset: 0x34
					constexpr auto b_game_paused = 0x38; // Name: m_bGamePaused Offset: 0x38
				} // namespace C_GameRules

				namespace EventClientPreSimulate_t {
				} // namespace EventClientPreSimulate_t

				namespace C_PropDoorRotating {
				} // namespace C_PropDoorRotating

				namespace CCitadelSoundOpvarSetOBB {
					constexpr auto isz_stack_name = 0x580; // Name: m_iszStackName Offset: 0x580
					constexpr auto isz_operator_name = 0x588; // Name: m_iszOperatorName Offset: 0x588
					constexpr auto isz_opvar_name = 0x590; // Name: m_iszOpvarName Offset: 0x590
					constexpr auto v_distance_inner_mins = 0x598; // Name: m_vDistanceInnerMins Offset: 0x598
					constexpr auto v_distance_inner_maxs = 0x5A4; // Name: m_vDistanceInnerMaxs Offset: 0x5A4
					constexpr auto v_distance_outer_mins = 0x5B0; // Name: m_vDistanceOuterMins Offset: 0x5B0
					constexpr auto v_distance_outer_maxs = 0x5BC; // Name: m_vDistanceOuterMaxs Offset: 0x5BC
					constexpr auto n_aabbdirection = 0x5C8; // Name: m_nAABBDirection Offset: 0x5C8
				} // namespace CCitadelSoundOpvarSetOBB

				namespace C_Team {
					constexpr auto a_player_controllers = 0x568; // Name: m_aPlayerControllers Offset: 0x568
					constexpr auto a_players = 0x580; // Name: m_aPlayers Offset: 0x580
					constexpr auto i_score = 0x598; // Name: m_iScore Offset: 0x598
					constexpr auto sz_teamname = 0x59C; // Name: m_szTeamname Offset: 0x59C
				} // namespace C_Team

				namespace C_CSGO_EndOfMatchLineupStart {
				} // namespace C_CSGO_EndOfMatchLineupStart

				namespace C_SoundAreaEntityOrientedBox {
					constexpr auto v_min = 0x590; // Name: m_vMin Offset: 0x590
					constexpr auto v_max = 0x59C; // Name: m_vMax Offset: 0x59C
				} // namespace C_SoundAreaEntityOrientedBox

				namespace C_FuncMoveLinear {
				} // namespace C_FuncMoveLinear

				namespace C_TextureBasedAnimatable {
					constexpr auto b_loop = 0xD28; // Name: m_bLoop Offset: 0xD28
					constexpr auto fl_fps = 0xD2C; // Name: m_flFPS Offset: 0xD2C
					constexpr auto h_position_keys = 0xD30; // Name: m_hPositionKeys Offset: 0xD30
					constexpr auto h_rotation_keys = 0xD38; // Name: m_hRotationKeys Offset: 0xD38
					constexpr auto v_animation_bounds_min = 0xD40; // Name: m_vAnimationBoundsMin Offset: 0xD40
					constexpr auto v_animation_bounds_max = 0xD4C; // Name: m_vAnimationBoundsMax Offset: 0xD4C
					constexpr auto fl_start_time = 0xD58; // Name: m_flStartTime Offset: 0xD58
					constexpr auto fl_start_frame = 0xD5C; // Name: m_flStartFrame Offset: 0xD5C
				} // namespace C_TextureBasedAnimatable

				namespace C_DynamicPropAlias_prop_dynamic_override {
				} // namespace C_DynamicPropAlias_prop_dynamic_override

				namespace C_SoundOpvarSetPointEntity {
				} // namespace C_SoundOpvarSetPointEntity

				namespace C_CSPlayerPawnBase {
					constexpr auto p_ping_services = 0x1360; // Name: m_pPingServices Offset: 0x1360
					constexpr auto p_view_model_services = 0x1368; // Name: m_pViewModelServices Offset: 0x1368
					constexpr auto f_rendering_clip_plane = 0x1370; // Name: m_fRenderingClipPlane Offset: 0x1370
					constexpr auto n_last_clip_plane_setup_frame = 0x1380; // Name: m_nLastClipPlaneSetupFrame Offset: 0x1380
					constexpr auto vec_last_clip_camera_pos = 0x1384; // Name: m_vecLastClipCameraPos Offset: 0x1384
					constexpr auto vec_last_clip_camera_forward = 0x1390; // Name: m_vecLastClipCameraForward Offset: 0x1390
					constexpr auto b_clip_hit_static_world = 0x139C; // Name: m_bClipHitStaticWorld Offset: 0x139C
					constexpr auto b_cached_plane_is_valid = 0x139D; // Name: m_bCachedPlaneIsValid Offset: 0x139D
					constexpr auto p_clipping_weapon = 0x13A0; // Name: m_pClippingWeapon Offset: 0x13A0
					constexpr auto previous_player_state = 0x13A8; // Name: m_previousPlayerState Offset: 0x13A8
					constexpr auto i_player_state = 0x13AC; // Name: m_iPlayerState Offset: 0x13AC
					constexpr auto b_is_rescuing = 0x13B0; // Name: m_bIsRescuing Offset: 0x13B0
					constexpr auto f_immune_to_gun_game_damage_time = 0x13B4; // Name: m_fImmuneToGunGameDamageTime Offset: 0x13B4
					constexpr auto f_immune_to_gun_game_damage_time_last = 0x13B8; // Name: m_fImmuneToGunGameDamageTimeLast Offset: 0x13B8
					constexpr auto b_gun_game_immunity = 0x13BC; // Name: m_bGunGameImmunity Offset: 0x13BC
					constexpr auto b_has_moved_since_spawn = 0x13BD; // Name: m_bHasMovedSinceSpawn Offset: 0x13BD
					constexpr auto f_molotov_use_time = 0x13C0; // Name: m_fMolotovUseTime Offset: 0x13C0
					constexpr auto f_molotov_damage_time = 0x13C4; // Name: m_fMolotovDamageTime Offset: 0x13C4
					constexpr auto i_throw_grenade_counter = 0x13C8; // Name: m_iThrowGrenadeCounter Offset: 0x13C8
					constexpr auto fl_last_spawn_time_index = 0x13CC; // Name: m_flLastSpawnTimeIndex Offset: 0x13CC
					constexpr auto i_progress_bar_duration = 0x13D0; // Name: m_iProgressBarDuration Offset: 0x13D0
					constexpr auto fl_progress_bar_start_time = 0x13D4; // Name: m_flProgressBarStartTime Offset: 0x13D4
					constexpr auto vec_intro_start_eye_position = 0x13D8; // Name: m_vecIntroStartEyePosition Offset: 0x13D8
					constexpr auto vec_intro_start_player_forward = 0x13E4; // Name: m_vecIntroStartPlayerForward Offset: 0x13E4
					constexpr auto fl_client_death_time = 0x13F0; // Name: m_flClientDeathTime Offset: 0x13F0
					constexpr auto b_screen_tear_frame_captured = 0x13F4; // Name: m_bScreenTearFrameCaptured Offset: 0x13F4
					constexpr auto fl_flash_bang_time = 0x13F8; // Name: m_flFlashBangTime Offset: 0x13F8
					constexpr auto fl_flash_screenshot_alpha = 0x13FC; // Name: m_flFlashScreenshotAlpha Offset: 0x13FC
					constexpr auto fl_flash_overlay_alpha = 0x1400; // Name: m_flFlashOverlayAlpha Offset: 0x1400
					constexpr auto b_flash_build_up = 0x1404; // Name: m_bFlashBuildUp Offset: 0x1404
					constexpr auto b_flash_dsp_has_been_cleared = 0x1405; // Name: m_bFlashDspHasBeenCleared Offset: 0x1405
					constexpr auto b_flash_screenshot_has_been_grabbed = 0x1406; // Name: m_bFlashScreenshotHasBeenGrabbed Offset: 0x1406
					constexpr auto fl_flash_max_alpha = 0x1408; // Name: m_flFlashMaxAlpha Offset: 0x1408
					constexpr auto fl_flash_duration = 0x140C; // Name: m_flFlashDuration Offset: 0x140C
					constexpr auto i_health_bar_render_mask_index = 0x1410; // Name: m_iHealthBarRenderMaskIndex Offset: 0x1410
					constexpr auto fl_health_fade_value = 0x1414; // Name: m_flHealthFadeValue Offset: 0x1414
					constexpr auto fl_health_fade_alpha = 0x1418; // Name: m_flHealthFadeAlpha Offset: 0x1418
					constexpr auto fl_death_ccweight = 0x1428; // Name: m_flDeathCCWeight Offset: 0x1428
					constexpr auto fl_prev_round_end_time = 0x142C; // Name: m_flPrevRoundEndTime Offset: 0x142C
					constexpr auto fl_prev_match_end_time = 0x1430; // Name: m_flPrevMatchEndTime Offset: 0x1430
					constexpr auto ang_eye_angles = 0x1438; // Name: m_angEyeAngles Offset: 0x1438
					constexpr auto f_next_think_push_away = 0x1450; // Name: m_fNextThinkPushAway Offset: 0x1450
					constexpr auto b_should_autobuy_dmweapons = 0x1454; // Name: m_bShouldAutobuyDMWeapons Offset: 0x1454
					constexpr auto b_should_autobuy_now = 0x1455; // Name: m_bShouldAutobuyNow Offset: 0x1455
					constexpr auto i_ident_index = 0x1458; // Name: m_iIDEntIndex Offset: 0x1458
					constexpr auto delay_target_idtimer = 0x1460; // Name: m_delayTargetIDTimer Offset: 0x1460
					constexpr auto i_target_item_ent_idx = 0x1478; // Name: m_iTargetItemEntIdx Offset: 0x1478
					constexpr auto i_old_ident_index = 0x147C; // Name: m_iOldIDEntIndex Offset: 0x147C
					constexpr auto hold_target_idtimer = 0x1480; // Name: m_holdTargetIDTimer Offset: 0x1480
					constexpr auto fl_current_music_start_time = 0x149C; // Name: m_flCurrentMusicStartTime Offset: 0x149C
					constexpr auto fl_music_round_start_time = 0x14A0; // Name: m_flMusicRoundStartTime Offset: 0x14A0
					constexpr auto b_defer_start_music_on_warmup = 0x14A4; // Name: m_bDeferStartMusicOnWarmup Offset: 0x14A4
					constexpr auto cycle_latch = 0x14A8; // Name: m_cycleLatch Offset: 0x14A8
					constexpr auto server_intended_cycle = 0x14AC; // Name: m_serverIntendedCycle Offset: 0x14AC
					constexpr auto fl_last_smoke_overlay_alpha = 0x14B0; // Name: m_flLastSmokeOverlayAlpha Offset: 0x14B0
					constexpr auto fl_last_smoke_age = 0x14B4; // Name: m_flLastSmokeAge Offset: 0x14B4
					constexpr auto v_last_smoke_overlay_color = 0x14B8; // Name: m_vLastSmokeOverlayColor Offset: 0x14B8
					constexpr auto n_player_smoked_fx = 0x14C4; // Name: m_nPlayerSmokedFx Offset: 0x14C4
					constexpr auto n_player_inferno_body_fx = 0x14C8; // Name: m_nPlayerInfernoBodyFx Offset: 0x14C8
					constexpr auto n_player_inferno_foot_fx = 0x14CC; // Name: m_nPlayerInfernoFootFx Offset: 0x14CC
					constexpr auto fl_next_mag_drop_time = 0x14D0; // Name: m_flNextMagDropTime Offset: 0x14D0
					constexpr auto n_last_mag_drop_attachment_index = 0x14D4; // Name: m_nLastMagDropAttachmentIndex Offset: 0x14D4
					constexpr auto vec_last_alive_local_velocity = 0x14D8; // Name: m_vecLastAliveLocalVelocity Offset: 0x14D8
					constexpr auto b_guardian_should_spray_custom_xmark = 0x1500; // Name: m_bGuardianShouldSprayCustomXMark Offset: 0x1500
					constexpr auto h_original_controller = 0x1508; // Name: m_hOriginalController Offset: 0x1508
				} // namespace C_CSPlayerPawnBase

				namespace C_LightOrthoEntity {
				} // namespace C_LightOrthoEntity

				namespace C_CSGO_PreviewPlayer {
					constexpr auto animgraph = 0x3A40; // Name: m_animgraph Offset: 0x3A40
					constexpr auto animgraph_character_mode_string = 0x3A48; // Name: m_animgraphCharacterModeString Offset: 0x3A48
					constexpr auto fl_initial_model_scale = 0x3A50; // Name: m_flInitialModelScale Offset: 0x3A50
				} // namespace C_CSGO_PreviewPlayer

				namespace CCSGameModeRules_ArmsRace {
					constexpr auto weapon_sequence = 0x30; // Name: m_WeaponSequence Offset: 0x30
				} // namespace CCSGameModeRules_ArmsRace

				namespace CCSPlayer_WaterServices {
					constexpr auto fl_water_jump_time = 0x40; // Name: m_flWaterJumpTime Offset: 0x40
					constexpr auto vec_water_jump_vel = 0x44; // Name: m_vecWaterJumpVel Offset: 0x44
					constexpr auto fl_swim_sound_time = 0x50; // Name: m_flSwimSoundTime Offset: 0x50
				} // namespace CCSPlayer_WaterServices

				namespace CSkyboxReference {
					constexpr auto world_group_id = 0x568; // Name: m_worldGroupId Offset: 0x568
					constexpr auto h_sky_camera = 0x56C; // Name: m_hSkyCamera Offset: 0x56C
				} // namespace CSkyboxReference

				namespace C_TonemapController2Alias_env_tonemap_controller2 {
				} // namespace C_TonemapController2Alias_env_tonemap_controller2

				namespace VPhysicsCollisionAttribute_t {
					constexpr auto n_interacts_as = 0x8; // Name: m_nInteractsAs Offset: 0x8
					constexpr auto n_interacts_with = 0x10; // Name: m_nInteractsWith Offset: 0x10
					constexpr auto n_interacts_exclude = 0x18; // Name: m_nInteractsExclude Offset: 0x18
					constexpr auto n_entity_id = 0x20; // Name: m_nEntityId Offset: 0x20
					constexpr auto n_owner_id = 0x24; // Name: m_nOwnerId Offset: 0x24
					constexpr auto n_hierarchy_id = 0x28; // Name: m_nHierarchyId Offset: 0x28
					constexpr auto n_collision_group = 0x2A; // Name: m_nCollisionGroup Offset: 0x2A
					constexpr auto n_collision_function_mask = 0x2B; // Name: m_nCollisionFunctionMask Offset: 0x2B
				} // namespace VPhysicsCollisionAttribute_t

				namespace CProjectedTextureBase {
					constexpr auto h_target_entity = 0xC; // Name: m_hTargetEntity Offset: 0xC
					constexpr auto b_state = 0x10; // Name: m_bState Offset: 0x10
					constexpr auto b_always_update = 0x11; // Name: m_bAlwaysUpdate Offset: 0x11
					constexpr auto fl_light_fov = 0x14; // Name: m_flLightFOV Offset: 0x14
					constexpr auto b_enable_shadows = 0x18; // Name: m_bEnableShadows Offset: 0x18
					constexpr auto b_simple_projection = 0x19; // Name: m_bSimpleProjection Offset: 0x19
					constexpr auto b_light_only_target = 0x1A; // Name: m_bLightOnlyTarget Offset: 0x1A
					constexpr auto b_light_world = 0x1B; // Name: m_bLightWorld Offset: 0x1B
					constexpr auto b_camera_space = 0x1C; // Name: m_bCameraSpace Offset: 0x1C
					constexpr auto fl_brightness_scale = 0x20; // Name: m_flBrightnessScale Offset: 0x20
					constexpr auto light_color = 0x24; // Name: m_LightColor Offset: 0x24
					constexpr auto fl_intensity = 0x28; // Name: m_flIntensity Offset: 0x28
					constexpr auto fl_linear_attenuation = 0x2C; // Name: m_flLinearAttenuation Offset: 0x2C
					constexpr auto fl_quadratic_attenuation = 0x30; // Name: m_flQuadraticAttenuation Offset: 0x30
					constexpr auto b_volumetric = 0x34; // Name: m_bVolumetric Offset: 0x34
					constexpr auto fl_volumetric_intensity = 0x38; // Name: m_flVolumetricIntensity Offset: 0x38
					constexpr auto fl_noise_strength = 0x3C; // Name: m_flNoiseStrength Offset: 0x3C
					constexpr auto fl_flashlight_time = 0x40; // Name: m_flFlashlightTime Offset: 0x40
					constexpr auto n_num_planes = 0x44; // Name: m_nNumPlanes Offset: 0x44
					constexpr auto fl_plane_offset = 0x48; // Name: m_flPlaneOffset Offset: 0x48
					constexpr auto fl_color_transition_time = 0x4C; // Name: m_flColorTransitionTime Offset: 0x4C
					constexpr auto fl_ambient = 0x50; // Name: m_flAmbient Offset: 0x50
					constexpr auto spotlight_texture_name = 0x54; // Name: m_SpotlightTextureName Offset: 0x54
					constexpr auto n_spotlight_texture_frame = 0x254; // Name: m_nSpotlightTextureFrame Offset: 0x254
					constexpr auto n_shadow_quality = 0x258; // Name: m_nShadowQuality Offset: 0x258
					constexpr auto fl_near_z = 0x25C; // Name: m_flNearZ Offset: 0x25C
					constexpr auto fl_far_z = 0x260; // Name: m_flFarZ Offset: 0x260
					constexpr auto fl_projection_size = 0x264; // Name: m_flProjectionSize Offset: 0x264
					constexpr auto fl_rotation = 0x268; // Name: m_flRotation Offset: 0x268
					constexpr auto b_flip_horizontal = 0x26C; // Name: m_bFlipHorizontal Offset: 0x26C
				} // namespace CProjectedTextureBase

				namespace CCSPlayerController_InventoryServices {
					constexpr auto un_music_id = 0x40; // Name: m_unMusicID Offset: 0x40
					constexpr auto rank = 0x44; // Name: m_rank Offset: 0x44
					constexpr auto n_persona_data_public_level = 0x5C; // Name: m_nPersonaDataPublicLevel Offset: 0x5C
					constexpr auto n_persona_data_public_commends_leader = 0x60; // Name: m_nPersonaDataPublicCommendsLeader Offset: 0x60
					constexpr auto n_persona_data_public_commends_teacher = 0x64; // Name: m_nPersonaDataPublicCommendsTeacher Offset: 0x64
					constexpr auto n_persona_data_public_commends_friendly = 0x68; // Name: m_nPersonaDataPublicCommendsFriendly Offset: 0x68
					constexpr auto n_persona_data_xp_trail_level = 0x6C; // Name: m_nPersonaDataXpTrailLevel Offset: 0x6C
					constexpr auto vec_server_authoritative_weapon_slots = 0x70; // Name: m_vecServerAuthoritativeWeaponSlots Offset: 0x70
				} // namespace CCSPlayerController_InventoryServices

				namespace CRenderComponent {
					constexpr auto _m_p_chain_entity = 0x10; // Name: __m_pChainEntity Offset: 0x10
					constexpr auto b_is_rendering_with_view_models = 0x50; // Name: m_bIsRenderingWithViewModels Offset: 0x50
					constexpr auto n_splitscreen_flags = 0x54; // Name: m_nSplitscreenFlags Offset: 0x54
					constexpr auto b_enable_rendering = 0x60; // Name: m_bEnableRendering Offset: 0x60
					constexpr auto b_interpolation_ready_to_draw = 0xB0; // Name: m_bInterpolationReadyToDraw Offset: 0xB0
				} // namespace CRenderComponent

				namespace CGlowProperty {
					constexpr auto f_glow_color = 0x8; // Name: m_fGlowColor Offset: 0x8
					constexpr auto i_glow_type = 0x30; // Name: m_iGlowType Offset: 0x30
					constexpr auto i_glow_team = 0x34; // Name: m_iGlowTeam Offset: 0x34
					constexpr auto n_glow_range = 0x38; // Name: m_nGlowRange Offset: 0x38
					constexpr auto n_glow_range_min = 0x3C; // Name: m_nGlowRangeMin Offset: 0x3C
					constexpr auto glow_color_override = 0x40; // Name: m_glowColorOverride Offset: 0x40
					constexpr auto b_flashing = 0x44; // Name: m_bFlashing Offset: 0x44
					constexpr auto fl_glow_time = 0x48; // Name: m_flGlowTime Offset: 0x48
					constexpr auto fl_glow_start_time = 0x4C; // Name: m_flGlowStartTime Offset: 0x4C
					constexpr auto b_eligible_for_screen_highlight = 0x50; // Name: m_bEligibleForScreenHighlight Offset: 0x50
					constexpr auto b_glowing = 0x51; // Name: m_bGlowing Offset: 0x51
				} // namespace CGlowProperty

				namespace C_PathParticleRopeAlias_path_particle_rope_clientside {
				} // namespace C_PathParticleRopeAlias_path_particle_rope_clientside

				namespace CDestructiblePartsSystemData_PartData {
					constexpr auto s_name = 0x0; // Name: m_sName Offset: 0x0
					constexpr auto s_breakable_piece_name = 0x8; // Name: m_sBreakablePieceName Offset: 0x8
					constexpr auto s_body_group_name = 0x10; // Name: m_sBodyGroupName Offset: 0x10
					constexpr auto n_body_group_value = 0x18; // Name: m_nBodyGroupValue Offset: 0x18
					constexpr auto s_anim_graph_param_name__part_destroyed = 0x20; // Name: m_sAnimGraphParamName_PartDestroyed Offset: 0x20
					constexpr auto s_anim_graph_param_name__part_normalized_health = 0x28; // Name: m_sAnimGraphParamName_PartNormalizedHealth Offset: 0x28
					constexpr auto n_health = 0x30; // Name: m_nHealth Offset: 0x30
					constexpr auto n_damage_passthrough_type = 0x40; // Name: m_nDamagePassthroughType Offset: 0x40
					constexpr auto b_kill_npcon_destruction = 0x44; // Name: m_bKillNPCOnDestruction Offset: 0x44
					constexpr auto s_custom_death_handshake = 0x48; // Name: m_sCustomDeathHandshake Offset: 0x48
				} // namespace CDestructiblePartsSystemData_PartData

				namespace CPlayer_UseServices {
				} // namespace CPlayer_UseServices

				namespace CCollisionProperty {
					constexpr auto collision_attribute = 0x10; // Name: m_collisionAttribute Offset: 0x10
					constexpr auto vec_mins = 0x40; // Name: m_vecMins Offset: 0x40
					constexpr auto vec_maxs = 0x4C; // Name: m_vecMaxs Offset: 0x4C
					constexpr auto us_solid_flags = 0x5A; // Name: m_usSolidFlags Offset: 0x5A
					constexpr auto n_solid_type = 0x5B; // Name: m_nSolidType Offset: 0x5B
					constexpr auto trigger_bloat = 0x5C; // Name: m_triggerBloat Offset: 0x5C
					constexpr auto n_surround_type = 0x5D; // Name: m_nSurroundType Offset: 0x5D
					constexpr auto collision_group = 0x5E; // Name: m_CollisionGroup Offset: 0x5E
					constexpr auto n_enable_physics = 0x5F; // Name: m_nEnablePhysics Offset: 0x5F
					constexpr auto fl_bounding_radius = 0x60; // Name: m_flBoundingRadius Offset: 0x60
					constexpr auto vec_specified_surrounding_mins = 0x64; // Name: m_vecSpecifiedSurroundingMins Offset: 0x64
					constexpr auto vec_specified_surrounding_maxs = 0x70; // Name: m_vecSpecifiedSurroundingMaxs Offset: 0x70
					constexpr auto vec_surrounding_maxs = 0x7C; // Name: m_vecSurroundingMaxs Offset: 0x7C
					constexpr auto vec_surrounding_mins = 0x88; // Name: m_vecSurroundingMins Offset: 0x88
					constexpr auto v_capsule_center1 = 0x94; // Name: m_vCapsuleCenter1 Offset: 0x94
					constexpr auto v_capsule_center2 = 0xA0; // Name: m_vCapsuleCenter2 Offset: 0xA0
					constexpr auto fl_capsule_radius = 0xAC; // Name: m_flCapsuleRadius Offset: 0xAC
				} // namespace CCollisionProperty

				namespace C_CSGOViewModel {
					constexpr auto b_should_ignore_offset_and_accuracy = 0x1021; // Name: m_bShouldIgnoreOffsetAndAccuracy Offset: 0x1021
					constexpr auto n_last_known_associated_weapon_ent_index = 0x1024; // Name: m_nLastKnownAssociatedWeaponEntIndex Offset: 0x1024
					constexpr auto b_need_to_queue_high_res_composite = 0x1028; // Name: m_bNeedToQueueHighResComposite Offset: 0x1028
					constexpr auto v_lowered_weapon_offset = 0x1078; // Name: m_vLoweredWeaponOffset Offset: 0x1078
				} // namespace C_CSGOViewModel

				namespace C_WeaponSSG08 {
				} // namespace C_WeaponSSG08

				namespace C_EnvLightProbeVolume {
					constexpr auto entity_h_light_probe_texture = 0x1548; // Name: m_Entity_hLightProbeTexture Offset: 0x1548
					constexpr auto entity_h_light_probe_direct_light_indices_texture = 0x1550; // Name: m_Entity_hLightProbeDirectLightIndicesTexture Offset: 0x1550
					constexpr auto entity_h_light_probe_direct_light_scalars_texture = 0x1558; // Name: m_Entity_hLightProbeDirectLightScalarsTexture Offset: 0x1558
					constexpr auto entity_h_light_probe_direct_light_shadows_texture = 0x1560; // Name: m_Entity_hLightProbeDirectLightShadowsTexture Offset: 0x1560
					constexpr auto entity_v_box_mins = 0x1568; // Name: m_Entity_vBoxMins Offset: 0x1568
					constexpr auto entity_v_box_maxs = 0x1574; // Name: m_Entity_vBoxMaxs Offset: 0x1574
					constexpr auto entity_b_moveable = 0x1580; // Name: m_Entity_bMoveable Offset: 0x1580
					constexpr auto entity_n_handshake = 0x1584; // Name: m_Entity_nHandshake Offset: 0x1584
					constexpr auto entity_n_priority = 0x1588; // Name: m_Entity_nPriority Offset: 0x1588
					constexpr auto entity_b_start_disabled = 0x158C; // Name: m_Entity_bStartDisabled Offset: 0x158C
					constexpr auto entity_n_light_probe_size_x = 0x1590; // Name: m_Entity_nLightProbeSizeX Offset: 0x1590
					constexpr auto entity_n_light_probe_size_y = 0x1594; // Name: m_Entity_nLightProbeSizeY Offset: 0x1594
					constexpr auto entity_n_light_probe_size_z = 0x1598; // Name: m_Entity_nLightProbeSizeZ Offset: 0x1598
					constexpr auto entity_n_light_probe_atlas_x = 0x159C; // Name: m_Entity_nLightProbeAtlasX Offset: 0x159C
					constexpr auto entity_n_light_probe_atlas_y = 0x15A0; // Name: m_Entity_nLightProbeAtlasY Offset: 0x15A0
					constexpr auto entity_n_light_probe_atlas_z = 0x15A4; // Name: m_Entity_nLightProbeAtlasZ Offset: 0x15A4
					constexpr auto entity_b_enabled = 0x15B1; // Name: m_Entity_bEnabled Offset: 0x15B1
				} // namespace C_EnvLightProbeVolume

				namespace C_PointClientUIWorldTextPanel {
					constexpr auto message_text = 0xF90; // Name: m_messageText Offset: 0xF90
				} // namespace C_PointClientUIWorldTextPanel

				namespace C_ViewmodelAttachmentModel {
					constexpr auto b_should_front_face_cull_left_handed = 0xF90; // Name: m_bShouldFrontFaceCullLeftHanded Offset: 0xF90
					constexpr auto b_created_left_handed = 0xF91; // Name: m_bCreatedLeftHanded Offset: 0xF91
				} // namespace C_ViewmodelAttachmentModel

				namespace CCSPointScriptExtensions_player_controller {
				} // namespace CCSPointScriptExtensions_player_controller

				namespace C_CSGO_TeamSelectCamera {
				} // namespace C_CSGO_TeamSelectCamera

				namespace C_Flashbang {
				} // namespace C_Flashbang

				namespace PhysicsRagdollPose_t {
					constexpr auto transforms = 0x8; // Name: m_Transforms Offset: 0x8
					constexpr auto h_owner = 0x20; // Name: m_hOwner Offset: 0x20
				} // namespace PhysicsRagdollPose_t

				namespace CBumpMine {
				} // namespace CBumpMine

				namespace CBasePlayerVData {
					constexpr auto s_model_name = 0x28; // Name: m_sModelName Offset: 0x28
					constexpr auto fl_head_damage_multiplier = 0x108; // Name: m_flHeadDamageMultiplier Offset: 0x108
					constexpr auto fl_chest_damage_multiplier = 0x118; // Name: m_flChestDamageMultiplier Offset: 0x118
					constexpr auto fl_stomach_damage_multiplier = 0x128; // Name: m_flStomachDamageMultiplier Offset: 0x128
					constexpr auto fl_arm_damage_multiplier = 0x138; // Name: m_flArmDamageMultiplier Offset: 0x138
					constexpr auto fl_leg_damage_multiplier = 0x148; // Name: m_flLegDamageMultiplier Offset: 0x148
					constexpr auto fl_hold_breath_time = 0x158; // Name: m_flHoldBreathTime Offset: 0x158
					constexpr auto fl_drowning_damage_interval = 0x15C; // Name: m_flDrowningDamageInterval Offset: 0x15C
					constexpr auto n_drowning_damage_initial = 0x160; // Name: m_nDrowningDamageInitial Offset: 0x160
					constexpr auto n_drowning_damage_max = 0x164; // Name: m_nDrowningDamageMax Offset: 0x164
					constexpr auto n_water_speed = 0x168; // Name: m_nWaterSpeed Offset: 0x168
					constexpr auto fl_use_range = 0x16C; // Name: m_flUseRange Offset: 0x16C
					constexpr auto fl_use_angle_tolerance = 0x170; // Name: m_flUseAngleTolerance Offset: 0x170
					constexpr auto fl_crouch_time = 0x174; // Name: m_flCrouchTime Offset: 0x174
				} // namespace CBasePlayerVData

				namespace CSPerRoundStats_t {
					constexpr auto i_kills = 0x30; // Name: m_iKills Offset: 0x30
					constexpr auto i_deaths = 0x34; // Name: m_iDeaths Offset: 0x34
					constexpr auto i_assists = 0x38; // Name: m_iAssists Offset: 0x38
					constexpr auto i_damage = 0x3C; // Name: m_iDamage Offset: 0x3C
					constexpr auto i_equipment_value = 0x40; // Name: m_iEquipmentValue Offset: 0x40
					constexpr auto i_money_saved = 0x44; // Name: m_iMoneySaved Offset: 0x44
					constexpr auto i_kill_reward = 0x48; // Name: m_iKillReward Offset: 0x48
					constexpr auto i_live_time = 0x4C; // Name: m_iLiveTime Offset: 0x4C
					constexpr auto i_head_shot_kills = 0x50; // Name: m_iHeadShotKills Offset: 0x50
					constexpr auto i_objective = 0x54; // Name: m_iObjective Offset: 0x54
					constexpr auto i_cash_earned = 0x58; // Name: m_iCashEarned Offset: 0x58
					constexpr auto i_utility_damage = 0x5C; // Name: m_iUtilityDamage Offset: 0x5C
					constexpr auto i_enemies_flashed = 0x60; // Name: m_iEnemiesFlashed Offset: 0x60
				} // namespace CSPerRoundStats_t

				namespace C_BaseDoor {
					constexpr auto b_is_usable = 0xD28; // Name: m_bIsUsable Offset: 0xD28
				} // namespace C_BaseDoor

				namespace CRagdollManager {
					constexpr auto i_current_max_ragdoll_count = 0x568; // Name: m_iCurrentMaxRagdollCount Offset: 0x568
				} // namespace CRagdollManager

				namespace IHasAttributes {
				} // namespace IHasAttributes

				namespace CPointOffScreenIndicatorUi {
					constexpr auto b_been_enabled = 0xF90; // Name: m_bBeenEnabled Offset: 0xF90
					constexpr auto b_hide = 0xF91; // Name: m_bHide Offset: 0xF91
					constexpr auto fl_seen_target_time = 0xF94; // Name: m_flSeenTargetTime Offset: 0xF94
					constexpr auto p_target_panel = 0xF98; // Name: m_pTargetPanel Offset: 0xF98
				} // namespace CPointOffScreenIndicatorUi

				namespace C_TeamRoundTimer {
					constexpr auto b_timer_paused = 0x568; // Name: m_bTimerPaused Offset: 0x568
					constexpr auto fl_time_remaining = 0x56C; // Name: m_flTimeRemaining Offset: 0x56C
					constexpr auto fl_timer_end_time = 0x570; // Name: m_flTimerEndTime Offset: 0x570
					constexpr auto b_is_disabled = 0x574; // Name: m_bIsDisabled Offset: 0x574
					constexpr auto b_show_in_hud = 0x575; // Name: m_bShowInHUD Offset: 0x575
					constexpr auto n_timer_length = 0x578; // Name: m_nTimerLength Offset: 0x578
					constexpr auto n_timer_initial_length = 0x57C; // Name: m_nTimerInitialLength Offset: 0x57C
					constexpr auto n_timer_max_length = 0x580; // Name: m_nTimerMaxLength Offset: 0x580
					constexpr auto b_auto_countdown = 0x584; // Name: m_bAutoCountdown Offset: 0x584
					constexpr auto n_setup_time_length = 0x588; // Name: m_nSetupTimeLength Offset: 0x588
					constexpr auto n_state = 0x58C; // Name: m_nState Offset: 0x58C
					constexpr auto b_start_paused = 0x590; // Name: m_bStartPaused Offset: 0x590
					constexpr auto b_in_capture_watch_state = 0x591; // Name: m_bInCaptureWatchState Offset: 0x591
					constexpr auto fl_total_time = 0x594; // Name: m_flTotalTime Offset: 0x594
					constexpr auto b_stop_watch_timer = 0x598; // Name: m_bStopWatchTimer Offset: 0x598
					constexpr auto b_fire_finished = 0x599; // Name: m_bFireFinished Offset: 0x599
					constexpr auto b_fire5_min_remain = 0x59A; // Name: m_bFire5MinRemain Offset: 0x59A
					constexpr auto b_fire4_min_remain = 0x59B; // Name: m_bFire4MinRemain Offset: 0x59B
					constexpr auto b_fire3_min_remain = 0x59C; // Name: m_bFire3MinRemain Offset: 0x59C
					constexpr auto b_fire2_min_remain = 0x59D; // Name: m_bFire2MinRemain Offset: 0x59D
					constexpr auto b_fire1_min_remain = 0x59E; // Name: m_bFire1MinRemain Offset: 0x59E
					constexpr auto b_fire30_sec_remain = 0x59F; // Name: m_bFire30SecRemain Offset: 0x59F
					constexpr auto b_fire10_sec_remain = 0x5A0; // Name: m_bFire10SecRemain Offset: 0x5A0
					constexpr auto b_fire5_sec_remain = 0x5A1; // Name: m_bFire5SecRemain Offset: 0x5A1
					constexpr auto b_fire4_sec_remain = 0x5A2; // Name: m_bFire4SecRemain Offset: 0x5A2
					constexpr auto b_fire3_sec_remain = 0x5A3; // Name: m_bFire3SecRemain Offset: 0x5A3
					constexpr auto b_fire2_sec_remain = 0x5A4; // Name: m_bFire2SecRemain Offset: 0x5A4
					constexpr auto b_fire1_sec_remain = 0x5A5; // Name: m_bFire1SecRemain Offset: 0x5A5
					constexpr auto n_old_timer_length = 0x5A8; // Name: m_nOldTimerLength Offset: 0x5A8
					constexpr auto n_old_timer_state = 0x5AC; // Name: m_nOldTimerState Offset: 0x5AC
				} // namespace C_TeamRoundTimer

				namespace C_WeaponGlock {
				} // namespace C_WeaponGlock

				namespace CSharedGapTypeQueryRegistration {
				} // namespace CSharedGapTypeQueryRegistration

				namespace WeaponPurchaseCount_t {
					constexpr auto n_item_def_index = 0x30; // Name: m_nItemDefIndex Offset: 0x30
					constexpr auto n_count = 0x32; // Name: m_nCount Offset: 0x32
				} // namespace WeaponPurchaseCount_t

				namespace C_SmokeGrenade {
				} // namespace C_SmokeGrenade

				namespace CFireOverlay {
					constexpr auto p_owner = 0xD0; // Name: m_pOwner Offset: 0xD0
					constexpr auto v_base_colors = 0xD8; // Name: m_vBaseColors Offset: 0xD8
					constexpr auto fl_scale = 0x108; // Name: m_flScale Offset: 0x108
					constexpr auto n_guid = 0x10C; // Name: m_nGUID Offset: 0x10C
				} // namespace CFireOverlay

				namespace EventClientPostOutput_t {
					constexpr auto loop_state = 0x0; // Name: m_LoopState Offset: 0x0
					constexpr auto fl_render_time = 0x28; // Name: m_flRenderTime Offset: 0x28
					constexpr auto fl_render_frame_time = 0x30; // Name: m_flRenderFrameTime Offset: 0x30
					constexpr auto fl_render_frame_time_unbounded = 0x34; // Name: m_flRenderFrameTimeUnbounded Offset: 0x34
					constexpr auto b_render_only = 0x38; // Name: m_bRenderOnly Offset: 0x38
				} // namespace EventClientPostOutput_t

				namespace C_WeaponGalilAR {
				} // namespace C_WeaponGalilAR

				namespace C_WorldModelGloves {
				} // namespace C_WorldModelGloves

				namespace CPathSimple {
					constexpr auto path_string = 0x5C0; // Name: m_pathString Offset: 0x5C0
				} // namespace CPathSimple

				namespace CCSObserver_UseServices {
				} // namespace CCSObserver_UseServices

				namespace CInfoWorldLayer {
					constexpr auto p_output_on_entities_spawned = 0x568; // Name: m_pOutputOnEntitiesSpawned Offset: 0x568
					constexpr auto world_name = 0x590; // Name: m_worldName Offset: 0x590
					constexpr auto layer_name = 0x598; // Name: m_layerName Offset: 0x598
					constexpr auto b_world_layer_visible = 0x5A0; // Name: m_bWorldLayerVisible Offset: 0x5A0
					constexpr auto b_entities_spawned = 0x5A1; // Name: m_bEntitiesSpawned Offset: 0x5A1
					constexpr auto b_create_as_child_spawn_group = 0x5A2; // Name: m_bCreateAsChildSpawnGroup Offset: 0x5A2
					constexpr auto h_layer_spawn_group = 0x5A4; // Name: m_hLayerSpawnGroup Offset: 0x5A4
					constexpr auto b_world_layer_actually_visible = 0x5A8; // Name: m_bWorldLayerActuallyVisible Offset: 0x5A8
				} // namespace CInfoWorldLayer

				namespace C_CSObserverPawn {
					constexpr auto h_detect_parent_change = 0x1510; // Name: m_hDetectParentChange Offset: 0x1510
				} // namespace C_CSObserverPawn

				namespace CCSPlayerBase_CameraServices {
					constexpr auto i_fov = 0x210; // Name: m_iFOV Offset: 0x210
					constexpr auto i_fovstart = 0x214; // Name: m_iFOVStart Offset: 0x214
					constexpr auto fl_fovtime = 0x218; // Name: m_flFOVTime Offset: 0x218
					constexpr auto fl_fovrate = 0x21C; // Name: m_flFOVRate Offset: 0x21C
					constexpr auto h_zoom_owner = 0x220; // Name: m_hZoomOwner Offset: 0x220
					constexpr auto fl_last_shot_fov = 0x224; // Name: m_flLastShotFOV Offset: 0x224
				} // namespace CCSPlayerBase_CameraServices

				namespace CCSPointScriptExtensions_entity {
				} // namespace CCSPointScriptExtensions_entity

				namespace CBodyComponentBaseModelEntity {
				} // namespace CBodyComponentBaseModelEntity

				namespace CTripWireFire {
				} // namespace CTripWireFire

				namespace C_CSWeaponBaseGun {
					constexpr auto zoom_level = 0x1B20; // Name: m_zoomLevel Offset: 0x1B20
					constexpr auto i_burst_shots_remaining = 0x1B24; // Name: m_iBurstShotsRemaining Offset: 0x1B24
					constexpr auto i_silencer_bodygroup = 0x1B28; // Name: m_iSilencerBodygroup Offset: 0x1B28
					constexpr auto silenced_model_index = 0x1B38; // Name: m_silencedModelIndex Offset: 0x1B38
					constexpr auto in_precache = 0x1B3C; // Name: m_inPrecache Offset: 0x1B3C
					constexpr auto b_needs_bolt_action = 0x1B3D; // Name: m_bNeedsBoltAction Offset: 0x1B3D
				} // namespace C_CSWeaponBaseGun

				namespace CEnvSoundscapeProxy {
					constexpr auto main_soundscape_name = 0x608; // Name: m_MainSoundscapeName Offset: 0x608
				} // namespace CEnvSoundscapeProxy

				namespace C_SkyCamera {
					constexpr auto skybox_data = 0x568; // Name: m_skyboxData Offset: 0x568
					constexpr auto skybox_slot_token = 0x5F8; // Name: m_skyboxSlotToken Offset: 0x5F8
					constexpr auto b_use_angles = 0x5FC; // Name: m_bUseAngles Offset: 0x5FC
					constexpr auto p_next = 0x600; // Name: m_pNext Offset: 0x600
				} // namespace C_SkyCamera

				namespace C_World {
				} // namespace C_World

				namespace CEnvSoundscape {
					constexpr auto on_play = 0x568; // Name: m_OnPlay Offset: 0x568
					constexpr auto fl_radius = 0x590; // Name: m_flRadius Offset: 0x590
					constexpr auto sound_event_name = 0x598; // Name: m_soundEventName Offset: 0x598
					constexpr auto b_override_with_event = 0x5A0; // Name: m_bOverrideWithEvent Offset: 0x5A0
					constexpr auto soundscape_index = 0x5A4; // Name: m_soundscapeIndex Offset: 0x5A4
					constexpr auto soundscape_entity_list_id = 0x5A8; // Name: m_soundscapeEntityListId Offset: 0x5A8
					constexpr auto position_names = 0x5B0; // Name: m_positionNames Offset: 0x5B0
					constexpr auto h_proxy_soundscape = 0x5F0; // Name: m_hProxySoundscape Offset: 0x5F0
					constexpr auto b_disabled = 0x5F4; // Name: m_bDisabled Offset: 0x5F4
					constexpr auto soundscape_name = 0x5F8; // Name: m_soundscapeName Offset: 0x5F8
					constexpr auto sound_event_hash = 0x600; // Name: m_soundEventHash Offset: 0x600
				} // namespace CEnvSoundscape

				namespace C_EntityDissolve {
					constexpr auto fl_start_time = 0xD30; // Name: m_flStartTime Offset: 0xD30
					constexpr auto fl_fade_in_start = 0xD34; // Name: m_flFadeInStart Offset: 0xD34
					constexpr auto fl_fade_in_length = 0xD38; // Name: m_flFadeInLength Offset: 0xD38
					constexpr auto fl_fade_out_model_start = 0xD3C; // Name: m_flFadeOutModelStart Offset: 0xD3C
					constexpr auto fl_fade_out_model_length = 0xD40; // Name: m_flFadeOutModelLength Offset: 0xD40
					constexpr auto fl_fade_out_start = 0xD44; // Name: m_flFadeOutStart Offset: 0xD44
					constexpr auto fl_fade_out_length = 0xD48; // Name: m_flFadeOutLength Offset: 0xD48
					constexpr auto fl_next_spark_time = 0xD4C; // Name: m_flNextSparkTime Offset: 0xD4C
					constexpr auto n_dissolve_type = 0xD50; // Name: m_nDissolveType Offset: 0xD50
					constexpr auto v_dissolver_origin = 0xD54; // Name: m_vDissolverOrigin Offset: 0xD54
					constexpr auto n_magnitude = 0xD60; // Name: m_nMagnitude Offset: 0xD60
					constexpr auto b_core_explode = 0xD64; // Name: m_bCoreExplode Offset: 0xD64
					constexpr auto b_linked_to_server_ent = 0xD65; // Name: m_bLinkedToServerEnt Offset: 0xD65
				} // namespace C_EntityDissolve

				namespace C_fogplayerparams_t {
					constexpr auto h_ctrl = 0x8; // Name: m_hCtrl Offset: 0x8
					constexpr auto fl_transition_time = 0xC; // Name: m_flTransitionTime Offset: 0xC
					constexpr auto old_color = 0x10; // Name: m_OldColor Offset: 0x10
					constexpr auto fl_old_start = 0x14; // Name: m_flOldStart Offset: 0x14
					constexpr auto fl_old_end = 0x18; // Name: m_flOldEnd Offset: 0x18
					constexpr auto fl_old_max_density = 0x1C; // Name: m_flOldMaxDensity Offset: 0x1C
					constexpr auto fl_old_hdrcolor_scale = 0x20; // Name: m_flOldHDRColorScale Offset: 0x20
					constexpr auto fl_old_far_z = 0x24; // Name: m_flOldFarZ Offset: 0x24
					constexpr auto new_color = 0x28; // Name: m_NewColor Offset: 0x28
					constexpr auto fl_new_start = 0x2C; // Name: m_flNewStart Offset: 0x2C
					constexpr auto fl_new_end = 0x30; // Name: m_flNewEnd Offset: 0x30
					constexpr auto fl_new_max_density = 0x34; // Name: m_flNewMaxDensity Offset: 0x34
					constexpr auto fl_new_hdrcolor_scale = 0x38; // Name: m_flNewHDRColorScale Offset: 0x38
					constexpr auto fl_new_far_z = 0x3C; // Name: m_flNewFarZ Offset: 0x3C
				} // namespace C_fogplayerparams_t

				namespace C_CSGO_TeamIntroCounterTerroristPosition {
				} // namespace C_CSGO_TeamIntroCounterTerroristPosition

				namespace CDestructiblePartsSystemData_HitGroupInfoAndPartData {
					constexpr auto s_name = 0x0; // Name: m_sName Offset: 0x0
					constexpr auto destructible_parts_data = 0x8; // Name: m_DestructiblePartsData Offset: 0x8
					constexpr auto b_disable_hit_group_when_destroyed = 0x20; // Name: m_bDisableHitGroupWhenDestroyed Offset: 0x20
				} // namespace CDestructiblePartsSystemData_HitGroupInfoAndPartData

				namespace C_PostProcessingVolume {
					constexpr auto h_post_settings = 0xD40; // Name: m_hPostSettings Offset: 0xD40
					constexpr auto fl_fade_duration = 0xD48; // Name: m_flFadeDuration Offset: 0xD48
					constexpr auto fl_min_log_exposure = 0xD4C; // Name: m_flMinLogExposure Offset: 0xD4C
					constexpr auto fl_max_log_exposure = 0xD50; // Name: m_flMaxLogExposure Offset: 0xD50
					constexpr auto fl_min_exposure = 0xD54; // Name: m_flMinExposure Offset: 0xD54
					constexpr auto fl_max_exposure = 0xD58; // Name: m_flMaxExposure Offset: 0xD58
					constexpr auto fl_exposure_compensation = 0xD5C; // Name: m_flExposureCompensation Offset: 0xD5C
					constexpr auto fl_exposure_fade_speed_up = 0xD60; // Name: m_flExposureFadeSpeedUp Offset: 0xD60
					constexpr auto fl_exposure_fade_speed_down = 0xD64; // Name: m_flExposureFadeSpeedDown Offset: 0xD64
					constexpr auto fl_tonemap_evsmoothing_range = 0xD68; // Name: m_flTonemapEVSmoothingRange Offset: 0xD68
					constexpr auto b_master = 0xD6C; // Name: m_bMaster Offset: 0xD6C
					constexpr auto b_exposure_control = 0xD6D; // Name: m_bExposureControl Offset: 0xD6D
					constexpr auto fl_rate = 0xD70; // Name: m_flRate Offset: 0xD70
					constexpr auto fl_tonemap_percent_target = 0xD74; // Name: m_flTonemapPercentTarget Offset: 0xD74
					constexpr auto fl_tonemap_percent_bright_pixels = 0xD78; // Name: m_flTonemapPercentBrightPixels Offset: 0xD78
					constexpr auto fl_tonemap_min_avg_lum = 0xD7C; // Name: m_flTonemapMinAvgLum Offset: 0xD7C
				} // namespace C_PostProcessingVolume

				namespace CCSPlayer_PingServices {
					constexpr auto h_player_ping = 0x40; // Name: m_hPlayerPing Offset: 0x40
				} // namespace CCSPlayer_PingServices

				namespace CPlayer_FlashlightServices {
				} // namespace CPlayer_FlashlightServices

				namespace CServerOnlyModelEntity {
				} // namespace CServerOnlyModelEntity

				namespace C_AttributeContainer {
					constexpr auto item = 0x50; // Name: m_Item Offset: 0x50
					constexpr auto i_external_item_provider_registered_token = 0x498; // Name: m_iExternalItemProviderRegisteredToken Offset: 0x498
					constexpr auto ull_registered_as_item_id = 0x4A0; // Name: m_ullRegisteredAsItemID Offset: 0x4A0
				} // namespace C_AttributeContainer

				namespace C_FuncRotating {
				} // namespace C_FuncRotating

				namespace C_CSGO_TeamSelectCounterTerroristPosition {
				} // namespace C_CSGO_TeamSelectCounterTerroristPosition

				namespace C_BaseFire {
					constexpr auto fl_scale = 0x568; // Name: m_flScale Offset: 0x568
					constexpr auto fl_start_scale = 0x56C; // Name: m_flStartScale Offset: 0x56C
					constexpr auto fl_scale_time = 0x570; // Name: m_flScaleTime Offset: 0x570
					constexpr auto n_flags = 0x574; // Name: m_nFlags Offset: 0x574
				} // namespace C_BaseFire

				namespace CCSPointScriptExtensions_CCSWeaponBaseVData {
				} // namespace CCSPointScriptExtensions_CCSWeaponBaseVData

				namespace CPointTemplateAPI {
				} // namespace CPointTemplateAPI

				namespace C_ItemDogtags {
					constexpr auto owning_player = 0x1768; // Name: m_OwningPlayer Offset: 0x1768
					constexpr auto killing_player = 0x176C; // Name: m_KillingPlayer Offset: 0x176C
				} // namespace C_ItemDogtags

				namespace C_DecoyProjectile {
					constexpr auto n_decoy_shot_tick = 0x1208; // Name: m_nDecoyShotTick Offset: 0x1208
					constexpr auto n_client_last_known_decoy_shot_tick = 0x120C; // Name: m_nClientLastKnownDecoyShotTick Offset: 0x120C
					constexpr auto fl_time_particle_effect_spawn = 0x1230; // Name: m_flTimeParticleEffectSpawn Offset: 0x1230
				} // namespace C_DecoyProjectile

				namespace C_WaterBullet {
				} // namespace C_WaterBullet

				namespace CBaseAnimGraphController {
					constexpr auto anim_graph_networked_vars = 0x18; // Name: m_animGraphNetworkedVars Offset: 0x18
					constexpr auto b_sequence_finished = 0x14A8; // Name: m_bSequenceFinished Offset: 0x14A8
					constexpr auto fl_sound_sync_time = 0x14AC; // Name: m_flSoundSyncTime Offset: 0x14AC
					constexpr auto n_active_ikchain_mask = 0x14B0; // Name: m_nActiveIKChainMask Offset: 0x14B0
					constexpr auto h_sequence = 0x14B4; // Name: m_hSequence Offset: 0x14B4
					constexpr auto fl_seq_start_time = 0x14B8; // Name: m_flSeqStartTime Offset: 0x14B8
					constexpr auto fl_seq_fixed_cycle = 0x14BC; // Name: m_flSeqFixedCycle Offset: 0x14BC
					constexpr auto n_anim_loop_mode = 0x14C0; // Name: m_nAnimLoopMode Offset: 0x14C0
					constexpr auto fl_playback_rate = 0x14C4; // Name: m_flPlaybackRate Offset: 0x14C4
					constexpr auto n_notify_state = 0x14D0; // Name: m_nNotifyState Offset: 0x14D0
					constexpr auto b_networked_animation_inputs_changed = 0x14D2; // Name: m_bNetworkedAnimationInputsChanged Offset: 0x14D2
					constexpr auto b_networked_sequence_changed = 0x14D3; // Name: m_bNetworkedSequenceChanged Offset: 0x14D3
					constexpr auto b_last_update_skipped = 0x14D4; // Name: m_bLastUpdateSkipped Offset: 0x14D4
					constexpr auto fl_prev_anim_update_time = 0x14D8; // Name: m_flPrevAnimUpdateTime Offset: 0x14D8
				} // namespace CBaseAnimGraphController

				namespace CCSPointScriptEntity {
				} // namespace CCSPointScriptEntity

				namespace C_C4 {
					constexpr auto sz_screen_text = 0x1B20; // Name: m_szScreenText Offset: 0x1B20
					constexpr auto active_light_particle_index = 0x1B40; // Name: m_activeLightParticleIndex Offset: 0x1B40
					constexpr auto e_active_light_effect = 0x1B44; // Name: m_eActiveLightEffect Offset: 0x1B44
					constexpr auto b_started_arming = 0x1B48; // Name: m_bStartedArming Offset: 0x1B48
					constexpr auto f_armed_time = 0x1B4C; // Name: m_fArmedTime Offset: 0x1B4C
					constexpr auto b_bomb_placed_animation = 0x1B50; // Name: m_bBombPlacedAnimation Offset: 0x1B50
					constexpr auto b_is_planting_via_use = 0x1B51; // Name: m_bIsPlantingViaUse Offset: 0x1B51
					constexpr auto entity_spotted_state = 0x1B58; // Name: m_entitySpottedState Offset: 0x1B58
					constexpr auto n_spot_rules = 0x1B70; // Name: m_nSpotRules Offset: 0x1B70
					constexpr auto b_played_arming_beeps = 0x1B74; // Name: m_bPlayedArmingBeeps Offset: 0x1B74
					constexpr auto b_bomb_planted = 0x1B7B; // Name: m_bBombPlanted Offset: 0x1B7B
				} // namespace C_C4

				namespace CFiringModeFloat {
					constexpr auto fl_values = 0x0; // Name: m_flValues Offset: 0x0
				} // namespace CFiringModeFloat

				namespace CBaseAnimGraph {
					constexpr auto b_initially_populate_interp_history = 0xDA0; // Name: m_bInitiallyPopulateInterpHistory Offset: 0xDA0
					constexpr auto b_suppress_anim_event_sounds = 0xDA2; // Name: m_bSuppressAnimEventSounds Offset: 0xDA2
					constexpr auto b_anim_graph_update_enabled = 0xDB0; // Name: m_bAnimGraphUpdateEnabled Offset: 0xDB0
					constexpr auto fl_max_slope_distance = 0xDB4; // Name: m_flMaxSlopeDistance Offset: 0xDB4
					constexpr auto v_last_slope_check_pos = 0xDB8; // Name: m_vLastSlopeCheckPos Offset: 0xDB8
					constexpr auto b_animation_update_scheduled = 0xDC4; // Name: m_bAnimationUpdateScheduled Offset: 0xDC4
					constexpr auto vec_force = 0xDC8; // Name: m_vecForce Offset: 0xDC8
					constexpr auto n_force_bone = 0xDD4; // Name: m_nForceBone Offset: 0xDD4
					constexpr auto p_clientside_ragdoll = 0xDD8; // Name: m_pClientsideRagdoll Offset: 0xDD8
					constexpr auto b_built_ragdoll = 0xDE0; // Name: m_bBuiltRagdoll Offset: 0xDE0
					constexpr auto ragdoll_pose = 0xDF8; // Name: m_RagdollPose Offset: 0xDF8
					constexpr auto b_ragdoll_client_side = 0xE40; // Name: m_bRagdollClientSide Offset: 0xE40
					constexpr auto b_has_animated_material_attributes = 0xE50; // Name: m_bHasAnimatedMaterialAttributes Offset: 0xE50
				} // namespace CBaseAnimGraph

				namespace CompositeMaterialInputContainer_t {
					constexpr auto b_enabled = 0x0; // Name: m_bEnabled Offset: 0x0
					constexpr auto n_composite_material_input_container_source_type = 0x4; // Name: m_nCompositeMaterialInputContainerSourceType Offset: 0x4
					constexpr auto str_specific_container_material = 0x8; // Name: m_strSpecificContainerMaterial Offset: 0x8
					constexpr auto str_attr_name = 0xE8; // Name: m_strAttrName Offset: 0xE8
					constexpr auto str_alias = 0xF0; // Name: m_strAlias Offset: 0xF0
					constexpr auto vec_loose_variables = 0xF8; // Name: m_vecLooseVariables Offset: 0xF8
					constexpr auto str_attr_name_for_var = 0x110; // Name: m_strAttrNameForVar Offset: 0x110
					constexpr auto b_expose_externally = 0x118; // Name: m_bExposeExternally Offset: 0x118
				} // namespace CompositeMaterialInputContainer_t

				namespace CBreachChargeProjectile {
				} // namespace CBreachChargeProjectile

				namespace CRemapFloat {
					constexpr auto p_value = 0x0; // Name: m_pValue Offset: 0x0
				} // namespace CRemapFloat

				namespace C_PointEntity {
				} // namespace C_PointEntity

				namespace C_MultiplayRules {
				} // namespace C_MultiplayRules

				namespace CBasePlayerControllerAPI {
				} // namespace CBasePlayerControllerAPI

				namespace CCSPointScriptExtensions_player {
				} // namespace CCSPointScriptExtensions_player

				namespace C_PathParticleRope {
					constexpr auto b_start_active = 0x570; // Name: m_bStartActive Offset: 0x570
					constexpr auto fl_max_simulation_time = 0x574; // Name: m_flMaxSimulationTime Offset: 0x574
					constexpr auto isz_effect_name = 0x578; // Name: m_iszEffectName Offset: 0x578
					constexpr auto path_nodes__name = 0x580; // Name: m_PathNodes_Name Offset: 0x580
					constexpr auto fl_particle_spacing = 0x598; // Name: m_flParticleSpacing Offset: 0x598
					constexpr auto fl_slack = 0x59C; // Name: m_flSlack Offset: 0x59C
					constexpr auto fl_radius = 0x5A0; // Name: m_flRadius Offset: 0x5A0
					constexpr auto color_tint = 0x5A4; // Name: m_ColorTint Offset: 0x5A4
					constexpr auto n_effect_state = 0x5A8; // Name: m_nEffectState Offset: 0x5A8
					constexpr auto i_effect_index = 0x5B0; // Name: m_iEffectIndex Offset: 0x5B0
					constexpr auto path_nodes__position = 0x5B8; // Name: m_PathNodes_Position Offset: 0x5B8
					constexpr auto path_nodes__tangent_in = 0x5D0; // Name: m_PathNodes_TangentIn Offset: 0x5D0
					constexpr auto path_nodes__tangent_out = 0x5E8; // Name: m_PathNodes_TangentOut Offset: 0x5E8
					constexpr auto path_nodes__color = 0x600; // Name: m_PathNodes_Color Offset: 0x600
					constexpr auto path_nodes__pin_enabled = 0x618; // Name: m_PathNodes_PinEnabled Offset: 0x618
					constexpr auto path_nodes__radius_scale = 0x630; // Name: m_PathNodes_RadiusScale Offset: 0x630
				} // namespace C_PathParticleRope

				namespace C_WeaponP90 {
				} // namespace C_WeaponP90

				namespace CPulseCell_PlaySequence_CursorState_t {
					constexpr auto h_target = 0x0; // Name: m_hTarget Offset: 0x0
				} // namespace CPulseCell_PlaySequence_CursorState_t

				namespace CEnvSoundscapeAlias_snd_soundscape {
				} // namespace CEnvSoundscapeAlias_snd_soundscape

				namespace C_BasePlayerWeapon {
					constexpr auto n_next_primary_attack_tick = 0x1668; // Name: m_nNextPrimaryAttackTick Offset: 0x1668
					constexpr auto fl_next_primary_attack_tick_ratio = 0x166C; // Name: m_flNextPrimaryAttackTickRatio Offset: 0x166C
					constexpr auto n_next_secondary_attack_tick = 0x1670; // Name: m_nNextSecondaryAttackTick Offset: 0x1670
					constexpr auto fl_next_secondary_attack_tick_ratio = 0x1674; // Name: m_flNextSecondaryAttackTickRatio Offset: 0x1674
					constexpr auto i_clip1 = 0x1678; // Name: m_iClip1 Offset: 0x1678
					constexpr auto i_clip2 = 0x167C; // Name: m_iClip2 Offset: 0x167C
					constexpr auto p_reserve_ammo = 0x1680; // Name: m_pReserveAmmo Offset: 0x1680
				} // namespace C_BasePlayerWeapon

				namespace CBasePlayerWeaponVData {
					constexpr auto sz_world_model = 0x28; // Name: m_szWorldModel Offset: 0x28
					constexpr auto s_tools_only_owner_model_name = 0x108; // Name: m_sToolsOnlyOwnerModelName Offset: 0x108
					constexpr auto b_built_right_handed = 0x1E8; // Name: m_bBuiltRightHanded Offset: 0x1E8
					constexpr auto b_allow_flipping = 0x1E9; // Name: m_bAllowFlipping Offset: 0x1E9
					constexpr auto s_muzzle_attachment = 0x1F0; // Name: m_sMuzzleAttachment Offset: 0x1F0
					constexpr auto sz_muzzle_flash_particle = 0x210; // Name: m_szMuzzleFlashParticle Offset: 0x210
					constexpr auto b_linked_cooldowns = 0x2F0; // Name: m_bLinkedCooldowns Offset: 0x2F0
					constexpr auto i_flags = 0x2F1; // Name: m_iFlags Offset: 0x2F1
					constexpr auto n_primary_ammo_type = 0x2F2; // Name: m_nPrimaryAmmoType Offset: 0x2F2
					constexpr auto n_secondary_ammo_type = 0x2F3; // Name: m_nSecondaryAmmoType Offset: 0x2F3
					constexpr auto i_max_clip1 = 0x2F4; // Name: m_iMaxClip1 Offset: 0x2F4
					constexpr auto i_max_clip2 = 0x2F8; // Name: m_iMaxClip2 Offset: 0x2F8
					constexpr auto i_default_clip1 = 0x2FC; // Name: m_iDefaultClip1 Offset: 0x2FC
					constexpr auto i_default_clip2 = 0x300; // Name: m_iDefaultClip2 Offset: 0x300
					constexpr auto b_reserve_ammo_as_clips = 0x304; // Name: m_bReserveAmmoAsClips Offset: 0x304
					constexpr auto i_weight = 0x308; // Name: m_iWeight Offset: 0x308
					constexpr auto b_auto_switch_to = 0x30C; // Name: m_bAutoSwitchTo Offset: 0x30C
					constexpr auto b_auto_switch_from = 0x30D; // Name: m_bAutoSwitchFrom Offset: 0x30D
					constexpr auto i_rumble_effect = 0x310; // Name: m_iRumbleEffect Offset: 0x310
					constexpr auto i_slot = 0x314; // Name: m_iSlot Offset: 0x314
					constexpr auto i_position = 0x318; // Name: m_iPosition Offset: 0x318
					constexpr auto a_shoot_sounds = 0x320; // Name: m_aShootSounds Offset: 0x320
				} // namespace CBasePlayerWeaponVData

				namespace C_RagdollProp {
					constexpr auto rag_pos = 0xF90; // Name: m_ragPos Offset: 0xF90
					constexpr auto rag_angles = 0xFA8; // Name: m_ragAngles Offset: 0xFA8
					constexpr auto fl_blend_weight = 0xFC0; // Name: m_flBlendWeight Offset: 0xFC0
					constexpr auto h_ragdoll_source = 0xFC4; // Name: m_hRagdollSource Offset: 0xFC4
					constexpr auto i_eye_attachment = 0xFC8; // Name: m_iEyeAttachment Offset: 0xFC8
					constexpr auto fl_blend_weight_current = 0xFCC; // Name: m_flBlendWeightCurrent Offset: 0xFCC
					constexpr auto parent_physics_bone_indices = 0xFD0; // Name: m_parentPhysicsBoneIndices Offset: 0xFD0
					constexpr auto world_space_bone_computation_order = 0xFE8; // Name: m_worldSpaceBoneComputationOrder Offset: 0xFE8
				} // namespace C_RagdollProp

				namespace CTimeline {
					constexpr auto fl_values = 0x10; // Name: m_flValues Offset: 0x10
					constexpr auto n_value_counts = 0x110; // Name: m_nValueCounts Offset: 0x110
					constexpr auto n_bucket_count = 0x210; // Name: m_nBucketCount Offset: 0x210
					constexpr auto fl_interval = 0x214; // Name: m_flInterval Offset: 0x214
					constexpr auto fl_final_value = 0x218; // Name: m_flFinalValue Offset: 0x218
					constexpr auto n_compression_type = 0x21C; // Name: m_nCompressionType Offset: 0x21C
					constexpr auto b_stopped = 0x220; // Name: m_bStopped Offset: 0x220
				} // namespace CTimeline

				namespace C_EnvSky {
					constexpr auto h_sky_material = 0xD28; // Name: m_hSkyMaterial Offset: 0xD28
					constexpr auto h_sky_material_lighting_only = 0xD30; // Name: m_hSkyMaterialLightingOnly Offset: 0xD30
					constexpr auto b_start_disabled = 0xD38; // Name: m_bStartDisabled Offset: 0xD38
					constexpr auto v_tint_color = 0xD39; // Name: m_vTintColor Offset: 0xD39
					constexpr auto v_tint_color_lighting_only = 0xD3D; // Name: m_vTintColorLightingOnly Offset: 0xD3D
					constexpr auto fl_brightness_scale = 0xD44; // Name: m_flBrightnessScale Offset: 0xD44
					constexpr auto n_fog_type = 0xD48; // Name: m_nFogType Offset: 0xD48
					constexpr auto fl_fog_min_start = 0xD4C; // Name: m_flFogMinStart Offset: 0xD4C
					constexpr auto fl_fog_min_end = 0xD50; // Name: m_flFogMinEnd Offset: 0xD50
					constexpr auto fl_fog_max_start = 0xD54; // Name: m_flFogMaxStart Offset: 0xD54
					constexpr auto fl_fog_max_end = 0xD58; // Name: m_flFogMaxEnd Offset: 0xD58
					constexpr auto b_enabled = 0xD5C; // Name: m_bEnabled Offset: 0xD5C
				} // namespace C_EnvSky

				namespace C_WeaponAWP {
				} // namespace C_WeaponAWP

				namespace C_BasePlayerPawn {
					constexpr auto p_weapon_services = 0x11A8; // Name: m_pWeaponServices Offset: 0x11A8
					constexpr auto p_item_services = 0x11B0; // Name: m_pItemServices Offset: 0x11B0
					constexpr auto p_autoaim_services = 0x11B8; // Name: m_pAutoaimServices Offset: 0x11B8
					constexpr auto p_observer_services = 0x11C0; // Name: m_pObserverServices Offset: 0x11C0
					constexpr auto p_water_services = 0x11C8; // Name: m_pWaterServices Offset: 0x11C8
					constexpr auto p_use_services = 0x11D0; // Name: m_pUseServices Offset: 0x11D0
					constexpr auto p_flashlight_services = 0x11D8; // Name: m_pFlashlightServices Offset: 0x11D8
					constexpr auto p_camera_services = 0x11E0; // Name: m_pCameraServices Offset: 0x11E0
					constexpr auto p_movement_services = 0x11E8; // Name: m_pMovementServices Offset: 0x11E8
					constexpr auto server_view_angle_changes = 0x11F8; // Name: m_ServerViewAngleChanges Offset: 0x11F8
					constexpr auto n_highest_consumed_server_view_angle_change_index = 0x1248; // Name: m_nHighestConsumedServerViewAngleChangeIndex Offset: 0x1248
					constexpr auto v_angle = 0x124C; // Name: v_angle Offset: 0x124C
					constexpr auto v_angle_previous = 0x1258; // Name: v_anglePrevious Offset: 0x1258
					constexpr auto i_hide_hud = 0x1264; // Name: m_iHideHUD Offset: 0x1264
					constexpr auto skybox3d = 0x1268; // Name: m_skybox3d Offset: 0x1268
					constexpr auto fl_death_time = 0x12F8; // Name: m_flDeathTime Offset: 0x12F8
					constexpr auto vec_prediction_error = 0x12FC; // Name: m_vecPredictionError Offset: 0x12FC
					constexpr auto fl_prediction_error_time = 0x1308; // Name: m_flPredictionErrorTime Offset: 0x1308
					constexpr auto vec_last_camera_setup_local_origin = 0x130C; // Name: m_vecLastCameraSetupLocalOrigin Offset: 0x130C
					constexpr auto fl_last_camera_setup_time = 0x1318; // Name: m_flLastCameraSetupTime Offset: 0x1318
					constexpr auto fl_fovsensitivity_adjust = 0x131C; // Name: m_flFOVSensitivityAdjust Offset: 0x131C
					constexpr auto fl_mouse_sensitivity = 0x1320; // Name: m_flMouseSensitivity Offset: 0x1320
					constexpr auto v_old_origin = 0x1324; // Name: m_vOldOrigin Offset: 0x1324
					constexpr auto fl_old_simulation_time = 0x1330; // Name: m_flOldSimulationTime Offset: 0x1330
					constexpr auto n_last_executed_command_number = 0x1334; // Name: m_nLastExecutedCommandNumber Offset: 0x1334
					constexpr auto n_last_executed_command_tick = 0x1338; // Name: m_nLastExecutedCommandTick Offset: 0x1338
					constexpr auto h_controller = 0x133C; // Name: m_hController Offset: 0x133C
					constexpr auto b_is_swapping_to_predictable_controller = 0x1340; // Name: m_bIsSwappingToPredictableController Offset: 0x1340
				} // namespace C_BasePlayerPawn

				namespace ViewAngleServerChange_t {
					constexpr auto n_type = 0x30; // Name: nType Offset: 0x30
					constexpr auto q_angle = 0x34; // Name: qAngle Offset: 0x34
					constexpr auto n_index = 0x40; // Name: nIndex Offset: 0x40
				} // namespace ViewAngleServerChange_t

				namespace CAttributeManager {
					constexpr auto providers = 0x8; // Name: m_Providers Offset: 0x8
					constexpr auto i_reapply_provision_parity = 0x20; // Name: m_iReapplyProvisionParity Offset: 0x20
					constexpr auto h_outer = 0x24; // Name: m_hOuter Offset: 0x24
					constexpr auto b_prevent_loopback = 0x28; // Name: m_bPreventLoopback Offset: 0x28
					constexpr auto provider_type = 0x2C; // Name: m_ProviderType Offset: 0x2C
					constexpr auto cached_results = 0x30; // Name: m_CachedResults Offset: 0x30
				} // namespace CAttributeManager

				namespace WaterWheelFrictionScale_t {
					constexpr auto fl_fraction_of_wheel_submerged = 0x0; // Name: m_flFractionOfWheelSubmerged Offset: 0x0
					constexpr auto fl_friction_scale = 0x4; // Name: m_flFrictionScale Offset: 0x4
				} // namespace WaterWheelFrictionScale_t

				namespace CLogicalEntity {
				} // namespace CLogicalEntity

				namespace C_SoundEventOBBEntity {
					constexpr auto v_mins = 0x628; // Name: m_vMins Offset: 0x628
					constexpr auto v_maxs = 0x634; // Name: m_vMaxs Offset: 0x634
				} // namespace C_SoundEventOBBEntity

				namespace CAnimGraphNetworkedVariables {
					constexpr auto pred_net_bool_variables = 0x8; // Name: m_PredNetBoolVariables Offset: 0x8
					constexpr auto pred_net_byte_variables = 0x20; // Name: m_PredNetByteVariables Offset: 0x20
					constexpr auto pred_net_uint16_variables = 0x38; // Name: m_PredNetUInt16Variables Offset: 0x38
					constexpr auto pred_net_int_variables = 0x50; // Name: m_PredNetIntVariables Offset: 0x50
					constexpr auto pred_net_uint32_variables = 0x68; // Name: m_PredNetUInt32Variables Offset: 0x68
					constexpr auto pred_net_uint64_variables = 0x80; // Name: m_PredNetUInt64Variables Offset: 0x80
					constexpr auto pred_net_float_variables = 0x98; // Name: m_PredNetFloatVariables Offset: 0x98
					constexpr auto pred_net_vector_variables = 0xB0; // Name: m_PredNetVectorVariables Offset: 0xB0
					constexpr auto pred_net_quaternion_variables = 0xC8; // Name: m_PredNetQuaternionVariables Offset: 0xC8
					constexpr auto pred_net_global_symbol_variables = 0xE0; // Name: m_PredNetGlobalSymbolVariables Offset: 0xE0
					constexpr auto owner_only_pred_net_bool_variables = 0xF8; // Name: m_OwnerOnlyPredNetBoolVariables Offset: 0xF8
					constexpr auto owner_only_pred_net_byte_variables = 0x110; // Name: m_OwnerOnlyPredNetByteVariables Offset: 0x110
					constexpr auto owner_only_pred_net_uint16_variables = 0x128; // Name: m_OwnerOnlyPredNetUInt16Variables Offset: 0x128
					constexpr auto owner_only_pred_net_int_variables = 0x140; // Name: m_OwnerOnlyPredNetIntVariables Offset: 0x140
					constexpr auto owner_only_pred_net_uint32_variables = 0x158; // Name: m_OwnerOnlyPredNetUInt32Variables Offset: 0x158
					constexpr auto owner_only_pred_net_uint64_variables = 0x170; // Name: m_OwnerOnlyPredNetUInt64Variables Offset: 0x170
					constexpr auto owner_only_pred_net_float_variables = 0x188; // Name: m_OwnerOnlyPredNetFloatVariables Offset: 0x188
					constexpr auto owner_only_pred_net_vector_variables = 0x1A0; // Name: m_OwnerOnlyPredNetVectorVariables Offset: 0x1A0
					constexpr auto owner_only_pred_net_quaternion_variables = 0x1B8; // Name: m_OwnerOnlyPredNetQuaternionVariables Offset: 0x1B8
					constexpr auto owner_only_pred_net_global_symbol_variables = 0x1D0; // Name: m_OwnerOnlyPredNetGlobalSymbolVariables Offset: 0x1D0
					constexpr auto n_bool_variables_count = 0x1E8; // Name: m_nBoolVariablesCount Offset: 0x1E8
					constexpr auto n_owner_only_bool_variables_count = 0x1EC; // Name: m_nOwnerOnlyBoolVariablesCount Offset: 0x1EC
					constexpr auto n_random_seed_offset = 0x1F0; // Name: m_nRandomSeedOffset Offset: 0x1F0
					constexpr auto fl_last_teleport_time = 0x1F4; // Name: m_flLastTeleportTime Offset: 0x1F4
				} // namespace CAnimGraphNetworkedVariables

				namespace CResponseCriteriaSet {
					constexpr auto n_num_prefixed_contexts = 0x20; // Name: m_nNumPrefixedContexts Offset: 0x20
					constexpr auto b_override_on_append = 0x24; // Name: m_bOverrideOnAppend Offset: 0x24
				} // namespace CResponseCriteriaSet

				namespace C_TriggerBuoyancy {
					constexpr auto buoyancy_helper = 0xD30; // Name: m_BuoyancyHelper Offset: 0xD30
					constexpr auto fl_fluid_density = 0xDB0; // Name: m_flFluidDensity Offset: 0xDB0
				} // namespace C_TriggerBuoyancy

				namespace C_Hostage {
					constexpr auto entity_spotted_state = 0x11A8; // Name: m_entitySpottedState Offset: 0x11A8
					constexpr auto leader = 0x11C0; // Name: m_leader Offset: 0x11C0
					constexpr auto reuse_timer = 0x11C8; // Name: m_reuseTimer Offset: 0x11C8
					constexpr auto vel = 0x11E0; // Name: m_vel Offset: 0x11E0
					constexpr auto is_rescued = 0x11EC; // Name: m_isRescued Offset: 0x11EC
					constexpr auto jumped_this_frame = 0x11ED; // Name: m_jumpedThisFrame Offset: 0x11ED
					constexpr auto n_hostage_state = 0x11F0; // Name: m_nHostageState Offset: 0x11F0
					constexpr auto b_hands_have_been_cut = 0x11F4; // Name: m_bHandsHaveBeenCut Offset: 0x11F4
					constexpr auto h_hostage_grabber = 0x11F8; // Name: m_hHostageGrabber Offset: 0x11F8
					constexpr auto f_last_grab_time = 0x11FC; // Name: m_fLastGrabTime Offset: 0x11FC
					constexpr auto vec_grabbed_pos = 0x1200; // Name: m_vecGrabbedPos Offset: 0x1200
					constexpr auto fl_rescue_start_time = 0x120C; // Name: m_flRescueStartTime Offset: 0x120C
					constexpr auto fl_grab_success_time = 0x1210; // Name: m_flGrabSuccessTime Offset: 0x1210
					constexpr auto fl_drop_start_time = 0x1214; // Name: m_flDropStartTime Offset: 0x1214
					constexpr auto fl_dead_or_rescued_time = 0x1218; // Name: m_flDeadOrRescuedTime Offset: 0x1218
					constexpr auto blink_timer = 0x1220; // Name: m_blinkTimer Offset: 0x1220
					constexpr auto look_at = 0x1238; // Name: m_lookAt Offset: 0x1238
					constexpr auto look_around_timer = 0x1248; // Name: m_lookAroundTimer Offset: 0x1248
					constexpr auto is_init = 0x1260; // Name: m_isInit Offset: 0x1260
					constexpr auto eye_attachment = 0x1261; // Name: m_eyeAttachment Offset: 0x1261
					constexpr auto chest_attachment = 0x1262; // Name: m_chestAttachment Offset: 0x1262
					constexpr auto p_prediction_owner = 0x1268; // Name: m_pPredictionOwner Offset: 0x1268
					constexpr auto f_newest_alpha_think_time = 0x1270; // Name: m_fNewestAlphaThinkTime Offset: 0x1270
				} // namespace C_Hostage

				namespace CCSGOViewModel_GraphController {
					constexpr auto s_reload_complete = 0x60; // Name: m_sReloadComplete Offset: 0x60
				} // namespace CCSGOViewModel_GraphController

				namespace C_RopeKeyframe {
					constexpr auto links_touching_something = 0xD30; // Name: m_LinksTouchingSomething Offset: 0xD30
					constexpr auto n_links_touching_something = 0xD34; // Name: m_nLinksTouchingSomething Offset: 0xD34
					constexpr auto b_apply_wind = 0xD38; // Name: m_bApplyWind Offset: 0xD38
					constexpr auto f_prev_locked_points = 0xD3C; // Name: m_fPrevLockedPoints Offset: 0xD3C
					constexpr auto i_force_point_move_counter = 0xD40; // Name: m_iForcePointMoveCounter Offset: 0xD40
					constexpr auto b_prev_end_point_pos = 0xD44; // Name: m_bPrevEndPointPos Offset: 0xD44
					constexpr auto v_prev_end_point_pos = 0xD48; // Name: m_vPrevEndPointPos Offset: 0xD48
					constexpr auto fl_cur_scroll = 0xD60; // Name: m_flCurScroll Offset: 0xD60
					constexpr auto fl_scroll_speed = 0xD64; // Name: m_flScrollSpeed Offset: 0xD64
					constexpr auto rope_flags = 0xD68; // Name: m_RopeFlags Offset: 0xD68
					constexpr auto i_rope_material_model_index = 0xD70; // Name: m_iRopeMaterialModelIndex Offset: 0xD70
					constexpr auto light_values = 0xFE8; // Name: m_LightValues Offset: 0xFE8
					constexpr auto n_segments = 0x1060; // Name: m_nSegments Offset: 0x1060
					constexpr auto h_start_point = 0x1064; // Name: m_hStartPoint Offset: 0x1064
					constexpr auto h_end_point = 0x1068; // Name: m_hEndPoint Offset: 0x1068
					constexpr auto i_start_attachment = 0x106C; // Name: m_iStartAttachment Offset: 0x106C
					constexpr auto i_end_attachment = 0x106D; // Name: m_iEndAttachment Offset: 0x106D
					constexpr auto subdiv = 0x106E; // Name: m_Subdiv Offset: 0x106E
					constexpr auto rope_length = 0x1070; // Name: m_RopeLength Offset: 0x1070
					constexpr auto slack = 0x1072; // Name: m_Slack Offset: 0x1072
					constexpr auto texture_scale = 0x1074; // Name: m_TextureScale Offset: 0x1074
					constexpr auto f_locked_points = 0x1078; // Name: m_fLockedPoints Offset: 0x1078
					constexpr auto n_change_count = 0x1079; // Name: m_nChangeCount Offset: 0x1079
					constexpr auto width = 0x107C; // Name: m_Width Offset: 0x107C
					constexpr auto physics_delegate = 0x1080; // Name: m_PhysicsDelegate Offset: 0x1080
					constexpr auto h_material = 0x1090; // Name: m_hMaterial Offset: 0x1090
					constexpr auto texture_height = 0x1098; // Name: m_TextureHeight Offset: 0x1098
					constexpr auto vec_impulse = 0x109C; // Name: m_vecImpulse Offset: 0x109C
					constexpr auto vec_previous_impulse = 0x10A8; // Name: m_vecPreviousImpulse Offset: 0x10A8
					constexpr auto fl_current_gust_timer = 0x10B4; // Name: m_flCurrentGustTimer Offset: 0x10B4
					constexpr auto fl_current_gust_lifetime = 0x10B8; // Name: m_flCurrentGustLifetime Offset: 0x10B8
					constexpr auto fl_time_to_next_gust = 0x10BC; // Name: m_flTimeToNextGust Offset: 0x10BC
					constexpr auto v_wind_dir = 0x10C0; // Name: m_vWindDir Offset: 0x10C0
					constexpr auto v_color_mod = 0x10CC; // Name: m_vColorMod Offset: 0x10CC
					constexpr auto v_cached_end_point_attachment_pos = 0x10D8; // Name: m_vCachedEndPointAttachmentPos Offset: 0x10D8
					constexpr auto v_cached_end_point_attachment_angle = 0x10F0; // Name: m_vCachedEndPointAttachmentAngle Offset: 0x10F0
					constexpr auto b_constrain_between_endpoints = 0x1108; // Name: m_bConstrainBetweenEndpoints Offset: 0x1108
					constexpr auto b_end_point_attachment_positions_dirty = 0x0; // Name: m_bEndPointAttachmentPositionsDirty Offset: 0x0
					constexpr auto b_end_point_attachment_angles_dirty = 0x0; // Name: m_bEndPointAttachmentAnglesDirty Offset: 0x0
					constexpr auto b_new_data_this_frame = 0x0; // Name: m_bNewDataThisFrame Offset: 0x0
					constexpr auto b_physics_initted = 0x0; // Name: m_bPhysicsInitted Offset: 0x0
				} // namespace C_RopeKeyframe

				namespace C_GradientFog {
					constexpr auto h_gradient_fog_texture = 0x568; // Name: m_hGradientFogTexture Offset: 0x568
					constexpr auto fl_fog_start_distance = 0x570; // Name: m_flFogStartDistance Offset: 0x570
					constexpr auto fl_fog_end_distance = 0x574; // Name: m_flFogEndDistance Offset: 0x574
					constexpr auto b_height_fog_enabled = 0x578; // Name: m_bHeightFogEnabled Offset: 0x578
					constexpr auto fl_fog_start_height = 0x57C; // Name: m_flFogStartHeight Offset: 0x57C
					constexpr auto fl_fog_end_height = 0x580; // Name: m_flFogEndHeight Offset: 0x580
					constexpr auto fl_far_z = 0x584; // Name: m_flFarZ Offset: 0x584
					constexpr auto fl_fog_max_opacity = 0x588; // Name: m_flFogMaxOpacity Offset: 0x588
					constexpr auto fl_fog_falloff_exponent = 0x58C; // Name: m_flFogFalloffExponent Offset: 0x58C
					constexpr auto fl_fog_vertical_exponent = 0x590; // Name: m_flFogVerticalExponent Offset: 0x590
					constexpr auto fog_color = 0x594; // Name: m_fogColor Offset: 0x594
					constexpr auto fl_fog_strength = 0x598; // Name: m_flFogStrength Offset: 0x598
					constexpr auto fl_fade_time = 0x59C; // Name: m_flFadeTime Offset: 0x59C
					constexpr auto b_start_disabled = 0x5A0; // Name: m_bStartDisabled Offset: 0x5A0
					constexpr auto b_is_enabled = 0x5A1; // Name: m_bIsEnabled Offset: 0x5A1
					constexpr auto b_gradient_fog_needs_textures = 0x5A2; // Name: m_bGradientFogNeedsTextures Offset: 0x5A2
				} // namespace C_GradientFog

				namespace EventClientProcessNetworking_t {
					constexpr auto n_tick_count = 0x0; // Name: m_nTickCount Offset: 0x0
				} // namespace EventClientProcessNetworking_t

				namespace C_CSGO_TeamPreviewCamera {
					constexpr auto n_variant = 0x5D0; // Name: m_nVariant Offset: 0x5D0
					constexpr auto b_dof_enabled = 0x5D4; // Name: m_bDofEnabled Offset: 0x5D4
					constexpr auto fl_dof_near_blurry = 0x5D8; // Name: m_flDofNearBlurry Offset: 0x5D8
					constexpr auto fl_dof_near_crisp = 0x5DC; // Name: m_flDofNearCrisp Offset: 0x5DC
					constexpr auto fl_dof_far_crisp = 0x5E0; // Name: m_flDofFarCrisp Offset: 0x5E0
					constexpr auto fl_dof_far_blurry = 0x5E4; // Name: m_flDofFarBlurry Offset: 0x5E4
					constexpr auto fl_dof_tilt_to_ground = 0x5E8; // Name: m_flDofTiltToGround Offset: 0x5E8
				} // namespace C_CSGO_TeamPreviewCamera

				namespace C_EconWearable {
					constexpr auto n_force_skin = 0x1668; // Name: m_nForceSkin Offset: 0x1668
					constexpr auto b_always_allow = 0x166C; // Name: m_bAlwaysAllow Offset: 0x166C
				} // namespace C_EconWearable

				namespace CCSGO_WingmanIntroCharacterPosition {
				} // namespace CCSGO_WingmanIntroCharacterPosition

				namespace C_HEGrenadeProjectile {
				} // namespace C_HEGrenadeProjectile

				namespace CSMatchStats_t {
					constexpr auto i_enemy5_ks = 0x68; // Name: m_iEnemy5Ks Offset: 0x68
					constexpr auto i_enemy4_ks = 0x6C; // Name: m_iEnemy4Ks Offset: 0x6C
					constexpr auto i_enemy3_ks = 0x70; // Name: m_iEnemy3Ks Offset: 0x70
					constexpr auto i_enemy_knife_kills = 0x74; // Name: m_iEnemyKnifeKills Offset: 0x74
					constexpr auto i_enemy_taser_kills = 0x78; // Name: m_iEnemyTaserKills Offset: 0x78
				} // namespace CSMatchStats_t

				namespace CInfoTarget {
				} // namespace CInfoTarget

				namespace C_BaseToggle {
				} // namespace C_BaseToggle

				namespace C_NetTestBaseCombatCharacter {
				} // namespace C_NetTestBaseCombatCharacter

				namespace CWaterSplasher {
				} // namespace CWaterSplasher

				namespace C_KeychainModule {
					constexpr auto n_keychain_def_id = 0xF90; // Name: m_nKeychainDefID Offset: 0xF90
					constexpr auto n_keychain_seed = 0xF94; // Name: m_nKeychainSeed Offset: 0xF94
				} // namespace C_KeychainModule

				namespace C_ModelPointEntity {
				} // namespace C_ModelPointEntity

				namespace CCSObserver_ViewModelServices {
				} // namespace CCSObserver_ViewModelServices

				namespace EventPostDataUpdate_t {
					constexpr auto n_count = 0x0; // Name: m_nCount Offset: 0x0
				} // namespace EventPostDataUpdate_t

				namespace hudtextparms_t {
					constexpr auto color1 = 0x0; // Name: color1 Offset: 0x0
					constexpr auto color2 = 0x4; // Name: color2 Offset: 0x4
					constexpr auto effect = 0x8; // Name: effect Offset: 0x8
					constexpr auto channel = 0x9; // Name: channel Offset: 0x9
					constexpr auto x = 0xC; // Name: x Offset: 0xC
					constexpr auto y = 0x10; // Name: y Offset: 0x10
				} // namespace hudtextparms_t

				namespace C_FireSmoke {
					constexpr auto n_flame_model_index = 0x578; // Name: m_nFlameModelIndex Offset: 0x578
					constexpr auto n_flame_from_above_model_index = 0x57C; // Name: m_nFlameFromAboveModelIndex Offset: 0x57C
					constexpr auto fl_scale_register = 0x580; // Name: m_flScaleRegister Offset: 0x580
					constexpr auto fl_scale_start = 0x584; // Name: m_flScaleStart Offset: 0x584
					constexpr auto fl_scale_end = 0x588; // Name: m_flScaleEnd Offset: 0x588
					constexpr auto fl_scale_time_start = 0x58C; // Name: m_flScaleTimeStart Offset: 0x58C
					constexpr auto fl_scale_time_end = 0x590; // Name: m_flScaleTimeEnd Offset: 0x590
					constexpr auto fl_child_flame_spread = 0x594; // Name: m_flChildFlameSpread Offset: 0x594
					constexpr auto fl_clip_perc = 0x5A8; // Name: m_flClipPerc Offset: 0x5A8
					constexpr auto b_clip_tested = 0x5AC; // Name: m_bClipTested Offset: 0x5AC
					constexpr auto b_fading_out = 0x5AD; // Name: m_bFadingOut Offset: 0x5AD
					constexpr auto t_particle_spawn = 0x5B0; // Name: m_tParticleSpawn Offset: 0x5B0
					constexpr auto p_fire_overlay = 0x5B8; // Name: m_pFireOverlay Offset: 0x5B8
				} // namespace C_FireSmoke

				namespace C_WeaponRevolver {
				} // namespace C_WeaponRevolver

				namespace CPointTemplate {
					constexpr auto isz_world_name = 0x568; // Name: m_iszWorldName Offset: 0x568
					constexpr auto isz_source2_entity_lump_name = 0x570; // Name: m_iszSource2EntityLumpName Offset: 0x570
					constexpr auto isz_entity_filter_name = 0x578; // Name: m_iszEntityFilterName Offset: 0x578
					constexpr auto fl_timeout_interval = 0x580; // Name: m_flTimeoutInterval Offset: 0x580
					constexpr auto b_asynchronously_spawn_entities = 0x584; // Name: m_bAsynchronouslySpawnEntities Offset: 0x584
					constexpr auto p_output_on_spawned = 0x588; // Name: m_pOutputOnSpawned Offset: 0x588
					constexpr auto client_only_entity_behavior = 0x5B0; // Name: m_clientOnlyEntityBehavior Offset: 0x5B0
					constexpr auto owner_spawn_group_type = 0x5B4; // Name: m_ownerSpawnGroupType Offset: 0x5B4
					constexpr auto created_spawn_group_handles = 0x5B8; // Name: m_createdSpawnGroupHandles Offset: 0x5B8
					constexpr auto spawned_entity_handles = 0x5D0; // Name: m_SpawnedEntityHandles Offset: 0x5D0
					constexpr auto script_spawn_callback = 0x5E8; // Name: m_ScriptSpawnCallback Offset: 0x5E8
					constexpr auto script_callback_scope = 0x5F0; // Name: m_ScriptCallbackScope Offset: 0x5F0
				} // namespace CPointTemplate

				namespace C_FireFromAboveSprite {
				} // namespace C_FireFromAboveSprite

				namespace C_SoundOpvarSetOBBWindEntity {
				} // namespace C_SoundOpvarSetOBBWindEntity

				namespace CTakeDamageResult {
					constexpr auto p_originating_info = 0x0; // Name: m_pOriginatingInfo Offset: 0x0
					constexpr auto n_health_lost = 0x8; // Name: m_nHealthLost Offset: 0x8
					constexpr auto n_damage_taken = 0xC; // Name: m_nDamageTaken Offset: 0xC
					constexpr auto n_totalled_health_lost = 0x10; // Name: m_nTotalledHealthLost Offset: 0x10
					constexpr auto n_totalled_damage_taken = 0x14; // Name: m_nTotalledDamageTaken Offset: 0x14
					constexpr auto fl_totalled_damage_absorbed = 0x18; // Name: m_flTotalledDamageAbsorbed Offset: 0x18
				} // namespace CTakeDamageResult

				namespace ActiveModelConfig_t {
					constexpr auto handle = 0x28; // Name: m_Handle Offset: 0x28
					constexpr auto name = 0x30; // Name: m_Name Offset: 0x30
					constexpr auto associated_entities = 0x38; // Name: m_AssociatedEntities Offset: 0x38
					constexpr auto associated_entity_names = 0x50; // Name: m_AssociatedEntityNames Offset: 0x50
				} // namespace ActiveModelConfig_t

				namespace RagdollCreationParams_t {
					constexpr auto v_force = 0x0; // Name: m_vForce Offset: 0x0
					constexpr auto n_force_bone = 0xC; // Name: m_nForceBone Offset: 0xC
					constexpr auto b_force_current_world_transform = 0x10; // Name: m_bForceCurrentWorldTransform Offset: 0x10
					constexpr auto n_health_to_grant = 0x14; // Name: m_nHealthToGrant Offset: 0x14
				} // namespace RagdollCreationParams_t

				namespace CCSPlayer_ItemServices {
					constexpr auto b_has_defuser = 0x40; // Name: m_bHasDefuser Offset: 0x40
					constexpr auto b_has_helmet = 0x41; // Name: m_bHasHelmet Offset: 0x41
					constexpr auto b_has_heavy_armor = 0x42; // Name: m_bHasHeavyArmor Offset: 0x42
				} // namespace CCSPlayer_ItemServices

				namespace C_WeaponMP5SD {
				} // namespace C_WeaponMP5SD

				namespace C_WeaponShield {
					constexpr auto fl_display_health = 0x1B40; // Name: m_flDisplayHealth Offset: 0x1B40
				} // namespace C_WeaponShield

				namespace C_CSGO_PreviewPlayerAlias_csgo_player_previewmodel {
				} // namespace C_CSGO_PreviewPlayerAlias_csgo_player_previewmodel

				namespace C_DynamicPropAlias_dynamic_prop {
				} // namespace C_DynamicPropAlias_dynamic_prop

				namespace CPointChildModifier {
					constexpr auto b_orphan_instead_of_deleting_children_on_remove = 0x568; // Name: m_bOrphanInsteadOfDeletingChildrenOnRemove Offset: 0x568
				} // namespace CPointChildModifier

				namespace CCSPlayer_BulletServices {
					constexpr auto total_hits_on_server = 0x40; // Name: m_totalHitsOnServer Offset: 0x40
				} // namespace CCSPlayer_BulletServices

				namespace C_PointCameraVFOV {
					constexpr auto fl_vertical_fov = 0x5C8; // Name: m_flVerticalFOV Offset: 0x5C8
				} // namespace C_PointCameraVFOV

				namespace CCSPointScriptExtensions_observer {
				} // namespace CCSPointScriptExtensions_observer

				namespace C_CSGO_TeamSelectTerroristPosition {
				} // namespace C_CSGO_TeamSelectTerroristPosition

				namespace CSkillFloat {
					constexpr auto p_value = 0x0; // Name: m_pValue Offset: 0x0
				} // namespace CSkillFloat

				namespace C_TonemapController2 {
					constexpr auto fl_auto_exposure_min = 0x568; // Name: m_flAutoExposureMin Offset: 0x568
					constexpr auto fl_auto_exposure_max = 0x56C; // Name: m_flAutoExposureMax Offset: 0x56C
					constexpr auto fl_tonemap_percent_target = 0x570; // Name: m_flTonemapPercentTarget Offset: 0x570
					constexpr auto fl_tonemap_percent_bright_pixels = 0x574; // Name: m_flTonemapPercentBrightPixels Offset: 0x574
					constexpr auto fl_tonemap_min_avg_lum = 0x578; // Name: m_flTonemapMinAvgLum Offset: 0x578
					constexpr auto fl_exposure_adaptation_speed_up = 0x57C; // Name: m_flExposureAdaptationSpeedUp Offset: 0x57C
					constexpr auto fl_exposure_adaptation_speed_down = 0x580; // Name: m_flExposureAdaptationSpeedDown Offset: 0x580
					constexpr auto fl_tonemap_evsmoothing_range = 0x584; // Name: m_flTonemapEVSmoothingRange Offset: 0x584
				} // namespace C_TonemapController2

				namespace C_WeaponG3SG1 {
				} // namespace C_WeaponG3SG1

				namespace CFuncWater {
					constexpr auto buoyancy_helper = 0xD28; // Name: m_BuoyancyHelper Offset: 0xD28
				} // namespace CFuncWater

				namespace CCSPlayer_HostageServices {
					constexpr auto h_carried_hostage = 0x40; // Name: m_hCarriedHostage Offset: 0x40
					constexpr auto h_carried_hostage_prop = 0x44; // Name: m_hCarriedHostageProp Offset: 0x44
				} // namespace CCSPlayer_HostageServices

				namespace C_SoundOpvarSetAutoRoomEntity {
				} // namespace C_SoundOpvarSetAutoRoomEntity

				namespace C_EconEntity {
					constexpr auto fl_flex_delay_time = 0x1130; // Name: m_flFlexDelayTime Offset: 0x1130
					constexpr auto fl_flex_delayed_weight = 0x1138; // Name: m_flFlexDelayedWeight Offset: 0x1138
					constexpr auto b_attributes_initialized = 0x1140; // Name: m_bAttributesInitialized Offset: 0x1140
					constexpr auto attribute_manager = 0x1148; // Name: m_AttributeManager Offset: 0x1148
					constexpr auto original_owner_xuid_low = 0x15F0; // Name: m_OriginalOwnerXuidLow Offset: 0x15F0
					constexpr auto original_owner_xuid_high = 0x15F4; // Name: m_OriginalOwnerXuidHigh Offset: 0x15F4
					constexpr auto n_fallback_paint_kit = 0x15F8; // Name: m_nFallbackPaintKit Offset: 0x15F8
					constexpr auto n_fallback_seed = 0x15FC; // Name: m_nFallbackSeed Offset: 0x15FC
					constexpr auto fl_fallback_wear = 0x1600; // Name: m_flFallbackWear Offset: 0x1600
					constexpr auto n_fallback_stat_trak = 0x1604; // Name: m_nFallbackStatTrak Offset: 0x1604
					constexpr auto b_clientside = 0x1608; // Name: m_bClientside Offset: 0x1608
					constexpr auto b_particle_systems_created = 0x1609; // Name: m_bParticleSystemsCreated Offset: 0x1609
					constexpr auto vec_attached_particles = 0x1610; // Name: m_vecAttachedParticles Offset: 0x1610
					constexpr auto h_viewmodel_attachment = 0x1628; // Name: m_hViewmodelAttachment Offset: 0x1628
					constexpr auto i_old_team = 0x162C; // Name: m_iOldTeam Offset: 0x162C
					constexpr auto b_attachment_dirty = 0x1630; // Name: m_bAttachmentDirty Offset: 0x1630
					constexpr auto n_unloaded_model_index = 0x1634; // Name: m_nUnloadedModelIndex Offset: 0x1634
					constexpr auto i_num_owner_validation_retries = 0x1638; // Name: m_iNumOwnerValidationRetries Offset: 0x1638
					constexpr auto h_old_providee = 0x1648; // Name: m_hOldProvidee Offset: 0x1648
					constexpr auto vec_attached_models = 0x1650; // Name: m_vecAttachedModels Offset: 0x1650
				} // namespace C_EconEntity

				namespace EventSplitScreenStateChanged_t {
				} // namespace EventSplitScreenStateChanged_t

				namespace C_WeaponSG556 {
				} // namespace C_WeaponSG556

				namespace C_RectLight {
					constexpr auto b_show_light = 0x1070; // Name: m_bShowLight Offset: 0x1070
				} // namespace C_RectLight

				namespace C_WeaponNegev {
				} // namespace C_WeaponNegev

				namespace C_ParticleSystem {
					constexpr auto sz_snapshot_file_name = 0xD28; // Name: m_szSnapshotFileName Offset: 0xD28
					constexpr auto b_active = 0xF28; // Name: m_bActive Offset: 0xF28
					constexpr auto b_frozen = 0xF29; // Name: m_bFrozen Offset: 0xF29
					constexpr auto fl_freeze_transition_duration = 0xF2C; // Name: m_flFreezeTransitionDuration Offset: 0xF2C
					constexpr auto n_stop_type = 0xF30; // Name: m_nStopType Offset: 0xF30
					constexpr auto b_animate_during_gameplay_pause = 0xF34; // Name: m_bAnimateDuringGameplayPause Offset: 0xF34
					constexpr auto i_effect_index = 0xF38; // Name: m_iEffectIndex Offset: 0xF38
					constexpr auto fl_start_time = 0xF40; // Name: m_flStartTime Offset: 0xF40
					constexpr auto fl_pre_sim_time = 0xF44; // Name: m_flPreSimTime Offset: 0xF44
					constexpr auto v_server_control_points = 0xF48; // Name: m_vServerControlPoints Offset: 0xF48
					constexpr auto i_server_control_point_assignments = 0xF78; // Name: m_iServerControlPointAssignments Offset: 0xF78
					constexpr auto h_control_point_ents = 0xF7C; // Name: m_hControlPointEnts Offset: 0xF7C
					constexpr auto b_no_save = 0x107C; // Name: m_bNoSave Offset: 0x107C
					constexpr auto b_no_freeze = 0x107D; // Name: m_bNoFreeze Offset: 0x107D
					constexpr auto b_no_ramp = 0x107E; // Name: m_bNoRamp Offset: 0x107E
					constexpr auto b_start_active = 0x107F; // Name: m_bStartActive Offset: 0x107F
					constexpr auto isz_effect_name = 0x1080; // Name: m_iszEffectName Offset: 0x1080
					constexpr auto isz_control_point_names = 0x1088; // Name: m_iszControlPointNames Offset: 0x1088
					constexpr auto n_data_cp = 0x1288; // Name: m_nDataCP Offset: 0x1288
					constexpr auto vec_data_cpvalue = 0x128C; // Name: m_vecDataCPValue Offset: 0x128C
					constexpr auto n_tint_cp = 0x1298; // Name: m_nTintCP Offset: 0x1298
					constexpr auto clr_tint = 0x129C; // Name: m_clrTint Offset: 0x129C
					constexpr auto b_old_active = 0x12C0; // Name: m_bOldActive Offset: 0x12C0
					constexpr auto b_old_frozen = 0x12C1; // Name: m_bOldFrozen Offset: 0x12C1
				} // namespace C_ParticleSystem

				namespace C_CSGO_TeamPreviewModel {
				} // namespace C_CSGO_TeamPreviewModel

				namespace CEnvSoundscapeTriggerableAlias_snd_soundscape_triggerable {
				} // namespace CEnvSoundscapeTriggerableAlias_snd_soundscape_triggerable

				namespace C_CSGameRulesProxy {
					constexpr auto p_game_rules = 0x568; // Name: m_pGameRules Offset: 0x568
				} // namespace C_CSGameRulesProxy

				namespace CBombTarget {
					constexpr auto b_bomb_planted_here = 0xD30; // Name: m_bBombPlantedHere Offset: 0xD30
				} // namespace CBombTarget

				namespace EventServerAdvanceTick_t {
				} // namespace EventServerAdvanceTick_t

				namespace CPlayer_ObserverServices {
					constexpr auto i_observer_mode = 0x40; // Name: m_iObserverMode Offset: 0x40
					constexpr auto h_observer_target = 0x44; // Name: m_hObserverTarget Offset: 0x44
					constexpr auto i_observer_last_mode = 0x48; // Name: m_iObserverLastMode Offset: 0x48
					constexpr auto b_forced_observer_mode = 0x4C; // Name: m_bForcedObserverMode Offset: 0x4C
					constexpr auto fl_observer_chase_distance = 0x50; // Name: m_flObserverChaseDistance Offset: 0x50
					constexpr auto fl_observer_chase_distance_calc_time = 0x54; // Name: m_flObserverChaseDistanceCalcTime Offset: 0x54
				} // namespace CPlayer_ObserverServices

				namespace CSkillInt {
					constexpr auto p_value = 0x0; // Name: m_pValue Offset: 0x0
				} // namespace CSkillInt

				namespace CWeaponZoneRepulsor {
				} // namespace CWeaponZoneRepulsor

				namespace CPlayerPawnComponent {
					constexpr auto _m_p_chain_entity = 0x8; // Name: __m_pChainEntity Offset: 0x8
				} // namespace CPlayerPawnComponent

				namespace CPlayer_WaterServices {
				} // namespace CPlayer_WaterServices

				namespace CEntitySubclassVDataBase {
				} // namespace CEntitySubclassVDataBase

				namespace C_BaseFlex {
					constexpr auto flex_weight = 0xF98; // Name: m_flexWeight Offset: 0xF98
					constexpr auto v_look_target_position = 0xFB0; // Name: m_vLookTargetPosition Offset: 0xFB0
					constexpr auto blinktoggle = 0xFC8; // Name: m_blinktoggle Offset: 0xFC8
					constexpr auto n_last_flex_update_frame_count = 0x1028; // Name: m_nLastFlexUpdateFrameCount Offset: 0x1028
					constexpr auto cached_view_target = 0x102C; // Name: m_CachedViewTarget Offset: 0x102C
					constexpr auto n_next_scene_event_id = 0x1038; // Name: m_nNextSceneEventId Offset: 0x1038
					constexpr auto i_blink = 0x103C; // Name: m_iBlink Offset: 0x103C
					constexpr auto blinktime = 0x1040; // Name: m_blinktime Offset: 0x1040
					constexpr auto prevblinktoggle = 0x1044; // Name: m_prevblinktoggle Offset: 0x1044
					constexpr auto i_jaw_open = 0x1048; // Name: m_iJawOpen Offset: 0x1048
					constexpr auto fl_jaw_open_amount = 0x104C; // Name: m_flJawOpenAmount Offset: 0x104C
					constexpr auto fl_blink_amount = 0x1050; // Name: m_flBlinkAmount Offset: 0x1050
					constexpr auto i_mouth_attachment = 0x1054; // Name: m_iMouthAttachment Offset: 0x1054
					constexpr auto i_eye_attachment = 0x1055; // Name: m_iEyeAttachment Offset: 0x1055
					constexpr auto b_reset_flex_weights_on_model_change = 0x1056; // Name: m_bResetFlexWeightsOnModelChange Offset: 0x1056
					constexpr auto n_eye_occlusion_renderer_bone = 0x1070; // Name: m_nEyeOcclusionRendererBone Offset: 0x1070
					constexpr auto m_eye_occlusion_renderer_camera_to_bone_transform = 0x1074; // Name: m_mEyeOcclusionRendererCameraToBoneTransform Offset: 0x1074
					constexpr auto v_eye_occlusion_renderer_half_extent = 0x10A4; // Name: m_vEyeOcclusionRendererHalfExtent Offset: 0x10A4
					constexpr auto phoneme_classes = 0x10C0; // Name: m_PhonemeClasses Offset: 0x10C0
				} // namespace C_BaseFlex

				namespace C_CSGO_EndOfMatchLineupEnd {
				} // namespace C_CSGO_EndOfMatchLineupEnd

				namespace SequenceHistory_t {
					constexpr auto h_sequence = 0x0; // Name: m_hSequence Offset: 0x0
					constexpr auto fl_seq_start_time = 0x4; // Name: m_flSeqStartTime Offset: 0x4
					constexpr auto fl_seq_fixed_cycle = 0x8; // Name: m_flSeqFixedCycle Offset: 0x8
					constexpr auto n_seq_loop_mode = 0xC; // Name: m_nSeqLoopMode Offset: 0xC
					constexpr auto fl_playback_rate = 0x10; // Name: m_flPlaybackRate Offset: 0x10
					constexpr auto fl_cycles_per_second = 0x14; // Name: m_flCyclesPerSecond Offset: 0x14
				} // namespace SequenceHistory_t

				namespace C_Multimeter {
					constexpr auto h_target_c4 = 0xF90; // Name: m_hTargetC4 Offset: 0xF90
				} // namespace C_Multimeter

				namespace C_OmniLight {
					constexpr auto fl_inner_angle = 0x1070; // Name: m_flInnerAngle Offset: 0x1070
					constexpr auto fl_outer_angle = 0x1074; // Name: m_flOuterAngle Offset: 0x1074
					constexpr auto b_show_light = 0x1078; // Name: m_bShowLight Offset: 0x1078
				} // namespace C_OmniLight

				namespace C_CsmFovOverride {
					constexpr auto camera_name = 0x568; // Name: m_cameraName Offset: 0x568
					constexpr auto fl_csm_fov_override_value = 0x570; // Name: m_flCsmFovOverrideValue Offset: 0x570
				} // namespace C_CsmFovOverride

				namespace C_PlantedC4 {
					constexpr auto b_bomb_ticking = 0xF90; // Name: m_bBombTicking Offset: 0xF90
					constexpr auto n_bomb_site = 0xF94; // Name: m_nBombSite Offset: 0xF94
					constexpr auto n_source_soundscape_hash = 0xF98; // Name: m_nSourceSoundscapeHash Offset: 0xF98
					constexpr auto entity_spotted_state = 0xFA0; // Name: m_entitySpottedState Offset: 0xFA0
					constexpr auto fl_next_glow = 0xFB8; // Name: m_flNextGlow Offset: 0xFB8
					constexpr auto fl_next_beep = 0xFBC; // Name: m_flNextBeep Offset: 0xFBC
					constexpr auto fl_c4_blow = 0xFC0; // Name: m_flC4Blow Offset: 0xFC0
					constexpr auto b_cannot_be_defused = 0xFC4; // Name: m_bCannotBeDefused Offset: 0xFC4
					constexpr auto b_has_exploded = 0xFC5; // Name: m_bHasExploded Offset: 0xFC5
					constexpr auto fl_timer_length = 0xFC8; // Name: m_flTimerLength Offset: 0xFC8
					constexpr auto b_being_defused = 0xFCC; // Name: m_bBeingDefused Offset: 0xFCC
					constexpr auto b_trigger_warning = 0xFD0; // Name: m_bTriggerWarning Offset: 0xFD0
					constexpr auto b_explode_warning = 0xFD4; // Name: m_bExplodeWarning Offset: 0xFD4
					constexpr auto b_c4_activated = 0xFD8; // Name: m_bC4Activated Offset: 0xFD8
					constexpr auto b_ten_sec_warning = 0xFD9; // Name: m_bTenSecWarning Offset: 0xFD9
					constexpr auto fl_defuse_length = 0xFDC; // Name: m_flDefuseLength Offset: 0xFDC
					constexpr auto fl_defuse_count_down = 0xFE0; // Name: m_flDefuseCountDown Offset: 0xFE0
					constexpr auto b_bomb_defused = 0xFE4; // Name: m_bBombDefused Offset: 0xFE4
					constexpr auto h_bomb_defuser = 0xFE8; // Name: m_hBombDefuser Offset: 0xFE8
					constexpr auto h_control_panel = 0xFEC; // Name: m_hControlPanel Offset: 0xFEC
					constexpr auto attribute_manager = 0xFF0; // Name: m_AttributeManager Offset: 0xFF0
					constexpr auto h_defuser_multimeter = 0x1498; // Name: m_hDefuserMultimeter Offset: 0x1498
					constexpr auto fl_next_radar_flash_time = 0x149C; // Name: m_flNextRadarFlashTime Offset: 0x149C
					constexpr auto b_radar_flash = 0x14A0; // Name: m_bRadarFlash Offset: 0x14A0
					constexpr auto p_bomb_defuser = 0x14A4; // Name: m_pBombDefuser Offset: 0x14A4
					constexpr auto f_last_defuse_time = 0x14A8; // Name: m_fLastDefuseTime Offset: 0x14A8
					constexpr auto p_prediction_owner = 0x14B0; // Name: m_pPredictionOwner Offset: 0x14B0
					constexpr auto vec_c4_explode_spectate_pos = 0x14B8; // Name: m_vecC4ExplodeSpectatePos Offset: 0x14B8
					constexpr auto vec_c4_explode_spectate_ang = 0x14C4; // Name: m_vecC4ExplodeSpectateAng Offset: 0x14C4
					constexpr auto fl_c4_explode_spectate_duration = 0x14D0; // Name: m_flC4ExplodeSpectateDuration Offset: 0x14D0
				} // namespace C_PlantedC4

				namespace CCSGameModeRules_Noop {
				} // namespace CCSGameModeRules_Noop

				namespace C_Precipitation {
					constexpr auto fl_density = 0xD30; // Name: m_flDensity Offset: 0xD30
					constexpr auto fl_particle_inner_dist = 0xD40; // Name: m_flParticleInnerDist Offset: 0xD40
					constexpr auto p_particle_def = 0xD48; // Name: m_pParticleDef Offset: 0xD48
					constexpr auto t_particle_precip_trace_timer = 0xD70; // Name: m_tParticlePrecipTraceTimer Offset: 0xD70
					constexpr auto b_active_particle_precip_emitter = 0xD78; // Name: m_bActiveParticlePrecipEmitter Offset: 0xD78
					constexpr auto b_particle_precip_initialized = 0xD79; // Name: m_bParticlePrecipInitialized Offset: 0xD79
					constexpr auto b_has_simulated_since_last_scene_object_update = 0xD7A; // Name: m_bHasSimulatedSinceLastSceneObjectUpdate Offset: 0xD7A
					constexpr auto n_available_sheet_sequences_max_index = 0xD7C; // Name: m_nAvailableSheetSequencesMaxIndex Offset: 0xD7C
				} // namespace C_Precipitation

				namespace C_PhysMagnet {
					constexpr auto a_attached_objects_from_server = 0xF88; // Name: m_aAttachedObjectsFromServer Offset: 0xF88
					constexpr auto a_attached_objects = 0xFA0; // Name: m_aAttachedObjects Offset: 0xFA0
				} // namespace C_PhysMagnet

				namespace C_ColorCorrection {
					constexpr auto vec_origin = 0x568; // Name: m_vecOrigin Offset: 0x568
					constexpr auto min_falloff = 0x574; // Name: m_MinFalloff Offset: 0x574
					constexpr auto max_falloff = 0x578; // Name: m_MaxFalloff Offset: 0x578
					constexpr auto fl_fade_in_duration = 0x57C; // Name: m_flFadeInDuration Offset: 0x57C
					constexpr auto fl_fade_out_duration = 0x580; // Name: m_flFadeOutDuration Offset: 0x580
					constexpr auto fl_max_weight = 0x584; // Name: m_flMaxWeight Offset: 0x584
					constexpr auto fl_cur_weight = 0x588; // Name: m_flCurWeight Offset: 0x588
					constexpr auto netlookup_filename = 0x58C; // Name: m_netlookupFilename Offset: 0x58C
					constexpr auto b_enabled = 0x78C; // Name: m_bEnabled Offset: 0x78C
					constexpr auto b_master = 0x78D; // Name: m_bMaster Offset: 0x78D
					constexpr auto b_client_side = 0x78E; // Name: m_bClientSide Offset: 0x78E
					constexpr auto b_exclusive = 0x78F; // Name: m_bExclusive Offset: 0x78F
					constexpr auto b_enabled_on_client = 0x790; // Name: m_bEnabledOnClient Offset: 0x790
					constexpr auto fl_cur_weight_on_client = 0x794; // Name: m_flCurWeightOnClient Offset: 0x794
					constexpr auto b_fading_in = 0x798; // Name: m_bFadingIn Offset: 0x798
					constexpr auto fl_fade_start_weight = 0x79C; // Name: m_flFadeStartWeight Offset: 0x79C
					constexpr auto fl_fade_start_time = 0x7A0; // Name: m_flFadeStartTime Offset: 0x7A0
					constexpr auto fl_fade_duration = 0x7A4; // Name: m_flFadeDuration Offset: 0x7A4
				} // namespace C_ColorCorrection

				namespace C_WeaponUMP45 {
				} // namespace C_WeaponUMP45

				namespace CHostageRescueZoneShim {
				} // namespace CHostageRescueZoneShim

				namespace CLightComponent {
					constexpr auto _m_p_chain_entity = 0x38; // Name: __m_pChainEntity Offset: 0x38
					constexpr auto color = 0x75; // Name: m_Color Offset: 0x75
					constexpr auto secondary_color = 0x79; // Name: m_SecondaryColor Offset: 0x79
					constexpr auto fl_brightness = 0x80; // Name: m_flBrightness Offset: 0x80
					constexpr auto fl_brightness_scale = 0x84; // Name: m_flBrightnessScale Offset: 0x84
					constexpr auto fl_brightness_mult = 0x88; // Name: m_flBrightnessMult Offset: 0x88
					constexpr auto fl_range = 0x8C; // Name: m_flRange Offset: 0x8C
					constexpr auto fl_falloff = 0x90; // Name: m_flFalloff Offset: 0x90
					constexpr auto fl_attenuation0 = 0x94; // Name: m_flAttenuation0 Offset: 0x94
					constexpr auto fl_attenuation1 = 0x98; // Name: m_flAttenuation1 Offset: 0x98
					constexpr auto fl_attenuation2 = 0x9C; // Name: m_flAttenuation2 Offset: 0x9C
					constexpr auto fl_theta = 0xA0; // Name: m_flTheta Offset: 0xA0
					constexpr auto fl_phi = 0xA4; // Name: m_flPhi Offset: 0xA4
					constexpr auto h_light_cookie = 0xA8; // Name: m_hLightCookie Offset: 0xA8
					constexpr auto n_cascades = 0xB0; // Name: m_nCascades Offset: 0xB0
					constexpr auto n_cast_shadows = 0xB4; // Name: m_nCastShadows Offset: 0xB4
					constexpr auto n_shadow_width = 0xB8; // Name: m_nShadowWidth Offset: 0xB8
					constexpr auto n_shadow_height = 0xBC; // Name: m_nShadowHeight Offset: 0xBC
					constexpr auto b_render_diffuse = 0xC0; // Name: m_bRenderDiffuse Offset: 0xC0
					constexpr auto n_render_specular = 0xC4; // Name: m_nRenderSpecular Offset: 0xC4
					constexpr auto b_render_transmissive = 0xC8; // Name: m_bRenderTransmissive Offset: 0xC8
					constexpr auto fl_ortho_light_width = 0xCC; // Name: m_flOrthoLightWidth Offset: 0xCC
					constexpr auto fl_ortho_light_height = 0xD0; // Name: m_flOrthoLightHeight Offset: 0xD0
					constexpr auto n_style = 0xD4; // Name: m_nStyle Offset: 0xD4
					constexpr auto pattern = 0xD8; // Name: m_Pattern Offset: 0xD8
					constexpr auto n_cascade_render_static_objects = 0xE0; // Name: m_nCascadeRenderStaticObjects Offset: 0xE0
					constexpr auto fl_shadow_cascade_cross_fade = 0xE4; // Name: m_flShadowCascadeCrossFade Offset: 0xE4
					constexpr auto fl_shadow_cascade_distance_fade = 0xE8; // Name: m_flShadowCascadeDistanceFade Offset: 0xE8
					constexpr auto fl_shadow_cascade_distance0 = 0xEC; // Name: m_flShadowCascadeDistance0 Offset: 0xEC
					constexpr auto fl_shadow_cascade_distance1 = 0xF0; // Name: m_flShadowCascadeDistance1 Offset: 0xF0
					constexpr auto fl_shadow_cascade_distance2 = 0xF4; // Name: m_flShadowCascadeDistance2 Offset: 0xF4
					constexpr auto fl_shadow_cascade_distance3 = 0xF8; // Name: m_flShadowCascadeDistance3 Offset: 0xF8
					constexpr auto n_shadow_cascade_resolution0 = 0xFC; // Name: m_nShadowCascadeResolution0 Offset: 0xFC
					constexpr auto n_shadow_cascade_resolution1 = 0x100; // Name: m_nShadowCascadeResolution1 Offset: 0x100
					constexpr auto n_shadow_cascade_resolution2 = 0x104; // Name: m_nShadowCascadeResolution2 Offset: 0x104
					constexpr auto n_shadow_cascade_resolution3 = 0x108; // Name: m_nShadowCascadeResolution3 Offset: 0x108
					constexpr auto b_uses_baked_shadowing = 0x10C; // Name: m_bUsesBakedShadowing Offset: 0x10C
					constexpr auto n_shadow_priority = 0x110; // Name: m_nShadowPriority Offset: 0x110
					constexpr auto n_baked_shadow_index = 0x114; // Name: m_nBakedShadowIndex Offset: 0x114
					constexpr auto b_render_to_cubemaps = 0x118; // Name: m_bRenderToCubemaps Offset: 0x118
					constexpr auto n_direct_light = 0x11C; // Name: m_nDirectLight Offset: 0x11C
					constexpr auto n_indirect_light = 0x120; // Name: m_nIndirectLight Offset: 0x120
					constexpr auto fl_fade_min_dist = 0x124; // Name: m_flFadeMinDist Offset: 0x124
					constexpr auto fl_fade_max_dist = 0x128; // Name: m_flFadeMaxDist Offset: 0x128
					constexpr auto fl_shadow_fade_min_dist = 0x12C; // Name: m_flShadowFadeMinDist Offset: 0x12C
					constexpr auto fl_shadow_fade_max_dist = 0x130; // Name: m_flShadowFadeMaxDist Offset: 0x130
					constexpr auto b_enabled = 0x134; // Name: m_bEnabled Offset: 0x134
					constexpr auto b_flicker = 0x135; // Name: m_bFlicker Offset: 0x135
					constexpr auto b_precomputed_fields_valid = 0x136; // Name: m_bPrecomputedFieldsValid Offset: 0x136
					constexpr auto v_precomputed_bounds_mins = 0x138; // Name: m_vPrecomputedBoundsMins Offset: 0x138
					constexpr auto v_precomputed_bounds_maxs = 0x144; // Name: m_vPrecomputedBoundsMaxs Offset: 0x144
					constexpr auto v_precomputed_obborigin = 0x150; // Name: m_vPrecomputedOBBOrigin Offset: 0x150
					constexpr auto v_precomputed_obbangles = 0x15C; // Name: m_vPrecomputedOBBAngles Offset: 0x15C
					constexpr auto v_precomputed_obbextent = 0x168; // Name: m_vPrecomputedOBBExtent Offset: 0x168
					constexpr auto fl_precomputed_max_range = 0x174; // Name: m_flPrecomputedMaxRange Offset: 0x174
					constexpr auto n_fog_lighting_mode = 0x178; // Name: m_nFogLightingMode Offset: 0x178
					constexpr auto fl_fog_contribution_stength = 0x17C; // Name: m_flFogContributionStength Offset: 0x17C
					constexpr auto fl_near_clip_plane = 0x180; // Name: m_flNearClipPlane Offset: 0x180
					constexpr auto sky_color = 0x184; // Name: m_SkyColor Offset: 0x184
					constexpr auto fl_sky_intensity = 0x188; // Name: m_flSkyIntensity Offset: 0x188
					constexpr auto sky_ambient_bounce = 0x18C; // Name: m_SkyAmbientBounce Offset: 0x18C
					constexpr auto b_use_secondary_color = 0x190; // Name: m_bUseSecondaryColor Offset: 0x190
					constexpr auto b_mixed_shadows = 0x191; // Name: m_bMixedShadows Offset: 0x191
					constexpr auto fl_light_style_start_time = 0x194; // Name: m_flLightStyleStartTime Offset: 0x194
					constexpr auto fl_capsule_length = 0x198; // Name: m_flCapsuleLength Offset: 0x198
					constexpr auto fl_min_roughness = 0x19C; // Name: m_flMinRoughness Offset: 0x19C
				} // namespace CLightComponent

				namespace C_TintController {
				} // namespace C_TintController

				namespace CModelState {
					constexpr auto h_model = 0xA0; // Name: m_hModel Offset: 0xA0
					constexpr auto model_name = 0xA8; // Name: m_ModelName Offset: 0xA8
					constexpr auto b_client_cloth_creation_suppressed = 0xE8; // Name: m_bClientClothCreationSuppressed Offset: 0xE8
					constexpr auto mesh_group_mask = 0x198; // Name: m_MeshGroupMask Offset: 0x198
					constexpr auto n_ideal_motion_type = 0x21A; // Name: m_nIdealMotionType Offset: 0x21A
					constexpr auto n_force_lod = 0x21B; // Name: m_nForceLOD Offset: 0x21B
					constexpr auto n_cloth_update_flags = 0x21C; // Name: m_nClothUpdateFlags Offset: 0x21C
				} // namespace CModelState

				namespace C_WeaponP250 {
				} // namespace C_WeaponP250

				namespace C_CSGO_PreviewModel_GraphController {
					constexpr auto psz_character_mode = 0x60; // Name: m_pszCharacterMode Offset: 0x60
					constexpr auto psz_weapon_state = 0x88; // Name: m_pszWeaponState Offset: 0x88
					constexpr auto psz_weapon_type = 0xB0; // Name: m_pszWeaponType Offset: 0xB0
					constexpr auto psz_end_of_match_celebration = 0xD8; // Name: m_pszEndOfMatchCelebration Offset: 0xD8
				} // namespace C_CSGO_PreviewModel_GraphController

				namespace C_EconEntity_AttachedModelData_t {
					constexpr auto i_model_display_flags = 0x0; // Name: m_iModelDisplayFlags Offset: 0x0
				} // namespace C_EconEntity_AttachedModelData_t

				namespace CPlayerSprayDecalRenderHelper {
				} // namespace CPlayerSprayDecalRenderHelper

				namespace CAttributeList {
					constexpr auto attributes = 0x8; // Name: m_Attributes Offset: 0x8
					constexpr auto p_manager = 0x58; // Name: m_pManager Offset: 0x58
				} // namespace CAttributeList

				namespace C_TeamplayRules {
				} // namespace C_TeamplayRules

				namespace EventClientAdvanceNonRenderedFrame_t {
				} // namespace EventClientAdvanceNonRenderedFrame_t

				namespace C_CSGO_CounterTerroristWingmanIntroCamera {
				} // namespace C_CSGO_CounterTerroristWingmanIntroCamera

				namespace C_WeaponNOVA {
				} // namespace C_WeaponNOVA

				namespace CGrenadeTracer {
					constexpr auto fl_tracer_duration = 0xD40; // Name: m_flTracerDuration Offset: 0xD40
					constexpr auto n_type = 0xD44; // Name: m_nType Offset: 0xD44
				} // namespace CGrenadeTracer

				namespace C_WeaponUSPSilencer {
				} // namespace C_WeaponUSPSilencer

				namespace C_PointClientUIDialog {
					constexpr auto h_activator = 0xD58; // Name: m_hActivator Offset: 0xD58
					constexpr auto b_start_enabled = 0xD5C; // Name: m_bStartEnabled Offset: 0xD5C
				} // namespace C_PointClientUIDialog

				namespace CDamageRecord {
					constexpr auto player_damager = 0x28; // Name: m_PlayerDamager Offset: 0x28
					constexpr auto player_recipient = 0x2C; // Name: m_PlayerRecipient Offset: 0x2C
					constexpr auto h_player_controller_damager = 0x30; // Name: m_hPlayerControllerDamager Offset: 0x30
					constexpr auto h_player_controller_recipient = 0x34; // Name: m_hPlayerControllerRecipient Offset: 0x34
					constexpr auto sz_player_damager_name = 0x38; // Name: m_szPlayerDamagerName Offset: 0x38
					constexpr auto sz_player_recipient_name = 0x40; // Name: m_szPlayerRecipientName Offset: 0x40
					constexpr auto damager_xuid = 0x48; // Name: m_DamagerXuid Offset: 0x48
					constexpr auto recipient_xuid = 0x50; // Name: m_RecipientXuid Offset: 0x50
					constexpr auto i_bullets_damage = 0x58; // Name: m_iBulletsDamage Offset: 0x58
					constexpr auto i_damage = 0x5C; // Name: m_iDamage Offset: 0x5C
					constexpr auto i_actual_health_removed = 0x60; // Name: m_iActualHealthRemoved Offset: 0x60
					constexpr auto i_num_hits = 0x64; // Name: m_iNumHits Offset: 0x64
					constexpr auto i_last_bullet_update = 0x68; // Name: m_iLastBulletUpdate Offset: 0x68
					constexpr auto b_is_other_enemy = 0x6C; // Name: m_bIsOtherEnemy Offset: 0x6C
					constexpr auto kill_type = 0x6D; // Name: m_killType Offset: 0x6D
				} // namespace CDamageRecord

				namespace C_PrecipitationBlocker {
				} // namespace C_PrecipitationBlocker

				namespace C_CSGO_CounterTerroristTeamIntroCamera {
				} // namespace C_CSGO_CounterTerroristTeamIntroCamera

				namespace EventServerBeginAsyncPostTickWork_t {
				} // namespace EventServerBeginAsyncPostTickWork_t

				namespace C_HandleTest {
					constexpr auto handle = 0x568; // Name: m_Handle Offset: 0x568
					constexpr auto b_send_handle = 0x56C; // Name: m_bSendHandle Offset: 0x56C
				} // namespace C_HandleTest

				namespace C_EnvWindClientside {
					constexpr auto env_wind_shared = 0x568; // Name: m_EnvWindShared Offset: 0x568
				} // namespace C_EnvWindClientside

				namespace C_WeaponMAC10 {
				} // namespace C_WeaponMAC10

				namespace CCSPlayer_UseServices {
				} // namespace CCSPlayer_UseServices

				namespace CPlayer_MovementServices {
					constexpr auto n_impulse = 0x40; // Name: m_nImpulse Offset: 0x40
					constexpr auto n_buttons = 0x48; // Name: m_nButtons Offset: 0x48
					constexpr auto n_queued_button_down_mask = 0x68; // Name: m_nQueuedButtonDownMask Offset: 0x68
					constexpr auto n_queued_button_change_mask = 0x70; // Name: m_nQueuedButtonChangeMask Offset: 0x70
					constexpr auto n_button_double_pressed = 0x78; // Name: m_nButtonDoublePressed Offset: 0x78
					constexpr auto p_button_pressed_cmd_number = 0x80; // Name: m_pButtonPressedCmdNumber Offset: 0x80
					constexpr auto n_last_command_number_processed = 0x180; // Name: m_nLastCommandNumberProcessed Offset: 0x180
					constexpr auto n_toggle_button_down_mask = 0x188; // Name: m_nToggleButtonDownMask Offset: 0x188
					constexpr auto fl_maxspeed = 0x198; // Name: m_flMaxspeed Offset: 0x198
					constexpr auto arr_force_subtick_move_when = 0x19C; // Name: m_arrForceSubtickMoveWhen Offset: 0x19C
					constexpr auto fl_forward_move = 0x1AC; // Name: m_flForwardMove Offset: 0x1AC
					constexpr auto fl_left_move = 0x1B0; // Name: m_flLeftMove Offset: 0x1B0
					constexpr auto fl_up_move = 0x1B4; // Name: m_flUpMove Offset: 0x1B4
					constexpr auto vec_last_movement_impulses = 0x1B8; // Name: m_vecLastMovementImpulses Offset: 0x1B8
					constexpr auto vec_old_view_angles = 0x1C4; // Name: m_vecOldViewAngles Offset: 0x1C4
				} // namespace CPlayer_MovementServices

				namespace CCSPlayerController_InGameMoneyServices {
					constexpr auto i_account = 0x40; // Name: m_iAccount Offset: 0x40
					constexpr auto i_start_account = 0x44; // Name: m_iStartAccount Offset: 0x44
					constexpr auto i_total_cash_spent = 0x48; // Name: m_iTotalCashSpent Offset: 0x48
					constexpr auto i_cash_spent_this_round = 0x4C; // Name: m_iCashSpentThisRound Offset: 0x4C
				} // namespace CCSPlayerController_InGameMoneyServices

				namespace C_EnvWindShared_WindVariationEvent_t {
					constexpr auto fl_wind_angle_variation = 0x0; // Name: m_flWindAngleVariation Offset: 0x0
					constexpr auto fl_wind_speed_variation = 0x4; // Name: m_flWindSpeedVariation Offset: 0x4
				} // namespace C_EnvWindShared_WindVariationEvent_t

				namespace CSpriteOriented {
				} // namespace CSpriteOriented

				namespace C_IncendiaryGrenade {
				} // namespace C_IncendiaryGrenade

				namespace C_WeaponFamas {
				} // namespace C_WeaponFamas

				namespace C_FireSprite {
					constexpr auto vec_move_dir = 0xE38; // Name: m_vecMoveDir Offset: 0xE38
					constexpr auto b_fade_from_above = 0xE44; // Name: m_bFadeFromAbove Offset: 0xE44
				} // namespace C_FireSprite

				namespace C_EnvParticleGlow {
					constexpr auto fl_alpha_scale = 0x12D8; // Name: m_flAlphaScale Offset: 0x12D8
					constexpr auto fl_radius_scale = 0x12DC; // Name: m_flRadiusScale Offset: 0x12DC
					constexpr auto fl_self_illum_scale = 0x12E0; // Name: m_flSelfIllumScale Offset: 0x12E0
					constexpr auto color_tint = 0x12E4; // Name: m_ColorTint Offset: 0x12E4
					constexpr auto h_texture_override = 0x12E8; // Name: m_hTextureOverride Offset: 0x12E8
				} // namespace C_EnvParticleGlow

				namespace C_SoundEventEntity {
					constexpr auto b_start_on_spawn = 0x568; // Name: m_bStartOnSpawn Offset: 0x568
					constexpr auto b_to_local_player = 0x569; // Name: m_bToLocalPlayer Offset: 0x569
					constexpr auto b_stop_on_new = 0x56A; // Name: m_bStopOnNew Offset: 0x56A
					constexpr auto b_save_restore = 0x56B; // Name: m_bSaveRestore Offset: 0x56B
					constexpr auto b_saved_is_playing = 0x56C; // Name: m_bSavedIsPlaying Offset: 0x56C
					constexpr auto fl_saved_elapsed_time = 0x570; // Name: m_flSavedElapsedTime Offset: 0x570
					constexpr auto isz_source_entity_name = 0x578; // Name: m_iszSourceEntityName Offset: 0x578
					constexpr auto isz_attachment_name = 0x580; // Name: m_iszAttachmentName Offset: 0x580
					constexpr auto on_guidchanged = 0x588; // Name: m_onGUIDChanged Offset: 0x588
					constexpr auto on_sound_finished = 0x5B0; // Name: m_onSoundFinished Offset: 0x5B0
					constexpr auto fl_client_cull_radius = 0x5D8; // Name: m_flClientCullRadius Offset: 0x5D8
					constexpr auto isz_sound_name = 0x608; // Name: m_iszSoundName Offset: 0x608
					constexpr auto h_source = 0x618; // Name: m_hSource Offset: 0x618
					constexpr auto n_entity_index_selection = 0x61C; // Name: m_nEntityIndexSelection Offset: 0x61C
					constexpr auto b_client_side_only = 0x0; // Name: m_bClientSideOnly Offset: 0x0
				} // namespace C_SoundEventEntity

				namespace C_CSGO_TeamIntroCharacterPosition {
				} // namespace C_CSGO_TeamIntroCharacterPosition

				namespace C_CSGO_PreviewModelAlias_csgo_item_previewmodel {
				} // namespace C_CSGO_PreviewModelAlias_csgo_item_previewmodel

				namespace C_WeaponM4A1Silencer {
				} // namespace C_WeaponM4A1Silencer

				namespace C_Sun {
					constexpr auto fx_sssun_flare_effect_index = 0xD28; // Name: m_fxSSSunFlareEffectIndex Offset: 0xD28
					constexpr auto fx_sun_flare_effect_index = 0xD2C; // Name: m_fxSunFlareEffectIndex Offset: 0xD2C
					constexpr auto fdist_normalize = 0xD30; // Name: m_fdistNormalize Offset: 0xD30
					constexpr auto v_sun_pos = 0xD34; // Name: m_vSunPos Offset: 0xD34
					constexpr auto v_direction = 0xD40; // Name: m_vDirection Offset: 0xD40
					constexpr auto isz_effect_name = 0xD50; // Name: m_iszEffectName Offset: 0xD50
					constexpr auto isz_sseffect_name = 0xD58; // Name: m_iszSSEffectName Offset: 0xD58
					constexpr auto clr_overlay = 0xD60; // Name: m_clrOverlay Offset: 0xD60
					constexpr auto b_on = 0xD64; // Name: m_bOn Offset: 0xD64
					constexpr auto bmax_color = 0xD65; // Name: m_bmaxColor Offset: 0xD65
					constexpr auto fl_size = 0xD68; // Name: m_flSize Offset: 0xD68
					constexpr auto fl_haze_scale = 0xD6C; // Name: m_flHazeScale Offset: 0xD6C
					constexpr auto fl_rotation = 0xD70; // Name: m_flRotation Offset: 0xD70
					constexpr auto fl_hdrcolor_scale = 0xD74; // Name: m_flHDRColorScale Offset: 0xD74
					constexpr auto fl_alpha_haze = 0xD78; // Name: m_flAlphaHaze Offset: 0xD78
					constexpr auto fl_alpha_scale = 0xD7C; // Name: m_flAlphaScale Offset: 0xD7C
					constexpr auto fl_alpha_hdr = 0xD80; // Name: m_flAlphaHdr Offset: 0xD80
					constexpr auto fl_far_zscale = 0xD84; // Name: m_flFarZScale Offset: 0xD84
				} // namespace C_Sun

				namespace EventAppShutdown_t {
					constexpr auto n_dummy0 = 0x0; // Name: m_nDummy0 Offset: 0x0
				} // namespace EventAppShutdown_t

				namespace ISkeletonAnimationController {
				} // namespace ISkeletonAnimationController

				namespace C_CSGO_EndOfMatchLineupEndpoint {
				} // namespace C_CSGO_EndOfMatchLineupEndpoint

				namespace CCSPlayerController_ActionTrackingServices {
					constexpr auto per_round_stats = 0x40; // Name: m_perRoundStats Offset: 0x40
					constexpr auto match_stats = 0x90; // Name: m_matchStats Offset: 0x90
					constexpr auto i_num_round_kills = 0x110; // Name: m_iNumRoundKills Offset: 0x110
					constexpr auto i_num_round_kills_headshots = 0x114; // Name: m_iNumRoundKillsHeadshots Offset: 0x114
					constexpr auto un_total_round_damage_dealt = 0x118; // Name: m_unTotalRoundDamageDealt Offset: 0x118
				} // namespace CCSPlayerController_ActionTrackingServices

				namespace C_DynamicProp {
					constexpr auto b_use_hitboxes_for_render_box = 0x1110; // Name: m_bUseHitboxesForRenderBox Offset: 0x1110
					constexpr auto b_use_anim_graph = 0x1111; // Name: m_bUseAnimGraph Offset: 0x1111
					constexpr auto p_output_anim_begun = 0x1118; // Name: m_pOutputAnimBegun Offset: 0x1118
					constexpr auto p_output_anim_over = 0x1140; // Name: m_pOutputAnimOver Offset: 0x1140
					constexpr auto p_output_anim_loop_cycle_over = 0x1168; // Name: m_pOutputAnimLoopCycleOver Offset: 0x1168
					constexpr auto on_anim_reached_start = 0x1190; // Name: m_OnAnimReachedStart Offset: 0x1190
					constexpr auto on_anim_reached_end = 0x11B8; // Name: m_OnAnimReachedEnd Offset: 0x11B8
					constexpr auto isz_idle_anim = 0x11E0; // Name: m_iszIdleAnim Offset: 0x11E0
					constexpr auto n_idle_anim_loop_mode = 0x11E8; // Name: m_nIdleAnimLoopMode Offset: 0x11E8
					constexpr auto b_randomize_cycle = 0x11EC; // Name: m_bRandomizeCycle Offset: 0x11EC
					constexpr auto b_start_disabled = 0x11ED; // Name: m_bStartDisabled Offset: 0x11ED
					constexpr auto b_fired_start_end_output = 0x11EE; // Name: m_bFiredStartEndOutput Offset: 0x11EE
					constexpr auto b_force_npc_exclude = 0x11EF; // Name: m_bForceNpcExclude Offset: 0x11EF
					constexpr auto b_create_non_solid = 0x11F0; // Name: m_bCreateNonSolid Offset: 0x11F0
					constexpr auto b_is_override_prop = 0x11F1; // Name: m_bIsOverrideProp Offset: 0x11F1
					constexpr auto i_initial_glow_state = 0x11F4; // Name: m_iInitialGlowState Offset: 0x11F4
					constexpr auto n_glow_range = 0x11F8; // Name: m_nGlowRange Offset: 0x11F8
					constexpr auto n_glow_range_min = 0x11FC; // Name: m_nGlowRangeMin Offset: 0x11FC
					constexpr auto glow_color = 0x1200; // Name: m_glowColor Offset: 0x1200
					constexpr auto n_glow_team = 0x1204; // Name: m_nGlowTeam Offset: 0x1204
					constexpr auto i_cached_frame_count = 0x1208; // Name: m_iCachedFrameCount Offset: 0x1208
					constexpr auto vec_cached_render_mins = 0x120C; // Name: m_vecCachedRenderMins Offset: 0x120C
					constexpr auto vec_cached_render_maxs = 0x1218; // Name: m_vecCachedRenderMaxs Offset: 0x1218
				} // namespace C_DynamicProp

				namespace CompositeMaterial_t {
					constexpr auto target_kvs = 0x8; // Name: m_TargetKVs Offset: 0x8
					constexpr auto pre_generation_kvs = 0x18; // Name: m_PreGenerationKVs Offset: 0x18
					constexpr auto final_kvs = 0x58; // Name: m_FinalKVs Offset: 0x58
					constexpr auto vec_generated_textures = 0x80; // Name: m_vecGeneratedTextures Offset: 0x80
				} // namespace CompositeMaterial_t

				namespace CHitboxComponent {
					constexpr auto bv_disabled_hit_groups = 0x24; // Name: m_bvDisabledHitGroups Offset: 0x24
				} // namespace CHitboxComponent

				namespace C_BulletHitModel {
					constexpr auto mat_local = 0xF88; // Name: m_matLocal Offset: 0xF88
					constexpr auto i_bone_index = 0xFB8; // Name: m_iBoneIndex Offset: 0xFB8
					constexpr auto h_player_parent = 0xFBC; // Name: m_hPlayerParent Offset: 0xFBC
					constexpr auto b_is_hit = 0xFC0; // Name: m_bIsHit Offset: 0xFC0
					constexpr auto fl_time_created = 0xFC4; // Name: m_flTimeCreated Offset: 0xFC4
					constexpr auto vec_start_pos = 0xFC8; // Name: m_vecStartPos Offset: 0xFC8
				} // namespace C_BulletHitModel

				namespace C_MapVetoPickController {
					constexpr auto n_draft_type = 0x578; // Name: m_nDraftType Offset: 0x578
					constexpr auto n_team_winning_coin_toss = 0x57C; // Name: m_nTeamWinningCoinToss Offset: 0x57C
					constexpr auto n_team_with_first_choice = 0x580; // Name: m_nTeamWithFirstChoice Offset: 0x580
					constexpr auto n_vote_map_ids_list = 0x680; // Name: m_nVoteMapIdsList Offset: 0x680
					constexpr auto n_account_ids = 0x69C; // Name: m_nAccountIDs Offset: 0x69C
					constexpr auto n_map_id0 = 0x79C; // Name: m_nMapId0 Offset: 0x79C
					constexpr auto n_map_id1 = 0x89C; // Name: m_nMapId1 Offset: 0x89C
					constexpr auto n_map_id2 = 0x99C; // Name: m_nMapId2 Offset: 0x99C
					constexpr auto n_map_id3 = 0xA9C; // Name: m_nMapId3 Offset: 0xA9C
					constexpr auto n_map_id4 = 0xB9C; // Name: m_nMapId4 Offset: 0xB9C
					constexpr auto n_map_id5 = 0xC9C; // Name: m_nMapId5 Offset: 0xC9C
					constexpr auto n_starting_side0 = 0xD9C; // Name: m_nStartingSide0 Offset: 0xD9C
					constexpr auto n_current_phase = 0xE9C; // Name: m_nCurrentPhase Offset: 0xE9C
					constexpr auto n_phase_start_tick = 0xEA0; // Name: m_nPhaseStartTick Offset: 0xEA0
					constexpr auto n_phase_duration_ticks = 0xEA4; // Name: m_nPhaseDurationTicks Offset: 0xEA4
					constexpr auto n_post_data_update_tick = 0xEA8; // Name: m_nPostDataUpdateTick Offset: 0xEA8
					constexpr auto b_disabled_hud = 0xEAC; // Name: m_bDisabledHud Offset: 0xEAC
				} // namespace C_MapVetoPickController

				namespace CNetworkTransmitComponent {
					constexpr auto n_transmit_state_owned_counter = 0x184; // Name: m_nTransmitStateOwnedCounter Offset: 0x184
				} // namespace CNetworkTransmitComponent

				namespace ragdoll_t {
					constexpr auto list = 0x0; // Name: list Offset: 0x0
					constexpr auto bone_index = 0x18; // Name: boneIndex Offset: 0x18
					constexpr auto allow_stretch = 0x30; // Name: allowStretch Offset: 0x30
					constexpr auto unused = 0x31; // Name: unused Offset: 0x31
				} // namespace ragdoll_t

				namespace C_FireCrackerBlast {
				} // namespace C_FireCrackerBlast

				namespace C_WeaponMP9 {
				} // namespace C_WeaponMP9

				namespace ResponseParams {
					constexpr auto odds = 0x10; // Name: odds Offset: 0x10
					constexpr auto flags = 0x12; // Name: flags Offset: 0x12
					constexpr auto p_followup = 0x18; // Name: m_pFollowup Offset: 0x18
				} // namespace ResponseParams

				namespace WeaponPurchaseTracker_t {
					constexpr auto weapon_purchases = 0x8; // Name: m_weaponPurchases Offset: 0x8
				} // namespace WeaponPurchaseTracker_t

				namespace C_RetakeGameRules {
					constexpr auto n_match_seed = 0xF8; // Name: m_nMatchSeed Offset: 0xF8
					constexpr auto b_blockers_present = 0xFC; // Name: m_bBlockersPresent Offset: 0xFC
					constexpr auto b_round_in_progress = 0xFD; // Name: m_bRoundInProgress Offset: 0xFD
					constexpr auto i_first_second_half_round = 0x100; // Name: m_iFirstSecondHalfRound Offset: 0x100
					constexpr auto i_bomb_site = 0x104; // Name: m_iBombSite Offset: 0x104
				} // namespace C_RetakeGameRules

				namespace C_PointCommentaryNode {
					constexpr auto b_active = 0xF90; // Name: m_bActive Offset: 0xF90
					constexpr auto b_was_active = 0xF91; // Name: m_bWasActive Offset: 0xF91
					constexpr auto fl_end_time = 0xF94; // Name: m_flEndTime Offset: 0xF94
					constexpr auto fl_start_time = 0xF98; // Name: m_flStartTime Offset: 0xF98
					constexpr auto fl_start_time_in_commentary = 0xF9C; // Name: m_flStartTimeInCommentary Offset: 0xF9C
					constexpr auto isz_commentary_file = 0xFA0; // Name: m_iszCommentaryFile Offset: 0xFA0
					constexpr auto isz_title = 0xFA8; // Name: m_iszTitle Offset: 0xFA8
					constexpr auto isz_speakers = 0xFB0; // Name: m_iszSpeakers Offset: 0xFB0
					constexpr auto i_node_number = 0xFB8; // Name: m_iNodeNumber Offset: 0xFB8
					constexpr auto i_node_number_max = 0xFBC; // Name: m_iNodeNumberMax Offset: 0xFBC
					constexpr auto b_listened_to = 0xFC0; // Name: m_bListenedTo Offset: 0xFC0
					constexpr auto h_view_position = 0xFD0; // Name: m_hViewPosition Offset: 0xFD0
					constexpr auto b_restart_after_restore = 0xFD4; // Name: m_bRestartAfterRestore Offset: 0xFD4
				} // namespace C_PointCommentaryNode

				namespace SceneEventId_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace SceneEventId_t

				namespace EngineCountdownTimer {
					constexpr auto duration = 0x8; // Name: m_duration Offset: 0x8
					constexpr auto timestamp = 0xC; // Name: m_timestamp Offset: 0xC
					constexpr auto timescale = 0x10; // Name: m_timescale Offset: 0x10
				} // namespace EngineCountdownTimer

				namespace C_AK47 {
				} // namespace C_AK47

				namespace C_SensorGrenade {
				} // namespace C_SensorGrenade

				namespace CCSPlayer_GlowServices {
				} // namespace CCSPlayer_GlowServices

				namespace C_BaseFlex_Emphasized_Phoneme {
					constexpr auto s_class_name = 0x0; // Name: m_sClassName Offset: 0x0
					constexpr auto fl_amount = 0x18; // Name: m_flAmount Offset: 0x18
					constexpr auto b_required = 0x1C; // Name: m_bRequired Offset: 0x1C
					constexpr auto b_basechecked = 0x1D; // Name: m_bBasechecked Offset: 0x1D
					constexpr auto b_valid = 0x1E; // Name: m_bValid Offset: 0x1E
				} // namespace C_BaseFlex_Emphasized_Phoneme

				namespace IntervalTimer {
					constexpr auto timestamp = 0x8; // Name: m_timestamp Offset: 0x8
					constexpr auto n_world_group_id = 0xC; // Name: m_nWorldGroupId Offset: 0xC
				} // namespace IntervalTimer

				namespace C_FuncLadder {
					constexpr auto vec_ladder_dir = 0xD28; // Name: m_vecLadderDir Offset: 0xD28
					constexpr auto dismounts = 0xD38; // Name: m_Dismounts Offset: 0xD38
					constexpr auto vec_local_top = 0xD50; // Name: m_vecLocalTop Offset: 0xD50
					constexpr auto vec_player_mount_position_top = 0xD5C; // Name: m_vecPlayerMountPositionTop Offset: 0xD5C
					constexpr auto vec_player_mount_position_bottom = 0xD68; // Name: m_vecPlayerMountPositionBottom Offset: 0xD68
					constexpr auto fl_auto_ride_speed = 0xD74; // Name: m_flAutoRideSpeed Offset: 0xD74
					constexpr auto b_disabled = 0xD78; // Name: m_bDisabled Offset: 0xD78
					constexpr auto b_fake_ladder = 0xD79; // Name: m_bFakeLadder Offset: 0xD79
					constexpr auto b_has_slack = 0xD7A; // Name: m_bHasSlack Offset: 0xD7A
				} // namespace C_FuncLadder

				namespace C_CSGO_PreviewModel {
					constexpr auto animgraph = 0x1120; // Name: m_animgraph Offset: 0x1120
					constexpr auto animgraph_character_mode_string = 0x1128; // Name: m_animgraphCharacterModeString Offset: 0x1128
					constexpr auto default_anim = 0x1130; // Name: m_defaultAnim Offset: 0x1130
					constexpr auto n_default_anim_loop_mode = 0x1138; // Name: m_nDefaultAnimLoopMode Offset: 0x1138
					constexpr auto fl_initial_model_scale = 0x113C; // Name: m_flInitialModelScale Offset: 0x113C
					constexpr auto s_initial_weapon_state = 0x1140; // Name: m_sInitialWeaponState Offset: 0x1140
				} // namespace C_CSGO_PreviewModel

				namespace C_SoundOpvarSetOBBEntity {
				} // namespace C_SoundOpvarSetOBBEntity

				namespace CBuoyancyHelper {
					constexpr auto n_fluid_type = 0x18; // Name: m_nFluidType Offset: 0x18
					constexpr auto fl_fluid_density = 0x1C; // Name: m_flFluidDensity Offset: 0x1C
					constexpr auto vec_fraction_of_wheel_submerged_for_wheel_friction = 0x20; // Name: m_vecFractionOfWheelSubmergedForWheelFriction Offset: 0x20
					constexpr auto vec_wheel_friction_scales = 0x38; // Name: m_vecWheelFrictionScales Offset: 0x38
					constexpr auto vec_fraction_of_wheel_submerged_for_wheel_drag = 0x50; // Name: m_vecFractionOfWheelSubmergedForWheelDrag Offset: 0x50
					constexpr auto vec_wheel_drag = 0x68; // Name: m_vecWheelDrag Offset: 0x68
				} // namespace CBuoyancyHelper

				namespace C_FuncElectrifiedVolume {
					constexpr auto n_ambient_effect = 0xD28; // Name: m_nAmbientEffect Offset: 0xD28
					constexpr auto effect_name = 0xD30; // Name: m_EffectName Offset: 0xD30
					constexpr auto b_state = 0xD38; // Name: m_bState Offset: 0xD38
				} // namespace C_FuncElectrifiedVolume

				namespace CAttributeManager_cached_attribute_float_t {
					constexpr auto fl_in = 0x0; // Name: flIn Offset: 0x0
					constexpr auto i_attrib_hook = 0x8; // Name: iAttribHook Offset: 0x8
					constexpr auto fl_out = 0x10; // Name: flOut Offset: 0x10
				} // namespace CAttributeManager_cached_attribute_float_t

				namespace C_BaseGrenade {
					constexpr auto b_has_warned_ai = 0x1120; // Name: m_bHasWarnedAI Offset: 0x1120
					constexpr auto b_is_smoke_grenade = 0x1121; // Name: m_bIsSmokeGrenade Offset: 0x1121
					constexpr auto b_is_live = 0x1122; // Name: m_bIsLive Offset: 0x1122
					constexpr auto dmg_radius = 0x1124; // Name: m_DmgRadius Offset: 0x1124
					constexpr auto fl_detonate_time = 0x1128; // Name: m_flDetonateTime Offset: 0x1128
					constexpr auto fl_warn_aitime = 0x112C; // Name: m_flWarnAITime Offset: 0x112C
					constexpr auto fl_damage = 0x1130; // Name: m_flDamage Offset: 0x1130
					constexpr auto isz_bounce_sound = 0x1138; // Name: m_iszBounceSound Offset: 0x1138
					constexpr auto explosion_sound = 0x1140; // Name: m_ExplosionSound Offset: 0x1140
					constexpr auto h_thrower = 0x114C; // Name: m_hThrower Offset: 0x114C
					constexpr auto fl_next_attack = 0x1164; // Name: m_flNextAttack Offset: 0x1164
					constexpr auto h_original_thrower = 0x1168; // Name: m_hOriginalThrower Offset: 0x1168
				} // namespace C_BaseGrenade

				namespace C_EnvVolumetricFogController {
					constexpr auto fl_scattering = 0x568; // Name: m_flScattering Offset: 0x568
					constexpr auto fl_anisotropy = 0x56C; // Name: m_flAnisotropy Offset: 0x56C
					constexpr auto fl_fade_speed = 0x570; // Name: m_flFadeSpeed Offset: 0x570
					constexpr auto fl_draw_distance = 0x574; // Name: m_flDrawDistance Offset: 0x574
					constexpr auto fl_fade_in_start = 0x578; // Name: m_flFadeInStart Offset: 0x578
					constexpr auto fl_fade_in_end = 0x57C; // Name: m_flFadeInEnd Offset: 0x57C
					constexpr auto fl_indirect_strength = 0x580; // Name: m_flIndirectStrength Offset: 0x580
					constexpr auto n_volume_depth = 0x584; // Name: m_nVolumeDepth Offset: 0x584
					constexpr auto f_first_volume_slice_thickness = 0x588; // Name: m_fFirstVolumeSliceThickness Offset: 0x588
					constexpr auto n_indirect_texture_dim_x = 0x58C; // Name: m_nIndirectTextureDimX Offset: 0x58C
					constexpr auto n_indirect_texture_dim_y = 0x590; // Name: m_nIndirectTextureDimY Offset: 0x590
					constexpr auto n_indirect_texture_dim_z = 0x594; // Name: m_nIndirectTextureDimZ Offset: 0x594
					constexpr auto v_box_mins = 0x598; // Name: m_vBoxMins Offset: 0x598
					constexpr auto v_box_maxs = 0x5A4; // Name: m_vBoxMaxs Offset: 0x5A4
					constexpr auto b_active = 0x5B0; // Name: m_bActive Offset: 0x5B0
					constexpr auto fl_start_aniso_time = 0x5B4; // Name: m_flStartAnisoTime Offset: 0x5B4
					constexpr auto fl_start_scatter_time = 0x5B8; // Name: m_flStartScatterTime Offset: 0x5B8
					constexpr auto fl_start_draw_distance_time = 0x5BC; // Name: m_flStartDrawDistanceTime Offset: 0x5BC
					constexpr auto fl_start_anisotropy = 0x5C0; // Name: m_flStartAnisotropy Offset: 0x5C0
					constexpr auto fl_start_scattering = 0x5C4; // Name: m_flStartScattering Offset: 0x5C4
					constexpr auto fl_start_draw_distance = 0x5C8; // Name: m_flStartDrawDistance Offset: 0x5C8
					constexpr auto fl_default_anisotropy = 0x5CC; // Name: m_flDefaultAnisotropy Offset: 0x5CC
					constexpr auto fl_default_scattering = 0x5D0; // Name: m_flDefaultScattering Offset: 0x5D0
					constexpr auto fl_default_draw_distance = 0x5D4; // Name: m_flDefaultDrawDistance Offset: 0x5D4
					constexpr auto b_start_disabled = 0x5D8; // Name: m_bStartDisabled Offset: 0x5D8
					constexpr auto b_enable_indirect = 0x5D9; // Name: m_bEnableIndirect Offset: 0x5D9
					constexpr auto b_indirect_use_lpvs = 0x5DA; // Name: m_bIndirectUseLPVs Offset: 0x5DA
					constexpr auto b_is_master = 0x5DB; // Name: m_bIsMaster Offset: 0x5DB
					constexpr auto h_fog_indirect_texture = 0x5E0; // Name: m_hFogIndirectTexture Offset: 0x5E0
					constexpr auto n_force_refresh_count = 0x5E8; // Name: m_nForceRefreshCount Offset: 0x5E8
					constexpr auto f_noise_speed = 0x5EC; // Name: m_fNoiseSpeed Offset: 0x5EC
					constexpr auto f_noise_strength = 0x5F0; // Name: m_fNoiseStrength Offset: 0x5F0
					constexpr auto v_noise_scale = 0x5F4; // Name: m_vNoiseScale Offset: 0x5F4
					constexpr auto b_first_time = 0x600; // Name: m_bFirstTime Offset: 0x600
				} // namespace C_EnvVolumetricFogController

				namespace C_WeaponTec9 {
				} // namespace C_WeaponTec9

				namespace C_Breakable {
				} // namespace C_Breakable

				namespace CCSObserver_CameraServices {
				} // namespace CCSObserver_CameraServices

				namespace C_SoundAreaEntityBase {
					constexpr auto b_disabled = 0x568; // Name: m_bDisabled Offset: 0x568
					constexpr auto b_was_enabled = 0x570; // Name: m_bWasEnabled Offset: 0x570
					constexpr auto isz_sound_area_type = 0x578; // Name: m_iszSoundAreaType Offset: 0x578
					constexpr auto v_pos = 0x580; // Name: m_vPos Offset: 0x580
				} // namespace C_SoundAreaEntityBase

				namespace CWorldCompositionChunkReferenceElement_t {
					constexpr auto str_map_to_load = 0x0; // Name: m_strMapToLoad Offset: 0x0
					constexpr auto str_landmark_name = 0x8; // Name: m_strLandmarkName Offset: 0x8
				} // namespace CWorldCompositionChunkReferenceElement_t

				namespace CCSClientPointScriptEntity {
				} // namespace CCSClientPointScriptEntity

				namespace audioparams_t {
					constexpr auto local_sound = 0x8; // Name: localSound Offset: 0x8
					constexpr auto soundscape_index = 0x68; // Name: soundscapeIndex Offset: 0x68
					constexpr auto local_bits = 0x6C; // Name: localBits Offset: 0x6C
					constexpr auto soundscape_entity_list_index = 0x70; // Name: soundscapeEntityListIndex Offset: 0x70
					constexpr auto sound_event_hash = 0x74; // Name: soundEventHash Offset: 0x74
				} // namespace audioparams_t

				namespace C_CS2WeaponModuleBase {
				} // namespace C_CS2WeaponModuleBase

				namespace C_InfoVisibilityBox {
					constexpr auto n_mode = 0x56C; // Name: m_nMode Offset: 0x56C
					constexpr auto v_box_size = 0x570; // Name: m_vBoxSize Offset: 0x570
					constexpr auto b_enabled = 0x57C; // Name: m_bEnabled Offset: 0x57C
				} // namespace C_InfoVisibilityBox

				namespace C_BaseViewModel {
					constexpr auto vec_last_facing = 0xF90; // Name: m_vecLastFacing Offset: 0xF90
					constexpr auto n_view_model_index = 0xF9C; // Name: m_nViewModelIndex Offset: 0xF9C
					constexpr auto n_animation_parity = 0xFA0; // Name: m_nAnimationParity Offset: 0xFA0
					constexpr auto fl_animation_start_time = 0xFA4; // Name: m_flAnimationStartTime Offset: 0xFA4
					constexpr auto h_weapon = 0xFA8; // Name: m_hWeapon Offset: 0xFA8
					constexpr auto s_vmname = 0xFB0; // Name: m_sVMName Offset: 0xFB0
					constexpr auto s_animation_prefix = 0xFB8; // Name: m_sAnimationPrefix Offset: 0xFB8
					constexpr auto i_camera_attachment = 0xFC0; // Name: m_iCameraAttachment Offset: 0xFC0
					constexpr auto vec_last_camera_angles = 0xFC4; // Name: m_vecLastCameraAngles Offset: 0xFC4
					constexpr auto previous_elapsed_duration = 0xFD0; // Name: m_previousElapsedDuration Offset: 0xFD0
					constexpr auto previous_cycle = 0xFD4; // Name: m_previousCycle Offset: 0xFD4
					constexpr auto n_old_animation_parity = 0xFD8; // Name: m_nOldAnimationParity Offset: 0xFD8
					constexpr auto h_old_layer_sequence = 0xFDC; // Name: m_hOldLayerSequence Offset: 0xFDC
					constexpr auto old_layer = 0xFE0; // Name: m_oldLayer Offset: 0xFE0
					constexpr auto old_layer_start_time = 0xFE4; // Name: m_oldLayerStartTime Offset: 0xFE4
					constexpr auto h_control_panel = 0xFE8; // Name: m_hControlPanel Offset: 0xFE8
				} // namespace C_BaseViewModel

				namespace CPrecipitationVData {
					constexpr auto sz_particle_precipitation_effect = 0x28; // Name: m_szParticlePrecipitationEffect Offset: 0x28
					constexpr auto fl_inner_distance = 0x108; // Name: m_flInnerDistance Offset: 0x108
					constexpr auto n_attach_type = 0x10C; // Name: m_nAttachType Offset: 0x10C
					constexpr auto b_batch_same_volume_type = 0x110; // Name: m_bBatchSameVolumeType Offset: 0x110
					constexpr auto n_rtenv_cp = 0x114; // Name: m_nRTEnvCP Offset: 0x114
					constexpr auto n_rtenv_cpcomponent = 0x118; // Name: m_nRTEnvCPComponent Offset: 0x118
					constexpr auto sz_modifier = 0x120; // Name: m_szModifier Offset: 0x120
				} // namespace CPrecipitationVData

				namespace C_BaseClientUIEntity {
					constexpr auto b_enabled = 0xD30; // Name: m_bEnabled Offset: 0xD30
					constexpr auto dialog_xmlname = 0xD38; // Name: m_DialogXMLName Offset: 0xD38
					constexpr auto panel_class_name = 0xD40; // Name: m_PanelClassName Offset: 0xD40
					constexpr auto panel_id = 0xD48; // Name: m_PanelID Offset: 0xD48
				} // namespace C_BaseClientUIEntity

				namespace C_CSWeaponBase {
					constexpr auto fl_fire_sequence_start_time = 0x16DC; // Name: m_flFireSequenceStartTime Offset: 0x16DC
					constexpr auto n_fire_sequence_start_time_change = 0x16E0; // Name: m_nFireSequenceStartTimeChange Offset: 0x16E0
					constexpr auto n_fire_sequence_start_time_ack = 0x16E4; // Name: m_nFireSequenceStartTimeAck Offset: 0x16E4
					constexpr auto e_player_fire_event = 0x16E8; // Name: m_ePlayerFireEvent Offset: 0x16E8
					constexpr auto e_player_fire_event_attack_type = 0x16EC; // Name: m_ePlayerFireEventAttackType Offset: 0x16EC
					constexpr auto seq_idle = 0x16F0; // Name: m_seqIdle Offset: 0x16F0
					constexpr auto seq_fire_primary = 0x16F4; // Name: m_seqFirePrimary Offset: 0x16F4
					constexpr auto seq_fire_secondary = 0x16F8; // Name: m_seqFireSecondary Offset: 0x16F8
					constexpr auto third_person_fire_sequences = 0x1700; // Name: m_thirdPersonFireSequences Offset: 0x1700
					constexpr auto h_current_third_person_sequence = 0x1718; // Name: m_hCurrentThirdPersonSequence Offset: 0x1718
					constexpr auto n_silencer_bone_index = 0x171C; // Name: m_nSilencerBoneIndex Offset: 0x171C
					constexpr auto third_person_sequences = 0x1720; // Name: m_thirdPersonSequences Offset: 0x1720
					constexpr auto client_previous_weapon_state = 0x1758; // Name: m_ClientPreviousWeaponState Offset: 0x1758
					constexpr auto i_state = 0x175C; // Name: m_iState Offset: 0x175C
					constexpr auto fl_crosshair_distance = 0x1760; // Name: m_flCrosshairDistance Offset: 0x1760
					constexpr auto i_ammo_last_check = 0x1764; // Name: m_iAmmoLastCheck Offset: 0x1764
					constexpr auto i_alpha = 0x1768; // Name: m_iAlpha Offset: 0x1768
					constexpr auto i_scope_texture_id = 0x176C; // Name: m_iScopeTextureID Offset: 0x176C
					constexpr auto i_crosshair_texture_id = 0x1770; // Name: m_iCrosshairTextureID Offset: 0x1770
					constexpr auto fl_gun_accuracy_position_deprecated = 0x1774; // Name: m_flGunAccuracyPositionDeprecated Offset: 0x1774
					constexpr auto n_last_empty_sound_cmd_num = 0x1778; // Name: m_nLastEmptySoundCmdNum Offset: 0x1778
					constexpr auto n_view_model_index = 0x177C; // Name: m_nViewModelIndex Offset: 0x177C
					constexpr auto b_reloads_with_clips = 0x1780; // Name: m_bReloadsWithClips Offset: 0x1780
					constexpr auto fl_time_weapon_idle = 0x1784; // Name: m_flTimeWeaponIdle Offset: 0x1784
					constexpr auto b_fire_on_empty = 0x1788; // Name: m_bFireOnEmpty Offset: 0x1788
					constexpr auto on_player_pickup = 0x1790; // Name: m_OnPlayerPickup Offset: 0x1790
					constexpr auto weapon_mode = 0x17B8; // Name: m_weaponMode Offset: 0x17B8
					constexpr auto fl_turning_inaccuracy_delta = 0x17BC; // Name: m_flTurningInaccuracyDelta Offset: 0x17BC
					constexpr auto vec_turning_inaccuracy_eye_dir_last = 0x17C0; // Name: m_vecTurningInaccuracyEyeDirLast Offset: 0x17C0
					constexpr auto fl_turning_inaccuracy = 0x17CC; // Name: m_flTurningInaccuracy Offset: 0x17CC
					constexpr auto f_accuracy_penalty = 0x17D0; // Name: m_fAccuracyPenalty Offset: 0x17D0
					constexpr auto fl_last_accuracy_update_time = 0x17D4; // Name: m_flLastAccuracyUpdateTime Offset: 0x17D4
					constexpr auto f_accuracy_smoothed_for_zoom = 0x17D8; // Name: m_fAccuracySmoothedForZoom Offset: 0x17D8
					constexpr auto f_scope_zoom_end_time = 0x17DC; // Name: m_fScopeZoomEndTime Offset: 0x17DC
					constexpr auto i_recoil_index = 0x17E0; // Name: m_iRecoilIndex Offset: 0x17E0
					constexpr auto fl_recoil_index = 0x17E4; // Name: m_flRecoilIndex Offset: 0x17E4
					constexpr auto b_burst_mode = 0x17E8; // Name: m_bBurstMode Offset: 0x17E8
					constexpr auto fl_last_burst_mode_change_time = 0x17EC; // Name: m_flLastBurstModeChangeTime Offset: 0x17EC
					constexpr auto n_postpone_fire_ready_ticks = 0x17F0; // Name: m_nPostponeFireReadyTicks Offset: 0x17F0
					constexpr auto fl_postpone_fire_ready_frac = 0x17F4; // Name: m_flPostponeFireReadyFrac Offset: 0x17F4
					constexpr auto b_in_reload = 0x17F8; // Name: m_bInReload Offset: 0x17F8
					constexpr auto b_reload_visually_complete = 0x17F9; // Name: m_bReloadVisuallyComplete Offset: 0x17F9
					constexpr auto fl_dropped_at_time = 0x17FC; // Name: m_flDroppedAtTime Offset: 0x17FC
					constexpr auto b_is_hauled_back = 0x1800; // Name: m_bIsHauledBack Offset: 0x1800
					constexpr auto b_silencer_on = 0x1801; // Name: m_bSilencerOn Offset: 0x1801
					constexpr auto fl_time_silencer_switch_complete = 0x1804; // Name: m_flTimeSilencerSwitchComplete Offset: 0x1804
					constexpr auto i_original_team_number = 0x1808; // Name: m_iOriginalTeamNumber Offset: 0x1808
					constexpr auto i_most_recent_team_number = 0x180C; // Name: m_iMostRecentTeamNumber Offset: 0x180C
					constexpr auto b_dropped_near_buy_zone = 0x1810; // Name: m_bDroppedNearBuyZone Offset: 0x1810
					constexpr auto fl_next_attack_render_time_offset = 0x1814; // Name: m_flNextAttackRenderTimeOffset Offset: 0x1814
					constexpr auto b_clear_weapon_identifying_ugc = 0x18B0; // Name: m_bClearWeaponIdentifyingUGC Offset: 0x18B0
					constexpr auto b_visuals_data_set = 0x18B1; // Name: m_bVisualsDataSet Offset: 0x18B1
					constexpr auto b_old_first_person_spectated_state = 0x18B2; // Name: m_bOldFirstPersonSpectatedState Offset: 0x18B2
					constexpr auto b_uiweapon = 0x18B3; // Name: m_bUIWeapon Offset: 0x18B3
					constexpr auto n_custom_econ_reload_event_id = 0x18B4; // Name: m_nCustomEconReloadEventId Offset: 0x18B4
					constexpr auto next_prev_owner_use_time = 0x18C0; // Name: m_nextPrevOwnerUseTime Offset: 0x18C0
					constexpr auto h_prev_owner = 0x18C4; // Name: m_hPrevOwner Offset: 0x18C4
					constexpr auto n_drop_tick = 0x18C8; // Name: m_nDropTick Offset: 0x18C8
					constexpr auto donated = 0x18EC; // Name: m_donated Offset: 0x18EC
					constexpr auto f_last_shot_time = 0x18F0; // Name: m_fLastShotTime Offset: 0x18F0
					constexpr auto b_was_owned_by_ct = 0x18F4; // Name: m_bWasOwnedByCT Offset: 0x18F4
					constexpr auto b_was_owned_by_terrorist = 0x18F5; // Name: m_bWasOwnedByTerrorist Offset: 0x18F5
					constexpr auto gun_heat = 0x18F8; // Name: m_gunHeat Offset: 0x18F8
					constexpr auto smoke_attachments = 0x18FC; // Name: m_smokeAttachments Offset: 0x18FC
					constexpr auto last_smoke_time = 0x1900; // Name: m_lastSmokeTime Offset: 0x1900
					constexpr auto fl_next_client_fire_bullet_time = 0x1904; // Name: m_flNextClientFireBulletTime Offset: 0x1904
					constexpr auto fl_next_client_fire_bullet_time__repredict = 0x1908; // Name: m_flNextClientFireBulletTime_Repredict Offset: 0x1908
					constexpr auto iron_sight_controller = 0x19E0; // Name: m_IronSightController Offset: 0x19E0
					constexpr auto i_iron_sight_mode = 0x1A90; // Name: m_iIronSightMode Offset: 0x1A90
					constexpr auto fl_last_lostrace_failure_time = 0x1AA0; // Name: m_flLastLOSTraceFailureTime Offset: 0x1AA0
					constexpr auto i_num_empty_attacks = 0x1AA4; // Name: m_iNumEmptyAttacks Offset: 0x1AA4
					constexpr auto fl_last_mag_drop_request_time = 0x1B00; // Name: m_flLastMagDropRequestTime Offset: 0x1B00
					constexpr auto fl_wat_tick_offset = 0x1B04; // Name: m_flWatTickOffset Offset: 0x1B04
				} // namespace C_CSWeaponBase

				namespace C_FuncTrackTrain {
					constexpr auto n_long_axis = 0xD28; // Name: m_nLongAxis Offset: 0xD28
					constexpr auto fl_radius = 0xD2C; // Name: m_flRadius Offset: 0xD2C
					constexpr auto fl_line_length = 0xD30; // Name: m_flLineLength Offset: 0xD30
				} // namespace C_FuncTrackTrain

				namespace CSkillDamage {
					constexpr auto fl_damage = 0x0; // Name: m_flDamage Offset: 0x0
					constexpr auto fl_npcdamage_scalar_vs_npc = 0x10; // Name: m_flNPCDamageScalarVsNPC Offset: 0x10
					constexpr auto fl_physics_force_damage = 0x14; // Name: m_flPhysicsForceDamage Offset: 0x14
				} // namespace CSkillDamage

				namespace CCSPlayer_ActionTrackingServices {
					constexpr auto h_last_weapon_before_c4_auto_switch = 0x40; // Name: m_hLastWeaponBeforeC4AutoSwitch Offset: 0x40
					constexpr auto b_is_rescuing = 0x44; // Name: m_bIsRescuing Offset: 0x44
					constexpr auto weapon_purchases_this_match = 0x48; // Name: m_weaponPurchasesThisMatch Offset: 0x48
					constexpr auto weapon_purchases_this_round = 0xA0; // Name: m_weaponPurchasesThisRound Offset: 0xA0
				} // namespace CCSPlayer_ActionTrackingServices

				namespace CRR_Response {
					constexpr auto type = 0x0; // Name: m_Type Offset: 0x0
					constexpr auto sz_response_name = 0x1; // Name: m_szResponseName Offset: 0x1
					constexpr auto sz_matching_rule = 0xC1; // Name: m_szMatchingRule Offset: 0xC1
					constexpr auto params = 0x148; // Name: m_Params Offset: 0x148
					constexpr auto f_match_score = 0x168; // Name: m_fMatchScore Offset: 0x168
					constexpr auto sz_speaker_context = 0x170; // Name: m_szSpeakerContext Offset: 0x170
					constexpr auto sz_world_context = 0x178; // Name: m_szWorldContext Offset: 0x178
					constexpr auto followup = 0x180; // Name: m_Followup Offset: 0x180
					constexpr auto recipient_filter = 0x1B2; // Name: m_recipientFilter Offset: 0x1B2
					constexpr auto pch_criteria_names = 0x1B8; // Name: m_pchCriteriaNames Offset: 0x1B8
					constexpr auto pch_criteria_values = 0x1D0; // Name: m_pchCriteriaValues Offset: 0x1D0
				} // namespace CRR_Response

				namespace CSoundPatch {
					constexpr auto pitch = 0x8; // Name: m_pitch Offset: 0x8
					constexpr auto volume = 0x18; // Name: m_volume Offset: 0x18
					constexpr auto shutdown_time = 0x30; // Name: m_shutdownTime Offset: 0x30
					constexpr auto fl_last_time = 0x34; // Name: m_flLastTime Offset: 0x34
					constexpr auto isz_sound_script_name = 0x38; // Name: m_iszSoundScriptName Offset: 0x38
					constexpr auto h_ent = 0x40; // Name: m_hEnt Offset: 0x40
					constexpr auto sound_entity_index = 0x44; // Name: m_soundEntityIndex Offset: 0x44
					constexpr auto sound_origin = 0x48; // Name: m_soundOrigin Offset: 0x48
					constexpr auto is_playing = 0x54; // Name: m_isPlaying Offset: 0x54
					constexpr auto filter = 0x58; // Name: m_Filter Offset: 0x58
					constexpr auto fl_close_caption_duration = 0x80; // Name: m_flCloseCaptionDuration Offset: 0x80
					constexpr auto b_updated_sound_origin = 0x84; // Name: m_bUpdatedSoundOrigin Offset: 0x84
					constexpr auto isz_class_name = 0x88; // Name: m_iszClassName Offset: 0x88
				} // namespace CSoundPatch

				namespace GeneratedTextureHandle_t {
					constexpr auto str_bitmap_name = 0x0; // Name: m_strBitmapName Offset: 0x0
				} // namespace GeneratedTextureHandle_t

				namespace shard_model_desc_t {
					constexpr auto n_model_id = 0x8; // Name: m_nModelID Offset: 0x8
					constexpr auto h_material_base = 0x10; // Name: m_hMaterialBase Offset: 0x10
					constexpr auto h_material_damage_overlay = 0x18; // Name: m_hMaterialDamageOverlay Offset: 0x18
					constexpr auto solid = 0x20; // Name: m_solid Offset: 0x20
					constexpr auto vec_panel_size = 0x24; // Name: m_vecPanelSize Offset: 0x24
					constexpr auto vec_stress_position_a = 0x2C; // Name: m_vecStressPositionA Offset: 0x2C
					constexpr auto vec_stress_position_b = 0x34; // Name: m_vecStressPositionB Offset: 0x34
					constexpr auto vec_panel_vertices = 0x40; // Name: m_vecPanelVertices Offset: 0x40
					constexpr auto v_initial_panel_vertices = 0x58; // Name: m_vInitialPanelVertices Offset: 0x58
					constexpr auto fl_glass_half_thickness = 0x70; // Name: m_flGlassHalfThickness Offset: 0x70
					constexpr auto b_has_parent = 0x74; // Name: m_bHasParent Offset: 0x74
					constexpr auto b_parent_frozen = 0x75; // Name: m_bParentFrozen Offset: 0x75
					constexpr auto surface_prop_string_token = 0x78; // Name: m_SurfacePropStringToken Offset: 0x78
				} // namespace shard_model_desc_t

				namespace C_SceneEntity_QueuedEvents_t {
					constexpr auto starttime = 0x0; // Name: starttime Offset: 0x0
				} // namespace C_SceneEntity_QueuedEvents_t

				namespace CBaseProp {
					constexpr auto b_model_overrode_block_los = 0xF88; // Name: m_bModelOverrodeBlockLOS Offset: 0xF88
					constexpr auto i_shape_type = 0xF8C; // Name: m_iShapeType Offset: 0xF8C
					constexpr auto b_conform_to_collision_bounds = 0xF90; // Name: m_bConformToCollisionBounds Offset: 0xF90
					constexpr auto m_preferred_catch_transform = 0xF94; // Name: m_mPreferredCatchTransform Offset: 0xF94
				} // namespace CBaseProp

				namespace CompositeMaterialAssemblyProcedure_t {
					constexpr auto vec_comp_mat_includes = 0x0; // Name: m_vecCompMatIncludes Offset: 0x0
					constexpr auto vec_match_filters = 0x18; // Name: m_vecMatchFilters Offset: 0x18
					constexpr auto vec_composite_input_containers = 0x30; // Name: m_vecCompositeInputContainers Offset: 0x30
					constexpr auto vec_property_mutators = 0x48; // Name: m_vecPropertyMutators Offset: 0x48
				} // namespace CompositeMaterialAssemblyProcedure_t

				namespace C_WeaponHKP2000 {
				} // namespace C_WeaponHKP2000

				namespace CTakeDamageInfoAPI {
				} // namespace CTakeDamageInfoAPI

				namespace C_BaseEntityAPI {
				} // namespace C_BaseEntityAPI

				namespace C_WeaponXM1014 {
				} // namespace C_WeaponXM1014

				namespace C_MapPreviewParticleSystem {
				} // namespace C_MapPreviewParticleSystem

				namespace CBreachCharge {
				} // namespace CBreachCharge

				namespace ServerAuthoritativeWeaponSlot_t {
					constexpr auto un_class = 0x28; // Name: unClass Offset: 0x28
					constexpr auto un_slot = 0x2A; // Name: unSlot Offset: 0x2A
					constexpr auto un_item_def_idx = 0x2C; // Name: unItemDefIdx Offset: 0x2C
				} // namespace ServerAuthoritativeWeaponSlot_t

				namespace C_EnvCubemap {
					constexpr auto entity_h_cubemap_texture = 0x5E8; // Name: m_Entity_hCubemapTexture Offset: 0x5E8
					constexpr auto entity_b_custom_cubemap_texture = 0x5F0; // Name: m_Entity_bCustomCubemapTexture Offset: 0x5F0
					constexpr auto entity_fl_influence_radius = 0x5F4; // Name: m_Entity_flInfluenceRadius Offset: 0x5F4
					constexpr auto entity_v_box_project_mins = 0x5F8; // Name: m_Entity_vBoxProjectMins Offset: 0x5F8
					constexpr auto entity_v_box_project_maxs = 0x604; // Name: m_Entity_vBoxProjectMaxs Offset: 0x604
					constexpr auto entity_b_moveable = 0x610; // Name: m_Entity_bMoveable Offset: 0x610
					constexpr auto entity_n_handshake = 0x614; // Name: m_Entity_nHandshake Offset: 0x614
					constexpr auto entity_n_env_cube_map_array_index = 0x618; // Name: m_Entity_nEnvCubeMapArrayIndex Offset: 0x618
					constexpr auto entity_n_priority = 0x61C; // Name: m_Entity_nPriority Offset: 0x61C
					constexpr auto entity_fl_edge_fade_dist = 0x620; // Name: m_Entity_flEdgeFadeDist Offset: 0x620
					constexpr auto entity_v_edge_fade_dists = 0x624; // Name: m_Entity_vEdgeFadeDists Offset: 0x624
					constexpr auto entity_fl_diffuse_scale = 0x630; // Name: m_Entity_flDiffuseScale Offset: 0x630
					constexpr auto entity_b_start_disabled = 0x634; // Name: m_Entity_bStartDisabled Offset: 0x634
					constexpr auto entity_b_default_env_map = 0x635; // Name: m_Entity_bDefaultEnvMap Offset: 0x635
					constexpr auto entity_b_default_spec_env_map = 0x636; // Name: m_Entity_bDefaultSpecEnvMap Offset: 0x636
					constexpr auto entity_b_indoor_cube_map = 0x637; // Name: m_Entity_bIndoorCubeMap Offset: 0x637
					constexpr auto entity_b_copy_diffuse_from_default_cubemap = 0x638; // Name: m_Entity_bCopyDiffuseFromDefaultCubemap Offset: 0x638
					constexpr auto entity_b_enabled = 0x648; // Name: m_Entity_bEnabled Offset: 0x648
				} // namespace C_EnvCubemap

				namespace C_PredictedViewModel {
					constexpr auto v_predicted_lag_offset = 0xFF0; // Name: m_vPredictedLagOffset Offset: 0xFF0
					constexpr auto target_speed = 0xFFC; // Name: m_targetSpeed Offset: 0xFFC
					constexpr auto current_speed = 0x1008; // Name: m_currentSpeed Offset: 0x1008
				} // namespace C_PredictedViewModel

				namespace C_WeaponBizon {
				} // namespace C_WeaponBizon

				namespace C_PortraitWorldCallbackHandler {
				} // namespace C_PortraitWorldCallbackHandler

				namespace C_PointValueRemapper {
					constexpr auto b_disabled = 0x568; // Name: m_bDisabled Offset: 0x568
					constexpr auto b_disabled_old = 0x569; // Name: m_bDisabledOld Offset: 0x569
					constexpr auto b_update_on_client = 0x56A; // Name: m_bUpdateOnClient Offset: 0x56A
					constexpr auto n_input_type = 0x56C; // Name: m_nInputType Offset: 0x56C
					constexpr auto h_remap_line_start = 0x570; // Name: m_hRemapLineStart Offset: 0x570
					constexpr auto h_remap_line_end = 0x574; // Name: m_hRemapLineEnd Offset: 0x574
					constexpr auto fl_maximum_change_per_second = 0x578; // Name: m_flMaximumChangePerSecond Offset: 0x578
					constexpr auto fl_disengage_distance = 0x57C; // Name: m_flDisengageDistance Offset: 0x57C
					constexpr auto fl_engage_distance = 0x580; // Name: m_flEngageDistance Offset: 0x580
					constexpr auto b_requires_use_key = 0x584; // Name: m_bRequiresUseKey Offset: 0x584
					constexpr auto n_output_type = 0x588; // Name: m_nOutputType Offset: 0x588
					constexpr auto h_output_entities = 0x590; // Name: m_hOutputEntities Offset: 0x590
					constexpr auto n_haptics_type = 0x5A8; // Name: m_nHapticsType Offset: 0x5A8
					constexpr auto n_momentum_type = 0x5AC; // Name: m_nMomentumType Offset: 0x5AC
					constexpr auto fl_momentum_modifier = 0x5B0; // Name: m_flMomentumModifier Offset: 0x5B0
					constexpr auto fl_snap_value = 0x5B4; // Name: m_flSnapValue Offset: 0x5B4
					constexpr auto fl_current_momentum = 0x5B8; // Name: m_flCurrentMomentum Offset: 0x5B8
					constexpr auto n_ratchet_type = 0x5BC; // Name: m_nRatchetType Offset: 0x5BC
					constexpr auto fl_ratchet_offset = 0x5C0; // Name: m_flRatchetOffset Offset: 0x5C0
					constexpr auto fl_input_offset = 0x5C4; // Name: m_flInputOffset Offset: 0x5C4
					constexpr auto b_engaged = 0x5C8; // Name: m_bEngaged Offset: 0x5C8
					constexpr auto b_first_update = 0x5C9; // Name: m_bFirstUpdate Offset: 0x5C9
					constexpr auto fl_previous_value = 0x5CC; // Name: m_flPreviousValue Offset: 0x5CC
					constexpr auto fl_previous_update_tick_time = 0x5D0; // Name: m_flPreviousUpdateTickTime Offset: 0x5D0
					constexpr auto vec_previous_test_point = 0x5D4; // Name: m_vecPreviousTestPoint Offset: 0x5D4
				} // namespace C_PointValueRemapper

				namespace CCSPlayer_BuyServices {
					constexpr auto vec_sellback_purchase_entries = 0x40; // Name: m_vecSellbackPurchaseEntries Offset: 0x40
				} // namespace CCSPlayer_BuyServices

				namespace C_EnvCubemapBox {
				} // namespace C_EnvCubemapBox

				namespace CPlayer_AutoaimServices {
				} // namespace CPlayer_AutoaimServices

				namespace C_CSGO_EndOfMatchCamera {
				} // namespace C_CSGO_EndOfMatchCamera

				namespace C_SoundOpvarSetPointBase {
					constexpr auto isz_stack_name = 0x568; // Name: m_iszStackName Offset: 0x568
					constexpr auto isz_operator_name = 0x570; // Name: m_iszOperatorName Offset: 0x570
					constexpr auto isz_opvar_name = 0x578; // Name: m_iszOpvarName Offset: 0x578
					constexpr auto i_opvar_index = 0x580; // Name: m_iOpvarIndex Offset: 0x580
					constexpr auto b_use_auto_compare = 0x584; // Name: m_bUseAutoCompare Offset: 0x584
				} // namespace C_SoundOpvarSetPointBase

				namespace C_PhysBox {
				} // namespace C_PhysBox

				namespace C_WeaponTaser {
					constexpr auto f_fire_time = 0x1B40; // Name: m_fFireTime Offset: 0x1B40
					constexpr auto n_last_attack_tick = 0x1B44; // Name: m_nLastAttackTick Offset: 0x1B44
				} // namespace C_WeaponTaser

				namespace C_LightEntity {
					constexpr auto clight_component = 0xD28; // Name: m_CLightComponent Offset: 0xD28
				} // namespace C_LightEntity

				namespace C_Fists {
					constexpr auto b_playing_uninterruptable_act = 0x1B20; // Name: m_bPlayingUninterruptableAct Offset: 0x1B20
					constexpr auto n_uninterruptable_activity = 0x1B24; // Name: m_nUninterruptableActivity Offset: 0x1B24
				} // namespace C_Fists

				namespace C_PhysicsPropMultiplayer {
				} // namespace C_PhysicsPropMultiplayer

				namespace CInfoDynamicShadowHintBox {
					constexpr auto v_box_mins = 0x580; // Name: m_vBoxMins Offset: 0x580
					constexpr auto v_box_maxs = 0x58C; // Name: m_vBoxMaxs Offset: 0x58C
				} // namespace CInfoDynamicShadowHintBox

				namespace C_EnvCubemapFog {
					constexpr auto fl_end_distance = 0x568; // Name: m_flEndDistance Offset: 0x568
					constexpr auto fl_start_distance = 0x56C; // Name: m_flStartDistance Offset: 0x56C
					constexpr auto fl_fog_falloff_exponent = 0x570; // Name: m_flFogFalloffExponent Offset: 0x570
					constexpr auto b_height_fog_enabled = 0x574; // Name: m_bHeightFogEnabled Offset: 0x574
					constexpr auto fl_fog_height_width = 0x578; // Name: m_flFogHeightWidth Offset: 0x578
					constexpr auto fl_fog_height_end = 0x57C; // Name: m_flFogHeightEnd Offset: 0x57C
					constexpr auto fl_fog_height_start = 0x580; // Name: m_flFogHeightStart Offset: 0x580
					constexpr auto fl_fog_height_exponent = 0x584; // Name: m_flFogHeightExponent Offset: 0x584
					constexpr auto fl_lodbias = 0x588; // Name: m_flLODBias Offset: 0x588
					constexpr auto b_active = 0x58C; // Name: m_bActive Offset: 0x58C
					constexpr auto b_start_disabled = 0x58D; // Name: m_bStartDisabled Offset: 0x58D
					constexpr auto fl_fog_max_opacity = 0x590; // Name: m_flFogMaxOpacity Offset: 0x590
					constexpr auto n_cubemap_source_type = 0x594; // Name: m_nCubemapSourceType Offset: 0x594
					constexpr auto h_sky_material = 0x598; // Name: m_hSkyMaterial Offset: 0x598
					constexpr auto isz_sky_entity = 0x5A0; // Name: m_iszSkyEntity Offset: 0x5A0
					constexpr auto h_fog_cubemap_texture = 0x5A8; // Name: m_hFogCubemapTexture Offset: 0x5A8
					constexpr auto b_has_height_fog_end = 0x5B0; // Name: m_bHasHeightFogEnd Offset: 0x5B0
					constexpr auto b_first_time = 0x5B1; // Name: m_bFirstTime Offset: 0x5B1
				} // namespace C_EnvCubemapFog

				namespace CNetworkedSequenceOperation {
					constexpr auto h_sequence = 0x8; // Name: m_hSequence Offset: 0x8
					constexpr auto fl_prev_cycle = 0xC; // Name: m_flPrevCycle Offset: 0xC
					constexpr auto fl_cycle = 0x10; // Name: m_flCycle Offset: 0x10
					constexpr auto fl_weight = 0x14; // Name: m_flWeight Offset: 0x14
					constexpr auto b_sequence_change_networked = 0x1C; // Name: m_bSequenceChangeNetworked Offset: 0x1C
					constexpr auto b_discontinuity = 0x1D; // Name: m_bDiscontinuity Offset: 0x1D
					constexpr auto fl_prev_cycle_from_discontinuity = 0x20; // Name: m_flPrevCycleFromDiscontinuity Offset: 0x20
					constexpr auto fl_prev_cycle_for_anim_event_detection = 0x24; // Name: m_flPrevCycleForAnimEventDetection Offset: 0x24
				} // namespace CNetworkedSequenceOperation

				namespace EntityRenderAttribute_t {
					constexpr auto id = 0x30; // Name: m_ID Offset: 0x30
					constexpr auto values = 0x34; // Name: m_Values Offset: 0x34
				} // namespace EntityRenderAttribute_t

				namespace C_ShatterGlassShardPhysics {
					constexpr auto shard_desc = 0x1120; // Name: m_ShardDesc Offset: 0x1120
				} // namespace C_ShatterGlassShardPhysics

				namespace C_WeaponElite {
				} // namespace C_WeaponElite

				namespace C_PlayerVisibility {
					constexpr auto fl_visibility_strength = 0x568; // Name: m_flVisibilityStrength Offset: 0x568
					constexpr auto fl_fog_distance_multiplier = 0x56C; // Name: m_flFogDistanceMultiplier Offset: 0x56C
					constexpr auto fl_fog_max_density_multiplier = 0x570; // Name: m_flFogMaxDensityMultiplier Offset: 0x570
					constexpr auto fl_fade_time = 0x574; // Name: m_flFadeTime Offset: 0x574
					constexpr auto b_start_disabled = 0x578; // Name: m_bStartDisabled Offset: 0x578
					constexpr auto b_is_enabled = 0x579; // Name: m_bIsEnabled Offset: 0x579
				} // namespace C_PlayerVisibility

				namespace fogparams_t {
					constexpr auto dir_primary = 0x8; // Name: dirPrimary Offset: 0x8
					constexpr auto color_primary = 0x14; // Name: colorPrimary Offset: 0x14
					constexpr auto color_secondary = 0x18; // Name: colorSecondary Offset: 0x18
					constexpr auto color_primary_lerp_to = 0x1C; // Name: colorPrimaryLerpTo Offset: 0x1C
					constexpr auto color_secondary_lerp_to = 0x20; // Name: colorSecondaryLerpTo Offset: 0x20
					constexpr auto start = 0x24; // Name: start Offset: 0x24
					constexpr auto end = 0x28; // Name: end Offset: 0x28
					constexpr auto farz = 0x2C; // Name: farz Offset: 0x2C
					constexpr auto maxdensity = 0x30; // Name: maxdensity Offset: 0x30
					constexpr auto exponent = 0x34; // Name: exponent Offset: 0x34
					constexpr auto hdrcolor_scale = 0x38; // Name: HDRColorScale Offset: 0x38
					constexpr auto skybox_fog_factor = 0x3C; // Name: skyboxFogFactor Offset: 0x3C
					constexpr auto skybox_fog_factor_lerp_to = 0x40; // Name: skyboxFogFactorLerpTo Offset: 0x40
					constexpr auto start_lerp_to = 0x44; // Name: startLerpTo Offset: 0x44
					constexpr auto end_lerp_to = 0x48; // Name: endLerpTo Offset: 0x48
					constexpr auto maxdensity_lerp_to = 0x4C; // Name: maxdensityLerpTo Offset: 0x4C
					constexpr auto lerptime = 0x50; // Name: lerptime Offset: 0x50
					constexpr auto duration = 0x54; // Name: duration Offset: 0x54
					constexpr auto blendtobackground = 0x58; // Name: blendtobackground Offset: 0x58
					constexpr auto scattering = 0x5C; // Name: scattering Offset: 0x5C
					constexpr auto locallightscale = 0x60; // Name: locallightscale Offset: 0x60
					constexpr auto enable = 0x64; // Name: enable Offset: 0x64
					constexpr auto blend = 0x65; // Name: blend Offset: 0x65
					constexpr auto b_no_reflection_fog = 0x66; // Name: m_bNoReflectionFog Offset: 0x66
					constexpr auto b_padding = 0x67; // Name: m_bPadding Offset: 0x67
				} // namespace fogparams_t

				namespace CNetworkOriginCellCoordQuantizedVector {
					constexpr auto cell_x = 0x10; // Name: m_cellX Offset: 0x10
					constexpr auto cell_y = 0x12; // Name: m_cellY Offset: 0x12
					constexpr auto cell_z = 0x14; // Name: m_cellZ Offset: 0x14
					constexpr auto n_outside_world = 0x16; // Name: m_nOutsideWorld Offset: 0x16
					constexpr auto vec_x = 0x18; // Name: m_vecX Offset: 0x18
					constexpr auto vec_y = 0x20; // Name: m_vecY Offset: 0x20
					constexpr auto vec_z = 0x28; // Name: m_vecZ Offset: 0x28
				} // namespace CNetworkOriginCellCoordQuantizedVector

				namespace CPropDataComponent {
					constexpr auto fl_dmg_mod_bullet = 0x10; // Name: m_flDmgModBullet Offset: 0x10
					constexpr auto fl_dmg_mod_club = 0x14; // Name: m_flDmgModClub Offset: 0x14
					constexpr auto fl_dmg_mod_explosive = 0x18; // Name: m_flDmgModExplosive Offset: 0x18
					constexpr auto fl_dmg_mod_fire = 0x1C; // Name: m_flDmgModFire Offset: 0x1C
					constexpr auto isz_physics_damage_table_name = 0x20; // Name: m_iszPhysicsDamageTableName Offset: 0x20
					constexpr auto isz_base_prop_data = 0x28; // Name: m_iszBasePropData Offset: 0x28
					constexpr auto n_interactions = 0x30; // Name: m_nInteractions Offset: 0x30
					constexpr auto b_spawn_motion_disabled = 0x34; // Name: m_bSpawnMotionDisabled Offset: 0x34
					constexpr auto n_disable_take_physics_damage_spawn_flag = 0x38; // Name: m_nDisableTakePhysicsDamageSpawnFlag Offset: 0x38
					constexpr auto n_motion_disabled_spawn_flag = 0x3C; // Name: m_nMotionDisabledSpawnFlag Offset: 0x3C
				} // namespace CPropDataComponent

				namespace C_WeaponSCAR20 {
				} // namespace C_WeaponSCAR20

				namespace CNavLinkMovementVData {
					constexpr auto s_tools_only_owner_model_name = 0x0; // Name: m_sToolsOnlyOwnerModelName Offset: 0x0
					constexpr auto b_is_interpolated = 0xE0; // Name: m_bIsInterpolated Offset: 0xE0
					constexpr auto un_recommended_distance = 0xE4; // Name: m_unRecommendedDistance Offset: 0xE4
					constexpr auto vec_animgraph_vars = 0xE8; // Name: m_vecAnimgraphVars Offset: 0xE8
				} // namespace CNavLinkMovementVData

				namespace C_DecoyGrenade {
				} // namespace C_DecoyGrenade

				namespace CGameSceneNode {
					constexpr auto node_to_world = 0x10; // Name: m_nodeToWorld Offset: 0x10
					constexpr auto p_owner = 0x30; // Name: m_pOwner Offset: 0x30
					constexpr auto p_parent = 0x38; // Name: m_pParent Offset: 0x38
					constexpr auto p_child = 0x40; // Name: m_pChild Offset: 0x40
					constexpr auto p_next_sibling = 0x48; // Name: m_pNextSibling Offset: 0x48
					constexpr auto h_parent = 0x78; // Name: m_hParent Offset: 0x78
					constexpr auto vec_origin = 0x88; // Name: m_vecOrigin Offset: 0x88
					constexpr auto ang_rotation = 0xC0; // Name: m_angRotation Offset: 0xC0
					constexpr auto fl_scale = 0xCC; // Name: m_flScale Offset: 0xCC
					constexpr auto vec_abs_origin = 0xD0; // Name: m_vecAbsOrigin Offset: 0xD0
					constexpr auto ang_abs_rotation = 0xDC; // Name: m_angAbsRotation Offset: 0xDC
					constexpr auto fl_abs_scale = 0xE8; // Name: m_flAbsScale Offset: 0xE8
					constexpr auto n_parent_attachment_or_bone = 0xEC; // Name: m_nParentAttachmentOrBone Offset: 0xEC
					constexpr auto b_debug_abs_origin_changes = 0xEE; // Name: m_bDebugAbsOriginChanges Offset: 0xEE
					constexpr auto b_dormant = 0xEF; // Name: m_bDormant Offset: 0xEF
					constexpr auto b_force_parent_to_be_networked = 0xF0; // Name: m_bForceParentToBeNetworked Offset: 0xF0
					constexpr auto b_dirty_hierarchy = 0x0; // Name: m_bDirtyHierarchy Offset: 0x0
					constexpr auto b_dirty_bone_merge_info = 0x0; // Name: m_bDirtyBoneMergeInfo Offset: 0x0
					constexpr auto b_networked_position_changed = 0x0; // Name: m_bNetworkedPositionChanged Offset: 0x0
					constexpr auto b_networked_angles_changed = 0x0; // Name: m_bNetworkedAnglesChanged Offset: 0x0
					constexpr auto b_networked_scale_changed = 0x0; // Name: m_bNetworkedScaleChanged Offset: 0x0
					constexpr auto b_will_be_calling_post_data_update = 0x0; // Name: m_bWillBeCallingPostDataUpdate Offset: 0x0
					constexpr auto b_bone_merge_flex = 0x0; // Name: m_bBoneMergeFlex Offset: 0x0
					constexpr auto n_latch_abs_origin = 0x0; // Name: m_nLatchAbsOrigin Offset: 0x0
					constexpr auto b_dirty_bone_merge_bone_to_root = 0x0; // Name: m_bDirtyBoneMergeBoneToRoot Offset: 0x0
					constexpr auto n_hierarchical_depth = 0xF3; // Name: m_nHierarchicalDepth Offset: 0xF3
					constexpr auto n_hierarchy_type = 0xF4; // Name: m_nHierarchyType Offset: 0xF4
					constexpr auto n_do_not_set_anim_time_in_invalidate_physics_count = 0xF5; // Name: m_nDoNotSetAnimTimeInInvalidatePhysicsCount Offset: 0xF5
					constexpr auto name = 0xF8; // Name: m_name Offset: 0xF8
					constexpr auto hierarchy_attach_name = 0x138; // Name: m_hierarchyAttachName Offset: 0x138
					constexpr auto fl_zoffset = 0x13C; // Name: m_flZOffset Offset: 0x13C
					constexpr auto fl_client_local_scale = 0x140; // Name: m_flClientLocalScale Offset: 0x140
					constexpr auto v_render_origin = 0x144; // Name: m_vRenderOrigin Offset: 0x144
				} // namespace CGameSceneNode

				namespace SellbackPurchaseEntry_t {
					constexpr auto un_def_idx = 0x30; // Name: m_unDefIdx Offset: 0x30
					constexpr auto n_cost = 0x34; // Name: m_nCost Offset: 0x34
					constexpr auto n_prev_armor = 0x38; // Name: m_nPrevArmor Offset: 0x38
					constexpr auto b_prev_helmet = 0x3C; // Name: m_bPrevHelmet Offset: 0x3C
					constexpr auto h_item = 0x40; // Name: m_hItem Offset: 0x40
				} // namespace SellbackPurchaseEntry_t

				namespace CGlowSprite {
					constexpr auto v_color = 0x0; // Name: m_vColor Offset: 0x0
					constexpr auto fl_horz_size = 0xC; // Name: m_flHorzSize Offset: 0xC
					constexpr auto fl_vert_size = 0x10; // Name: m_flVertSize Offset: 0x10
					constexpr auto h_material = 0x18; // Name: m_hMaterial Offset: 0x18
				} // namespace CGlowSprite

				namespace C_SingleplayRules {
				} // namespace C_SingleplayRules

				namespace C_LocalTempEntity {
					constexpr auto flags = 0xF88; // Name: flags Offset: 0xF88
					constexpr auto die = 0xF8C; // Name: die Offset: 0xF8C
					constexpr auto fl_frame_max = 0xF90; // Name: m_flFrameMax Offset: 0xF90
					constexpr auto x = 0xF94; // Name: x Offset: 0xF94
					constexpr auto y = 0xF98; // Name: y Offset: 0xF98
					constexpr auto fade_speed = 0xF9C; // Name: fadeSpeed Offset: 0xF9C
					constexpr auto bounce_factor = 0xFA0; // Name: bounceFactor Offset: 0xFA0
					constexpr auto hit_sound = 0xFA4; // Name: hitSound Offset: 0xFA4
					constexpr auto priority = 0xFA8; // Name: priority Offset: 0xFA8
					constexpr auto tent_offset = 0xFAC; // Name: tentOffset Offset: 0xFAC
					constexpr auto vec_temp_ent_ang_velocity = 0xFB8; // Name: m_vecTempEntAngVelocity Offset: 0xFB8
					constexpr auto tempent_renderamt = 0xFC4; // Name: tempent_renderamt Offset: 0xFC4
					constexpr auto vec_normal = 0xFC8; // Name: m_vecNormal Offset: 0xFC8
					constexpr auto fl_sprite_scale = 0xFD4; // Name: m_flSpriteScale Offset: 0xFD4
					constexpr auto n_flicker_frame = 0xFD8; // Name: m_nFlickerFrame Offset: 0xFD8
					constexpr auto fl_frame_rate = 0xFDC; // Name: m_flFrameRate Offset: 0xFDC
					constexpr auto fl_frame = 0xFE0; // Name: m_flFrame Offset: 0xFE0
					constexpr auto psz_impact_effect = 0xFE8; // Name: m_pszImpactEffect Offset: 0xFE8
					constexpr auto psz_particle_effect = 0xFF0; // Name: m_pszParticleEffect Offset: 0xFF0
					constexpr auto b_particle_collision = 0xFF8; // Name: m_bParticleCollision Offset: 0xFF8
					constexpr auto i_last_collision_frame = 0xFFC; // Name: m_iLastCollisionFrame Offset: 0xFFC
					constexpr auto v_last_collision_origin = 0x1000; // Name: m_vLastCollisionOrigin Offset: 0x1000
					constexpr auto vec_temp_ent_velocity = 0x100C; // Name: m_vecTempEntVelocity Offset: 0x100C
					constexpr auto vec_prev_abs_origin = 0x1018; // Name: m_vecPrevAbsOrigin Offset: 0x1018
					constexpr auto vec_temp_ent_acceleration = 0x1024; // Name: m_vecTempEntAcceleration Offset: 0x1024
				} // namespace C_LocalTempEntity

				namespace C_EnvWindShared_WindAveEvent_t {
					constexpr auto fl_start_wind_speed = 0x0; // Name: m_flStartWindSpeed Offset: 0x0
					constexpr auto fl_ave_wind_speed = 0x4; // Name: m_flAveWindSpeed Offset: 0x4
				} // namespace C_EnvWindShared_WindAveEvent_t

				namespace C_MolotovProjectile {
					constexpr auto b_is_inc_grenade = 0x1208; // Name: m_bIsIncGrenade Offset: 0x1208
				} // namespace C_MolotovProjectile

				namespace ModelConfigHandle_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace ModelConfigHandle_t

				namespace C_LightEnvironmentEntity {
				} // namespace C_LightEnvironmentEntity

				namespace CInfoOffscreenPanoramaTexture {
					constexpr auto b_disabled = 0x568; // Name: m_bDisabled Offset: 0x568
					constexpr auto n_resolution_x = 0x56C; // Name: m_nResolutionX Offset: 0x56C
					constexpr auto n_resolution_y = 0x570; // Name: m_nResolutionY Offset: 0x570
					constexpr auto sz_layout_file_name = 0x578; // Name: m_szLayoutFileName Offset: 0x578
					constexpr auto render_attr_name = 0x580; // Name: m_RenderAttrName Offset: 0x580
					constexpr auto target_entities = 0x588; // Name: m_TargetEntities Offset: 0x588
					constexpr auto n_target_change_count = 0x5A0; // Name: m_nTargetChangeCount Offset: 0x5A0
					constexpr auto vec_cssclasses = 0x5A8; // Name: m_vecCSSClasses Offset: 0x5A8
					constexpr auto b_check_cssclasses = 0x720; // Name: m_bCheckCSSClasses Offset: 0x720
				} // namespace CInfoOffscreenPanoramaTexture

				namespace C_DynamicLight {
					constexpr auto flags = 0xD28; // Name: m_Flags Offset: 0xD28
					constexpr auto light_style = 0xD29; // Name: m_LightStyle Offset: 0xD29
					constexpr auto radius = 0xD2C; // Name: m_Radius Offset: 0xD2C
					constexpr auto exponent = 0xD30; // Name: m_Exponent Offset: 0xD30
					constexpr auto inner_angle = 0xD34; // Name: m_InnerAngle Offset: 0xD34
					constexpr auto outer_angle = 0xD38; // Name: m_OuterAngle Offset: 0xD38
					constexpr auto spot_radius = 0xD3C; // Name: m_SpotRadius Offset: 0xD3C
				} // namespace C_DynamicLight

				namespace CGlobalLightBase {
					constexpr auto b_spot_light = 0x10; // Name: m_bSpotLight Offset: 0x10
					constexpr auto spot_light_origin = 0x14; // Name: m_SpotLightOrigin Offset: 0x14
					constexpr auto spot_light_angles = 0x20; // Name: m_SpotLightAngles Offset: 0x20
					constexpr auto shadow_direction = 0x2C; // Name: m_ShadowDirection Offset: 0x2C
					constexpr auto ambient_direction = 0x38; // Name: m_AmbientDirection Offset: 0x38
					constexpr auto specular_direction = 0x44; // Name: m_SpecularDirection Offset: 0x44
					constexpr auto inspector_specular_direction = 0x50; // Name: m_InspectorSpecularDirection Offset: 0x50
					constexpr auto fl_specular_power = 0x5C; // Name: m_flSpecularPower Offset: 0x5C
					constexpr auto fl_specular_independence = 0x60; // Name: m_flSpecularIndependence Offset: 0x60
					constexpr auto specular_color = 0x64; // Name: m_SpecularColor Offset: 0x64
					constexpr auto b_start_disabled = 0x68; // Name: m_bStartDisabled Offset: 0x68
					constexpr auto b_enabled = 0x69; // Name: m_bEnabled Offset: 0x69
					constexpr auto light_color = 0x6A; // Name: m_LightColor Offset: 0x6A
					constexpr auto ambient_color1 = 0x6E; // Name: m_AmbientColor1 Offset: 0x6E
					constexpr auto ambient_color2 = 0x72; // Name: m_AmbientColor2 Offset: 0x72
					constexpr auto ambient_color3 = 0x76; // Name: m_AmbientColor3 Offset: 0x76
					constexpr auto fl_sun_distance = 0x7C; // Name: m_flSunDistance Offset: 0x7C
					constexpr auto fl_fov = 0x80; // Name: m_flFOV Offset: 0x80
					constexpr auto fl_near_z = 0x84; // Name: m_flNearZ Offset: 0x84
					constexpr auto fl_far_z = 0x88; // Name: m_flFarZ Offset: 0x88
					constexpr auto b_enable_shadows = 0x8C; // Name: m_bEnableShadows Offset: 0x8C
					constexpr auto b_old_enable_shadows = 0x8D; // Name: m_bOldEnableShadows Offset: 0x8D
					constexpr auto b_background_clear_not_required = 0x8E; // Name: m_bBackgroundClearNotRequired Offset: 0x8E
					constexpr auto fl_cloud_scale = 0x90; // Name: m_flCloudScale Offset: 0x90
					constexpr auto fl_cloud1_speed = 0x94; // Name: m_flCloud1Speed Offset: 0x94
					constexpr auto fl_cloud1_direction = 0x98; // Name: m_flCloud1Direction Offset: 0x98
					constexpr auto fl_cloud2_speed = 0x9C; // Name: m_flCloud2Speed Offset: 0x9C
					constexpr auto fl_cloud2_direction = 0xA0; // Name: m_flCloud2Direction Offset: 0xA0
					constexpr auto fl_ambient_scale1 = 0xB0; // Name: m_flAmbientScale1 Offset: 0xB0
					constexpr auto fl_ambient_scale2 = 0xB4; // Name: m_flAmbientScale2 Offset: 0xB4
					constexpr auto fl_ground_scale = 0xB8; // Name: m_flGroundScale Offset: 0xB8
					constexpr auto fl_light_scale = 0xBC; // Name: m_flLightScale Offset: 0xBC
					constexpr auto fl_fo_wdarkness = 0xC0; // Name: m_flFoWDarkness Offset: 0xC0
					constexpr auto b_enable_separate_skybox_fog = 0xC4; // Name: m_bEnableSeparateSkyboxFog Offset: 0xC4
					constexpr auto v_fow_color = 0xC8; // Name: m_vFowColor Offset: 0xC8
					constexpr auto view_origin = 0xD4; // Name: m_ViewOrigin Offset: 0xD4
					constexpr auto view_angles = 0xE0; // Name: m_ViewAngles Offset: 0xE0
					constexpr auto fl_view_fo_v = 0xEC; // Name: m_flViewFoV Offset: 0xEC
					constexpr auto world_points = 0xF0; // Name: m_WorldPoints Offset: 0xF0
					constexpr auto v_fog_offset_layer0 = 0x4A8; // Name: m_vFogOffsetLayer0 Offset: 0x4A8
					constexpr auto v_fog_offset_layer1 = 0x4B0; // Name: m_vFogOffsetLayer1 Offset: 0x4B0
					constexpr auto h_env_wind = 0x4B8; // Name: m_hEnvWind Offset: 0x4B8
					constexpr auto h_env_sky = 0x4BC; // Name: m_hEnvSky Offset: 0x4BC
				} // namespace CGlobalLightBase

				namespace C_TriggerVolume {
				} // namespace C_TriggerVolume

				namespace CCSPlayer_WeaponServices {
					constexpr auto fl_next_attack = 0xB8; // Name: m_flNextAttack Offset: 0xB8
					constexpr auto b_is_looking_at_weapon = 0xBC; // Name: m_bIsLookingAtWeapon Offset: 0xBC
					constexpr auto b_is_holding_look_at_weapon = 0xBD; // Name: m_bIsHoldingLookAtWeapon Offset: 0xBD
					constexpr auto n_old_shoot_position_history_count = 0xC0; // Name: m_nOldShootPositionHistoryCount Offset: 0xC0
					constexpr auto n_old_input_history_count = 0x458; // Name: m_nOldInputHistoryCount Offset: 0x458
				} // namespace CCSPlayer_WeaponServices

				namespace C_StattrakModule {
					constexpr auto b_knife = 0xF90; // Name: m_bKnife Offset: 0xF90
				} // namespace C_StattrakModule

				namespace EventSimulate_t {
					constexpr auto loop_state = 0x0; // Name: m_LoopState Offset: 0x0
					constexpr auto b_first_tick = 0x28; // Name: m_bFirstTick Offset: 0x28
					constexpr auto b_last_tick = 0x29; // Name: m_bLastTick Offset: 0x29
				} // namespace EventSimulate_t

				namespace C_PhysicsProp {
					constexpr auto b_awake = 0x1110; // Name: m_bAwake Offset: 0x1110
				} // namespace C_PhysicsProp

				namespace C_Beam {
					constexpr auto fl_frame_rate = 0xD28; // Name: m_flFrameRate Offset: 0xD28
					constexpr auto fl_hdrcolor_scale = 0xD2C; // Name: m_flHDRColorScale Offset: 0xD2C
					constexpr auto fl_fire_time = 0xD30; // Name: m_flFireTime Offset: 0xD30
					constexpr auto fl_damage = 0xD34; // Name: m_flDamage Offset: 0xD34
					constexpr auto n_num_beam_ents = 0xD38; // Name: m_nNumBeamEnts Offset: 0xD38
					constexpr auto query_handle_halo = 0xD3C; // Name: m_queryHandleHalo Offset: 0xD3C
					constexpr auto h_base_material = 0xD60; // Name: m_hBaseMaterial Offset: 0xD60
					constexpr auto n_halo_index = 0xD68; // Name: m_nHaloIndex Offset: 0xD68
					constexpr auto n_beam_type = 0xD70; // Name: m_nBeamType Offset: 0xD70
					constexpr auto n_beam_flags = 0xD74; // Name: m_nBeamFlags Offset: 0xD74
					constexpr auto h_attach_entity = 0xD78; // Name: m_hAttachEntity Offset: 0xD78
					constexpr auto n_attach_index = 0xDA0; // Name: m_nAttachIndex Offset: 0xDA0
					constexpr auto f_width = 0xDAC; // Name: m_fWidth Offset: 0xDAC
					constexpr auto f_end_width = 0xDB0; // Name: m_fEndWidth Offset: 0xDB0
					constexpr auto f_fade_length = 0xDB4; // Name: m_fFadeLength Offset: 0xDB4
					constexpr auto f_halo_scale = 0xDB8; // Name: m_fHaloScale Offset: 0xDB8
					constexpr auto f_amplitude = 0xDBC; // Name: m_fAmplitude Offset: 0xDBC
					constexpr auto f_start_frame = 0xDC0; // Name: m_fStartFrame Offset: 0xDC0
					constexpr auto f_speed = 0xDC4; // Name: m_fSpeed Offset: 0xDC4
					constexpr auto fl_frame = 0xDC8; // Name: m_flFrame Offset: 0xDC8
					constexpr auto n_clip_style = 0xDCC; // Name: m_nClipStyle Offset: 0xDCC
					constexpr auto b_turned_off = 0xDD0; // Name: m_bTurnedOff Offset: 0xDD0
					constexpr auto vec_end_pos = 0xDD4; // Name: m_vecEndPos Offset: 0xDD4
					constexpr auto h_end_entity = 0xDE0; // Name: m_hEndEntity Offset: 0xDE0
				} // namespace C_Beam

				namespace C_CSGO_TeamPreviewCharacterPosition {
					constexpr auto n_variant = 0x568; // Name: m_nVariant Offset: 0x568
					constexpr auto n_random = 0x56C; // Name: m_nRandom Offset: 0x56C
					constexpr auto n_ordinal = 0x570; // Name: m_nOrdinal Offset: 0x570
					constexpr auto s_weapon_name = 0x578; // Name: m_sWeaponName Offset: 0x578
					constexpr auto xuid = 0x580; // Name: m_xuid Offset: 0x580
					constexpr auto agent_item = 0x588; // Name: m_agentItem Offset: 0x588
					constexpr auto gloves_item = 0x9D0; // Name: m_glovesItem Offset: 0x9D0
					constexpr auto weapon_item = 0xE18; // Name: m_weaponItem Offset: 0xE18
				} // namespace C_CSGO_TeamPreviewCharacterPosition

				namespace C_EnvScreenOverlay {
					constexpr auto isz_overlay_names = 0x568; // Name: m_iszOverlayNames Offset: 0x568
					constexpr auto fl_overlay_times = 0x5B8; // Name: m_flOverlayTimes Offset: 0x5B8
					constexpr auto fl_start_time = 0x5E0; // Name: m_flStartTime Offset: 0x5E0
					constexpr auto i_desired_overlay = 0x5E4; // Name: m_iDesiredOverlay Offset: 0x5E4
					constexpr auto b_is_active = 0x5E8; // Name: m_bIsActive Offset: 0x5E8
					constexpr auto b_was_active = 0x5E9; // Name: m_bWasActive Offset: 0x5E9
					constexpr auto i_cached_desired_overlay = 0x5EC; // Name: m_iCachedDesiredOverlay Offset: 0x5EC
					constexpr auto i_current_overlay = 0x5F0; // Name: m_iCurrentOverlay Offset: 0x5F0
					constexpr auto fl_current_overlay_time = 0x5F4; // Name: m_flCurrentOverlayTime Offset: 0x5F4
				} // namespace C_EnvScreenOverlay

				namespace CCSWeaponBaseVData {
					constexpr auto weapon_type = 0x348; // Name: m_WeaponType Offset: 0x348
					constexpr auto weapon_category = 0x34C; // Name: m_WeaponCategory Offset: 0x34C
					constexpr auto sz_view_model = 0x350; // Name: m_szViewModel Offset: 0x350
					constexpr auto sz_player_model = 0x430; // Name: m_szPlayerModel Offset: 0x430
					constexpr auto sz_world_dropped_model = 0x510; // Name: m_szWorldDroppedModel Offset: 0x510
					constexpr auto sz_aimsight_lens_mask_model = 0x5F0; // Name: m_szAimsightLensMaskModel Offset: 0x5F0
					constexpr auto sz_magazine_model = 0x6D0; // Name: m_szMagazineModel Offset: 0x6D0
					constexpr auto sz_heat_effect = 0x7B0; // Name: m_szHeatEffect Offset: 0x7B0
					constexpr auto sz_eject_brass_effect = 0x890; // Name: m_szEjectBrassEffect Offset: 0x890
					constexpr auto sz_muzzle_flash_particle_alt = 0x970; // Name: m_szMuzzleFlashParticleAlt Offset: 0x970
					constexpr auto sz_muzzle_flash_third_person_particle = 0xA50; // Name: m_szMuzzleFlashThirdPersonParticle Offset: 0xA50
					constexpr auto sz_muzzle_flash_third_person_particle_alt = 0xB30; // Name: m_szMuzzleFlashThirdPersonParticleAlt Offset: 0xB30
					constexpr auto sz_tracer_particle = 0xC10; // Name: m_szTracerParticle Offset: 0xC10
					constexpr auto gear_slot = 0xCF0; // Name: m_GearSlot Offset: 0xCF0
					constexpr auto gear_slot_position = 0xCF4; // Name: m_GearSlotPosition Offset: 0xCF4
					constexpr auto default_loadout_slot = 0xCF8; // Name: m_DefaultLoadoutSlot Offset: 0xCF8
					constexpr auto s_wrong_team_msg = 0xD00; // Name: m_sWrongTeamMsg Offset: 0xD00
					constexpr auto n_price = 0xD08; // Name: m_nPrice Offset: 0xD08
					constexpr auto n_kill_award = 0xD0C; // Name: m_nKillAward Offset: 0xD0C
					constexpr auto n_primary_reserve_ammo_max = 0xD10; // Name: m_nPrimaryReserveAmmoMax Offset: 0xD10
					constexpr auto n_secondary_reserve_ammo_max = 0xD14; // Name: m_nSecondaryReserveAmmoMax Offset: 0xD14
					constexpr auto b_melee_weapon = 0xD18; // Name: m_bMeleeWeapon Offset: 0xD18
					constexpr auto b_has_burst_mode = 0xD19; // Name: m_bHasBurstMode Offset: 0xD19
					constexpr auto b_is_revolver = 0xD1A; // Name: m_bIsRevolver Offset: 0xD1A
					constexpr auto b_cannot_shoot_underwater = 0xD1B; // Name: m_bCannotShootUnderwater Offset: 0xD1B
					constexpr auto sz_name = 0xD20; // Name: m_szName Offset: 0xD20
					constexpr auto sz_anim_extension = 0xD28; // Name: m_szAnimExtension Offset: 0xD28
					constexpr auto e_silencer_type = 0xD30; // Name: m_eSilencerType Offset: 0xD30
					constexpr auto n_crosshair_min_distance = 0xD34; // Name: m_nCrosshairMinDistance Offset: 0xD34
					constexpr auto n_crosshair_delta_distance = 0xD38; // Name: m_nCrosshairDeltaDistance Offset: 0xD38
					constexpr auto b_is_full_auto = 0xD3C; // Name: m_bIsFullAuto Offset: 0xD3C
					constexpr auto n_num_bullets = 0xD40; // Name: m_nNumBullets Offset: 0xD40
					constexpr auto fl_cycle_time = 0xD44; // Name: m_flCycleTime Offset: 0xD44
					constexpr auto fl_max_speed = 0xD4C; // Name: m_flMaxSpeed Offset: 0xD4C
					constexpr auto fl_spread = 0xD54; // Name: m_flSpread Offset: 0xD54
					constexpr auto fl_inaccuracy_crouch = 0xD5C; // Name: m_flInaccuracyCrouch Offset: 0xD5C
					constexpr auto fl_inaccuracy_stand = 0xD64; // Name: m_flInaccuracyStand Offset: 0xD64
					constexpr auto fl_inaccuracy_jump = 0xD6C; // Name: m_flInaccuracyJump Offset: 0xD6C
					constexpr auto fl_inaccuracy_land = 0xD74; // Name: m_flInaccuracyLand Offset: 0xD74
					constexpr auto fl_inaccuracy_ladder = 0xD7C; // Name: m_flInaccuracyLadder Offset: 0xD7C
					constexpr auto fl_inaccuracy_fire = 0xD84; // Name: m_flInaccuracyFire Offset: 0xD84
					constexpr auto fl_inaccuracy_move = 0xD8C; // Name: m_flInaccuracyMove Offset: 0xD8C
					constexpr auto fl_recoil_angle = 0xD94; // Name: m_flRecoilAngle Offset: 0xD94
					constexpr auto fl_recoil_angle_variance = 0xD9C; // Name: m_flRecoilAngleVariance Offset: 0xD9C
					constexpr auto fl_recoil_magnitude = 0xDA4; // Name: m_flRecoilMagnitude Offset: 0xDA4
					constexpr auto fl_recoil_magnitude_variance = 0xDAC; // Name: m_flRecoilMagnitudeVariance Offset: 0xDAC
					constexpr auto n_tracer_frequency = 0xDB4; // Name: m_nTracerFrequency Offset: 0xDB4
					constexpr auto fl_inaccuracy_jump_initial = 0xDBC; // Name: m_flInaccuracyJumpInitial Offset: 0xDBC
					constexpr auto fl_inaccuracy_jump_apex = 0xDC0; // Name: m_flInaccuracyJumpApex Offset: 0xDC0
					constexpr auto fl_inaccuracy_reload = 0xDC4; // Name: m_flInaccuracyReload Offset: 0xDC4
					constexpr auto n_recoil_seed = 0xDC8; // Name: m_nRecoilSeed Offset: 0xDC8
					constexpr auto n_spread_seed = 0xDCC; // Name: m_nSpreadSeed Offset: 0xDCC
					constexpr auto fl_time_to_idle_after_fire = 0xDD0; // Name: m_flTimeToIdleAfterFire Offset: 0xDD0
					constexpr auto fl_idle_interval = 0xDD4; // Name: m_flIdleInterval Offset: 0xDD4
					constexpr auto fl_attack_movespeed_factor = 0xDD8; // Name: m_flAttackMovespeedFactor Offset: 0xDD8
					constexpr auto fl_heat_per_shot = 0xDDC; // Name: m_flHeatPerShot Offset: 0xDDC
					constexpr auto fl_inaccuracy_pitch_shift = 0xDE0; // Name: m_flInaccuracyPitchShift Offset: 0xDE0
					constexpr auto fl_inaccuracy_alt_sound_threshold = 0xDE4; // Name: m_flInaccuracyAltSoundThreshold Offset: 0xDE4
					constexpr auto fl_bot_audible_range = 0xDE8; // Name: m_flBotAudibleRange Offset: 0xDE8
					constexpr auto sz_use_radio_subtitle = 0xDF0; // Name: m_szUseRadioSubtitle Offset: 0xDF0
					constexpr auto b_unzooms_after_shot = 0xDF8; // Name: m_bUnzoomsAfterShot Offset: 0xDF8
					constexpr auto b_hide_view_model_when_zoomed = 0xDF9; // Name: m_bHideViewModelWhenZoomed Offset: 0xDF9
					constexpr auto n_zoom_levels = 0xDFC; // Name: m_nZoomLevels Offset: 0xDFC
					constexpr auto n_zoom_fov1 = 0xE00; // Name: m_nZoomFOV1 Offset: 0xE00
					constexpr auto n_zoom_fov2 = 0xE04; // Name: m_nZoomFOV2 Offset: 0xE04
					constexpr auto fl_zoom_time0 = 0xE08; // Name: m_flZoomTime0 Offset: 0xE08
					constexpr auto fl_zoom_time1 = 0xE0C; // Name: m_flZoomTime1 Offset: 0xE0C
					constexpr auto fl_zoom_time2 = 0xE10; // Name: m_flZoomTime2 Offset: 0xE10
					constexpr auto fl_iron_sight_pull_up_speed = 0xE14; // Name: m_flIronSightPullUpSpeed Offset: 0xE14
					constexpr auto fl_iron_sight_put_down_speed = 0xE18; // Name: m_flIronSightPutDownSpeed Offset: 0xE18
					constexpr auto fl_iron_sight_fov = 0xE1C; // Name: m_flIronSightFOV Offset: 0xE1C
					constexpr auto fl_iron_sight_pivot_forward = 0xE20; // Name: m_flIronSightPivotForward Offset: 0xE20
					constexpr auto fl_iron_sight_looseness = 0xE24; // Name: m_flIronSightLooseness Offset: 0xE24
					constexpr auto ang_pivot_angle = 0xE28; // Name: m_angPivotAngle Offset: 0xE28
					constexpr auto vec_iron_sight_eye_pos = 0xE34; // Name: m_vecIronSightEyePos Offset: 0xE34
					constexpr auto n_damage = 0xE40; // Name: m_nDamage Offset: 0xE40
					constexpr auto fl_headshot_multiplier = 0xE44; // Name: m_flHeadshotMultiplier Offset: 0xE44
					constexpr auto fl_armor_ratio = 0xE48; // Name: m_flArmorRatio Offset: 0xE48
					constexpr auto fl_penetration = 0xE4C; // Name: m_flPenetration Offset: 0xE4C
					constexpr auto fl_range = 0xE50; // Name: m_flRange Offset: 0xE50
					constexpr auto fl_range_modifier = 0xE54; // Name: m_flRangeModifier Offset: 0xE54
					constexpr auto fl_flinch_velocity_modifier_large = 0xE58; // Name: m_flFlinchVelocityModifierLarge Offset: 0xE58
					constexpr auto fl_flinch_velocity_modifier_small = 0xE5C; // Name: m_flFlinchVelocityModifierSmall Offset: 0xE5C
					constexpr auto fl_recovery_time_crouch = 0xE60; // Name: m_flRecoveryTimeCrouch Offset: 0xE60
					constexpr auto fl_recovery_time_stand = 0xE64; // Name: m_flRecoveryTimeStand Offset: 0xE64
					constexpr auto fl_recovery_time_crouch_final = 0xE68; // Name: m_flRecoveryTimeCrouchFinal Offset: 0xE68
					constexpr auto fl_recovery_time_stand_final = 0xE6C; // Name: m_flRecoveryTimeStandFinal Offset: 0xE6C
					constexpr auto n_recovery_transition_start_bullet = 0xE70; // Name: m_nRecoveryTransitionStartBullet Offset: 0xE70
					constexpr auto n_recovery_transition_end_bullet = 0xE74; // Name: m_nRecoveryTransitionEndBullet Offset: 0xE74
					constexpr auto fl_throw_velocity = 0xE78; // Name: m_flThrowVelocity Offset: 0xE78
					constexpr auto v_smoke_color = 0xE7C; // Name: m_vSmokeColor Offset: 0xE7C
					constexpr auto sz_anim_class = 0xE88; // Name: m_szAnimClass Offset: 0xE88
				} // namespace CCSWeaponBaseVData

				namespace C_PointWorldText {
					constexpr auto b_force_recreate_next_update = 0xD30; // Name: m_bForceRecreateNextUpdate Offset: 0xD30
					constexpr auto message_text = 0xD48; // Name: m_messageText Offset: 0xD48
					constexpr auto font_name = 0xF48; // Name: m_FontName Offset: 0xF48
					constexpr auto background_material_name = 0xF88; // Name: m_BackgroundMaterialName Offset: 0xF88
					constexpr auto b_enabled = 0xFC8; // Name: m_bEnabled Offset: 0xFC8
					constexpr auto b_fullbright = 0xFC9; // Name: m_bFullbright Offset: 0xFC9
					constexpr auto fl_world_units_per_px = 0xFCC; // Name: m_flWorldUnitsPerPx Offset: 0xFCC
					constexpr auto fl_font_size = 0xFD0; // Name: m_flFontSize Offset: 0xFD0
					constexpr auto fl_depth_offset = 0xFD4; // Name: m_flDepthOffset Offset: 0xFD4
					constexpr auto b_draw_background = 0xFD8; // Name: m_bDrawBackground Offset: 0xFD8
					constexpr auto fl_background_border_width = 0xFDC; // Name: m_flBackgroundBorderWidth Offset: 0xFDC
					constexpr auto fl_background_border_height = 0xFE0; // Name: m_flBackgroundBorderHeight Offset: 0xFE0
					constexpr auto fl_background_world_to_uv = 0xFE4; // Name: m_flBackgroundWorldToUV Offset: 0xFE4
					constexpr auto color = 0xFE8; // Name: m_Color Offset: 0xFE8
					constexpr auto n_justify_horizontal = 0xFEC; // Name: m_nJustifyHorizontal Offset: 0xFEC
					constexpr auto n_justify_vertical = 0xFF0; // Name: m_nJustifyVertical Offset: 0xFF0
					constexpr auto n_reorient_mode = 0xFF4; // Name: m_nReorientMode Offset: 0xFF4
				} // namespace C_PointWorldText

				namespace CBumpMineProjectile {
				} // namespace CBumpMineProjectile

				namespace EventClientPollInput_t {
					constexpr auto loop_state = 0x0; // Name: m_LoopState Offset: 0x0
					constexpr auto fl_real_time = 0x28; // Name: m_flRealTime Offset: 0x28
				} // namespace EventClientPollInput_t

				namespace C_WeaponFiveSeven {
				} // namespace C_WeaponFiveSeven

				namespace C_BasePropDoor {
					constexpr auto e_door_state = 0x1238; // Name: m_eDoorState Offset: 0x1238
					constexpr auto model_changed = 0x123C; // Name: m_modelChanged Offset: 0x123C
					constexpr auto b_locked = 0x123D; // Name: m_bLocked Offset: 0x123D
					constexpr auto closed_position = 0x1240; // Name: m_closedPosition Offset: 0x1240
					constexpr auto closed_angles = 0x124C; // Name: m_closedAngles Offset: 0x124C
					constexpr auto h_master = 0x1258; // Name: m_hMaster Offset: 0x1258
					constexpr auto v_where_to_set_lighting_origin = 0x125C; // Name: m_vWhereToSetLightingOrigin Offset: 0x125C
				} // namespace C_BasePropDoor

				namespace C_NametagModule {
					constexpr auto str_nametag_string = 0xF90; // Name: m_strNametagString Offset: 0xF90
				} // namespace C_NametagModule

				namespace C_PhysPropClientside {
					constexpr auto fl_touch_delta = 0x1110; // Name: m_flTouchDelta Offset: 0x1110
					constexpr auto f_death_time = 0x1114; // Name: m_fDeathTime Offset: 0x1114
					constexpr auto inertia_scale = 0x1118; // Name: m_inertiaScale Offset: 0x1118
					constexpr auto vec_damage_position = 0x111C; // Name: m_vecDamagePosition Offset: 0x111C
					constexpr auto vec_damage_direction = 0x1128; // Name: m_vecDamageDirection Offset: 0x1128
					constexpr auto n_damage_type = 0x1134; // Name: m_nDamageType Offset: 0x1134
				} // namespace C_PhysPropClientside

				namespace C_VoteController {
					constexpr auto i_active_issue_index = 0x578; // Name: m_iActiveIssueIndex Offset: 0x578
					constexpr auto i_only_team_to_vote = 0x57C; // Name: m_iOnlyTeamToVote Offset: 0x57C
					constexpr auto n_vote_option_count = 0x580; // Name: m_nVoteOptionCount Offset: 0x580
					constexpr auto n_potential_votes = 0x594; // Name: m_nPotentialVotes Offset: 0x594
					constexpr auto b_votes_dirty = 0x598; // Name: m_bVotesDirty Offset: 0x598
					constexpr auto b_type_dirty = 0x599; // Name: m_bTypeDirty Offset: 0x599
					constexpr auto b_is_yes_no_vote = 0x59A; // Name: m_bIsYesNoVote Offset: 0x59A
				} // namespace C_VoteController

				namespace C_FogController {
					constexpr auto fog = 0x568; // Name: m_fog Offset: 0x568
					constexpr auto b_use_angles = 0x5D0; // Name: m_bUseAngles Offset: 0x5D0
					constexpr auto i_changed_variables = 0x5D4; // Name: m_iChangedVariables Offset: 0x5D4
				} // namespace C_FogController

				namespace CPlayer_ItemServices {
				} // namespace CPlayer_ItemServices

				namespace C_CSGO_PreviewPlayer_GraphController {
					constexpr auto psz_character_mode = 0x60; // Name: m_pszCharacterMode Offset: 0x60
					constexpr auto psz_team_preview_variant = 0x88; // Name: m_pszTeamPreviewVariant Offset: 0x88
					constexpr auto psz_team_preview_position = 0xB0; // Name: m_pszTeamPreviewPosition Offset: 0xB0
					constexpr auto psz_end_of_match_celebration = 0xD8; // Name: m_pszEndOfMatchCelebration Offset: 0xD8
					constexpr auto n_team_preview_random = 0x100; // Name: m_nTeamPreviewRandom Offset: 0x100
					constexpr auto psz_weapon_state = 0x120; // Name: m_pszWeaponState Offset: 0x120
					constexpr auto psz_weapon_type = 0x148; // Name: m_pszWeaponType Offset: 0x148
					constexpr auto b_ct = 0x170; // Name: m_bCT Offset: 0x170
				} // namespace C_CSGO_PreviewPlayer_GraphController

				namespace C_FuncBrush {
				} // namespace C_FuncBrush

				namespace CNetworkViewOffsetVector {
					constexpr auto vec_x = 0x10; // Name: m_vecX Offset: 0x10
					constexpr auto vec_y = 0x18; // Name: m_vecY Offset: 0x18
					constexpr auto vec_z = 0x20; // Name: m_vecZ Offset: 0x20
				} // namespace CNetworkViewOffsetVector

				namespace C_FuncConveyor {
					constexpr auto vec_move_dir_entity_space = 0xD30; // Name: m_vecMoveDirEntitySpace Offset: 0xD30
					constexpr auto fl_target_speed = 0xD3C; // Name: m_flTargetSpeed Offset: 0xD3C
					constexpr auto n_transition_start_tick = 0xD40; // Name: m_nTransitionStartTick Offset: 0xD40
					constexpr auto n_transition_duration_ticks = 0xD44; // Name: m_nTransitionDurationTicks Offset: 0xD44
					constexpr auto fl_transition_start_speed = 0xD48; // Name: m_flTransitionStartSpeed Offset: 0xD48
					constexpr auto h_conveyor_models = 0xD50; // Name: m_hConveyorModels Offset: 0xD50
					constexpr auto fl_current_conveyor_offset = 0xD68; // Name: m_flCurrentConveyorOffset Offset: 0xD68
					constexpr auto fl_current_conveyor_speed = 0xD6C; // Name: m_flCurrentConveyorSpeed Offset: 0xD6C
				} // namespace C_FuncConveyor

				namespace CCSGOPlayerAnimGraphState {
				} // namespace CCSGOPlayerAnimGraphState

				namespace CCSPlayer_DamageReactServices {
				} // namespace CCSPlayer_DamageReactServices

				namespace CHostageRescueZone {
				} // namespace CHostageRescueZone

				namespace CTablet {
				} // namespace CTablet

				namespace CCSPointScript {
					constexpr auto p_parent = 0xF8; // Name: m_pParent Offset: 0xF8
				} // namespace CCSPointScript

				namespace C_EntityFlame {
					constexpr auto h_ent_attached = 0x568; // Name: m_hEntAttached Offset: 0x568
					constexpr auto h_old_attached = 0x590; // Name: m_hOldAttached Offset: 0x590
					constexpr auto b_cheap_effect = 0x594; // Name: m_bCheapEffect Offset: 0x594
				} // namespace C_EntityFlame

				namespace C_Sprite {
					constexpr auto h_sprite_material = 0xD28; // Name: m_hSpriteMaterial Offset: 0xD28
					constexpr auto h_attached_to_entity = 0xD30; // Name: m_hAttachedToEntity Offset: 0xD30
					constexpr auto n_attachment = 0xD34; // Name: m_nAttachment Offset: 0xD34
					constexpr auto fl_sprite_framerate = 0xD38; // Name: m_flSpriteFramerate Offset: 0xD38
					constexpr auto fl_frame = 0xD3C; // Name: m_flFrame Offset: 0xD3C
					constexpr auto fl_die_time = 0xD40; // Name: m_flDieTime Offset: 0xD40
					constexpr auto n_brightness = 0xD50; // Name: m_nBrightness Offset: 0xD50
					constexpr auto fl_brightness_duration = 0xD54; // Name: m_flBrightnessDuration Offset: 0xD54
					constexpr auto fl_sprite_scale = 0xD58; // Name: m_flSpriteScale Offset: 0xD58
					constexpr auto fl_scale_duration = 0xD5C; // Name: m_flScaleDuration Offset: 0xD5C
					constexpr auto b_world_space_scale = 0xD60; // Name: m_bWorldSpaceScale Offset: 0xD60
					constexpr auto fl_glow_proxy_size = 0xD64; // Name: m_flGlowProxySize Offset: 0xD64
					constexpr auto fl_hdrcolor_scale = 0xD68; // Name: m_flHDRColorScale Offset: 0xD68
					constexpr auto fl_last_time = 0xD6C; // Name: m_flLastTime Offset: 0xD6C
					constexpr auto fl_max_frame = 0xD70; // Name: m_flMaxFrame Offset: 0xD70
					constexpr auto fl_start_scale = 0xD74; // Name: m_flStartScale Offset: 0xD74
					constexpr auto fl_dest_scale = 0xD78; // Name: m_flDestScale Offset: 0xD78
					constexpr auto fl_scale_time_start = 0xD7C; // Name: m_flScaleTimeStart Offset: 0xD7C
					constexpr auto n_start_brightness = 0xD80; // Name: m_nStartBrightness Offset: 0xD80
					constexpr auto n_dest_brightness = 0xD84; // Name: m_nDestBrightness Offset: 0xD84
					constexpr auto fl_brightness_time_start = 0xD88; // Name: m_flBrightnessTimeStart Offset: 0xD88
					constexpr auto h_old_sprite_material = 0xD90; // Name: m_hOldSpriteMaterial Offset: 0xD90
					constexpr auto n_sprite_width = 0xE30; // Name: m_nSpriteWidth Offset: 0xE30
					constexpr auto n_sprite_height = 0xE34; // Name: m_nSpriteHeight Offset: 0xE34
				} // namespace C_Sprite

				namespace C_CSGO_TerroristTeamIntroCamera {
				} // namespace C_CSGO_TerroristTeamIntroCamera

				namespace EventClientPostSimulate_t {
				} // namespace EventClientPostSimulate_t

				namespace EventPostAdvanceTick_t {
					constexpr auto n_current_tick = 0x30; // Name: m_nCurrentTick Offset: 0x30
					constexpr auto n_current_tick_this_frame = 0x34; // Name: m_nCurrentTickThisFrame Offset: 0x34
					constexpr auto n_total_ticks_this_frame = 0x38; // Name: m_nTotalTicksThisFrame Offset: 0x38
					constexpr auto n_total_ticks = 0x3C; // Name: m_nTotalTicks Offset: 0x3C
				} // namespace EventPostAdvanceTick_t

				namespace CSkeletonAnimationController {
					constexpr auto p_skeleton_instance = 0x8; // Name: m_pSkeletonInstance Offset: 0x8
				} // namespace CSkeletonAnimationController

				namespace ragdollelement_t {
					constexpr auto origin_parent_space = 0x0; // Name: originParentSpace Offset: 0x0
					constexpr auto parent_index = 0x20; // Name: parentIndex Offset: 0x20
					constexpr auto fl_radius = 0x24; // Name: m_flRadius Offset: 0x24
				} // namespace ragdollelement_t

				namespace IGapHost_GameEntity {
				} // namespace IGapHost_GameEntity

				namespace CSoundEnvelope {
					constexpr auto current = 0x0; // Name: m_current Offset: 0x0
					constexpr auto target = 0x4; // Name: m_target Offset: 0x4
					constexpr auto rate = 0x8; // Name: m_rate Offset: 0x8
					constexpr auto forceupdate = 0xC; // Name: m_forceupdate Offset: 0xC
				} // namespace CSoundEnvelope

				namespace CDecalInfo {
					constexpr auto fl_animation_scale = 0x0; // Name: m_flAnimationScale Offset: 0x0
					constexpr auto fl_animation_life_span = 0x4; // Name: m_flAnimationLifeSpan Offset: 0x4
					constexpr auto fl_place_time = 0x8; // Name: m_flPlaceTime Offset: 0x8
					constexpr auto fl_fade_start_time = 0xC; // Name: m_flFadeStartTime Offset: 0xC
					constexpr auto fl_fade_duration = 0x10; // Name: m_flFadeDuration Offset: 0x10
					constexpr auto n_vbslot = 0x14; // Name: m_nVBSlot Offset: 0x14
					constexpr auto n_bone_index = 0x18; // Name: m_nBoneIndex Offset: 0x18
					constexpr auto v_position = 0x28; // Name: m_vPosition Offset: 0x28
					constexpr auto fl_bounding_radius_sqr = 0x34; // Name: m_flBoundingRadiusSqr Offset: 0x34
					constexpr auto p_next = 0x40; // Name: m_pNext Offset: 0x40
					constexpr auto p_prev = 0x48; // Name: m_pPrev Offset: 0x48
					constexpr auto n_decal_material_index = 0xD0; // Name: m_nDecalMaterialIndex Offset: 0xD0
				} // namespace CDecalInfo

				namespace CPlayerControllerComponent {
					constexpr auto _m_p_chain_entity = 0x8; // Name: __m_pChainEntity Offset: 0x8
				} // namespace CPlayerControllerComponent

				namespace EventClientSceneSystemThreadStateChange_t {
					constexpr auto b_threads_active = 0x0; // Name: m_bThreadsActive Offset: 0x0
				} // namespace EventClientSceneSystemThreadStateChange_t

				namespace CSimpleSimTimer {
					constexpr auto next = 0x0; // Name: m_next Offset: 0x0
					constexpr auto n_world_group_id = 0x4; // Name: m_nWorldGroupId Offset: 0x4
				} // namespace CSimpleSimTimer

				namespace CompositeMaterialInputLooseVariable_t {
					constexpr auto str_name = 0x0; // Name: m_strName Offset: 0x0
					constexpr auto b_expose_externally = 0x8; // Name: m_bExposeExternally Offset: 0x8
					constexpr auto str_exposed_friendly_name = 0x10; // Name: m_strExposedFriendlyName Offset: 0x10
					constexpr auto str_exposed_friendly_group_name = 0x18; // Name: m_strExposedFriendlyGroupName Offset: 0x18
					constexpr auto b_exposed_variable_is_fixed_range = 0x20; // Name: m_bExposedVariableIsFixedRange Offset: 0x20
					constexpr auto str_exposed_visible_when_true = 0x28; // Name: m_strExposedVisibleWhenTrue Offset: 0x28
					constexpr auto str_exposed_hidden_when_true = 0x30; // Name: m_strExposedHiddenWhenTrue Offset: 0x30
					constexpr auto n_variable_type = 0x38; // Name: m_nVariableType Offset: 0x38
					constexpr auto b_value_boolean = 0x3C; // Name: m_bValueBoolean Offset: 0x3C
					constexpr auto n_value_int_x = 0x40; // Name: m_nValueIntX Offset: 0x40
					constexpr auto n_value_int_y = 0x44; // Name: m_nValueIntY Offset: 0x44
					constexpr auto n_value_int_z = 0x48; // Name: m_nValueIntZ Offset: 0x48
					constexpr auto n_value_int_w = 0x4C; // Name: m_nValueIntW Offset: 0x4C
					constexpr auto b_has_float_bounds = 0x50; // Name: m_bHasFloatBounds Offset: 0x50
					constexpr auto fl_value_float_x = 0x54; // Name: m_flValueFloatX Offset: 0x54
					constexpr auto fl_value_float_x__min = 0x58; // Name: m_flValueFloatX_Min Offset: 0x58
					constexpr auto fl_value_float_x__max = 0x5C; // Name: m_flValueFloatX_Max Offset: 0x5C
					constexpr auto fl_value_float_y = 0x60; // Name: m_flValueFloatY Offset: 0x60
					constexpr auto fl_value_float_y__min = 0x64; // Name: m_flValueFloatY_Min Offset: 0x64
					constexpr auto fl_value_float_y__max = 0x68; // Name: m_flValueFloatY_Max Offset: 0x68
					constexpr auto fl_value_float_z = 0x6C; // Name: m_flValueFloatZ Offset: 0x6C
					constexpr auto fl_value_float_z__min = 0x70; // Name: m_flValueFloatZ_Min Offset: 0x70
					constexpr auto fl_value_float_z__max = 0x74; // Name: m_flValueFloatZ_Max Offset: 0x74
					constexpr auto fl_value_float_w = 0x78; // Name: m_flValueFloatW Offset: 0x78
					constexpr auto fl_value_float_w__min = 0x7C; // Name: m_flValueFloatW_Min Offset: 0x7C
					constexpr auto fl_value_float_w__max = 0x80; // Name: m_flValueFloatW_Max Offset: 0x80
					constexpr auto c_value_color4 = 0x84; // Name: m_cValueColor4 Offset: 0x84
					constexpr auto n_value_system_var = 0x88; // Name: m_nValueSystemVar Offset: 0x88
					constexpr auto str_resource_material = 0x90; // Name: m_strResourceMaterial Offset: 0x90
					constexpr auto str_texture_content_asset_path = 0x170; // Name: m_strTextureContentAssetPath Offset: 0x170
					constexpr auto str_texture_runtime_resource_path = 0x178; // Name: m_strTextureRuntimeResourcePath Offset: 0x178
					constexpr auto str_texture_compilation_vtex_template = 0x258; // Name: m_strTextureCompilationVtexTemplate Offset: 0x258
					constexpr auto n_texture_type = 0x260; // Name: m_nTextureType Offset: 0x260
					constexpr auto str_string = 0x268; // Name: m_strString Offset: 0x268
					constexpr auto str_panorama_panel_path = 0x270; // Name: m_strPanoramaPanelPath Offset: 0x270
					constexpr auto n_panorama_render_res = 0x278; // Name: m_nPanoramaRenderRes Offset: 0x278
				} // namespace CompositeMaterialInputLooseVariable_t

				namespace EventServerPostSimulate_t {
				} // namespace EventServerPostSimulate_t

				namespace CAnimEventListenerBase {
				} // namespace CAnimEventListenerBase

				namespace CDestructiblePartsSystemData {
					constexpr auto destructible_parts_data_by_hit_group = 0x0; // Name: m_DestructiblePartsDataByHitGroup Offset: 0x0
				} // namespace CDestructiblePartsSystemData

				namespace CRopeOverlapHit {
					constexpr auto h_entity = 0x0; // Name: m_hEntity Offset: 0x0
					constexpr auto vec_overlapping_links = 0x8; // Name: m_vecOverlappingLinks Offset: 0x8
				} // namespace CRopeOverlapHit

				namespace EventServerEndAsyncPostTickWork_t {
				} // namespace EventServerEndAsyncPostTickWork_t

				namespace CGlowOverlay {
					constexpr auto v_pos = 0x8; // Name: m_vPos Offset: 0x8
					constexpr auto b_directional = 0x14; // Name: m_bDirectional Offset: 0x14
					constexpr auto v_direction = 0x18; // Name: m_vDirection Offset: 0x18
					constexpr auto b_in_sky = 0x24; // Name: m_bInSky Offset: 0x24
					constexpr auto sky_obstruction_scale = 0x28; // Name: m_skyObstructionScale Offset: 0x28
					constexpr auto sprites = 0x30; // Name: m_Sprites Offset: 0x30
					constexpr auto n_sprites = 0xB0; // Name: m_nSprites Offset: 0xB0
					constexpr auto fl_proxy_radius = 0xB4; // Name: m_flProxyRadius Offset: 0xB4
					constexpr auto fl_hdrcolor_scale = 0xB8; // Name: m_flHDRColorScale Offset: 0xB8
					constexpr auto fl_glow_obstruction_scale = 0xBC; // Name: m_flGlowObstructionScale Offset: 0xBC
					constexpr auto b_cache_glow_obstruction = 0xC0; // Name: m_bCacheGlowObstruction Offset: 0xC0
					constexpr auto b_cache_sky_obstruction = 0xC1; // Name: m_bCacheSkyObstruction Offset: 0xC1
					constexpr auto b_activated = 0xC2; // Name: m_bActivated Offset: 0xC2
					constexpr auto list_index = 0xC4; // Name: m_ListIndex Offset: 0xC4
					constexpr auto query_handle = 0xC8; // Name: m_queryHandle Offset: 0xC8
				} // namespace CGlowOverlay

				namespace EventClientAdvanceTick_t {
				} // namespace EventClientAdvanceTick_t

				namespace EventClientSimulate_t {
				} // namespace EventClientSimulate_t

				namespace CNetworkOriginQuantizedVector {
					constexpr auto vec_x = 0x10; // Name: m_vecX Offset: 0x10
					constexpr auto vec_y = 0x18; // Name: m_vecY Offset: 0x18
					constexpr auto vec_z = 0x20; // Name: m_vecZ Offset: 0x20
				} // namespace CNetworkOriginQuantizedVector

				namespace IChoreoServices {
				} // namespace IChoreoServices

				namespace CStopwatch {
					constexpr auto interval = 0xC; // Name: m_interval Offset: 0xC
				} // namespace CStopwatch

				namespace CInterpolatedValue {
					constexpr auto fl_start_time = 0x0; // Name: m_flStartTime Offset: 0x0
					constexpr auto fl_end_time = 0x4; // Name: m_flEndTime Offset: 0x4
					constexpr auto fl_start_value = 0x8; // Name: m_flStartValue Offset: 0x8
					constexpr auto fl_end_value = 0xC; // Name: m_flEndValue Offset: 0xC
					constexpr auto n_interp_type = 0x10; // Name: m_nInterpType Offset: 0x10
				} // namespace CInterpolatedValue

				namespace EventServerProcessNetworking_t {
				} // namespace EventServerProcessNetworking_t

				namespace CStopwatchBase {
					constexpr auto f_is_running = 0x8; // Name: m_fIsRunning Offset: 0x8
				} // namespace CStopwatchBase

				namespace EventPreDataUpdate_t {
					constexpr auto n_count = 0x0; // Name: m_nCount Offset: 0x0
				} // namespace EventPreDataUpdate_t

				namespace TimedEvent {
					constexpr auto time_between_events = 0x0; // Name: m_TimeBetweenEvents Offset: 0x0
					constexpr auto f_next_event = 0x4; // Name: m_fNextEvent Offset: 0x4
				} // namespace TimedEvent

				namespace EventClientProcessGameInput_t {
					constexpr auto loop_state = 0x0; // Name: m_LoopState Offset: 0x0
					constexpr auto fl_real_time = 0x28; // Name: m_flRealTime Offset: 0x28
					constexpr auto fl_frame_time = 0x2C; // Name: m_flFrameTime Offset: 0x2C
				} // namespace EventClientProcessGameInput_t

				namespace EventFrameBoundary_t {
					constexpr auto fl_frame_time = 0x0; // Name: m_flFrameTime Offset: 0x0
				} // namespace EventFrameBoundary_t

				namespace AmmoTypeInfo_t {
					constexpr auto n_max_carry = 0x10; // Name: m_nMaxCarry Offset: 0x10
					constexpr auto n_splash_size = 0x1C; // Name: m_nSplashSize Offset: 0x1C
					constexpr auto n_flags = 0x24; // Name: m_nFlags Offset: 0x24
					constexpr auto fl_mass = 0x28; // Name: m_flMass Offset: 0x28
					constexpr auto fl_speed = 0x2C; // Name: m_flSpeed Offset: 0x2C
				} // namespace AmmoTypeInfo_t

				namespace CNavLinkAnimgraphVar {
					constexpr auto s_anim_graph_navlink_type = 0x0; // Name: m_sAnimGraphNavlinkType Offset: 0x0
					constexpr auto un_alignment_degrees = 0x8; // Name: m_unAlignmentDegrees Offset: 0x8
				} // namespace CNavLinkAnimgraphVar

				namespace EventServerSimulate_t {
				} // namespace EventServerSimulate_t

				namespace EventServerPostAdvanceTick_t {
				} // namespace EventServerPostAdvanceTick_t

				namespace CRandStopwatch {
					constexpr auto min_interval = 0xC; // Name: m_minInterval Offset: 0xC
					constexpr auto max_interval = 0x10; // Name: m_maxInterval Offset: 0x10
				} // namespace CRandStopwatch

				namespace C_CommandContext {
					constexpr auto needsprocessing = 0x0; // Name: needsprocessing Offset: 0x0
					constexpr auto command_number = 0xA0; // Name: command_number Offset: 0xA0
				} // namespace C_CommandContext

				namespace EventClientPauseSimulate_t {
				} // namespace EventClientPauseSimulate_t

				namespace CPulseCell_Step_EntFire {
					constexpr auto input = 0x48; // Name: m_Input Offset: 0x48
				} // namespace CPulseCell_Step_EntFire

				namespace CSimpleStopwatch {
				} // namespace CSimpleStopwatch

				namespace CommandToolCommand_t {
					constexpr auto b_enabled = 0x0; // Name: m_bEnabled Offset: 0x0
					constexpr auto b_opened = 0x1; // Name: m_bOpened Offset: 0x1
					constexpr auto internal_id = 0x4; // Name: m_InternalId Offset: 0x4
					constexpr auto short_name = 0x8; // Name: m_ShortName Offset: 0x8
					constexpr auto exec_mode = 0x10; // Name: m_ExecMode Offset: 0x10
					constexpr auto spawn_group = 0x18; // Name: m_SpawnGroup Offset: 0x18
					constexpr auto periodic_exec_delay = 0x20; // Name: m_PeriodicExecDelay Offset: 0x20
					constexpr auto spec_type = 0x24; // Name: m_SpecType Offset: 0x24
					constexpr auto entity_spec = 0x28; // Name: m_EntitySpec Offset: 0x28
					constexpr auto commands = 0x30; // Name: m_Commands Offset: 0x30
					constexpr auto set_debug_bits = 0x38; // Name: m_SetDebugBits Offset: 0x38
					constexpr auto clear_debug_bits = 0x40; // Name: m_ClearDebugBits Offset: 0x40
				} // namespace CommandToolCommand_t

				namespace EventAdvanceTick_t {
					constexpr auto n_current_tick = 0x30; // Name: m_nCurrentTick Offset: 0x30
					constexpr auto n_current_tick_this_frame = 0x34; // Name: m_nCurrentTickThisFrame Offset: 0x34
					constexpr auto n_total_ticks_this_frame = 0x38; // Name: m_nTotalTicksThisFrame Offset: 0x38
					constexpr auto n_total_ticks = 0x3C; // Name: m_nTotalTicks Offset: 0x3C
				} // namespace EventAdvanceTick_t

				namespace CSceneEventInfo {
					constexpr auto i_layer = 0x0; // Name: m_iLayer Offset: 0x0
					constexpr auto i_priority = 0x4; // Name: m_iPriority Offset: 0x4
					constexpr auto h_sequence = 0x8; // Name: m_hSequence Offset: 0x8
					constexpr auto fl_weight = 0xC; // Name: m_flWeight Offset: 0xC
					constexpr auto b_has_arrived = 0x10; // Name: m_bHasArrived Offset: 0x10
					constexpr auto n_type = 0x14; // Name: m_nType Offset: 0x14
					constexpr auto fl_next = 0x18; // Name: m_flNext Offset: 0x18
					constexpr auto b_is_gesture = 0x1C; // Name: m_bIsGesture Offset: 0x1C
					constexpr auto b_should_remove = 0x1D; // Name: m_bShouldRemove Offset: 0x1D
					constexpr auto h_target = 0x44; // Name: m_hTarget Offset: 0x44
					constexpr auto n_scene_event_id = 0x48; // Name: m_nSceneEventId Offset: 0x48
					constexpr auto b_client_side = 0x4C; // Name: m_bClientSide Offset: 0x4C
					constexpr auto b_started = 0x4D; // Name: m_bStarted Offset: 0x4D
				} // namespace CSceneEventInfo

				namespace C_IronSightController {
					constexpr auto b_iron_sight_available = 0x10; // Name: m_bIronSightAvailable Offset: 0x10
					constexpr auto fl_iron_sight_amount = 0x14; // Name: m_flIronSightAmount Offset: 0x14
					constexpr auto fl_iron_sight_amount_gained = 0x18; // Name: m_flIronSightAmountGained Offset: 0x18
					constexpr auto fl_iron_sight_amount_biased = 0x1C; // Name: m_flIronSightAmountBiased Offset: 0x1C
					constexpr auto fl_iron_sight_amount__interpolated = 0x20; // Name: m_flIronSightAmount_Interpolated Offset: 0x20
					constexpr auto fl_iron_sight_amount_gained__interpolated = 0x24; // Name: m_flIronSightAmountGained_Interpolated Offset: 0x24
					constexpr auto fl_iron_sight_amount_biased__interpolated = 0x28; // Name: m_flIronSightAmountBiased_Interpolated Offset: 0x28
					constexpr auto fl_interpolation_last_updated = 0x2C; // Name: m_flInterpolationLastUpdated Offset: 0x2C
					constexpr auto ang_delta_average = 0x30; // Name: m_angDeltaAverage Offset: 0x30
					constexpr auto ang_view_last = 0x90; // Name: m_angViewLast Offset: 0x90
					constexpr auto vec_dot_coords = 0x9C; // Name: m_vecDotCoords Offset: 0x9C
					constexpr auto fl_dot_blur = 0xA4; // Name: m_flDotBlur Offset: 0xA4
					constexpr auto fl_speed_ratio = 0xA8; // Name: m_flSpeedRatio Offset: 0xA8
				} // namespace C_IronSightController

				namespace SoundeventPathCornerPairNetworked_t {
					constexpr auto v_p1 = 0x0; // Name: vP1 Offset: 0x0
					constexpr auto v_p2 = 0xC; // Name: vP2 Offset: 0xC
					constexpr auto fl_path_length_sqr = 0x18; // Name: flPathLengthSqr Offset: 0x18
					constexpr auto fl_p1_pct = 0x1C; // Name: flP1Pct Offset: 0x1C
					constexpr auto fl_p2_pct = 0x20; // Name: flP2Pct Offset: 0x20
				} // namespace SoundeventPathCornerPairNetworked_t

				namespace EventClientPostAdvanceTick_t {
				} // namespace EventClientPostAdvanceTick_t

				namespace CompMatMutatorCondition_t {
					constexpr auto n_mutator_condition = 0x0; // Name: m_nMutatorCondition Offset: 0x0
					constexpr auto str_mutator_condition_container_name = 0x8; // Name: m_strMutatorConditionContainerName Offset: 0x8
					constexpr auto str_mutator_condition_container_var_name = 0x10; // Name: m_strMutatorConditionContainerVarName Offset: 0x10
					constexpr auto str_mutator_condition_container_var_value = 0x18; // Name: m_strMutatorConditionContainerVarValue Offset: 0x18
					constexpr auto b_pass_when_true = 0x20; // Name: m_bPassWhenTrue Offset: 0x20
				} // namespace CompMatMutatorCondition_t

				namespace EventModInitialized_t {
				} // namespace EventModInitialized_t

				namespace EventClientPreOutput_t {
					constexpr auto loop_state = 0x0; // Name: m_LoopState Offset: 0x0
					constexpr auto fl_render_time = 0x28; // Name: m_flRenderTime Offset: 0x28
					constexpr auto fl_render_frame_time = 0x30; // Name: m_flRenderFrameTime Offset: 0x30
					constexpr auto fl_render_frame_time_unbounded = 0x38; // Name: m_flRenderFrameTimeUnbounded Offset: 0x38
					constexpr auto fl_real_time = 0x40; // Name: m_flRealTime Offset: 0x40
					constexpr auto b_render_only = 0x44; // Name: m_bRenderOnly Offset: 0x44
				} // namespace EventClientPreOutput_t

				namespace CompMatPropertyMutator_t {
					constexpr auto b_enabled = 0x0; // Name: m_bEnabled Offset: 0x0
					constexpr auto n_mutator_command_type = 0x4; // Name: m_nMutatorCommandType Offset: 0x4
					constexpr auto str_init_with__container = 0x8; // Name: m_strInitWith_Container Offset: 0x8
					constexpr auto str_copy_property__input_container_src = 0x10; // Name: m_strCopyProperty_InputContainerSrc Offset: 0x10
					constexpr auto str_copy_property__input_container_property = 0x18; // Name: m_strCopyProperty_InputContainerProperty Offset: 0x18
					constexpr auto str_copy_property__target_property = 0x20; // Name: m_strCopyProperty_TargetProperty Offset: 0x20
					constexpr auto str_random_roll_input_vars__seed_input_var = 0x28; // Name: m_strRandomRollInputVars_SeedInputVar Offset: 0x28
					constexpr auto vec_random_roll_input_vars__input_vars_to_roll = 0x30; // Name: m_vecRandomRollInputVars_InputVarsToRoll Offset: 0x30
					constexpr auto str_copy_matching_keys__input_container_src = 0x48; // Name: m_strCopyMatchingKeys_InputContainerSrc Offset: 0x48
					constexpr auto str_copy_keys_with_suffix__input_container_src = 0x50; // Name: m_strCopyKeysWithSuffix_InputContainerSrc Offset: 0x50
					constexpr auto str_copy_keys_with_suffix__find_suffix = 0x58; // Name: m_strCopyKeysWithSuffix_FindSuffix Offset: 0x58
					constexpr auto str_copy_keys_with_suffix__replace_suffix = 0x60; // Name: m_strCopyKeysWithSuffix_ReplaceSuffix Offset: 0x60
					constexpr auto n_set_value__value = 0x68; // Name: m_nSetValue_Value Offset: 0x68
					constexpr auto str_generate_texture__target_param = 0x2E8; // Name: m_strGenerateTexture_TargetParam Offset: 0x2E8
					constexpr auto str_generate_texture__initial_container = 0x2F0; // Name: m_strGenerateTexture_InitialContainer Offset: 0x2F0
					constexpr auto n_resolution = 0x2F8; // Name: m_nResolution Offset: 0x2F8
					constexpr auto b_is_scratch_target = 0x2FC; // Name: m_bIsScratchTarget Offset: 0x2FC
					constexpr auto b_splat_debug_info = 0x2FD; // Name: m_bSplatDebugInfo Offset: 0x2FD
					constexpr auto b_capture_in_render_doc = 0x2FE; // Name: m_bCaptureInRenderDoc Offset: 0x2FE
					constexpr auto vec_tex_gen_instructions = 0x300; // Name: m_vecTexGenInstructions Offset: 0x300
					constexpr auto vec_conditional_mutators = 0x318; // Name: m_vecConditionalMutators Offset: 0x318
					constexpr auto str_pop_input_queue__container = 0x330; // Name: m_strPopInputQueue_Container Offset: 0x330
					constexpr auto str_draw_text__input_container_src = 0x338; // Name: m_strDrawText_InputContainerSrc Offset: 0x338
					constexpr auto str_draw_text__input_container_property = 0x340; // Name: m_strDrawText_InputContainerProperty Offset: 0x340
					constexpr auto vec_draw_text__position = 0x348; // Name: m_vecDrawText_Position Offset: 0x348
					constexpr auto col_draw_text__color = 0x350; // Name: m_colDrawText_Color Offset: 0x350
					constexpr auto str_draw_text__font = 0x358; // Name: m_strDrawText_Font Offset: 0x358
					constexpr auto vec_conditions = 0x360; // Name: m_vecConditions Offset: 0x360
				} // namespace CompMatPropertyMutator_t

				namespace EventClientFrameSimulate_t {
					constexpr auto loop_state = 0x0; // Name: m_LoopState Offset: 0x0
					constexpr auto fl_real_time = 0x28; // Name: m_flRealTime Offset: 0x28
					constexpr auto fl_frame_time = 0x2C; // Name: m_flFrameTime Offset: 0x2C
					constexpr auto b_schedule_send_tick_packet = 0x30; // Name: m_bScheduleSendTickPacket Offset: 0x30
				} // namespace EventClientFrameSimulate_t

				namespace CSimTimer {
					constexpr auto interval = 0x8; // Name: m_interval Offset: 0x8
				} // namespace CSimTimer

				namespace SummaryTakeDamageInfo_t {
					constexpr auto n_summarised_count = 0x0; // Name: nSummarisedCount Offset: 0x0
					constexpr auto info = 0x8; // Name: info Offset: 0x8
					constexpr auto result = 0xC0; // Name: result Offset: 0xC0
					constexpr auto h_target = 0xE0; // Name: hTarget Offset: 0xE0
				} // namespace SummaryTakeDamageInfo_t

				namespace CCompositeMaterialEditorDoc {
					constexpr auto n_version = 0x8; // Name: m_nVersion Offset: 0x8
					constexpr auto points = 0x10; // Name: m_Points Offset: 0x10
					constexpr auto kvthumbnail = 0x28; // Name: m_KVthumbnail Offset: 0x28
				} // namespace CCompositeMaterialEditorDoc

				namespace CClientAlphaProperty {
					constexpr auto n_render_fx = 0x10; // Name: m_nRenderFX Offset: 0x10
					constexpr auto n_render_mode = 0x11; // Name: m_nRenderMode Offset: 0x11
					constexpr auto b_alpha_override = 0x0; // Name: m_bAlphaOverride Offset: 0x0
					constexpr auto b_shadow_alpha_override = 0x0; // Name: m_bShadowAlphaOverride Offset: 0x0
					constexpr auto n_reserved = 0x0; // Name: m_nReserved Offset: 0x0
					constexpr auto n_alpha = 0x13; // Name: m_nAlpha Offset: 0x13
					constexpr auto n_desync_offset = 0x14; // Name: m_nDesyncOffset Offset: 0x14
					constexpr auto n_reserved2 = 0x16; // Name: m_nReserved2 Offset: 0x16
					constexpr auto n_dist_fade_start = 0x18; // Name: m_nDistFadeStart Offset: 0x18
					constexpr auto n_dist_fade_end = 0x1A; // Name: m_nDistFadeEnd Offset: 0x1A
					constexpr auto fl_fade_scale = 0x1C; // Name: m_flFadeScale Offset: 0x1C
					constexpr auto fl_render_fx_start_time = 0x20; // Name: m_flRenderFxStartTime Offset: 0x20
					constexpr auto fl_render_fx_duration = 0x24; // Name: m_flRenderFxDuration Offset: 0x24
				} // namespace CClientAlphaProperty

				namespace WaterWheelDrag_t {
					constexpr auto fl_fraction_of_wheel_submerged = 0x0; // Name: m_flFractionOfWheelSubmerged Offset: 0x0
					constexpr auto fl_wheel_drag = 0x4; // Name: m_flWheelDrag Offset: 0x4
				} // namespace WaterWheelDrag_t

				namespace CTakeDamageInfo {
					constexpr auto vec_damage_force = 0x8; // Name: m_vecDamageForce Offset: 0x8
					constexpr auto vec_damage_position = 0x14; // Name: m_vecDamagePosition Offset: 0x14
					constexpr auto vec_reported_position = 0x20; // Name: m_vecReportedPosition Offset: 0x20
					constexpr auto vec_damage_direction = 0x2C; // Name: m_vecDamageDirection Offset: 0x2C
					constexpr auto h_inflictor = 0x38; // Name: m_hInflictor Offset: 0x38
					constexpr auto h_attacker = 0x3C; // Name: m_hAttacker Offset: 0x3C
					constexpr auto h_ability = 0x40; // Name: m_hAbility Offset: 0x40
					constexpr auto fl_damage = 0x44; // Name: m_flDamage Offset: 0x44
					constexpr auto fl_totalled_damage = 0x48; // Name: m_flTotalledDamage Offset: 0x48
					constexpr auto fl_totalled_damage_absorbed = 0x4C; // Name: m_flTotalledDamageAbsorbed Offset: 0x4C
					constexpr auto bits_damage_type = 0x50; // Name: m_bitsDamageType Offset: 0x50
					constexpr auto i_damage_custom = 0x54; // Name: m_iDamageCustom Offset: 0x54
					constexpr auto i_ammo_type = 0x58; // Name: m_iAmmoType Offset: 0x58
					constexpr auto fl_original_damage = 0x68; // Name: m_flOriginalDamage Offset: 0x68
					constexpr auto b_should_bleed = 0x6C; // Name: m_bShouldBleed Offset: 0x6C
					constexpr auto b_should_spark = 0x6D; // Name: m_bShouldSpark Offset: 0x6D
					constexpr auto fl_damage_absorbed = 0x70; // Name: m_flDamageAbsorbed Offset: 0x70
					constexpr auto n_damage_flags = 0x80; // Name: m_nDamageFlags Offset: 0x80
					constexpr auto n_num_objects_penetrated = 0x88; // Name: m_nNumObjectsPenetrated Offset: 0x88
					constexpr auto fl_friendly_fire_damage_reduction_ratio = 0x8C; // Name: m_flFriendlyFireDamageReductionRatio Offset: 0x8C
					constexpr auto h_script_instance = 0x90; // Name: m_hScriptInstance Offset: 0x90
					constexpr auto b_in_take_damage_flow = 0xAC; // Name: m_bInTakeDamageFlow Offset: 0xAC
				} // namespace CTakeDamageInfo

				namespace CRandSimTimer {
					constexpr auto min_interval = 0x8; // Name: m_minInterval Offset: 0x8
					constexpr auto max_interval = 0xC; // Name: m_maxInterval Offset: 0xC
				} // namespace CRandSimTimer

				namespace sndopvarlatchdata_t {
					constexpr auto isz_stack = 0x8; // Name: m_iszStack Offset: 0x8
					constexpr auto isz_operator = 0x10; // Name: m_iszOperator Offset: 0x10
					constexpr auto isz_opvar = 0x18; // Name: m_iszOpvar Offset: 0x18
					constexpr auto fl_val = 0x20; // Name: m_flVal Offset: 0x20
					constexpr auto v_pos = 0x24; // Name: m_vPos Offset: 0x24
				} // namespace sndopvarlatchdata_t

				namespace CPulseCell_PlaySequence {
					constexpr auto sequence_name = 0x48; // Name: m_SequenceName Offset: 0x48
					constexpr auto pulse_anim_events = 0x50; // Name: m_PulseAnimEvents Offset: 0x50
					constexpr auto on_finished = 0x68; // Name: m_OnFinished Offset: 0x68
					constexpr auto on_canceled = 0x98; // Name: m_OnCanceled Offset: 0x98
				} // namespace CPulseCell_PlaySequence

				namespace IEconItemInterface {
				} // namespace IEconItemInterface

				namespace EventSetTime_t {
					constexpr auto loop_state = 0x0; // Name: m_LoopState Offset: 0x0
					constexpr auto n_client_output_frames = 0x28; // Name: m_nClientOutputFrames Offset: 0x28
					constexpr auto fl_real_time = 0x30; // Name: m_flRealTime Offset: 0x30
					constexpr auto fl_render_time = 0x38; // Name: m_flRenderTime Offset: 0x38
					constexpr auto fl_render_frame_time = 0x40; // Name: m_flRenderFrameTime Offset: 0x40
					constexpr auto fl_render_frame_time_unbounded = 0x48; // Name: m_flRenderFrameTimeUnbounded Offset: 0x48
					constexpr auto fl_render_frame_time_unscaled = 0x50; // Name: m_flRenderFrameTimeUnscaled Offset: 0x50
					constexpr auto fl_tick_remainder = 0x58; // Name: m_flTickRemainder Offset: 0x58
				} // namespace EventSetTime_t

				namespace CPulseCell_LerpCameraSettings_CursorState_t {
					constexpr auto h_camera = 0x8; // Name: m_hCamera Offset: 0x8
					constexpr auto overlaid_start = 0xC; // Name: m_OverlaidStart Offset: 0xC
					constexpr auto overlaid_end = 0x1C; // Name: m_OverlaidEnd Offset: 0x1C
				} // namespace CPulseCell_LerpCameraSettings_CursorState_t

				namespace QuestProgress {
				} // namespace QuestProgress

				namespace ParticleIndex_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace ParticleIndex_t

				namespace CTakeDamageSummaryScopeGuard {
					constexpr auto vec_summaries = 0x8; // Name: m_vecSummaries Offset: 0x8
				} // namespace CTakeDamageSummaryScopeGuard

				namespace IClientAlphaProperty {
				} // namespace IClientAlphaProperty

				namespace CInButtonState {
					constexpr auto p_button_states = 0x8; // Name: m_pButtonStates Offset: 0x8
				} // namespace CInButtonState

				namespace EventClientPollNetworking_t {
					constexpr auto n_tick_count = 0x0; // Name: m_nTickCount Offset: 0x0
				} // namespace EventClientPollNetworking_t

				namespace EventClientProcessInput_t {
					constexpr auto loop_state = 0x0; // Name: m_LoopState Offset: 0x0
					constexpr auto fl_real_time = 0x28; // Name: m_flRealTime Offset: 0x28
					constexpr auto fl_tick_interval = 0x2C; // Name: m_flTickInterval Offset: 0x2C
					constexpr auto fl_tick_start_time = 0x30; // Name: m_flTickStartTime Offset: 0x30
				} // namespace EventClientProcessInput_t

				namespace CFiringModeInt {
					constexpr auto n_values = 0x0; // Name: m_nValues Offset: 0x0
				} // namespace CFiringModeInt

				namespace CPulseCell_LerpCameraSettings {
					constexpr auto fl_seconds = 0x78; // Name: m_flSeconds Offset: 0x78
					constexpr auto start = 0x7C; // Name: m_Start Offset: 0x7C
					constexpr auto end = 0x8C; // Name: m_End Offset: 0x8C
				} // namespace CPulseCell_LerpCameraSettings

				namespace CompositeMaterialMatchFilter_t {
					constexpr auto n_composite_material_match_filter_type = 0x0; // Name: m_nCompositeMaterialMatchFilterType Offset: 0x0
					constexpr auto str_match_filter = 0x8; // Name: m_strMatchFilter Offset: 0x8
					constexpr auto str_match_value = 0x10; // Name: m_strMatchValue Offset: 0x10
					constexpr auto b_pass_when_true = 0x18; // Name: m_bPassWhenTrue Offset: 0x18
				} // namespace CompositeMaterialMatchFilter_t

				namespace C_LightGlowOverlay {
					constexpr auto vec_origin = 0xD0; // Name: m_vecOrigin Offset: 0xD0
					constexpr auto vec_direction = 0xDC; // Name: m_vecDirection Offset: 0xDC
					constexpr auto n_min_dist = 0xE8; // Name: m_nMinDist Offset: 0xE8
					constexpr auto n_max_dist = 0xEC; // Name: m_nMaxDist Offset: 0xEC
					constexpr auto n_outer_max_dist = 0xF0; // Name: m_nOuterMaxDist Offset: 0xF0
					constexpr auto b_one_sided = 0xF4; // Name: m_bOneSided Offset: 0xF4
					constexpr auto b_modulate_by_dot = 0xF5; // Name: m_bModulateByDot Offset: 0xF5
				} // namespace C_LightGlowOverlay

				namespace IRagdoll {
				} // namespace IRagdoll

				namespace CAnimGraphControllerBase {
					constexpr auto s_destructible_part_destroyed_hit_group = 0x18; // Name: m_sDestructiblePartDestroyedHitGroup Offset: 0x18
					constexpr auto n_destructible_part_destroyed_part_index = 0x40; // Name: m_nDestructiblePartDestroyedPartIndex Offset: 0x40
				} // namespace CAnimGraphControllerBase

				namespace CNetworkVelocityVector {
					constexpr auto vec_x = 0x10; // Name: m_vecX Offset: 0x10
					constexpr auto vec_y = 0x18; // Name: m_vecY Offset: 0x18
					constexpr auto vec_z = 0x20; // Name: m_vecZ Offset: 0x20
				} // namespace CNetworkVelocityVector
			}

			namespace smartprops
			{

				namespace CSmartPropElement_Deformer {
				} // namespace CSmartPropElement_Deformer

				namespace CSmartPropTransformOperation {
				} // namespace CSmartPropTransformOperation

				namespace CSmartPropElement_SmartProp {
					constexpr auto s_smart_prop = 0x80; // Name: m_sSmartProp Offset: 0x80
					constexpr auto b_local_evaluation_state = 0x160; // Name: m_bLocalEvaluationState Offset: 0x160
				} // namespace CSmartPropElement_SmartProp

				namespace CSmartPropAttributeGridOriginMode {
				} // namespace CSmartPropAttributeGridOriginMode

				namespace CSmartPropVariable_DistributionMode {
					constexpr auto default_value = 0x28; // Name: m_DefaultValue Offset: 0x28
				} // namespace CSmartPropVariable_DistributionMode

				namespace CSmartPropSelectionCriteria_ChoiceWeight {
					constexpr auto fl_weight = 0x48; // Name: m_flWeight Offset: 0x48
				} // namespace CSmartPropSelectionCriteria_ChoiceWeight

				namespace CSmartPropAttributeRadiusPlacementMode {
				} // namespace CSmartPropAttributeRadiusPlacementMode

				namespace CSmartPropOperation_SaveScale {
					constexpr auto variable_name = 0x50; // Name: m_VariableName Offset: 0x50
				} // namespace CSmartPropOperation_SaveScale

				namespace CSmartPropOperation_Trace {
					constexpr auto origin = 0x50; // Name: m_Origin Offset: 0x50
					constexpr auto origin_space = 0x90; // Name: m_OriginSpace Offset: 0x90
					constexpr auto fl_origin_offset = 0xD0; // Name: m_flOriginOffset Offset: 0xD0
					constexpr auto fl_surface_up_influence = 0x110; // Name: m_flSurfaceUpInfluence Offset: 0x110
					constexpr auto n_no_hit_result = 0x150; // Name: m_nNoHitResult Offset: 0x150
					constexpr auto b_ignore_tool_materials = 0x190; // Name: m_bIgnoreToolMaterials Offset: 0x190
					constexpr auto b_ignore_sky = 0x1D0; // Name: m_bIgnoreSky Offset: 0x1D0
					constexpr auto b_ignore_no_draw = 0x210; // Name: m_bIgnoreNoDraw Offset: 0x210
					constexpr auto b_ignore_translucent = 0x250; // Name: m_bIgnoreTranslucent Offset: 0x250
					constexpr auto b_ignore_models = 0x290; // Name: m_bIgnoreModels Offset: 0x290
					constexpr auto b_ignore_entities = 0x2D0; // Name: m_bIgnoreEntities Offset: 0x2D0
				} // namespace CSmartPropOperation_Trace

				namespace CSmartPropOperation {
				} // namespace CSmartPropOperation

				namespace CSmartPropAttributeCoordinateSpace {
				} // namespace CSmartPropAttributeCoordinateSpace

				namespace CSmartPropElement_PlaceInSphere {
					constexpr auto placement_mode = 0xA0; // Name: m_PlacementMode Offset: 0xA0
					constexpr auto distribution_mode = 0xE0; // Name: m_DistributionMode Offset: 0xE0
					constexpr auto fl_randomness = 0x120; // Name: m_flRandomness Offset: 0x120
					constexpr auto v_plane_up_direction = 0x160; // Name: m_vPlaneUpDirection Offset: 0x160
					constexpr auto n_count_min = 0x1A0; // Name: m_nCountMin Offset: 0x1A0
					constexpr auto n_count_max = 0x1E0; // Name: m_nCountMax Offset: 0x1E0
					constexpr auto fl_position_radius_inner = 0x220; // Name: m_flPositionRadiusInner Offset: 0x220
					constexpr auto fl_position_radius_outer = 0x260; // Name: m_flPositionRadiusOuter Offset: 0x260
					constexpr auto b_align_orientation = 0x2A0; // Name: m_bAlignOrientation Offset: 0x2A0
					constexpr auto v_align_direction = 0x2E0; // Name: m_vAlignDirection Offset: 0x2E0
				} // namespace CSmartPropElement_PlaceInSphere

				namespace CSmartPropElement_Layout2DGrid {
					constexpr auto fl_width = 0xA0; // Name: m_flWidth Offset: 0xA0
					constexpr auto fl_length = 0xE0; // Name: m_flLength Offset: 0xE0
					constexpr auto b_vertical_length = 0x120; // Name: m_bVerticalLength Offset: 0x120
					constexpr auto grid_arrangement = 0x160; // Name: m_GridArrangement Offset: 0x160
					constexpr auto grid_origin_mode = 0x1A0; // Name: m_GridOriginMode Offset: 0x1A0
					constexpr auto n_count_w = 0x1E0; // Name: m_nCountW Offset: 0x1E0
					constexpr auto n_count_l = 0x220; // Name: m_nCountL Offset: 0x220
					constexpr auto fl_spacing_width = 0x260; // Name: m_flSpacingWidth Offset: 0x260
					constexpr auto fl_spacing_length = 0x2A0; // Name: m_flSpacingLength Offset: 0x2A0
					constexpr auto b_alternate_shift = 0x2E0; // Name: m_bAlternateShift Offset: 0x2E0
					constexpr auto fl_alternate_shift_width = 0x320; // Name: m_flAlternateShiftWidth Offset: 0x320
					constexpr auto fl_alternate_shift_length = 0x360; // Name: m_flAlternateShiftLength Offset: 0x360
				} // namespace CSmartPropElement_Layout2DGrid

				namespace CSmartPropAttributeChoiceSelectionMode {
				} // namespace CSmartPropAttributeChoiceSelectionMode

				namespace CSmartPropVariable_ChoiceSelectionMode {
					constexpr auto default_value = 0x28; // Name: m_DefaultValue Offset: 0x28
				} // namespace CSmartPropVariable_ChoiceSelectionMode

				namespace CSmartPropVariable {
					constexpr auto variable_name = 0x10; // Name: m_VariableName Offset: 0x10
					constexpr auto b_expose_as_parameter = 0x18; // Name: m_bExposeAsParameter Offset: 0x18
					constexpr auto display_name = 0x20; // Name: m_DisplayName Offset: 0x20
				} // namespace CSmartPropVariable

				namespace CSmartPropFilter_Expression {
					constexpr auto expression = 0x50; // Name: m_Expression Offset: 0x50
				} // namespace CSmartPropFilter_Expression

				namespace CSmartPropOperation_CreateLocator {
					constexpr auto locator_name = 0x50; // Name: m_LocatorName Offset: 0x50
					constexpr auto v_offset = 0x58; // Name: m_vOffset Offset: 0x58
					constexpr auto fl_display_scale = 0x98; // Name: m_flDisplayScale Offset: 0x98
					constexpr auto b_configurable = 0xD8; // Name: m_bConfigurable Offset: 0xD8
					constexpr auto b_allow_translation = 0x118; // Name: m_bAllowTranslation Offset: 0x118
					constexpr auto b_allow_rotation = 0x158; // Name: m_bAllowRotation Offset: 0x158
					constexpr auto b_allow_scale = 0x198; // Name: m_bAllowScale Offset: 0x198
				} // namespace CSmartPropOperation_CreateLocator

				namespace CSmartPropVariable_String {
					constexpr auto default_value = 0x28; // Name: m_DefaultValue Offset: 0x28
				} // namespace CSmartPropVariable_String

				namespace CSmartPropVariable_ScaleMode {
					constexpr auto default_value = 0x28; // Name: m_DefaultValue Offset: 0x28
				} // namespace CSmartPropVariable_ScaleMode

				namespace CSmartPropAttributePickMode {
				} // namespace CSmartPropAttributePickMode

				namespace CSmartPropFilter_VariableValue {
					constexpr auto variable_comparison = 0x50; // Name: m_VariableComparison Offset: 0x50
				} // namespace CSmartPropFilter_VariableValue

				namespace CSmartPropOperation_ComputeDotProduct3D {
					constexpr auto output_variable_name = 0x50; // Name: m_OutputVariableName Offset: 0x50
					constexpr auto input_vector_a = 0x58; // Name: m_InputVectorA Offset: 0x58
					constexpr auto input_vector_b = 0x98; // Name: m_InputVectorB Offset: 0x98
				} // namespace CSmartPropOperation_ComputeDotProduct3D

				namespace CSmartPropVariable_MaterialGroup {
					constexpr auto s_model_name = 0x28; // Name: m_sModelName Offset: 0x28
					constexpr auto default_value = 0x108; // Name: m_DefaultValue Offset: 0x108
				} // namespace CSmartPropVariable_MaterialGroup

				namespace CSmartPropOperation_RandomColorTintColor {
					constexpr auto selection_mode = 0x50; // Name: m_SelectionMode Offset: 0x50
					constexpr auto color_position = 0x90; // Name: m_ColorPosition Offset: 0x90
					constexpr auto mode = 0xD0; // Name: m_Mode Offset: 0xD0
					constexpr auto gradient = 0xD8; // Name: m_Gradient Offset: 0xD8
				} // namespace CSmartPropOperation_RandomColorTintColor

				namespace CSmartPropOperation_RandomRotation {
					constexpr auto v_random_rotation_min = 0x50; // Name: m_vRandomRotationMin Offset: 0x50
					constexpr auto v_random_rotation_max = 0x90; // Name: m_vRandomRotationMax Offset: 0x90
				} // namespace CSmartPropOperation_RandomRotation

				namespace CSmartPropSelectionCriteria_IsValid {
					constexpr auto expression = 0x48; // Name: m_Expression Offset: 0x48
				} // namespace CSmartPropSelectionCriteria_IsValid

				namespace ColorChoice_t {
					constexpr auto color = 0x0; // Name: m_Color Offset: 0x0
					constexpr auto fl_weight = 0x40; // Name: m_flWeight Offset: 0x40
				} // namespace ColorChoice_t

				namespace CSmartPropOperation_RestoreState {
					constexpr auto state_name = 0x50; // Name: m_StateName Offset: 0x50
					constexpr auto b_discard_if_uknown = 0x90; // Name: m_bDiscardIfUknown Offset: 0x90
				} // namespace CSmartPropOperation_RestoreState

				namespace CSmartPropOperation_SetPosition {
					constexpr auto v_position = 0x50; // Name: m_vPosition Offset: 0x50
					constexpr auto coordinate_space = 0x90; // Name: m_CoordinateSpace Offset: 0x90
				} // namespace CSmartPropOperation_SetPosition

				namespace CSmartPropAttributeGridPlacementMode {
				} // namespace CSmartPropAttributeGridPlacementMode

				namespace CSmartPropVariable_Model {
					constexpr auto default_value = 0x28; // Name: m_DefaultValue Offset: 0x28
				} // namespace CSmartPropVariable_Model

				namespace CSmartPropAttributeTraceNoHit {
				} // namespace CSmartPropAttributeTraceNoHit

				namespace CSmartPropOperation_RotateTowards {
					constexpr auto v_origin_pos = 0x50; // Name: m_vOriginPos Offset: 0x50
					constexpr auto v_target_pos = 0x90; // Name: m_vTargetPos Offset: 0x90
					constexpr auto v_up_pos = 0xD0; // Name: m_vUpPos Offset: 0xD0
					constexpr auto fl_weight = 0x110; // Name: m_flWeight Offset: 0x110
					constexpr auto origin_space = 0x150; // Name: m_OriginSpace Offset: 0x150
					constexpr auto target_space = 0x190; // Name: m_TargetSpace Offset: 0x190
					constexpr auto up_space = 0x1D0; // Name: m_UpSpace Offset: 0x1D0
				} // namespace CSmartPropOperation_RotateTowards

				namespace CSmartPropVariable_TraceNoHit {
					constexpr auto default_value = 0x28; // Name: m_DefaultValue Offset: 0x28
				} // namespace CSmartPropVariable_TraceNoHit

				namespace CSmartPropChoiceOption {
					constexpr auto name = 0x0; // Name: m_Name Offset: 0x0
					constexpr auto display_name = 0x8; // Name: m_DisplayName Offset: 0x8
					constexpr auto variable_values = 0x10; // Name: m_VariableValues Offset: 0x10
				} // namespace CSmartPropChoiceOption

				namespace CSmartPropAttributeDistributionMode {
				} // namespace CSmartPropAttributeDistributionMode

				namespace CSmartPropFilter_Probability {
					constexpr auto fl_probability = 0x50; // Name: m_flProbability Offset: 0x50
				} // namespace CSmartPropFilter_Probability

				namespace CSmartPropOperation_MaterialOverride {
					constexpr auto b_clear_current_overrides = 0x50; // Name: m_bClearCurrentOverrides Offset: 0x50
					constexpr auto material_replacements = 0x90; // Name: m_MaterialReplacements Offset: 0x90
				} // namespace CSmartPropOperation_MaterialOverride

				namespace CSmartPropVariable_Vector2D {
					constexpr auto default_value = 0x28; // Name: m_DefaultValue Offset: 0x28
				} // namespace CSmartPropVariable_Vector2D

				namespace CSmartPropVariable_GridPlacementMode {
					constexpr auto default_value = 0x28; // Name: m_DefaultValue Offset: 0x28
				} // namespace CSmartPropVariable_GridPlacementMode

				namespace CSmartPropOperation_SaveSurfaceNormal {
					constexpr auto coordinate_space = 0x50; // Name: m_CoordinateSpace Offset: 0x50
					constexpr auto variable_name = 0x90; // Name: m_VariableName Offset: 0x90
				} // namespace CSmartPropOperation_SaveSurfaceNormal

				namespace CSmartPropOperation_ResetScale {
					constexpr auto b_ignore_object_scale = 0x50; // Name: m_bIgnoreObjectScale Offset: 0x50
				} // namespace CSmartPropOperation_ResetScale

				namespace CSmartPropOperation_SetVariable {
					constexpr auto variable_value = 0x50; // Name: m_VariableValue Offset: 0x50
				} // namespace CSmartPropOperation_SetVariable

				namespace CSmartPropOperation_SavePosition {
					constexpr auto coordinate_space = 0x50; // Name: m_CoordinateSpace Offset: 0x50
					constexpr auto variable_name = 0x90; // Name: m_VariableName Offset: 0x90
				} // namespace CSmartPropOperation_SavePosition

				namespace CSmartPropOperation_Scale {
					constexpr auto fl_scale = 0x50; // Name: m_flScale Offset: 0x50
				} // namespace CSmartPropOperation_Scale

				namespace CSmartPropVariable_GridOriginMode {
					constexpr auto default_value = 0x28; // Name: m_DefaultValue Offset: 0x28
				} // namespace CSmartPropVariable_GridOriginMode

				namespace CSmartPropOperation_SetTintColor {
					constexpr auto selection_mode = 0x50; // Name: m_SelectionMode Offset: 0x50
					constexpr auto color_selection = 0x90; // Name: m_ColorSelection Offset: 0x90
					constexpr auto mode = 0xD0; // Name: m_Mode Offset: 0xD0
					constexpr auto color_choices = 0x110; // Name: m_ColorChoices Offset: 0x110
				} // namespace CSmartPropOperation_SetTintColor

				namespace CSmartPropSelectionCriteria_EndCap {
					constexpr auto b_start = 0x48; // Name: m_bStart Offset: 0x48
					constexpr auto b_end = 0x88; // Name: m_bEnd Offset: 0x88
				} // namespace CSmartPropSelectionCriteria_EndCap

				namespace CSmartPropVariable_ApplyColorMode {
					constexpr auto default_value = 0x28; // Name: m_DefaultValue Offset: 0x28
				} // namespace CSmartPropVariable_ApplyColorMode

				namespace CSmartPropAttributeApplyColorMode {
				} // namespace CSmartPropAttributeApplyColorMode

				namespace CSmartPropOperation_SaveColor {
					constexpr auto variable_name = 0x50; // Name: m_VariableName Offset: 0x50
				} // namespace CSmartPropOperation_SaveColor

				namespace CSmartPropOperation_SaveDirection {
					constexpr auto direction_vector = 0x50; // Name: m_DirectionVector Offset: 0x50
					constexpr auto coordinate_space = 0x90; // Name: m_CoordinateSpace Offset: 0x90
					constexpr auto variable_name = 0xD0; // Name: m_VariableName Offset: 0xD0
				} // namespace CSmartPropOperation_SaveDirection

				namespace CSmartPropElement_Model {
					constexpr auto s_model_name = 0x80; // Name: m_sModelName Offset: 0x80
					constexpr auto material_group_name = 0xC0; // Name: m_MaterialGroupName Offset: 0xC0
					constexpr auto v_model_scale = 0x100; // Name: m_vModelScale Offset: 0x100
				} // namespace CSmartPropElement_Model

				namespace CSmartPropAttributeScaleMode {
				} // namespace CSmartPropAttributeScaleMode

				namespace CSmartPropVariable_Angles {
					constexpr auto default_value = 0x28; // Name: m_DefaultValue Offset: 0x28
				} // namespace CSmartPropVariable_Angles

				namespace CSmartPropOperation_ComputeProjectVector3D {
					constexpr auto output_variable_name = 0x50; // Name: m_OutputVariableName Offset: 0x50
					constexpr auto output_coordinate_space = 0x58; // Name: m_OutputCoordinateSpace Offset: 0x58
					constexpr auto input_vector_a = 0x98; // Name: m_InputVectorA Offset: 0x98
					constexpr auto coordinate_space_a = 0xD8; // Name: m_CoordinateSpaceA Offset: 0xD8
					constexpr auto input_vector_b = 0x118; // Name: m_InputVectorB Offset: 0x118
					constexpr auto coordinate_space_b = 0x158; // Name: m_CoordinateSpaceB Offset: 0x158
					constexpr auto b_plane = 0x198; // Name: m_bPlane Offset: 0x198
				} // namespace CSmartPropOperation_ComputeProjectVector3D

				namespace CSmartPropVariable_Bool {
					constexpr auto default_value = 0x28; // Name: m_DefaultValue Offset: 0x28
				} // namespace CSmartPropVariable_Bool

				namespace CSmartPropOperation_RigidDeformation {
				} // namespace CSmartPropOperation_RigidDeformation

				namespace CSmartPropElement_Group {
					constexpr auto children = 0x80; // Name: m_Children Offset: 0x80
					constexpr auto s_label = 0x98; // Name: m_sLabel Offset: 0x98
				} // namespace CSmartPropElement_Group

				namespace CSmartPropVariable_Vector4D {
					constexpr auto default_value = 0x28; // Name: m_DefaultValue Offset: 0x28
				} // namespace CSmartPropVariable_Vector4D

				namespace CSmartPropOperation_ComputeDistance3D {
					constexpr auto output_variable_name = 0x50; // Name: m_OutputVariableName Offset: 0x50
					constexpr auto output_coordinate_space = 0x58; // Name: m_OutputCoordinateSpace Offset: 0x58
					constexpr auto input_position_a = 0x98; // Name: m_InputPositionA Offset: 0x98
					constexpr auto coordinate_space_a = 0xD8; // Name: m_CoordinateSpaceA Offset: 0xD8
					constexpr auto input_position_b = 0x118; // Name: m_InputPositionB Offset: 0x118
					constexpr auto coordinate_space_b = 0x158; // Name: m_CoordinateSpaceB Offset: 0x158
				} // namespace CSmartPropOperation_ComputeDistance3D

				namespace CSmartPropParameter {
					constexpr auto n_element_id = 0x8; // Name: m_nElementID Offset: 0x8
				} // namespace CSmartPropParameter

				namespace CSmartPropAttributeDirection {
				} // namespace CSmartPropAttributeDirection

				namespace CSmartPropChoice {
					constexpr auto name = 0x10; // Name: m_Name Offset: 0x10
					constexpr auto default_option = 0x18; // Name: m_DefaultOption Offset: 0x18
					constexpr auto options = 0x20; // Name: m_Options Offset: 0x20
				} // namespace CSmartPropChoice

				namespace CSmartPropOperation_Translate {
					constexpr auto v_position = 0x50; // Name: m_vPosition Offset: 0x50
					constexpr auto coordinate_space = 0x90; // Name: m_CoordinateSpace Offset: 0x90
				} // namespace CSmartPropOperation_Translate

				namespace CSmartPropSelectionCriteria_LinearLength {
					constexpr auto fl_length = 0x48; // Name: m_flLength Offset: 0x48
					constexpr auto b_allow_scale = 0x88; // Name: m_bAllowScale Offset: 0x88
					constexpr auto fl_min_length = 0xC8; // Name: m_flMinLength Offset: 0xC8
					constexpr auto fl_max_length = 0x108; // Name: m_flMaxLength Offset: 0x108
				} // namespace CSmartPropSelectionCriteria_LinearLength

				namespace CSmartPropElement_PlaceMultiple {
					constexpr auto n_count = 0xA0; // Name: m_nCount Offset: 0xA0
					constexpr auto expression = 0xE0; // Name: m_Expression Offset: 0xE0
				} // namespace CSmartPropElement_PlaceMultiple

				namespace CSmartPropElement_ModifyState {
					constexpr auto s_label = 0x80; // Name: m_sLabel Offset: 0x80
				} // namespace CSmartPropElement_ModifyState

				namespace CSmartPropOperation_ComputeCrossProduct3D {
					constexpr auto output_variable_name = 0x50; // Name: m_OutputVariableName Offset: 0x50
					constexpr auto input_vector_a = 0x58; // Name: m_InputVectorA Offset: 0x58
					constexpr auto input_vector_b = 0x98; // Name: m_InputVectorB Offset: 0x98
				} // namespace CSmartPropOperation_ComputeCrossProduct3D

				namespace CSmartPropOperation_CreateSizer {
					constexpr auto name = 0x50; // Name: m_Name Offset: 0x50
					constexpr auto b_display_model = 0x58; // Name: m_bDisplayModel Offset: 0x58
					constexpr auto fl_initial_min_x = 0x98; // Name: m_flInitialMinX Offset: 0x98
					constexpr auto fl_initial_max_x = 0xD8; // Name: m_flInitialMaxX Offset: 0xD8
					constexpr auto fl_constraint_min_x = 0x118; // Name: m_flConstraintMinX Offset: 0x118
					constexpr auto fl_constraint_max_x = 0x158; // Name: m_flConstraintMaxX Offset: 0x158
					constexpr auto output_variable_min_x = 0x198; // Name: m_OutputVariableMinX Offset: 0x198
					constexpr auto output_variable_max_x = 0x1A0; // Name: m_OutputVariableMaxX Offset: 0x1A0
					constexpr auto fl_initial_min_y = 0x1A8; // Name: m_flInitialMinY Offset: 0x1A8
					constexpr auto fl_initial_max_y = 0x1E8; // Name: m_flInitialMaxY Offset: 0x1E8
					constexpr auto fl_constraint_min_y = 0x228; // Name: m_flConstraintMinY Offset: 0x228
					constexpr auto fl_constraint_max_y = 0x268; // Name: m_flConstraintMaxY Offset: 0x268
					constexpr auto output_variable_min_y = 0x2A8; // Name: m_OutputVariableMinY Offset: 0x2A8
					constexpr auto output_variable_max_y = 0x2B0; // Name: m_OutputVariableMaxY Offset: 0x2B0
					constexpr auto fl_initial_min_z = 0x2B8; // Name: m_flInitialMinZ Offset: 0x2B8
					constexpr auto fl_initial_max_z = 0x2F8; // Name: m_flInitialMaxZ Offset: 0x2F8
					constexpr auto fl_constraint_min_z = 0x338; // Name: m_flConstraintMinZ Offset: 0x338
					constexpr auto fl_constraint_max_z = 0x378; // Name: m_flConstraintMaxZ Offset: 0x378
					constexpr auto output_variable_min_z = 0x3B8; // Name: m_OutputVariableMinZ Offset: 0x3B8
					constexpr auto output_variable_max_z = 0x3C0; // Name: m_OutputVariableMaxZ Offset: 0x3C0
				} // namespace CSmartPropOperation_CreateSizer

				namespace CSmartPropOperation_SetOrientation {
					constexpr auto v_forward_vector = 0x50; // Name: m_vForwardVector Offset: 0x50
					constexpr auto forward_direction_space = 0x90; // Name: m_ForwardDirectionSpace Offset: 0x90
					constexpr auto v_up_vector = 0xD0; // Name: m_vUpVector Offset: 0xD0
					constexpr auto up_direction_space = 0x110; // Name: m_UpDirectionSpace Offset: 0x110
					constexpr auto b_prioritize_up = 0x150; // Name: m_bPrioritizeUp Offset: 0x150
				} // namespace CSmartPropOperation_SetOrientation

				namespace CSmartPropVariable_DirectionVector {
					constexpr auto default_value = 0x28; // Name: m_DefaultValue Offset: 0x28
				} // namespace CSmartPropVariable_DirectionVector

				namespace CSmartPropElement_PickOne {
					constexpr auto selection_mode = 0xA0; // Name: m_SelectionMode Offset: 0xA0
					constexpr auto specific_child_index = 0xE0; // Name: m_SpecificChildIndex Offset: 0xE0
					constexpr auto b_configurable = 0x120; // Name: m_bConfigurable Offset: 0x120
					constexpr auto v_handle_offset = 0x160; // Name: m_vHandleOffset Offset: 0x160
					constexpr auto handle_color = 0x1A0; // Name: m_HandleColor Offset: 0x1A0
					constexpr auto handle_size = 0x1E0; // Name: m_HandleSize Offset: 0x1E0
					constexpr auto handle_shape = 0x220; // Name: m_HandleShape Offset: 0x220
				} // namespace CSmartPropElement_PickOne

				namespace CSmartPropModifier {
					constexpr auto b_enabled = 0x8; // Name: m_bEnabled Offset: 0x8
				} // namespace CSmartPropModifier

				namespace CSmartPropOperation_CreateRotator {
					constexpr auto name = 0x50; // Name: m_Name Offset: 0x50
					constexpr auto v_rotation_axis = 0x58; // Name: m_vRotationAxis Offset: 0x58
					constexpr auto coordinate_space = 0x98; // Name: m_CoordinateSpace Offset: 0x98
					constexpr auto fl_display_radius = 0xD8; // Name: m_flDisplayRadius Offset: 0xD8
					constexpr auto b_apply_to_current_transform = 0x118; // Name: m_bApplyToCurrentTransform Offset: 0x118
					constexpr auto fl_snapping_increment = 0x158; // Name: m_flSnappingIncrement Offset: 0x158
					constexpr auto b_enforce_limits = 0x198; // Name: m_bEnforceLimits Offset: 0x198
					constexpr auto fl_min_angle = 0x1D8; // Name: m_flMinAngle Offset: 0x1D8
					constexpr auto fl_max_angle = 0x218; // Name: m_flMaxAngle Offset: 0x218
					constexpr auto output_variable = 0x258; // Name: m_OutputVariable Offset: 0x258
				} // namespace CSmartPropOperation_CreateRotator

				namespace CSmartPropVariable_Color {
					constexpr auto default_value = 0x28; // Name: m_DefaultValue Offset: 0x28
				} // namespace CSmartPropVariable_Color

				namespace CSmartPropElement_FitOnLine {
					constexpr auto v_start = 0xA0; // Name: m_vStart Offset: 0xA0
					constexpr auto v_end = 0xE0; // Name: m_vEnd Offset: 0xE0
					constexpr auto point_space = 0x120; // Name: m_PointSpace Offset: 0x120
					constexpr auto b_orient_along_line = 0x160; // Name: m_bOrientAlongLine Offset: 0x160
					constexpr auto v_up_direction = 0x1A0; // Name: m_vUpDirection Offset: 0x1A0
					constexpr auto up_direction_space = 0x1E0; // Name: m_UpDirectionSpace Offset: 0x1E0
					constexpr auto b_prioritize_up = 0x220; // Name: m_bPrioritizeUp Offset: 0x220
					constexpr auto n_scale_mode = 0x260; // Name: m_nScaleMode Offset: 0x260
					constexpr auto n_pick_mode = 0x2A0; // Name: m_nPickMode Offset: 0x2A0
				} // namespace CSmartPropElement_FitOnLine

				namespace CSmartPropOperation_ComputeVectorBetweenPoints3D {
					constexpr auto output_variable_name = 0x50; // Name: m_OutputVariableName Offset: 0x50
					constexpr auto output_coordinate_space = 0x58; // Name: m_OutputCoordinateSpace Offset: 0x58
					constexpr auto b_normalized = 0x98; // Name: m_bNormalized Offset: 0x98
					constexpr auto input_position_a = 0xD8; // Name: m_InputPositionA Offset: 0xD8
					constexpr auto coordinate_space_a = 0x118; // Name: m_CoordinateSpaceA Offset: 0x118
					constexpr auto input_position_b = 0x158; // Name: m_InputPositionB Offset: 0x158
					constexpr auto coordinate_space_b = 0x198; // Name: m_CoordinateSpaceB Offset: 0x198
				} // namespace CSmartPropOperation_ComputeVectorBetweenPoints3D

				namespace CSmartPropVariable_Int {
					constexpr auto default_value = 0x28; // Name: m_DefaultValue Offset: 0x28
					constexpr auto n_paramater_min_value = 0x2C; // Name: m_nParamaterMinValue Offset: 0x2C
					constexpr auto n_paramater_max_value = 0x30; // Name: m_nParamaterMaxValue Offset: 0x30
				} // namespace CSmartPropVariable_Int

				namespace CSmartPropElement_BendDeformer {
					constexpr auto b_deformation_enabled = 0xA0; // Name: m_bDeformationEnabled Offset: 0xA0
					constexpr auto v_origin = 0xE0; // Name: m_vOrigin Offset: 0xE0
					constexpr auto v_angles = 0x120; // Name: m_vAngles Offset: 0x120
					constexpr auto v_size = 0x160; // Name: m_vSize Offset: 0x160
					constexpr auto fl_bend_angle = 0x1A0; // Name: m_flBendAngle Offset: 0x1A0
					constexpr auto fl_bend_point = 0x1E0; // Name: m_flBendPoint Offset: 0x1E0
					constexpr auto fl_bend_radius = 0x220; // Name: m_flBendRadius Offset: 0x220
				} // namespace CSmartPropElement_BendDeformer

				namespace CSmartPropOperation_RandomScale {
					constexpr auto fl_random_scale_min = 0x50; // Name: m_flRandomScaleMin Offset: 0x50
					constexpr auto fl_random_scale_max = 0x90; // Name: m_flRandomScaleMax Offset: 0x90
				} // namespace CSmartPropOperation_RandomScale

				namespace CSmartPropVariable_Float {
					constexpr auto default_value = 0x28; // Name: m_DefaultValue Offset: 0x28
					constexpr auto fl_paramater_min_value = 0x2C; // Name: m_flParamaterMinValue Offset: 0x2C
					constexpr auto fl_paramater_max_value = 0x30; // Name: m_flParamaterMaxValue Offset: 0x30
				} // namespace CSmartPropVariable_Float

				namespace CSmartPropOperation_ResetRotation {
					constexpr auto b_ignore_object_rotation = 0x50; // Name: m_bIgnoreObjectRotation Offset: 0x50
					constexpr auto b_reset_pitch = 0x90; // Name: m_bResetPitch Offset: 0x90
					constexpr auto b_reset_yaw = 0xD0; // Name: m_bResetYaw Offset: 0xD0
					constexpr auto b_reset_roll = 0x110; // Name: m_bResetRoll Offset: 0x110
				} // namespace CSmartPropOperation_ResetRotation

				namespace CSmartPropFilter_SurfaceAngle {
					constexpr auto fl_surface_slope_min = 0x50; // Name: m_flSurfaceSlopeMin Offset: 0x50
					constexpr auto fl_surface_slope_max = 0x90; // Name: m_flSurfaceSlopeMax Offset: 0x90
				} // namespace CSmartPropFilter_SurfaceAngle

				namespace CSmartPropSelectionCriteria {
					constexpr auto b_enabled = 0x8; // Name: m_bEnabled Offset: 0x8
				} // namespace CSmartPropSelectionCriteria

				namespace CSmartPropOperation_TraceToLine {
					constexpr auto end_point_a = 0x310; // Name: m_EndPointA Offset: 0x310
					constexpr auto end_point_space_a = 0x350; // Name: m_EndPointSpaceA Offset: 0x350
					constexpr auto end_point_b = 0x390; // Name: m_EndPointB Offset: 0x390
					constexpr auto end_point_space_b = 0x3D0; // Name: m_EndPointSpaceB Offset: 0x3D0
					constexpr auto b_trace_away = 0x410; // Name: m_bTraceAway Offset: 0x410
					constexpr auto fl_trace_length = 0x450; // Name: m_flTraceLength Offset: 0x450
				} // namespace CSmartPropOperation_TraceToLine

				namespace CSmartPropRoot {
					constexpr auto n_content_version = 0x0; // Name: m_nContentVersion Offset: 0x0
					constexpr auto n_max_depth = 0x8; // Name: m_nMaxDepth Offset: 0x8
					constexpr auto variables = 0x48; // Name: m_Variables Offset: 0x48
					constexpr auto choices = 0x60; // Name: m_Choices Offset: 0x60
					constexpr auto children = 0x78; // Name: m_Children Offset: 0x78
					constexpr auto modifiers = 0x90; // Name: m_Modifiers Offset: 0x90
				} // namespace CSmartPropRoot

				namespace CSmartPropOperation_Rotate {
					constexpr auto v_rotation = 0x50; // Name: m_vRotation Offset: 0x50
				} // namespace CSmartPropOperation_Rotate

				namespace CSmartPropVariable_Vector3D {
					constexpr auto default_value = 0x28; // Name: m_DefaultValue Offset: 0x28
				} // namespace CSmartPropVariable_Vector3D

				namespace CSmartPropVariable_Material {
					constexpr auto default_value = 0x28; // Name: m_DefaultValue Offset: 0x28
				} // namespace CSmartPropVariable_Material

				namespace CSmartPropOperation_ComputeNormalizedVector3D {
					constexpr auto output_variable_name = 0x50; // Name: m_OutputVariableName Offset: 0x50
					constexpr auto input_vector = 0x58; // Name: m_InputVector Offset: 0x58
				} // namespace CSmartPropOperation_ComputeNormalizedVector3D

				namespace CSmartPropVariable_RadiusPlacementMode {
					constexpr auto default_value = 0x28; // Name: m_DefaultValue Offset: 0x28
				} // namespace CSmartPropVariable_RadiusPlacementMode

				namespace CSmartPropVariable_PathPositions {
					constexpr auto default_value = 0x28; // Name: m_DefaultValue Offset: 0x28
				} // namespace CSmartPropVariable_PathPositions

				namespace CSmartPropSelectionCriteria_PathPosition {
					constexpr auto place_at_positions = 0x48; // Name: m_PlaceAtPositions Offset: 0x48
					constexpr auto n_place_every_nth_position = 0x88; // Name: m_nPlaceEveryNthPosition Offset: 0x88
					constexpr auto n_nth_position_index_offset = 0xC8; // Name: m_nNthPositionIndexOffset Offset: 0xC8
					constexpr auto b_allow_at_start = 0x108; // Name: m_bAllowAtStart Offset: 0x108
					constexpr auto b_allow_at_end = 0x148; // Name: m_bAllowAtEnd Offset: 0x148
				} // namespace CSmartPropSelectionCriteria_PathPosition

				namespace CSmartPropOperation_TraceToPoint {
					constexpr auto target_point = 0x310; // Name: m_TargetPoint Offset: 0x310
					constexpr auto target_point_space = 0x350; // Name: m_TargetPointSpace Offset: 0x350
					constexpr auto b_trace_away = 0x390; // Name: m_bTraceAway Offset: 0x390
					constexpr auto fl_trace_length = 0x3D0; // Name: m_flTraceLength Offset: 0x3D0
				} // namespace CSmartPropOperation_TraceToPoint

				namespace CSmartPropOperation_SaveState {
					constexpr auto state_name = 0x50; // Name: m_StateName Offset: 0x50
				} // namespace CSmartPropOperation_SaveState

				namespace CSmartPropMaterialReplacement {
					constexpr auto original_material = 0x0; // Name: m_OriginalMaterial Offset: 0x0
					constexpr auto replacement_material = 0x40; // Name: m_ReplacementMaterial Offset: 0x40
				} // namespace CSmartPropMaterialReplacement

				namespace CSmartPropElement {
					constexpr auto n_element_id = 0x8; // Name: m_nElementID Offset: 0x8
					constexpr auto b_enabled = 0x10; // Name: m_bEnabled Offset: 0x10
					constexpr auto selection_criteria = 0x50; // Name: m_SelectionCriteria Offset: 0x50
					constexpr auto modifiers = 0x68; // Name: m_Modifiers Offset: 0x68
				} // namespace CSmartPropElement

				namespace CSmartPropVariable_CoordinateSpace {
					constexpr auto default_value = 0x28; // Name: m_DefaultValue Offset: 0x28
				} // namespace CSmartPropVariable_CoordinateSpace

				namespace CSmartPropFilter {
				} // namespace CSmartPropFilter

				namespace CSmartPropVariable_PickMode {
					constexpr auto default_value = 0x28; // Name: m_DefaultValue Offset: 0x28
				} // namespace CSmartPropVariable_PickMode

				namespace CSmartPropElement_PlaceOnPath {
					constexpr auto path_name = 0xA0; // Name: m_PathName Offset: 0xA0
					constexpr auto fl_spacing = 0xA8; // Name: m_flSpacing Offset: 0xA8
					constexpr auto fl_offset_along_path = 0xE8; // Name: m_flOffsetAlongPath Offset: 0xE8
					constexpr auto v_path_offset = 0x128; // Name: m_vPathOffset Offset: 0x128
					constexpr auto path_space = 0x168; // Name: m_PathSpace Offset: 0x168
					constexpr auto b_use_fixed_up_direction = 0x1A8; // Name: m_bUseFixedUpDirection Offset: 0x1A8
					constexpr auto b_use_projected_distance = 0x1E8; // Name: m_bUseProjectedDistance Offset: 0x1E8
					constexpr auto v_up_direction = 0x228; // Name: m_vUpDirection Offset: 0x228
					constexpr auto up_direction_space = 0x268; // Name: m_UpDirectionSpace Offset: 0x268
					constexpr auto default_path = 0x2A8; // Name: m_DefaultPath Offset: 0x2A8
				} // namespace CSmartPropElement_PlaceOnPath

				namespace CSmartPropAttributePathPositions {
				} // namespace CSmartPropAttributePathPositions

				namespace CSmartPropOperation_TraceInDirection {
					constexpr auto v_trace_direction = 0x310; // Name: m_vTraceDirection Offset: 0x310
					constexpr auto direction_space = 0x350; // Name: m_DirectionSpace Offset: 0x350
					constexpr auto fl_trace_length = 0x390; // Name: m_flTraceLength Offset: 0x390
				} // namespace CSmartPropOperation_TraceInDirection

				namespace CSmartPropFilter_SurfaceProperties {
					constexpr auto allowed_surface_properties = 0x50; // Name: m_AllowedSurfaceProperties Offset: 0x50
					constexpr auto disallowed_surface_properties = 0x68; // Name: m_DisallowedSurfaceProperties Offset: 0x68
				} // namespace CSmartPropFilter_SurfaceProperties

				namespace CSmartPropOperation_RandomOffset {
					constexpr auto v_random_position_min = 0x50; // Name: m_vRandomPositionMin Offset: 0x50
					constexpr auto v_random_position_max = 0x90; // Name: m_vRandomPositionMax Offset: 0x90
				} // namespace CSmartPropOperation_RandomOffset
			}

			namespace entity2
			{

				namespace CEntityInstance {
					constexpr auto isz_private_vscripts = 0x8; // Name: m_iszPrivateVScripts Offset: 0x8
					constexpr auto p_entity = 0x10; // Name: m_pEntity Offset: 0x10
					constexpr auto cscript_component = 0x28; // Name: m_CScriptComponent Offset: 0x28
					constexpr auto b_visiblein_pvs = 0x30; // Name: m_bVisibleinPVS Offset: 0x30
				} // namespace CEntityInstance

				namespace CVariantDefaultAllocator {
				} // namespace CVariantDefaultAllocator

				namespace CEntityComponent {
				} // namespace CEntityComponent

				namespace CEntityIdentity {
					constexpr auto name_stringable_index = 0x14; // Name: m_nameStringableIndex Offset: 0x14
					constexpr auto name = 0x18; // Name: m_name Offset: 0x18
					constexpr auto designer_name = 0x20; // Name: m_designerName Offset: 0x20
					constexpr auto flags = 0x30; // Name: m_flags Offset: 0x30
					constexpr auto world_group_id = 0x38; // Name: m_worldGroupId Offset: 0x38
					constexpr auto f_data_object_types = 0x3C; // Name: m_fDataObjectTypes Offset: 0x3C
					constexpr auto path_index = 0x40; // Name: m_PathIndex Offset: 0x40
					constexpr auto p_prev = 0x58; // Name: m_pPrev Offset: 0x58
					constexpr auto p_next = 0x60; // Name: m_pNext Offset: 0x60
					constexpr auto p_prev_by_class = 0x68; // Name: m_pPrevByClass Offset: 0x68
					constexpr auto p_next_by_class = 0x70; // Name: m_pNextByClass Offset: 0x70
				} // namespace CEntityIdentity

				namespace CEntityComponentHelper {
					constexpr auto flags = 0x8; // Name: m_flags Offset: 0x8
					constexpr auto p_info = 0x10; // Name: m_pInfo Offset: 0x10
					constexpr auto n_priority = 0x18; // Name: m_nPriority Offset: 0x18
					constexpr auto p_next = 0x20; // Name: m_pNext Offset: 0x20
				} // namespace CEntityComponentHelper

				namespace GameTime_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace GameTime_t

				namespace CEntityIOOutput {
					constexpr auto value = 0x18; // Name: m_Value Offset: 0x18
				} // namespace CEntityIOOutput

				namespace GameTick_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace GameTick_t

				namespace CEntityComponent {
				} // namespace CEntityComponent

				namespace CScriptComponent {
					constexpr auto script_class_name = 0x30; // Name: m_scriptClassName Offset: 0x30
				} // namespace CScriptComponent

				namespace EntInput_t {
				} // namespace EntInput_t

				namespace CNetworkVarChainer {
					constexpr auto path_index = 0x20; // Name: m_PathIndex Offset: 0x20
				} // namespace CNetworkVarChainer

				namespace EntOutput_t {
				} // namespace EntOutput_t

				namespace CEmptyEntityInstance {
				} // namespace CEmptyEntityInstance

				namespace EntComponentInfo_t {
					constexpr auto p_name = 0x0; // Name: m_pName Offset: 0x0
					constexpr auto p_cppclassname = 0x8; // Name: m_pCPPClassname Offset: 0x8
					constexpr auto p_network_data_referenced_description = 0x10; // Name: m_pNetworkDataReferencedDescription Offset: 0x10
					constexpr auto p_network_data_referenced_ptr_prop_description = 0x18; // Name: m_pNetworkDataReferencedPtrPropDescription Offset: 0x18
					constexpr auto n_runtime_index = 0x20; // Name: m_nRuntimeIndex Offset: 0x20
					constexpr auto n_flags = 0x24; // Name: m_nFlags Offset: 0x24
					constexpr auto p_base_class_component_helper = 0x60; // Name: m_pBaseClassComponentHelper Offset: 0x60
				} // namespace EntComponentInfo_t

				namespace CEntityComponent {
				} // namespace CEntityComponent

				namespace CEntityComponent {
				} // namespace CEntityComponent

				namespace CEntityComponent {
				} // namespace CEntityComponent
			}

			namespace pulse_runtime_lib
			{

				namespace CPulseCell_Step_PublicOutput {
					constexpr auto output_index = 0x48; // Name: m_OutputIndex Offset: 0x48
				} // namespace CPulseCell_Step_PublicOutput

				namespace CPulseCell_Val_TestDomainFindEntityByName {
				} // namespace CPulseCell_Val_TestDomainFindEntityByName

				namespace CPulseCell_Step_TestDomainDestroyFakeEntity {
				} // namespace CPulseCell_Step_TestDomainDestroyFakeEntity

				namespace CPulseCell_Value_TestValue50 {
				} // namespace CPulseCell_Value_TestValue50

				namespace PulseRuntimeEntrypointIndex_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace PulseRuntimeEntrypointIndex_t

				namespace CPulseCell_Test_MultiOutflow_WithParams {
					constexpr auto out1 = 0x48; // Name: m_Out1 Offset: 0x48
					constexpr auto out2 = 0x78; // Name: m_Out2 Offset: 0x78
				} // namespace CPulseCell_Test_MultiOutflow_WithParams

				namespace PulseRuntimeVarIndex_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace PulseRuntimeVarIndex_t

				namespace PulseRuntimeDomainValueIndex_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace PulseRuntimeDomainValueIndex_t

				namespace CPulseCell_BaseRequirement {
				} // namespace CPulseCell_BaseRequirement

				namespace CPulse_Chunk {
					constexpr auto instructions = 0x0; // Name: m_Instructions Offset: 0x0
					constexpr auto registers = 0x10; // Name: m_Registers Offset: 0x10
					constexpr auto instruction_editor_ids = 0x20; // Name: m_InstructionEditorIDs Offset: 0x20
				} // namespace CPulse_Chunk

				namespace CPulseGraphExecutionHistory {
					constexpr auto n_instance_id = 0x0; // Name: m_nInstanceID Offset: 0x0
					constexpr auto str_file_name = 0x8; // Name: m_strFileName Offset: 0x8
					constexpr auto vec_history = 0x10; // Name: m_vecHistory Offset: 0x10
					constexpr auto map_cell_desc = 0x28; // Name: m_mapCellDesc Offset: 0x28
					constexpr auto map_cursor_desc = 0x50; // Name: m_mapCursorDesc Offset: 0x50
				} // namespace CPulseGraphExecutionHistory

				namespace PulseRuntimeInvokeIndex_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace PulseRuntimeInvokeIndex_t

				namespace CPulseCell_BaseYieldingInflow {
				} // namespace CPulseCell_BaseYieldingInflow

				namespace CPulseCell_Outflow_CycleOrdered_InstanceState_t {
					constexpr auto n_next_index = 0x0; // Name: m_nNextIndex Offset: 0x0
				} // namespace CPulseCell_Outflow_CycleOrdered_InstanceState_t

				namespace CPulseCell_Timeline_TimelineEvent_t {
					constexpr auto fl_time_from_previous = 0x0; // Name: m_flTimeFromPrevious Offset: 0x0
					constexpr auto b_pause_for_previous_events = 0x4; // Name: m_bPauseForPreviousEvents Offset: 0x4
					constexpr auto b_call_mode_sync = 0x5; // Name: m_bCallModeSync Offset: 0x5
					constexpr auto event_outflow = 0x8; // Name: m_EventOutflow Offset: 0x8
				} // namespace CPulseCell_Timeline_TimelineEvent_t

				namespace CPulseTestScriptLib {
				} // namespace CPulseTestScriptLib

				namespace CPulseCell_Inflow_Method {
					constexpr auto method_name = 0x70; // Name: m_MethodName Offset: 0x70
					constexpr auto description = 0x78; // Name: m_Description Offset: 0x78
					constexpr auto b_is_public = 0x80; // Name: m_bIsPublic Offset: 0x80
					constexpr auto return_type = 0x88; // Name: m_ReturnType Offset: 0x88
					constexpr auto args = 0x98; // Name: m_Args Offset: 0x98
				} // namespace CPulseCell_Inflow_Method

				namespace PulseRuntimeRegisterIndex_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace PulseRuntimeRegisterIndex_t

				namespace CBasePulseGraphInstance {
				} // namespace CBasePulseGraphInstance

				namespace CPulseGraphInstance_TurtleGraphics {
				} // namespace CPulseGraphInstance_TurtleGraphics

				namespace CPulseCell_BaseLerp {
					constexpr auto wake_resume = 0x48; // Name: m_WakeResume Offset: 0x48
				} // namespace CPulseCell_BaseLerp

				namespace CPulse_OutflowConnection {
					constexpr auto source_outflow_name = 0x0; // Name: m_SourceOutflowName Offset: 0x0
					constexpr auto n_dest_chunk = 0x8; // Name: m_nDestChunk Offset: 0x8
					constexpr auto n_instruction = 0xC; // Name: m_nInstruction Offset: 0xC
					constexpr auto outflow_register_map = 0x10; // Name: m_OutflowRegisterMap Offset: 0x10
				} // namespace CPulse_OutflowConnection

				namespace CPulse_ResumePoint {
				} // namespace CPulse_ResumePoint

				namespace PulseCursorID_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace PulseCursorID_t

				namespace CPulseCell_Base {
					constexpr auto n_editor_node_id = 0x8; // Name: m_nEditorNodeID Offset: 0x8
				} // namespace CPulseCell_Base

				namespace CPulseCell_Test_MultiOutflow_WithParams_Yielding_CursorState_t {
					constexpr auto n_test_step = 0x0; // Name: nTestStep Offset: 0x0
				} // namespace CPulseCell_Test_MultiOutflow_WithParams_Yielding_CursorState_t

				namespace PulseGraphExecutionHistoryCursorDesc_t {
					constexpr auto vec_ancestor_cursor_ids = 0x0; // Name: vecAncestorCursorIDs Offset: 0x0
					constexpr auto n_spawn_node_id = 0x18; // Name: nSpawnNodeID Offset: 0x18
					constexpr auto n_retired_at_node_id = 0x1C; // Name: nRetiredAtNodeID Offset: 0x1C
					constexpr auto fl_last_referenced = 0x20; // Name: flLastReferenced Offset: 0x20
					constexpr auto n_last_valid_entry_idx = 0x24; // Name: nLastValidEntryIdx Offset: 0x24
				} // namespace PulseGraphExecutionHistoryCursorDesc_t

				namespace CPulseCell_Inflow_Yield {
					constexpr auto unyield_resume = 0x48; // Name: m_UnyieldResume Offset: 0x48
				} // namespace CPulseCell_Inflow_Yield

				namespace CPulseCell_Inflow_GraphHook {
					constexpr auto hook_name = 0x70; // Name: m_HookName Offset: 0x70
				} // namespace CPulseCell_Inflow_GraphHook

				namespace CPulseCell_Inflow_Wait {
					constexpr auto wake_resume = 0x48; // Name: m_WakeResume Offset: 0x48
				} // namespace CPulseCell_Inflow_Wait

				namespace CTestDomainDerived_Cursor {
					constexpr auto n_cursor_value_a = 0xA8; // Name: m_nCursorValueA Offset: 0xA8
					constexpr auto n_cursor_value_b = 0xAC; // Name: m_nCursorValueB Offset: 0xAC
				} // namespace CTestDomainDerived_Cursor

				namespace PulseRegisterMap_t {
					constexpr auto inparams = 0x0; // Name: m_Inparams Offset: 0x0
					constexpr auto outparams = 0x10; // Name: m_Outparams Offset: 0x10
				} // namespace PulseRegisterMap_t

				namespace PulseNodeDynamicOutflows_t {
					constexpr auto outflows = 0x0; // Name: m_Outflows Offset: 0x0
				} // namespace PulseNodeDynamicOutflows_t

				namespace CPulseCell_Test_MultiInflow_WithDefault {
				} // namespace CPulseCell_Test_MultiInflow_WithDefault

				namespace PulseNodeDynamicOutflows_t_DynamicOutflow_t {
					constexpr auto outflow_id = 0x0; // Name: m_OutflowID Offset: 0x0
					constexpr auto connection = 0x8; // Name: m_Connection Offset: 0x8
				} // namespace PulseNodeDynamicOutflows_t_DynamicOutflow_t

				namespace IGapHost_ExecLog {
				} // namespace IGapHost_ExecLog

				namespace IGapHost_Cursor {
				} // namespace IGapHost_Cursor

				namespace CPulseTestGapTypeQueryRegistration {
				} // namespace CPulseTestGapTypeQueryRegistration

				namespace FakeEntityDerivedB_tAPI {
				} // namespace FakeEntityDerivedB_tAPI

				namespace CPulseCell_Unknown {
					constexpr auto unknown_keys = 0x48; // Name: m_UnknownKeys Offset: 0x48
				} // namespace CPulseCell_Unknown

				namespace CPulseCell_Outflow_StringSwitch {
					constexpr auto default_case_outflow = 0x48; // Name: m_DefaultCaseOutflow Offset: 0x48
					constexpr auto case_outflows = 0x78; // Name: m_CaseOutflows Offset: 0x78
				} // namespace CPulseCell_Outflow_StringSwitch

				namespace CPulseCell_Test_NoInflow {
				} // namespace CPulseCell_Test_NoInflow

				namespace CPulse_DomainValue {
					constexpr auto n_type = 0x0; // Name: m_nType Offset: 0x0
					constexpr auto value = 0x8; // Name: m_Value Offset: 0x8
					constexpr auto expected_runtime_type = 0x10; // Name: m_ExpectedRuntimeType Offset: 0x10
				} // namespace CPulse_DomainValue

				namespace CPulseCell_FireCursors {
					constexpr auto outflows = 0x48; // Name: m_Outflows Offset: 0x48
					constexpr auto b_wait_for_child_outflows = 0x60; // Name: m_bWaitForChildOutflows Offset: 0x60
					constexpr auto on_finished = 0x68; // Name: m_OnFinished Offset: 0x68
					constexpr auto on_canceled = 0x98; // Name: m_OnCanceled Offset: 0x98
				} // namespace CPulseCell_FireCursors

				namespace FakeEntity_tAPI {
				} // namespace FakeEntity_tAPI

				namespace CPulseCell_Outflow_CycleShuffled_InstanceState_t {
					constexpr auto shuffle = 0x0; // Name: m_Shuffle Offset: 0x0
					constexpr auto n_next_shuffle = 0x20; // Name: m_nNextShuffle Offset: 0x20
				} // namespace CPulseCell_Outflow_CycleShuffled_InstanceState_t

				namespace CPulse_OutputConnection {
					constexpr auto source_output = 0x0; // Name: m_SourceOutput Offset: 0x0
					constexpr auto target_entity = 0x8; // Name: m_TargetEntity Offset: 0x8
					constexpr auto target_input = 0x10; // Name: m_TargetInput Offset: 0x10
					constexpr auto param = 0x18; // Name: m_Param Offset: 0x18
				} // namespace CPulse_OutputConnection

				namespace CPulseCell_BaseValue {
				} // namespace CPulseCell_BaseValue

				namespace CPulseCell_Outflow_CycleRandom {
					constexpr auto outputs = 0x48; // Name: m_Outputs Offset: 0x48
				} // namespace CPulseCell_Outflow_CycleRandom

				namespace CPulseCell_Inflow_EventHandler {
					constexpr auto event_name = 0x70; // Name: m_EventName Offset: 0x70
				} // namespace CPulseCell_Inflow_EventHandler

				namespace CPulseCell_BaseLerp_CursorState_t {
					constexpr auto start_time = 0x0; // Name: m_StartTime Offset: 0x0
					constexpr auto end_time = 0x4; // Name: m_EndTime Offset: 0x4
				} // namespace CPulseCell_BaseLerp_CursorState_t

				namespace CPulse_PublicOutput {
					constexpr auto name = 0x0; // Name: m_Name Offset: 0x0
					constexpr auto description = 0x8; // Name: m_Description Offset: 0x8
					constexpr auto param_type = 0x10; // Name: m_ParamType Offset: 0x10
				} // namespace CPulse_PublicOutput

				namespace CPulseCell_Timeline {
					constexpr auto timeline_events = 0x48; // Name: m_TimelineEvents Offset: 0x48
					constexpr auto b_wait_for_child_outflows = 0x60; // Name: m_bWaitForChildOutflows Offset: 0x60
					constexpr auto on_finished = 0x68; // Name: m_OnFinished Offset: 0x68
					constexpr auto on_canceled = 0x98; // Name: m_OnCanceled Offset: 0x98
				} // namespace CPulseCell_Timeline

				namespace CPulseCell_LimitCount {
					constexpr auto n_limit_count = 0x48; // Name: m_nLimitCount Offset: 0x48
				} // namespace CPulseCell_LimitCount

				namespace PulseGraphExecutionHistoryNodeDesc_t {
					constexpr auto str_cell_desc = 0x0; // Name: strCellDesc Offset: 0x0
					constexpr auto str_binding_name = 0x10; // Name: strBindingName Offset: 0x10
				} // namespace PulseGraphExecutionHistoryNodeDesc_t

				namespace SignatureOutflow_Resume {
				} // namespace SignatureOutflow_Resume

				namespace CPulseCell_Step_CallExternalMethod {
					constexpr auto method_name = 0x48; // Name: m_MethodName Offset: 0x48
					constexpr auto game_blackboard = 0x50; // Name: m_GameBlackboard Offset: 0x50
					constexpr auto expected_args = 0x58; // Name: m_ExpectedArgs Offset: 0x58
					constexpr auto n_async_call_mode = 0x68; // Name: m_nAsyncCallMode Offset: 0x68
					constexpr auto on_finished = 0x70; // Name: m_OnFinished Offset: 0x70
				} // namespace CPulseCell_Step_CallExternalMethod

				namespace CPulseCell_BaseFlow {
				} // namespace CPulseCell_BaseFlow

				namespace CPulseCell_Inflow_ObservableVariableListener {
					constexpr auto blackboard_reference = 0x70; // Name: m_BlackboardReference Offset: 0x70
					constexpr auto b_self_reference = 0x168; // Name: m_bSelfReference Offset: 0x168
				} // namespace CPulseCell_Inflow_ObservableVariableListener

				namespace PulseRuntimeCellIndex_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace PulseRuntimeCellIndex_t

				namespace PulseGraphExecutionHistoryEntry_t {
					constexpr auto n_cursor_id = 0x0; // Name: nCursorID Offset: 0x0
					constexpr auto n_editor_id = 0x4; // Name: nEditorID Offset: 0x4
					constexpr auto fl_exec_time = 0x8; // Name: flExecTime Offset: 0x8
					constexpr auto un_flags = 0xC; // Name: unFlags Offset: 0xC
					constexpr auto tag_name = 0x10; // Name: tagName Offset: 0x10
				} // namespace PulseGraphExecutionHistoryEntry_t

				namespace CPulse_Variable {
					constexpr auto name = 0x0; // Name: m_Name Offset: 0x0
					constexpr auto description = 0x8; // Name: m_Description Offset: 0x8
					constexpr auto type = 0x10; // Name: m_Type Offset: 0x10
					constexpr auto default_value = 0x20; // Name: m_DefaultValue Offset: 0x20
					constexpr auto b_is_public = 0x32; // Name: m_bIsPublic Offset: 0x32
					constexpr auto b_is_observable = 0x33; // Name: m_bIsObservable Offset: 0x33
					constexpr auto n_editor_node_id = 0x34; // Name: m_nEditorNodeID Offset: 0x34
				} // namespace CPulse_Variable

				namespace CPulse_BlackboardReference {
					constexpr auto h_blackboard_resource = 0x0; // Name: m_hBlackboardResource Offset: 0x0
					constexpr auto blackboard_resource = 0xE0; // Name: m_BlackboardResource Offset: 0xE0
					constexpr auto n_node_id = 0xE8; // Name: m_nNodeID Offset: 0xE8
					constexpr auto node_name = 0xF0; // Name: m_NodeName Offset: 0xF0
				} // namespace CPulse_BlackboardReference

				namespace PulseCursorYieldToken_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace PulseCursorYieldToken_t

				namespace CPulseCell_TestWaitWithCursorState {
					constexpr auto wake_resume = 0x48; // Name: m_WakeResume Offset: 0x48
					constexpr auto wake_cancel = 0x78; // Name: m_WakeCancel Offset: 0x78
					constexpr auto wake_fail = 0xA8; // Name: m_WakeFail Offset: 0xA8
				} // namespace CPulseCell_TestWaitWithCursorState

				namespace CPulse_InvokeBinding {
					constexpr auto register_map = 0x0; // Name: m_RegisterMap Offset: 0x0
					constexpr auto func_name = 0x20; // Name: m_FuncName Offset: 0x20
					constexpr auto n_cell_index = 0x28; // Name: m_nCellIndex Offset: 0x28
					constexpr auto n_src_chunk = 0x2C; // Name: m_nSrcChunk Offset: 0x2C
					constexpr auto n_src_instruction = 0x30; // Name: m_nSrcInstruction Offset: 0x30
				} // namespace CPulse_InvokeBinding

				namespace PGDInstruction_t {
					constexpr auto n_code = 0x0; // Name: m_nCode Offset: 0x0
					constexpr auto n_var = 0x4; // Name: m_nVar Offset: 0x4
					constexpr auto n_reg0 = 0x8; // Name: m_nReg0 Offset: 0x8
					constexpr auto n_reg1 = 0xA; // Name: m_nReg1 Offset: 0xA
					constexpr auto n_reg2 = 0xC; // Name: m_nReg2 Offset: 0xC
					constexpr auto n_invoke_binding_index = 0x10; // Name: m_nInvokeBindingIndex Offset: 0x10
					constexpr auto n_chunk = 0x14; // Name: m_nChunk Offset: 0x14
					constexpr auto n_dest_instruction = 0x18; // Name: m_nDestInstruction Offset: 0x18
					constexpr auto n_call_info_index = 0x1C; // Name: m_nCallInfoIndex Offset: 0x1C
					constexpr auto n_const_idx = 0x20; // Name: m_nConstIdx Offset: 0x20
					constexpr auto n_domain_value_idx = 0x22; // Name: m_nDomainValueIdx Offset: 0x22
					constexpr auto n_blackboard_reference_idx = 0x24; // Name: m_nBlackboardReferenceIdx Offset: 0x24
				} // namespace PGDInstruction_t

				namespace CPulseGraphInstance_TestDomain {
					constexpr auto b_is_running_unit_tests = 0xF8; // Name: m_bIsRunningUnitTests Offset: 0xF8
					constexpr auto b_explicit_time_stepping = 0xF9; // Name: m_bExplicitTimeStepping Offset: 0xF9
					constexpr auto b_expecting_to_destroy_with_yielded_cursors = 0xFA; // Name: m_bExpectingToDestroyWithYieldedCursors Offset: 0xFA
					constexpr auto n_next_validate_index = 0xFC; // Name: m_nNextValidateIndex Offset: 0xFC
					constexpr auto tracepoints = 0x100; // Name: m_Tracepoints Offset: 0x100
					constexpr auto b_test_yes_or_no_path = 0x118; // Name: m_bTestYesOrNoPath Offset: 0x118
				} // namespace CPulseGraphInstance_TestDomain

				namespace FakeEntityDerivedA_tAPI {
				} // namespace FakeEntityDerivedA_tAPI

				namespace CPulseCell_Outflow_CycleShuffled {
					constexpr auto outputs = 0x48; // Name: m_Outputs Offset: 0x48
				} // namespace CPulseCell_Outflow_CycleShuffled

				namespace PulseRuntimeOutputIndex_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace PulseRuntimeOutputIndex_t

				namespace CPulseCell_TestWaitWithCursorState_CursorState_t {
					constexpr auto fl_wait_value = 0x0; // Name: flWaitValue Offset: 0x0
					constexpr auto b_fail_on_cancel = 0x4; // Name: bFailOnCancel Offset: 0x4
				} // namespace CPulseCell_TestWaitWithCursorState_CursorState_t

				namespace CPulseCell_Step_TestDomainCreateFakeEntity {
				} // namespace CPulseCell_Step_TestDomainCreateFakeEntity

				namespace CPulseCell_Step_TestDomainEntFire {
					constexpr auto input = 0x48; // Name: m_Input Offset: 0x48
				} // namespace CPulseCell_Step_TestDomainEntFire

				namespace CPulseMathlib {
				} // namespace CPulseMathlib

				namespace PulseRuntimeBlackboardReferenceIndex_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace PulseRuntimeBlackboardReferenceIndex_t

				namespace IGapHost_YieldingCursor {
				} // namespace IGapHost_YieldingCursor

				namespace SignatureOutflow_Continue {
				} // namespace SignatureOutflow_Continue

				namespace CPulseCell_Test_MultiOutflow_WithParams_Yielding {
					constexpr auto out1 = 0x48; // Name: m_Out1 Offset: 0x48
					constexpr auto async_child1 = 0x78; // Name: m_AsyncChild1 Offset: 0x78
					constexpr auto async_child2 = 0xA8; // Name: m_AsyncChild2 Offset: 0xA8
					constexpr auto yield_resume1 = 0xD8; // Name: m_YieldResume1 Offset: 0xD8
					constexpr auto yield_resume2 = 0x108; // Name: m_YieldResume2 Offset: 0x108
				} // namespace CPulseCell_Test_MultiOutflow_WithParams_Yielding

				namespace CPulseGraphInstance_TestDomain_Derived {
					constexpr auto n_instance_value_x = 0x120; // Name: m_nInstanceValueX Offset: 0x120
				} // namespace CPulseGraphInstance_TestDomain_Derived

				namespace CPulseCell_Inflow_EntOutputHandler {
					constexpr auto source_entity = 0x70; // Name: m_SourceEntity Offset: 0x70
					constexpr auto source_output = 0x78; // Name: m_SourceOutput Offset: 0x78
					constexpr auto target_input = 0x80; // Name: m_TargetInput Offset: 0x80
					constexpr auto expected_param_type = 0x88; // Name: m_ExpectedParamType Offset: 0x88
				} // namespace CPulseCell_Inflow_EntOutputHandler

				namespace PulseRuntimeConstantIndex_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace PulseRuntimeConstantIndex_t

				namespace CPulseCell_Step_TestDomainTracepoint {
				} // namespace CPulseCell_Step_TestDomainTracepoint

				namespace PulseDocNodeID_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace PulseDocNodeID_t

				namespace CPulseCell_LimitCount_InstanceState_t {
					constexpr auto n_current_count = 0x0; // Name: m_nCurrentCount Offset: 0x0
				} // namespace CPulseCell_LimitCount_InstanceState_t

				namespace CPulseCell_Val_TestDomainGetEntityName {
				} // namespace CPulseCell_Val_TestDomainGetEntityName

				namespace CPulse_CallInfo {
					constexpr auto port_name = 0x0; // Name: m_PortName Offset: 0x0
					constexpr auto n_editor_node_id = 0x8; // Name: m_nEditorNodeID Offset: 0x8
					constexpr auto register_map = 0x10; // Name: m_RegisterMap Offset: 0x10
					constexpr auto call_method_id = 0x30; // Name: m_CallMethodID Offset: 0x30
					constexpr auto n_src_chunk = 0x34; // Name: m_nSrcChunk Offset: 0x34
					constexpr auto n_src_instruction = 0x38; // Name: m_nSrcInstruction Offset: 0x38
				} // namespace CPulse_CallInfo

				namespace CPulse_RegisterInfo {
					constexpr auto n_reg = 0x0; // Name: m_nReg Offset: 0x0
					constexpr auto type = 0x8; // Name: m_Type Offset: 0x8
					constexpr auto origin_name = 0x18; // Name: m_OriginName Offset: 0x18
					constexpr auto n_written_by_instruction = 0x50; // Name: m_nWrittenByInstruction Offset: 0x50
					constexpr auto n_last_read_by_instruction = 0x54; // Name: m_nLastReadByInstruction Offset: 0x54
				} // namespace CPulse_RegisterInfo

				namespace CPulseCell_Value_RandomFloat {
				} // namespace CPulseCell_Value_RandomFloat

				namespace CPulseExecCursor {
				} // namespace CPulseExecCursor

				namespace PulseGraphInstanceID_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace PulseGraphInstanceID_t

				namespace CPulseCell_Outflow_IntSwitch {
					constexpr auto default_case_outflow = 0x48; // Name: m_DefaultCaseOutflow Offset: 0x48
					constexpr auto case_outflows = 0x78; // Name: m_CaseOutflows Offset: 0x78
				} // namespace CPulseCell_Outflow_IntSwitch

				namespace CPulseGraphDef {
					constexpr auto domain_identifier = 0x8; // Name: m_DomainIdentifier Offset: 0x8
					constexpr auto parent_map_name = 0x10; // Name: m_ParentMapName Offset: 0x10
					constexpr auto parent_xml_name = 0x18; // Name: m_ParentXmlName Offset: 0x18
					constexpr auto vec_game_blackboards = 0x20; // Name: m_vecGameBlackboards Offset: 0x20
					constexpr auto chunks = 0x38; // Name: m_Chunks Offset: 0x38
					constexpr auto cells = 0x50; // Name: m_Cells Offset: 0x50
					constexpr auto vars = 0x68; // Name: m_Vars Offset: 0x68
					constexpr auto public_outputs = 0x80; // Name: m_PublicOutputs Offset: 0x80
					constexpr auto invoke_bindings = 0x98; // Name: m_InvokeBindings Offset: 0x98
					constexpr auto call_infos = 0xB0; // Name: m_CallInfos Offset: 0xB0
					constexpr auto constants = 0xC8; // Name: m_Constants Offset: 0xC8
					constexpr auto domain_values = 0xE0; // Name: m_DomainValues Offset: 0xE0
					constexpr auto blackboard_references = 0xF8; // Name: m_BlackboardReferences Offset: 0xF8
					constexpr auto output_connections = 0x110; // Name: m_OutputConnections Offset: 0x110
				} // namespace CPulseGraphDef

				namespace CPulseCell_Test_MultiInflow_NoDefault {
				} // namespace CPulseCell_Test_MultiInflow_NoDefault

				namespace CPulse_Constant {
					constexpr auto type = 0x0; // Name: m_Type Offset: 0x0
					constexpr auto value = 0x10; // Name: m_Value Offset: 0x10
				} // namespace CPulse_Constant

				namespace CPulseCell_Inflow_BaseEntrypoint {
					constexpr auto entry_chunk = 0x48; // Name: m_EntryChunk Offset: 0x48
					constexpr auto register_map = 0x50; // Name: m_RegisterMap Offset: 0x50
				} // namespace CPulseCell_Inflow_BaseEntrypoint

				namespace PulseRuntimeCallInfoIndex_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace PulseRuntimeCallInfoIndex_t

				namespace CPulseCell_Outflow_TestExplicitYesNo {
					constexpr auto yes = 0x48; // Name: m_Yes Offset: 0x48
					constexpr auto no = 0x78; // Name: m_No Offset: 0x78
				} // namespace CPulseCell_Outflow_TestExplicitYesNo

				namespace CPulseCell_Outflow_TestRandomYesNo {
					constexpr auto yes = 0x48; // Name: m_Yes Offset: 0x48
					constexpr auto no = 0x78; // Name: m_No Offset: 0x78
				} // namespace CPulseCell_Outflow_TestRandomYesNo

				namespace CPulseCell_Step_DebugLog {
				} // namespace CPulseCell_Step_DebugLog

				namespace PulseRuntimeChunkIndex_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace PulseRuntimeChunkIndex_t

				namespace CPulseCell_Outflow_CycleOrdered {
					constexpr auto outputs = 0x48; // Name: m_Outputs Offset: 0x48
				} // namespace CPulseCell_Outflow_CycleOrdered

				namespace CPulseRuntimeMethodArg {
					constexpr auto name = 0x0; // Name: m_Name Offset: 0x0
					constexpr auto description = 0x38; // Name: m_Description Offset: 0x38
					constexpr auto type = 0x40; // Name: m_Type Offset: 0x40
				} // namespace CPulseRuntimeMethodArg

				namespace PulseRuntimeStateOffset_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace PulseRuntimeStateOffset_t

				namespace CPulseCell_Value_RandomInt {
				} // namespace CPulseCell_Value_RandomInt

				namespace CPulseTurtleGraphicsCursor {
					constexpr auto color = 0xA8; // Name: m_Color Offset: 0xA8
					constexpr auto v_pos = 0xAC; // Name: m_vPos Offset: 0xAC
					constexpr auto fl_heading_deg = 0xB4; // Name: m_flHeadingDeg Offset: 0xB4
					constexpr auto b_pen_up = 0xB8; // Name: m_bPenUp Offset: 0xB8
				} // namespace CPulseTurtleGraphicsCursor
			}

			namespace mathlib_extended
			{

				namespace PackedAABB_t {
					constexpr auto n_packed_min = 0x0; // Name: m_nPackedMin Offset: 0x0
					constexpr auto n_packed_max = 0x4; // Name: m_nPackedMax Offset: 0x4
				} // namespace PackedAABB_t

				namespace ConstantInfo_t {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
					constexpr auto name_token = 0x8; // Name: m_nameToken Offset: 0x8
					constexpr auto fl_value = 0xC; // Name: m_flValue Offset: 0xC
				} // namespace ConstantInfo_t

				namespace FuseFunctionIndex_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace FuseFunctionIndex_t

				namespace CFuseSymbolTable {
					constexpr auto constants = 0x0; // Name: m_constants Offset: 0x0
					constexpr auto variables = 0x18; // Name: m_variables Offset: 0x18
					constexpr auto functions = 0x30; // Name: m_functions Offset: 0x30
					constexpr auto constant_map = 0x48; // Name: m_constantMap Offset: 0x48
					constexpr auto variable_map = 0x68; // Name: m_variableMap Offset: 0x68
					constexpr auto function_map = 0x88; // Name: m_functionMap Offset: 0x88
				} // namespace CFuseSymbolTable

				namespace VariableInfo_t {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
					constexpr auto name_token = 0x8; // Name: m_nameToken Offset: 0x8
					constexpr auto n_index = 0xC; // Name: m_nIndex Offset: 0xC
					constexpr auto n_num_components = 0xE; // Name: m_nNumComponents Offset: 0xE
					constexpr auto e_var_type = 0xF; // Name: m_eVarType Offset: 0xF
					constexpr auto e_access = 0x10; // Name: m_eAccess Offset: 0x10
				} // namespace VariableInfo_t

				namespace AABB_t {
					constexpr auto v_min_bounds = 0x0; // Name: m_vMinBounds Offset: 0x0
					constexpr auto v_max_bounds = 0xC; // Name: m_vMaxBounds Offset: 0xC
				} // namespace AABB_t

				namespace FourQuaternions {
					constexpr auto x = 0x0; // Name: x Offset: 0x0
					constexpr auto y = 0x10; // Name: y Offset: 0x10
					constexpr auto z = 0x20; // Name: z Offset: 0x20
					constexpr auto w = 0x30; // Name: w Offset: 0x30
				} // namespace FourQuaternions

				namespace CFuseProgram {
					constexpr auto program_buffer = 0x0; // Name: m_programBuffer Offset: 0x0
					constexpr auto variables_read = 0x18; // Name: m_variablesRead Offset: 0x18
					constexpr auto variables_written = 0x30; // Name: m_variablesWritten Offset: 0x30
					constexpr auto n_max_temp_vars_used = 0x48; // Name: m_nMaxTempVarsUsed Offset: 0x48
				} // namespace CFuseProgram

				namespace FunctionInfo_t {
					constexpr auto name = 0x8; // Name: m_name Offset: 0x8
					constexpr auto name_token = 0x10; // Name: m_nameToken Offset: 0x10
					constexpr auto n_param_count = 0x14; // Name: m_nParamCount Offset: 0x14
					constexpr auto n_index = 0x18; // Name: m_nIndex Offset: 0x18
					constexpr auto b_is_pure = 0x1A; // Name: m_bIsPure Offset: 0x1A
				} // namespace FunctionInfo_t

				namespace FuseVariableIndex_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace FuseVariableIndex_t
			}

			namespace physicslib
			{

				namespace FeFitMatrix_t {
					constexpr auto bone = 0x0; // Name: bone Offset: 0x0
					constexpr auto v_center = 0x20; // Name: vCenter Offset: 0x20
					constexpr auto n_end = 0x2C; // Name: nEnd Offset: 0x2C
					constexpr auto n_node = 0x2E; // Name: nNode Offset: 0x2E
					constexpr auto n_begin_dynamic = 0x30; // Name: nBeginDynamic Offset: 0x30
				} // namespace FeFitMatrix_t

				namespace RnSoftbodySpring_t {
					constexpr auto n_particle = 0x0; // Name: m_nParticle Offset: 0x0
					constexpr auto fl_length = 0x4; // Name: m_flLength Offset: 0x4
				} // namespace RnSoftbodySpring_t

				namespace FeSpringIntegrator_t {
					constexpr auto n_node = 0x0; // Name: nNode Offset: 0x0
					constexpr auto fl_spring_rest_length = 0x4; // Name: flSpringRestLength Offset: 0x4
					constexpr auto fl_spring_constant = 0x8; // Name: flSpringConstant Offset: 0x8
					constexpr auto fl_spring_damping = 0xC; // Name: flSpringDamping Offset: 0xC
					constexpr auto fl_node_weight0 = 0x10; // Name: flNodeWeight0 Offset: 0x10
				} // namespace FeSpringIntegrator_t

				namespace PhysFeModelDesc_t {
					constexpr auto ctrl_hash = 0x0; // Name: m_CtrlHash Offset: 0x0
					constexpr auto ctrl_name = 0x18; // Name: m_CtrlName Offset: 0x18
					constexpr auto n_static_node_flags = 0x30; // Name: m_nStaticNodeFlags Offset: 0x30
					constexpr auto n_dynamic_node_flags = 0x34; // Name: m_nDynamicNodeFlags Offset: 0x34
					constexpr auto fl_local_force = 0x38; // Name: m_flLocalForce Offset: 0x38
					constexpr auto fl_local_rotation = 0x3C; // Name: m_flLocalRotation Offset: 0x3C
					constexpr auto n_node_count = 0x40; // Name: m_nNodeCount Offset: 0x40
					constexpr auto n_static_nodes = 0x42; // Name: m_nStaticNodes Offset: 0x42
					constexpr auto n_rot_lock_static_nodes = 0x44; // Name: m_nRotLockStaticNodes Offset: 0x44
					constexpr auto n_first_position_driven_node = 0x46; // Name: m_nFirstPositionDrivenNode Offset: 0x46
					constexpr auto n_simd_tri_count1 = 0x48; // Name: m_nSimdTriCount1 Offset: 0x48
					constexpr auto n_simd_tri_count2 = 0x4A; // Name: m_nSimdTriCount2 Offset: 0x4A
					constexpr auto n_simd_quad_count1 = 0x4C; // Name: m_nSimdQuadCount1 Offset: 0x4C
					constexpr auto n_simd_quad_count2 = 0x4E; // Name: m_nSimdQuadCount2 Offset: 0x4E
					constexpr auto n_quad_count1 = 0x50; // Name: m_nQuadCount1 Offset: 0x50
					constexpr auto n_quad_count2 = 0x52; // Name: m_nQuadCount2 Offset: 0x52
					constexpr auto n_tree_depth = 0x54; // Name: m_nTreeDepth Offset: 0x54
					constexpr auto n_node_base_jigglebone_depends_count = 0x56; // Name: m_nNodeBaseJiggleboneDependsCount Offset: 0x56
					constexpr auto n_rope_count = 0x58; // Name: m_nRopeCount Offset: 0x58
					constexpr auto ropes = 0x60; // Name: m_Ropes Offset: 0x60
					constexpr auto node_bases = 0x78; // Name: m_NodeBases Offset: 0x78
					constexpr auto simd_node_bases = 0x90; // Name: m_SimdNodeBases Offset: 0x90
					constexpr auto quads = 0xA8; // Name: m_Quads Offset: 0xA8
					constexpr auto simd_quads = 0xC0; // Name: m_SimdQuads Offset: 0xC0
					constexpr auto simd_tris = 0xD8; // Name: m_SimdTris Offset: 0xD8
					constexpr auto simd_rods = 0xF0; // Name: m_SimdRods Offset: 0xF0
					constexpr auto simd_rods_anim = 0x108; // Name: m_SimdRodsAnim Offset: 0x108
					constexpr auto init_pose = 0x120; // Name: m_InitPose Offset: 0x120
					constexpr auto rods = 0x138; // Name: m_Rods Offset: 0x138
					constexpr auto twists = 0x150; // Name: m_Twists Offset: 0x150
					constexpr auto hinge_limits = 0x168; // Name: m_HingeLimits Offset: 0x168
					constexpr auto anti_tunnel_probes = 0x180; // Name: m_AntiTunnelProbes Offset: 0x180
					constexpr auto anti_tunnel_target_nodes = 0x198; // Name: m_AntiTunnelTargetNodes Offset: 0x198
					constexpr auto axial_edges = 0x1B0; // Name: m_AxialEdges Offset: 0x1B0
					constexpr auto node_inv_masses = 0x1C8; // Name: m_NodeInvMasses Offset: 0x1C8
					constexpr auto ctrl_offsets = 0x1E0; // Name: m_CtrlOffsets Offset: 0x1E0
					constexpr auto ctrl_os_offsets = 0x1F8; // Name: m_CtrlOsOffsets Offset: 0x1F8
					constexpr auto follow_nodes = 0x210; // Name: m_FollowNodes Offset: 0x210
					constexpr auto collision_planes = 0x228; // Name: m_CollisionPlanes Offset: 0x228
					constexpr auto node_integrator = 0x240; // Name: m_NodeIntegrator Offset: 0x240
					constexpr auto spring_integrator = 0x258; // Name: m_SpringIntegrator Offset: 0x258
					constexpr auto simd_spring_integrator = 0x270; // Name: m_SimdSpringIntegrator Offset: 0x270
					constexpr auto world_collision_params = 0x288; // Name: m_WorldCollisionParams Offset: 0x288
					constexpr auto legacy_stretch_force = 0x2A0; // Name: m_LegacyStretchForce Offset: 0x2A0
					constexpr auto node_collision_radii = 0x2B8; // Name: m_NodeCollisionRadii Offset: 0x2B8
					constexpr auto dyn_node_friction = 0x2D0; // Name: m_DynNodeFriction Offset: 0x2D0
					constexpr auto local_rotation = 0x2E8; // Name: m_LocalRotation Offset: 0x2E8
					constexpr auto local_force = 0x300; // Name: m_LocalForce Offset: 0x300
					constexpr auto tapered_capsule_stretches = 0x318; // Name: m_TaperedCapsuleStretches Offset: 0x318
					constexpr auto tapered_capsule_rigids = 0x330; // Name: m_TaperedCapsuleRigids Offset: 0x330
					constexpr auto sphere_rigids = 0x348; // Name: m_SphereRigids Offset: 0x348
					constexpr auto world_collision_nodes = 0x360; // Name: m_WorldCollisionNodes Offset: 0x360
					constexpr auto tree_parents = 0x378; // Name: m_TreeParents Offset: 0x378
					constexpr auto tree_collision_masks = 0x390; // Name: m_TreeCollisionMasks Offset: 0x390
					constexpr auto tree_children = 0x3A8; // Name: m_TreeChildren Offset: 0x3A8
					constexpr auto free_nodes = 0x3C0; // Name: m_FreeNodes Offset: 0x3C0
					constexpr auto fit_matrices = 0x3D8; // Name: m_FitMatrices Offset: 0x3D8
					constexpr auto fit_weights = 0x3F0; // Name: m_FitWeights Offset: 0x3F0
					constexpr auto reverse_offsets = 0x408; // Name: m_ReverseOffsets Offset: 0x408
					constexpr auto anim_stray_radii = 0x420; // Name: m_AnimStrayRadii Offset: 0x420
					constexpr auto simd_anim_stray_radii = 0x438; // Name: m_SimdAnimStrayRadii Offset: 0x438
					constexpr auto kelager_bends = 0x450; // Name: m_KelagerBends Offset: 0x450
					constexpr auto ctrl_soft_offsets = 0x468; // Name: m_CtrlSoftOffsets Offset: 0x468
					constexpr auto jiggle_bones = 0x480; // Name: m_JiggleBones Offset: 0x480
					constexpr auto source_elems = 0x498; // Name: m_SourceElems Offset: 0x498
					constexpr auto goal_damped_spring_integrators = 0x4B0; // Name: m_GoalDampedSpringIntegrators Offset: 0x4B0
					constexpr auto tris = 0x4C8; // Name: m_Tris Offset: 0x4C8
					constexpr auto n_tri_count1 = 0x4E0; // Name: m_nTriCount1 Offset: 0x4E0
					constexpr auto n_tri_count2 = 0x4E2; // Name: m_nTriCount2 Offset: 0x4E2
					constexpr auto n_reserved_uint8 = 0x4E4; // Name: m_nReservedUint8 Offset: 0x4E4
					constexpr auto n_extra_pressure_iterations = 0x4E5; // Name: m_nExtraPressureIterations Offset: 0x4E5
					constexpr auto n_extra_goal_iterations = 0x4E6; // Name: m_nExtraGoalIterations Offset: 0x4E6
					constexpr auto n_extra_iterations = 0x4E7; // Name: m_nExtraIterations Offset: 0x4E7
					constexpr auto sdfrigids = 0x4E8; // Name: m_SDFRigids Offset: 0x4E8
					constexpr auto box_rigids = 0x500; // Name: m_BoxRigids Offset: 0x500
					constexpr auto dyn_node_vertex_set = 0x518; // Name: m_DynNodeVertexSet Offset: 0x518
					constexpr auto vertex_set_names = 0x530; // Name: m_VertexSetNames Offset: 0x530
					constexpr auto rigid_collider_priorities = 0x548; // Name: m_RigidColliderPriorities Offset: 0x548
					constexpr auto morph_layers = 0x560; // Name: m_MorphLayers Offset: 0x560
					constexpr auto morph_set_data = 0x578; // Name: m_MorphSetData Offset: 0x578
					constexpr auto vertex_maps = 0x590; // Name: m_VertexMaps Offset: 0x590
					constexpr auto vertex_map_values = 0x5A8; // Name: m_VertexMapValues Offset: 0x5A8
					constexpr auto effects = 0x5C0; // Name: m_Effects Offset: 0x5C0
					constexpr auto lock_to_parent = 0x5D8; // Name: m_LockToParent Offset: 0x5D8
					constexpr auto lock_to_goal = 0x5F0; // Name: m_LockToGoal Offset: 0x5F0
					constexpr auto skel_parents = 0x608; // Name: m_SkelParents Offset: 0x608
					constexpr auto dyn_node_wind_bases = 0x620; // Name: m_DynNodeWindBases Offset: 0x620
					constexpr auto fl_internal_pressure = 0x638; // Name: m_flInternalPressure Offset: 0x638
					constexpr auto fl_default_time_dilation = 0x63C; // Name: m_flDefaultTimeDilation Offset: 0x63C
					constexpr auto fl_windage = 0x640; // Name: m_flWindage Offset: 0x640
					constexpr auto fl_wind_drag = 0x644; // Name: m_flWindDrag Offset: 0x644
					constexpr auto fl_default_surface_stretch = 0x648; // Name: m_flDefaultSurfaceStretch Offset: 0x648
					constexpr auto fl_default_thread_stretch = 0x64C; // Name: m_flDefaultThreadStretch Offset: 0x64C
					constexpr auto fl_default_gravity_scale = 0x650; // Name: m_flDefaultGravityScale Offset: 0x650
					constexpr auto fl_default_vel_air_drag = 0x654; // Name: m_flDefaultVelAirDrag Offset: 0x654
					constexpr auto fl_default_exp_air_drag = 0x658; // Name: m_flDefaultExpAirDrag Offset: 0x658
					constexpr auto fl_default_vel_quad_air_drag = 0x65C; // Name: m_flDefaultVelQuadAirDrag Offset: 0x65C
					constexpr auto fl_default_exp_quad_air_drag = 0x660; // Name: m_flDefaultExpQuadAirDrag Offset: 0x660
					constexpr auto fl_rod_velocity_smooth_rate = 0x664; // Name: m_flRodVelocitySmoothRate Offset: 0x664
					constexpr auto fl_quad_velocity_smooth_rate = 0x668; // Name: m_flQuadVelocitySmoothRate Offset: 0x668
					constexpr auto fl_add_world_collision_radius = 0x66C; // Name: m_flAddWorldCollisionRadius Offset: 0x66C
					constexpr auto fl_default_volumetric_solve_amount = 0x670; // Name: m_flDefaultVolumetricSolveAmount Offset: 0x670
					constexpr auto fl_motion_smooth_cdt = 0x674; // Name: m_flMotionSmoothCDT Offset: 0x674
					constexpr auto fl_local_drag1 = 0x678; // Name: m_flLocalDrag1 Offset: 0x678
					constexpr auto n_rod_velocity_smooth_iterations = 0x67C; // Name: m_nRodVelocitySmoothIterations Offset: 0x67C
					constexpr auto n_quad_velocity_smooth_iterations = 0x67E; // Name: m_nQuadVelocitySmoothIterations Offset: 0x67E
				} // namespace PhysFeModelDesc_t

				namespace RnSoftbodyParticle_t {
					constexpr auto fl_mass_inv = 0x0; // Name: m_flMassInv Offset: 0x0
				} // namespace RnSoftbodyParticle_t

				namespace FeSourceEdge_t {
					constexpr auto n_node = 0x0; // Name: nNode Offset: 0x0
				} // namespace FeSourceEdge_t

				namespace RnHullDesc_t {
					constexpr auto hull = 0x18; // Name: m_Hull Offset: 0x18
				} // namespace RnHullDesc_t

				namespace FeFollowNode_t {
					constexpr auto n_parent_node = 0x0; // Name: nParentNode Offset: 0x0
					constexpr auto n_child_node = 0x2; // Name: nChildNode Offset: 0x2
					constexpr auto fl_weight = 0x4; // Name: flWeight Offset: 0x4
				} // namespace FeFollowNode_t

				namespace RnMeshDesc_t {
					constexpr auto mesh = 0x18; // Name: m_Mesh Offset: 0x18
				} // namespace RnMeshDesc_t

				namespace RnSoftbodyCapsule_t {
					constexpr auto v_center = 0x0; // Name: m_vCenter Offset: 0x0
					constexpr auto fl_radius = 0x18; // Name: m_flRadius Offset: 0x18
					constexpr auto n_particle = 0x1C; // Name: m_nParticle Offset: 0x1C
				} // namespace RnSoftbodyCapsule_t

				namespace RnCapsuleDesc_t {
					constexpr auto capsule = 0x18; // Name: m_Capsule Offset: 0x18
				} // namespace RnCapsuleDesc_t

				namespace CFeMorphLayer {
					constexpr auto name = 0x0; // Name: m_Name Offset: 0x0
					constexpr auto n_name_hash = 0x8; // Name: m_nNameHash Offset: 0x8
					constexpr auto nodes = 0x10; // Name: m_Nodes Offset: 0x10
					constexpr auto init_pos = 0x28; // Name: m_InitPos Offset: 0x28
					constexpr auto gravity = 0x40; // Name: m_Gravity Offset: 0x40
					constexpr auto goal_strength = 0x58; // Name: m_GoalStrength Offset: 0x58
					constexpr auto goal_damping = 0x70; // Name: m_GoalDamping Offset: 0x70
				} // namespace CFeMorphLayer

				namespace RnSphereDesc_t {
					constexpr auto sphere = 0x18; // Name: m_Sphere Offset: 0x18
				} // namespace RnSphereDesc_t

				namespace FeCtrlSoftOffset_t {
					constexpr auto n_ctrl_parent = 0x0; // Name: nCtrlParent Offset: 0x0
					constexpr auto n_ctrl_child = 0x2; // Name: nCtrlChild Offset: 0x2
					constexpr auto v_offset = 0x4; // Name: vOffset Offset: 0x4
					constexpr auto fl_alpha = 0x10; // Name: flAlpha Offset: 0x10
				} // namespace FeCtrlSoftOffset_t

				namespace FeBuildBoxRigid_t {
					constexpr auto n_priority = 0x40; // Name: m_nPriority Offset: 0x40
					constexpr auto n_vertex_map_hash = 0x44; // Name: m_nVertexMapHash Offset: 0x44
				} // namespace FeBuildBoxRigid_t

				namespace FeProxyVertexMap_t {
					constexpr auto name = 0x0; // Name: m_Name Offset: 0x0
					constexpr auto fl_weight = 0x8; // Name: m_flWeight Offset: 0x8
				} // namespace FeProxyVertexMap_t

				namespace FeSimdNodeBase_t {
					constexpr auto n_node = 0x0; // Name: nNode Offset: 0x0
					constexpr auto n_node_x0 = 0x8; // Name: nNodeX0 Offset: 0x8
					constexpr auto n_node_x1 = 0x10; // Name: nNodeX1 Offset: 0x10
					constexpr auto n_node_y0 = 0x18; // Name: nNodeY0 Offset: 0x18
					constexpr auto n_node_y1 = 0x20; // Name: nNodeY1 Offset: 0x20
					constexpr auto n_dummy = 0x28; // Name: nDummy Offset: 0x28
					constexpr auto q_adjust = 0x30; // Name: qAdjust Offset: 0x30
				} // namespace FeSimdNodeBase_t

				namespace CFeIndexedJiggleBone {
					constexpr auto n_node = 0x0; // Name: m_nNode Offset: 0x0
					constexpr auto n_jiggle_parent = 0x4; // Name: m_nJiggleParent Offset: 0x4
					constexpr auto jiggle_bone = 0x8; // Name: m_jiggleBone Offset: 0x8
				} // namespace CFeIndexedJiggleBone

				namespace FeBandBendLimit_t {
					constexpr auto fl_dist_min = 0x0; // Name: flDistMin Offset: 0x0
					constexpr auto fl_dist_max = 0x4; // Name: flDistMax Offset: 0x4
					constexpr auto n_node = 0x8; // Name: nNode Offset: 0x8
				} // namespace FeBandBendLimit_t

				namespace RnCapsule_t {
					constexpr auto v_center = 0x0; // Name: m_vCenter Offset: 0x0
					constexpr auto fl_radius = 0x18; // Name: m_flRadius Offset: 0x18
				} // namespace RnCapsule_t

				namespace FeTaperedCapsuleStretch_t {
					constexpr auto n_node = 0x0; // Name: nNode Offset: 0x0
					constexpr auto n_collision_mask = 0x4; // Name: nCollisionMask Offset: 0x4
					constexpr auto n_dummy = 0x6; // Name: nDummy Offset: 0x6
					constexpr auto fl_radius = 0x8; // Name: flRadius Offset: 0x8
				} // namespace FeTaperedCapsuleStretch_t

				namespace FeSimdRodConstraintAnim_t {
					constexpr auto n_node = 0x0; // Name: nNode Offset: 0x0
					constexpr auto f4_weight0 = 0x10; // Name: f4Weight0 Offset: 0x10
					constexpr auto f4_relaxation_factor = 0x20; // Name: f4RelaxationFactor Offset: 0x20
				} // namespace FeSimdRodConstraintAnim_t

				namespace FeSimdRodConstraint_t {
					constexpr auto n_node = 0x0; // Name: nNode Offset: 0x0
					constexpr auto f4_max_dist = 0x10; // Name: f4MaxDist Offset: 0x10
					constexpr auto f4_min_dist = 0x20; // Name: f4MinDist Offset: 0x20
					constexpr auto f4_weight0 = 0x30; // Name: f4Weight0 Offset: 0x30
					constexpr auto f4_relaxation_factor = 0x40; // Name: f4RelaxationFactor Offset: 0x40
				} // namespace FeSimdRodConstraint_t

				namespace RnBlendVertex_t {
					constexpr auto n_weight0 = 0x0; // Name: m_nWeight0 Offset: 0x0
					constexpr auto n_index0 = 0x2; // Name: m_nIndex0 Offset: 0x2
					constexpr auto n_weight1 = 0x4; // Name: m_nWeight1 Offset: 0x4
					constexpr auto n_index1 = 0x6; // Name: m_nIndex1 Offset: 0x6
					constexpr auto n_weight2 = 0x8; // Name: m_nWeight2 Offset: 0x8
					constexpr auto n_index2 = 0xA; // Name: m_nIndex2 Offset: 0xA
					constexpr auto n_flags = 0xC; // Name: m_nFlags Offset: 0xC
					constexpr auto n_target_index = 0xE; // Name: m_nTargetIndex Offset: 0xE
				} // namespace RnBlendVertex_t

				namespace RnPlane_t {
					constexpr auto v_normal = 0x0; // Name: m_vNormal Offset: 0x0
					constexpr auto fl_offset = 0xC; // Name: m_flOffset Offset: 0xC
				} // namespace RnPlane_t

				namespace FeRigidColliderIndices_t {
					constexpr auto n_tapered_capsule_rigid_index = 0x0; // Name: m_nTaperedCapsuleRigidIndex Offset: 0x0
					constexpr auto n_sphere_rigid_index = 0x2; // Name: m_nSphereRigidIndex Offset: 0x2
					constexpr auto n_box_rigid_index = 0x4; // Name: m_nBoxRigidIndex Offset: 0x4
					constexpr auto n_sdfrigid_index = 0x6; // Name: m_nSDFRigidIndex Offset: 0x6
					constexpr auto n_collision_plane_index = 0x8; // Name: m_nCollisionPlaneIndex Offset: 0x8
				} // namespace FeRigidColliderIndices_t

				namespace FeBuildSphereRigid_t {
					constexpr auto n_priority = 0x20; // Name: m_nPriority Offset: 0x20
					constexpr auto n_vertex_map_hash = 0x24; // Name: m_nVertexMapHash Offset: 0x24
				} // namespace FeBuildSphereRigid_t

				namespace FeSimdAnimStrayRadius_t {
					constexpr auto n_node = 0x0; // Name: nNode Offset: 0x0
					constexpr auto fl_max_dist = 0x10; // Name: flMaxDist Offset: 0x10
					constexpr auto fl_relaxation_factor = 0x20; // Name: flRelaxationFactor Offset: 0x20
				} // namespace FeSimdAnimStrayRadius_t

				namespace RnTriangle_t {
					constexpr auto n_index = 0x0; // Name: m_nIndex Offset: 0x0
				} // namespace RnTriangle_t

				namespace FeSDFRigid_t {
					constexpr auto v_local_min = 0x0; // Name: vLocalMin Offset: 0x0
					constexpr auto v_local_max = 0xC; // Name: vLocalMax Offset: 0xC
					constexpr auto fl_bounciness = 0x18; // Name: flBounciness Offset: 0x18
					constexpr auto n_node = 0x1C; // Name: nNode Offset: 0x1C
					constexpr auto n_collision_mask = 0x1E; // Name: nCollisionMask Offset: 0x1E
					constexpr auto n_vertex_map_index = 0x20; // Name: nVertexMapIndex Offset: 0x20
					constexpr auto n_flags = 0x22; // Name: nFlags Offset: 0x22
					constexpr auto distances = 0x28; // Name: m_Distances Offset: 0x28
					constexpr auto n_width = 0x40; // Name: m_nWidth Offset: 0x40
					constexpr auto n_height = 0x44; // Name: m_nHeight Offset: 0x44
					constexpr auto n_depth = 0x48; // Name: m_nDepth Offset: 0x48
				} // namespace FeSDFRigid_t

				namespace FeNodeIntegrator_t {
					constexpr auto fl_point_damping = 0x0; // Name: flPointDamping Offset: 0x0
					constexpr auto fl_animation_force_attraction = 0x4; // Name: flAnimationForceAttraction Offset: 0x4
					constexpr auto fl_animation_vertex_attraction = 0x8; // Name: flAnimationVertexAttraction Offset: 0x8
					constexpr auto fl_gravity = 0xC; // Name: flGravity Offset: 0xC
				} // namespace FeNodeIntegrator_t

				namespace CFeNamedJiggleBone {
					constexpr auto str_parent_bone = 0x0; // Name: m_strParentBone Offset: 0x0
					constexpr auto transform = 0x10; // Name: m_transform Offset: 0x10
					constexpr auto n_jiggle_parent = 0x30; // Name: m_nJiggleParent Offset: 0x30
					constexpr auto jiggle_bone = 0x34; // Name: m_jiggleBone Offset: 0x34
				} // namespace CFeNamedJiggleBone

				namespace OldFeEdge_t {
					constexpr auto fl_k = 0x0; // Name: m_flK Offset: 0x0
					constexpr auto inv_a = 0xC; // Name: invA Offset: 0xC
					constexpr auto t = 0x10; // Name: t Offset: 0x10
					constexpr auto fl_theta_relaxed = 0x14; // Name: flThetaRelaxed Offset: 0x14
					constexpr auto fl_theta_factor = 0x18; // Name: flThetaFactor Offset: 0x18
					constexpr auto c01 = 0x1C; // Name: c01 Offset: 0x1C
					constexpr auto c02 = 0x20; // Name: c02 Offset: 0x20
					constexpr auto c03 = 0x24; // Name: c03 Offset: 0x24
					constexpr auto c04 = 0x28; // Name: c04 Offset: 0x28
					constexpr auto fl_axial_model_dist = 0x2C; // Name: flAxialModelDist Offset: 0x2C
					constexpr auto fl_axial_model_weights = 0x30; // Name: flAxialModelWeights Offset: 0x30
					constexpr auto n_node = 0x40; // Name: m_nNode Offset: 0x40
				} // namespace OldFeEdge_t

				namespace FeAntiTunnelProbeBuild_t {
					constexpr auto fl_weight = 0x0; // Name: flWeight Offset: 0x0
					constexpr auto fl_activation_distance = 0x4; // Name: flActivationDistance Offset: 0x4
					constexpr auto fl_bias = 0x8; // Name: flBias Offset: 0x8
					constexpr auto fl_curvature = 0xC; // Name: flCurvature Offset: 0xC
					constexpr auto n_flags = 0x10; // Name: nFlags Offset: 0x10
					constexpr auto n_probe_node = 0x14; // Name: nProbeNode Offset: 0x14
					constexpr auto target_nodes = 0x18; // Name: targetNodes Offset: 0x18
				} // namespace FeAntiTunnelProbeBuild_t

				namespace RnBodyDesc_t {
					constexpr auto s_debug_name = 0x0; // Name: m_sDebugName Offset: 0x0
					constexpr auto v_position = 0x8; // Name: m_vPosition Offset: 0x8
					constexpr auto q_orientation = 0x14; // Name: m_qOrientation Offset: 0x14
					constexpr auto v_linear_velocity = 0x24; // Name: m_vLinearVelocity Offset: 0x24
					constexpr auto v_angular_velocity = 0x30; // Name: m_vAngularVelocity Offset: 0x30
					constexpr auto v_local_mass_center = 0x3C; // Name: m_vLocalMassCenter Offset: 0x3C
					constexpr auto local_inertia_inv = 0x48; // Name: m_LocalInertiaInv Offset: 0x48
					constexpr auto fl_mass_inv = 0x6C; // Name: m_flMassInv Offset: 0x6C
					constexpr auto fl_game_mass = 0x70; // Name: m_flGameMass Offset: 0x70
					constexpr auto fl_inertia_scale_inv = 0x74; // Name: m_flInertiaScaleInv Offset: 0x74
					constexpr auto fl_linear_damping = 0x78; // Name: m_flLinearDamping Offset: 0x78
					constexpr auto fl_angular_damping = 0x7C; // Name: m_flAngularDamping Offset: 0x7C
					constexpr auto fl_linear_drag = 0x80; // Name: m_flLinearDrag Offset: 0x80
					constexpr auto fl_angular_drag = 0x84; // Name: m_flAngularDrag Offset: 0x84
					constexpr auto fl_linear_buoyancy_drag = 0x88; // Name: m_flLinearBuoyancyDrag Offset: 0x88
					constexpr auto fl_angular_buoyancy_drag = 0x8C; // Name: m_flAngularBuoyancyDrag Offset: 0x8C
					constexpr auto v_last_awake_force_accum = 0x90; // Name: m_vLastAwakeForceAccum Offset: 0x90
					constexpr auto v_last_awake_torque_accum = 0x9C; // Name: m_vLastAwakeTorqueAccum Offset: 0x9C
					constexpr auto fl_buoyancy_factor = 0xA8; // Name: m_flBuoyancyFactor Offset: 0xA8
					constexpr auto fl_gravity_scale = 0xAC; // Name: m_flGravityScale Offset: 0xAC
					constexpr auto fl_time_scale = 0xB0; // Name: m_flTimeScale Offset: 0xB0
					constexpr auto n_body_type = 0xB4; // Name: m_nBodyType Offset: 0xB4
					constexpr auto n_game_index = 0xB8; // Name: m_nGameIndex Offset: 0xB8
					constexpr auto n_game_flags = 0xBC; // Name: m_nGameFlags Offset: 0xBC
					constexpr auto n_min_velocity_iterations = 0xC0; // Name: m_nMinVelocityIterations Offset: 0xC0
					constexpr auto n_min_position_iterations = 0xC1; // Name: m_nMinPositionIterations Offset: 0xC1
					constexpr auto n_mass_priority = 0xC2; // Name: m_nMassPriority Offset: 0xC2
					constexpr auto b_enabled = 0xC3; // Name: m_bEnabled Offset: 0xC3
					constexpr auto b_sleeping = 0xC4; // Name: m_bSleeping Offset: 0xC4
					constexpr auto b_is_continuous_enabled = 0xC5; // Name: m_bIsContinuousEnabled Offset: 0xC5
					constexpr auto b_drag_enabled = 0xC6; // Name: m_bDragEnabled Offset: 0xC6
					constexpr auto b_buoyancy_drag_enabled = 0xC7; // Name: m_bBuoyancyDragEnabled Offset: 0xC7
					constexpr auto b_gravity_disabled = 0xC8; // Name: m_bGravityDisabled Offset: 0xC8
					constexpr auto b_speculative_enabled = 0xC9; // Name: m_bSpeculativeEnabled Offset: 0xC9
					constexpr auto b_has_shadow_controller = 0xCA; // Name: m_bHasShadowController Offset: 0xCA
				} // namespace RnBodyDesc_t

				namespace RnMesh_t {
					constexpr auto v_min = 0x0; // Name: m_vMin Offset: 0x0
					constexpr auto v_max = 0xC; // Name: m_vMax Offset: 0xC
					constexpr auto nodes = 0x18; // Name: m_Nodes Offset: 0x18
					constexpr auto vertices = 0x30; // Name: m_Vertices Offset: 0x30
					constexpr auto triangles = 0x48; // Name: m_Triangles Offset: 0x48
					constexpr auto wings = 0x60; // Name: m_Wings Offset: 0x60
					constexpr auto materials = 0x78; // Name: m_Materials Offset: 0x78
					constexpr auto v_orthographic_areas = 0x90; // Name: m_vOrthographicAreas Offset: 0x90
					constexpr auto n_flags = 0x9C; // Name: m_nFlags Offset: 0x9C
					constexpr auto n_debug_flags = 0xA0; // Name: m_nDebugFlags Offset: 0xA0
				} // namespace RnMesh_t

				namespace VertexPositionNormal_t {
					constexpr auto v_position = 0x0; // Name: m_vPosition Offset: 0x0
					constexpr auto v_normal = 0xC; // Name: m_vNormal Offset: 0xC
				} // namespace VertexPositionNormal_t

				namespace FeBuildSDFRigid_t {
					constexpr auto n_priority = 0x50; // Name: m_nPriority Offset: 0x50
					constexpr auto n_vertex_map_hash = 0x54; // Name: m_nVertexMapHash Offset: 0x54
				} // namespace FeBuildSDFRigid_t

				namespace RnHalfEdge_t {
					constexpr auto n_next = 0x0; // Name: m_nNext Offset: 0x0
					constexpr auto n_twin = 0x1; // Name: m_nTwin Offset: 0x1
					constexpr auto n_origin = 0x2; // Name: m_nOrigin Offset: 0x2
					constexpr auto n_face = 0x3; // Name: m_nFace Offset: 0x3
				} // namespace RnHalfEdge_t

				namespace RnWing_t {
					constexpr auto n_index = 0x0; // Name: m_nIndex Offset: 0x0
				} // namespace RnWing_t

				namespace FeVertexMapDesc_t {
					constexpr auto s_name = 0x0; // Name: sName Offset: 0x0
					constexpr auto n_name_hash = 0x8; // Name: nNameHash Offset: 0x8
					constexpr auto n_color = 0xC; // Name: nColor Offset: 0xC
					constexpr auto n_flags = 0x10; // Name: nFlags Offset: 0x10
					constexpr auto n_vertex_base = 0x14; // Name: nVertexBase Offset: 0x14
					constexpr auto n_vertex_count = 0x16; // Name: nVertexCount Offset: 0x16
					constexpr auto n_map_offset = 0x18; // Name: nMapOffset Offset: 0x18
					constexpr auto n_node_list_offset = 0x1C; // Name: nNodeListOffset Offset: 0x1C
					constexpr auto v_center_of_mass = 0x20; // Name: vCenterOfMass Offset: 0x20
					constexpr auto fl_volumetric_solve_strength = 0x2C; // Name: flVolumetricSolveStrength Offset: 0x2C
					constexpr auto n_scale_source_node = 0x30; // Name: nScaleSourceNode Offset: 0x30
					constexpr auto n_node_list_count = 0x32; // Name: nNodeListCount Offset: 0x32
				} // namespace FeVertexMapDesc_t

				namespace FeSimdSpringIntegrator_t {
					constexpr auto n_node = 0x0; // Name: nNode Offset: 0x0
					constexpr auto fl_spring_rest_length = 0x10; // Name: flSpringRestLength Offset: 0x10
					constexpr auto fl_spring_constant = 0x20; // Name: flSpringConstant Offset: 0x20
					constexpr auto fl_spring_damping = 0x30; // Name: flSpringDamping Offset: 0x30
					constexpr auto fl_node_weight0 = 0x40; // Name: flNodeWeight0 Offset: 0x40
				} // namespace FeSimdSpringIntegrator_t

				namespace FeTaperedCapsuleRigid_t {
					constexpr auto v_sphere = 0x0; // Name: vSphere Offset: 0x0
					constexpr auto n_node = 0x20; // Name: nNode Offset: 0x20
					constexpr auto n_collision_mask = 0x22; // Name: nCollisionMask Offset: 0x22
					constexpr auto n_vertex_map_index = 0x24; // Name: nVertexMapIndex Offset: 0x24
					constexpr auto n_flags = 0x26; // Name: nFlags Offset: 0x26
				} // namespace FeTaperedCapsuleRigid_t

				namespace FeAnimStrayRadius_t {
					constexpr auto n_node = 0x0; // Name: nNode Offset: 0x0
					constexpr auto fl_max_dist = 0x4; // Name: flMaxDist Offset: 0x4
					constexpr auto fl_relaxation_factor = 0x8; // Name: flRelaxationFactor Offset: 0x8
				} // namespace FeAnimStrayRadius_t

				namespace FeEdgeDesc_t {
					constexpr auto n_edge = 0x0; // Name: nEdge Offset: 0x0
					constexpr auto n_side = 0x4; // Name: nSide Offset: 0x4
					constexpr auto n_virt_elem = 0xC; // Name: nVirtElem Offset: 0xC
				} // namespace FeEdgeDesc_t

				namespace RnNode_t {
					constexpr auto v_min = 0x0; // Name: m_vMin Offset: 0x0
					constexpr auto n_children = 0xC; // Name: m_nChildren Offset: 0xC
					constexpr auto v_max = 0x10; // Name: m_vMax Offset: 0x10
					constexpr auto n_triangle_offset = 0x1C; // Name: m_nTriangleOffset Offset: 0x1C
				} // namespace RnNode_t

				namespace FeQuad_t {
					constexpr auto n_node = 0x0; // Name: nNode Offset: 0x0
					constexpr auto fl_slack = 0x8; // Name: flSlack Offset: 0x8
					constexpr auto v_shape = 0xC; // Name: vShape Offset: 0xC
				} // namespace FeQuad_t

				namespace FeNodeReverseOffset_t {
					constexpr auto v_offset = 0x0; // Name: vOffset Offset: 0x0
					constexpr auto n_bone_ctrl = 0xC; // Name: nBoneCtrl Offset: 0xC
					constexpr auto n_target_node = 0xE; // Name: nTargetNode Offset: 0xE
				} // namespace FeNodeReverseOffset_t

				namespace CastSphereSATParams_t {
					constexpr auto v_ray_start = 0x0; // Name: m_vRayStart Offset: 0x0
					constexpr auto v_ray_delta = 0xC; // Name: m_vRayDelta Offset: 0xC
					constexpr auto fl_radius = 0x18; // Name: m_flRadius Offset: 0x18
					constexpr auto fl_max_fraction = 0x1C; // Name: m_flMaxFraction Offset: 0x1C
					constexpr auto fl_scale = 0x20; // Name: m_flScale Offset: 0x20
					constexpr auto p_hull = 0x28; // Name: m_pHull Offset: 0x28
				} // namespace CastSphereSATParams_t

				namespace FeStiffHingeBuild_t {
					constexpr auto fl_max_angle = 0x0; // Name: flMaxAngle Offset: 0x0
					constexpr auto fl_strength = 0x4; // Name: flStrength Offset: 0x4
					constexpr auto fl_motion_bias = 0x8; // Name: flMotionBias Offset: 0x8
					constexpr auto n_node = 0x14; // Name: nNode Offset: 0x14
				} // namespace FeStiffHingeBuild_t

				namespace CFeJiggleBone {
					constexpr auto n_flags = 0x0; // Name: m_nFlags Offset: 0x0
					constexpr auto fl_length = 0x4; // Name: m_flLength Offset: 0x4
					constexpr auto fl_tip_mass = 0x8; // Name: m_flTipMass Offset: 0x8
					constexpr auto fl_yaw_stiffness = 0xC; // Name: m_flYawStiffness Offset: 0xC
					constexpr auto fl_yaw_damping = 0x10; // Name: m_flYawDamping Offset: 0x10
					constexpr auto fl_pitch_stiffness = 0x14; // Name: m_flPitchStiffness Offset: 0x14
					constexpr auto fl_pitch_damping = 0x18; // Name: m_flPitchDamping Offset: 0x18
					constexpr auto fl_along_stiffness = 0x1C; // Name: m_flAlongStiffness Offset: 0x1C
					constexpr auto fl_along_damping = 0x20; // Name: m_flAlongDamping Offset: 0x20
					constexpr auto fl_angle_limit = 0x24; // Name: m_flAngleLimit Offset: 0x24
					constexpr auto fl_min_yaw = 0x28; // Name: m_flMinYaw Offset: 0x28
					constexpr auto fl_max_yaw = 0x2C; // Name: m_flMaxYaw Offset: 0x2C
					constexpr auto fl_yaw_friction = 0x30; // Name: m_flYawFriction Offset: 0x30
					constexpr auto fl_yaw_bounce = 0x34; // Name: m_flYawBounce Offset: 0x34
					constexpr auto fl_min_pitch = 0x38; // Name: m_flMinPitch Offset: 0x38
					constexpr auto fl_max_pitch = 0x3C; // Name: m_flMaxPitch Offset: 0x3C
					constexpr auto fl_pitch_friction = 0x40; // Name: m_flPitchFriction Offset: 0x40
					constexpr auto fl_pitch_bounce = 0x44; // Name: m_flPitchBounce Offset: 0x44
					constexpr auto fl_base_mass = 0x48; // Name: m_flBaseMass Offset: 0x48
					constexpr auto fl_base_stiffness = 0x4C; // Name: m_flBaseStiffness Offset: 0x4C
					constexpr auto fl_base_damping = 0x50; // Name: m_flBaseDamping Offset: 0x50
					constexpr auto fl_base_min_left = 0x54; // Name: m_flBaseMinLeft Offset: 0x54
					constexpr auto fl_base_max_left = 0x58; // Name: m_flBaseMaxLeft Offset: 0x58
					constexpr auto fl_base_left_friction = 0x5C; // Name: m_flBaseLeftFriction Offset: 0x5C
					constexpr auto fl_base_min_up = 0x60; // Name: m_flBaseMinUp Offset: 0x60
					constexpr auto fl_base_max_up = 0x64; // Name: m_flBaseMaxUp Offset: 0x64
					constexpr auto fl_base_up_friction = 0x68; // Name: m_flBaseUpFriction Offset: 0x68
					constexpr auto fl_base_min_forward = 0x6C; // Name: m_flBaseMinForward Offset: 0x6C
					constexpr auto fl_base_max_forward = 0x70; // Name: m_flBaseMaxForward Offset: 0x70
					constexpr auto fl_base_forward_friction = 0x74; // Name: m_flBaseForwardFriction Offset: 0x74
					constexpr auto fl_radius0 = 0x78; // Name: m_flRadius0 Offset: 0x78
					constexpr auto fl_radius1 = 0x7C; // Name: m_flRadius1 Offset: 0x7C
					constexpr auto v_point0 = 0x80; // Name: m_vPoint0 Offset: 0x80
					constexpr auto v_point1 = 0x8C; // Name: m_vPoint1 Offset: 0x8C
					constexpr auto n_collision_mask = 0x98; // Name: m_nCollisionMask Offset: 0x98
				} // namespace CFeJiggleBone

				namespace CRegionSVM {
					constexpr auto planes = 0x0; // Name: m_Planes Offset: 0x0
					constexpr auto nodes = 0x18; // Name: m_Nodes Offset: 0x18
				} // namespace CRegionSVM

				namespace FeCollisionPlane_t {
					constexpr auto n_ctrl_parent = 0x0; // Name: nCtrlParent Offset: 0x0
					constexpr auto n_child_node = 0x2; // Name: nChildNode Offset: 0x2
					constexpr auto plane = 0x4; // Name: m_Plane Offset: 0x4
					constexpr auto fl_strength = 0x14; // Name: flStrength Offset: 0x14
				} // namespace FeCollisionPlane_t

				namespace FeNodeBase_t {
					constexpr auto n_node = 0x0; // Name: nNode Offset: 0x0
					constexpr auto n_dummy = 0x2; // Name: nDummy Offset: 0x2
					constexpr auto n_node_x0 = 0x8; // Name: nNodeX0 Offset: 0x8
					constexpr auto n_node_x1 = 0xA; // Name: nNodeX1 Offset: 0xA
					constexpr auto n_node_y0 = 0xC; // Name: nNodeY0 Offset: 0xC
					constexpr auto n_node_y1 = 0xE; // Name: nNodeY1 Offset: 0xE
					constexpr auto q_adjust = 0x10; // Name: qAdjust Offset: 0x10
				} // namespace FeNodeBase_t

				namespace FeWorldCollisionParams_t {
					constexpr auto fl_world_friction = 0x0; // Name: flWorldFriction Offset: 0x0
					constexpr auto fl_ground_friction = 0x4; // Name: flGroundFriction Offset: 0x4
					constexpr auto n_list_begin = 0x8; // Name: nListBegin Offset: 0x8
					constexpr auto n_list_end = 0xA; // Name: nListEnd Offset: 0xA
				} // namespace FeWorldCollisionParams_t

				namespace FeSimdQuad_t {
					constexpr auto n_node = 0x0; // Name: nNode Offset: 0x0
					constexpr auto f4_slack = 0x20; // Name: f4Slack Offset: 0x20
					constexpr auto v_shape = 0x30; // Name: vShape Offset: 0x30
					constexpr auto f4_weights = 0xF0; // Name: f4Weights Offset: 0xF0
				} // namespace FeSimdQuad_t

				namespace FeHingeLimit_t {
					constexpr auto n_node = 0x0; // Name: nNode Offset: 0x0
					constexpr auto n_flags = 0xC; // Name: nFlags Offset: 0xC
					constexpr auto fl_weight4 = 0x10; // Name: flWeight4 Offset: 0x10
					constexpr auto fl_weight5 = 0x14; // Name: flWeight5 Offset: 0x14
					constexpr auto fl_angle_center = 0x18; // Name: flAngleCenter Offset: 0x18
					constexpr auto fl_angle_extents = 0x1C; // Name: flAngleExtents Offset: 0x1C
				} // namespace FeHingeLimit_t

				namespace FeMorphLayerDepr_t {
					constexpr auto name = 0x0; // Name: m_Name Offset: 0x0
					constexpr auto n_name_hash = 0x8; // Name: m_nNameHash Offset: 0x8
					constexpr auto nodes = 0x10; // Name: m_Nodes Offset: 0x10
					constexpr auto init_pos = 0x28; // Name: m_InitPos Offset: 0x28
					constexpr auto gravity = 0x40; // Name: m_Gravity Offset: 0x40
					constexpr auto goal_strength = 0x58; // Name: m_GoalStrength Offset: 0x58
					constexpr auto goal_damping = 0x70; // Name: m_GoalDamping Offset: 0x70
					constexpr auto n_flags = 0x88; // Name: m_nFlags Offset: 0x88
				} // namespace FeMorphLayerDepr_t

				namespace FeWeightedNode_t {
					constexpr auto n_node = 0x0; // Name: nNode Offset: 0x0
					constexpr auto n_weight = 0x2; // Name: nWeight Offset: 0x2
				} // namespace FeWeightedNode_t

				namespace FeEffectDesc_t {
					constexpr auto s_name = 0x0; // Name: sName Offset: 0x0
					constexpr auto n_name_hash = 0x8; // Name: nNameHash Offset: 0x8
					constexpr auto n_type = 0xC; // Name: nType Offset: 0xC
					constexpr auto params = 0x10; // Name: m_Params Offset: 0x10
				} // namespace FeEffectDesc_t

				namespace FeKelagerBend2_t {
					constexpr auto fl_weight = 0x0; // Name: flWeight Offset: 0x0
					constexpr auto fl_height0 = 0xC; // Name: flHeight0 Offset: 0xC
					constexpr auto n_node = 0x10; // Name: nNode Offset: 0x10
					constexpr auto n_reserved = 0x16; // Name: nReserved Offset: 0x16
				} // namespace FeKelagerBend2_t

				namespace FourVectors2D {
					constexpr auto x = 0x0; // Name: x Offset: 0x0
					constexpr auto y = 0x10; // Name: y Offset: 0x10
				} // namespace FourVectors2D

				namespace FeBoxRigid_t {
					constexpr auto tm_frame2 = 0x0; // Name: tmFrame2 Offset: 0x0
					constexpr auto n_node = 0x20; // Name: nNode Offset: 0x20
					constexpr auto n_collision_mask = 0x22; // Name: nCollisionMask Offset: 0x22
					constexpr auto v_size = 0x24; // Name: vSize Offset: 0x24
					constexpr auto n_vertex_map_index = 0x30; // Name: nVertexMapIndex Offset: 0x30
					constexpr auto n_flags = 0x32; // Name: nFlags Offset: 0x32
				} // namespace FeBoxRigid_t

				namespace FeCtrlOffset_t {
					constexpr auto v_offset = 0x0; // Name: vOffset Offset: 0x0
					constexpr auto n_ctrl_parent = 0xC; // Name: nCtrlParent Offset: 0xC
					constexpr auto n_ctrl_child = 0xE; // Name: nCtrlChild Offset: 0xE
				} // namespace FeCtrlOffset_t

				namespace FeVertexMapBuild_t {
					constexpr auto vertex_map_name = 0x0; // Name: m_VertexMapName Offset: 0x0
					constexpr auto n_name_hash = 0x8; // Name: m_nNameHash Offset: 0x8
					constexpr auto color = 0xC; // Name: m_Color Offset: 0xC
					constexpr auto fl_volumetric_solve_strength = 0x10; // Name: m_flVolumetricSolveStrength Offset: 0x10
					constexpr auto n_scale_source_node = 0x14; // Name: m_nScaleSourceNode Offset: 0x14
					constexpr auto weights = 0x18; // Name: m_Weights Offset: 0x18
				} // namespace FeVertexMapBuild_t

				namespace CFeVertexMapBuildArray {
					constexpr auto array = 0x0; // Name: m_Array Offset: 0x0
				} // namespace CFeVertexMapBuildArray

				namespace FeTri_t {
					constexpr auto n_node = 0x0; // Name: nNode Offset: 0x0
					constexpr auto w1 = 0x8; // Name: w1 Offset: 0x8
					constexpr auto w2 = 0xC; // Name: w2 Offset: 0xC
					constexpr auto v1x = 0x10; // Name: v1x Offset: 0x10
					constexpr auto v2 = 0x14; // Name: v2 Offset: 0x14
				} // namespace FeTri_t

				namespace RnHull_t {
					constexpr auto v_centroid = 0x0; // Name: m_vCentroid Offset: 0x0
					constexpr auto fl_max_angular_radius = 0xC; // Name: m_flMaxAngularRadius Offset: 0xC
					constexpr auto bounds = 0x10; // Name: m_Bounds Offset: 0x10
					constexpr auto v_orthographic_areas = 0x28; // Name: m_vOrthographicAreas Offset: 0x28
					constexpr auto mass_properties = 0x34; // Name: m_MassProperties Offset: 0x34
					constexpr auto fl_volume = 0x64; // Name: m_flVolume Offset: 0x64
					constexpr auto fl_surface_area = 0x68; // Name: m_flSurfaceArea Offset: 0x68
					constexpr auto vertices = 0x70; // Name: m_Vertices Offset: 0x70
					constexpr auto vertex_positions = 0x88; // Name: m_VertexPositions Offset: 0x88
					constexpr auto edges = 0xA0; // Name: m_Edges Offset: 0xA0
					constexpr auto faces = 0xB8; // Name: m_Faces Offset: 0xB8
					constexpr auto face_planes = 0xD0; // Name: m_FacePlanes Offset: 0xD0
					constexpr auto n_flags = 0xE8; // Name: m_nFlags Offset: 0xE8
					constexpr auto p_region_svm = 0xF0; // Name: m_pRegionSVM Offset: 0xF0
				} // namespace RnHull_t

				namespace CovMatrix3 {
					constexpr auto v_diag = 0x0; // Name: m_vDiag Offset: 0x0
					constexpr auto fl_xy = 0xC; // Name: m_flXY Offset: 0xC
					constexpr auto fl_xz = 0x10; // Name: m_flXZ Offset: 0x10
					constexpr auto fl_yz = 0x14; // Name: m_flYZ Offset: 0x14
				} // namespace CovMatrix3

				namespace RnVertex_t {
					constexpr auto n_edge = 0x0; // Name: m_nEdge Offset: 0x0
				} // namespace RnVertex_t

				namespace Dop26_t {
					constexpr auto fl_support = 0x0; // Name: m_flSupport Offset: 0x0
				} // namespace Dop26_t

				namespace RnFace_t {
					constexpr auto n_edge = 0x0; // Name: m_nEdge Offset: 0x0
				} // namespace RnFace_t

				namespace FeCtrlOsOffset_t {
					constexpr auto n_ctrl_parent = 0x0; // Name: nCtrlParent Offset: 0x0
					constexpr auto n_ctrl_child = 0x2; // Name: nCtrlChild Offset: 0x2
				} // namespace FeCtrlOsOffset_t

				namespace FeAntiTunnelProbe_t {
					constexpr auto fl_weight = 0x0; // Name: flWeight Offset: 0x0
					constexpr auto n_flags = 0x4; // Name: nFlags Offset: 0x4
					constexpr auto n_probe_node = 0x8; // Name: nProbeNode Offset: 0x8
					constexpr auto n_count = 0xA; // Name: nCount Offset: 0xA
					constexpr auto n_begin = 0xC; // Name: nBegin Offset: 0xC
					constexpr auto fl_activation_distance = 0x10; // Name: flActivationDistance Offset: 0x10
					constexpr auto fl_curvature_radius = 0x14; // Name: flCurvatureRadius Offset: 0x14
					constexpr auto fl_bias = 0x18; // Name: flBias Offset: 0x18
				} // namespace FeAntiTunnelProbe_t

				namespace FeTwistConstraint_t {
					constexpr auto n_node_orient = 0x0; // Name: nNodeOrient Offset: 0x0
					constexpr auto n_node_end = 0x2; // Name: nNodeEnd Offset: 0x2
					constexpr auto fl_twist_relax = 0x4; // Name: flTwistRelax Offset: 0x4
					constexpr auto fl_swing_relax = 0x8; // Name: flSwingRelax Offset: 0x8
				} // namespace FeTwistConstraint_t

				namespace FeNodeWindBase_t {
					constexpr auto n_node_x0 = 0x0; // Name: nNodeX0 Offset: 0x0
					constexpr auto n_node_x1 = 0x2; // Name: nNodeX1 Offset: 0x2
					constexpr auto n_node_y0 = 0x4; // Name: nNodeY0 Offset: 0x4
					constexpr auto n_node_y1 = 0x6; // Name: nNodeY1 Offset: 0x6
				} // namespace FeNodeWindBase_t

				namespace FeAxialEdgeBend_t {
					constexpr auto te = 0x0; // Name: te Offset: 0x0
					constexpr auto tv = 0x4; // Name: tv Offset: 0x4
					constexpr auto fl_dist = 0x8; // Name: flDist Offset: 0x8
					constexpr auto fl_weight = 0xC; // Name: flWeight Offset: 0xC
					constexpr auto n_node = 0x1C; // Name: nNode Offset: 0x1C
				} // namespace FeAxialEdgeBend_t

				namespace FourCovMatrices3 {
					constexpr auto v_diag = 0x0; // Name: m_vDiag Offset: 0x0
					constexpr auto fl_xy = 0x30; // Name: m_flXY Offset: 0x30
					constexpr auto fl_xz = 0x40; // Name: m_flXZ Offset: 0x40
					constexpr auto fl_yz = 0x50; // Name: m_flYZ Offset: 0x50
				} // namespace FourCovMatrices3

				namespace FeSphereRigid_t {
					constexpr auto v_sphere = 0x0; // Name: vSphere Offset: 0x0
					constexpr auto n_node = 0x10; // Name: nNode Offset: 0x10
					constexpr auto n_collision_mask = 0x12; // Name: nCollisionMask Offset: 0x12
					constexpr auto n_vertex_map_index = 0x14; // Name: nVertexMapIndex Offset: 0x14
					constexpr auto n_flags = 0x16; // Name: nFlags Offset: 0x16
				} // namespace FeSphereRigid_t

				namespace FeBuildTaperedCapsuleRigid_t {
					constexpr auto n_priority = 0x30; // Name: m_nPriority Offset: 0x30
					constexpr auto n_vertex_map_hash = 0x34; // Name: m_nVertexMapHash Offset: 0x34
				} // namespace FeBuildTaperedCapsuleRigid_t

				namespace FeSoftParent_t {
					constexpr auto n_parent = 0x0; // Name: nParent Offset: 0x0
					constexpr auto fl_alpha = 0x4; // Name: flAlpha Offset: 0x4
				} // namespace FeSoftParent_t

				namespace RnShapeDesc_t {
					constexpr auto n_collision_attribute_index = 0x0; // Name: m_nCollisionAttributeIndex Offset: 0x0
					constexpr auto n_surface_property_index = 0x4; // Name: m_nSurfacePropertyIndex Offset: 0x4
					constexpr auto user_friendly_name = 0x8; // Name: m_UserFriendlyName Offset: 0x8
					constexpr auto b_user_friendly_name_sealed = 0x10; // Name: m_bUserFriendlyNameSealed Offset: 0x10
					constexpr auto b_user_friendly_name_long = 0x11; // Name: m_bUserFriendlyNameLong Offset: 0x11
					constexpr auto n_tool_material_hash = 0x14; // Name: m_nToolMaterialHash Offset: 0x14
				} // namespace RnShapeDesc_t

				namespace FeTreeChildren_t {
					constexpr auto n_child = 0x0; // Name: nChild Offset: 0x0
				} // namespace FeTreeChildren_t

				namespace FeRodConstraint_t {
					constexpr auto n_node = 0x0; // Name: nNode Offset: 0x0
					constexpr auto fl_max_dist = 0x4; // Name: flMaxDist Offset: 0x4
					constexpr auto fl_min_dist = 0x8; // Name: flMinDist Offset: 0x8
					constexpr auto fl_weight0 = 0xC; // Name: flWeight0 Offset: 0xC
					constexpr auto fl_relaxation_factor = 0x10; // Name: flRelaxationFactor Offset: 0x10
				} // namespace FeRodConstraint_t

				namespace FeFitWeight_t {
					constexpr auto fl_weight = 0x0; // Name: flWeight Offset: 0x0
					constexpr auto n_node = 0x4; // Name: nNode Offset: 0x4
					constexpr auto n_dummy = 0x6; // Name: nDummy Offset: 0x6
				} // namespace FeFitWeight_t

				namespace FeSimdTri_t {
					constexpr auto n_node = 0x0; // Name: nNode Offset: 0x0
					constexpr auto w1 = 0x30; // Name: w1 Offset: 0x30
					constexpr auto w2 = 0x40; // Name: w2 Offset: 0x40
					constexpr auto v1x = 0x50; // Name: v1x Offset: 0x50
					constexpr auto v2 = 0x60; // Name: v2 Offset: 0x60
				} // namespace FeSimdTri_t

				namespace VertexPositionColor_t {
					constexpr auto v_position = 0x0; // Name: m_vPosition Offset: 0x0
				} // namespace VertexPositionColor_t

				namespace FeFitInfluence_t {
					constexpr auto n_vertex_node = 0x0; // Name: nVertexNode Offset: 0x0
					constexpr auto fl_weight = 0x4; // Name: flWeight Offset: 0x4
					constexpr auto n_matrix_node = 0x8; // Name: nMatrixNode Offset: 0x8
				} // namespace FeFitInfluence_t

				namespace FeHingeLimitBuild_t {
					constexpr auto n_node = 0x0; // Name: nNode Offset: 0x0
					constexpr auto n_flags = 0xC; // Name: nFlags Offset: 0xC
					constexpr auto fl_limit_cw = 0x10; // Name: flLimitCW Offset: 0x10
					constexpr auto fl_limit_ccw = 0x14; // Name: flLimitCCW Offset: 0x14
				} // namespace FeHingeLimitBuild_t
			}

			namespace tier2
			{

				namespace CRangeInt {
					constexpr auto p_value = 0x0; // Name: m_pValue Offset: 0x0
				} // namespace CRangeInt

				namespace CRangeFloat {
					constexpr auto p_value = 0x0; // Name: m_pValue Offset: 0x0
				} // namespace CRangeFloat
			}

			namespace resourcefile
			{

				namespace InfoForResourceTypeCResourceManifestInternal {
				} // namespace InfoForResourceTypeCResourceManifestInternal

				namespace ResourceId_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace ResourceId_t

				namespace CExampleSchemaVData_PolymorphicDerivedA {
					constexpr auto n_derived_a = 0x10; // Name: m_nDerivedA Offset: 0x10
				} // namespace CExampleSchemaVData_PolymorphicDerivedA

				namespace CExampleSchemaVData_PolymorphicBase {
					constexpr auto n_base = 0x8; // Name: m_nBase Offset: 0x8
				} // namespace CExampleSchemaVData_PolymorphicBase

				namespace CExampleSchemaVData_PolymorphicDerivedB {
					constexpr auto n_derived_b = 0x10; // Name: m_nDerivedB Offset: 0x10
				} // namespace CExampleSchemaVData_PolymorphicDerivedB

				namespace CExampleSchemaVData_Monomorphic {
					constexpr auto n_example1 = 0x0; // Name: m_nExample1 Offset: 0x0
					constexpr auto n_example2 = 0x4; // Name: m_nExample2 Offset: 0x4
				} // namespace CExampleSchemaVData_Monomorphic
			}

			namespace engine2
			{
			}

			namespace schemasystem
			{

				namespace CSchemaSystemInternalRegistration {
					constexpr auto vector2_d = 0x0; // Name: m_Vector2D Offset: 0x0
					constexpr auto vector = 0x8; // Name: m_Vector Offset: 0x8
					constexpr auto vector_aligned = 0x20; // Name: m_VectorAligned Offset: 0x20
					constexpr auto quaternion = 0x30; // Name: m_Quaternion Offset: 0x30
					constexpr auto qangle = 0x40; // Name: m_QAngle Offset: 0x40
					constexpr auto rotation_vector = 0x4C; // Name: m_RotationVector Offset: 0x4C
					constexpr auto radian_euler = 0x58; // Name: m_RadianEuler Offset: 0x58
					constexpr auto degree_euler = 0x64; // Name: m_DegreeEuler Offset: 0x64
					constexpr auto quaternion_storage = 0x70; // Name: m_QuaternionStorage Offset: 0x70
					constexpr auto matrix3x4_t = 0x80; // Name: m_matrix3x4_t Offset: 0x80
					constexpr auto matrix3x4a_t = 0xB0; // Name: m_matrix3x4a_t Offset: 0xB0
					constexpr auto color = 0xE0; // Name: m_Color Offset: 0xE0
					constexpr auto vector4_d = 0xE4; // Name: m_Vector4D Offset: 0xE4
					constexpr auto ctransform = 0x100; // Name: m_CTransform Offset: 0x100
					constexpr auto p_key_values = 0x120; // Name: m_pKeyValues Offset: 0x120
					constexpr auto cutl_binary_block = 0x128; // Name: m_CUtlBinaryBlock Offset: 0x128
					constexpr auto cutl_string = 0x140; // Name: m_CUtlString Offset: 0x140
					constexpr auto cutl_symbol = 0x148; // Name: m_CUtlSymbol Offset: 0x148
					constexpr auto string_token = 0x14C; // Name: m_stringToken Offset: 0x14C
					constexpr auto string_token_with_storage = 0x150; // Name: m_stringTokenWithStorage Offset: 0x150
					constexpr auto resource_types = 0x168; // Name: m_ResourceTypes Offset: 0x168
					constexpr auto kv3 = 0x170; // Name: m_KV3 Offset: 0x170
				} // namespace CSchemaSystemInternalRegistration
			}

			namespace animationsystem
			{

				namespace CSeqPoseParamDesc {
					constexpr auto s_name = 0x0; // Name: m_sName Offset: 0x0
					constexpr auto fl_start = 0x10; // Name: m_flStart Offset: 0x10
					constexpr auto fl_end = 0x14; // Name: m_flEnd Offset: 0x14
					constexpr auto fl_loop = 0x18; // Name: m_flLoop Offset: 0x18
					constexpr auto b_looping = 0x1C; // Name: m_bLooping Offset: 0x1C
				} // namespace CSeqPoseParamDesc

				namespace HSequence {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace HSequence

				namespace CAnimFrameBlockAnim {
					constexpr auto n_start_frame = 0x0; // Name: m_nStartFrame Offset: 0x0
					constexpr auto n_end_frame = 0x4; // Name: m_nEndFrame Offset: 0x4
					constexpr auto segment_index_array = 0x8; // Name: m_segmentIndexArray Offset: 0x8
				} // namespace CAnimFrameBlockAnim

				namespace CSeqSeqDescFlag {
					constexpr auto b_looping = 0x0; // Name: m_bLooping Offset: 0x0
					constexpr auto b_snap = 0x1; // Name: m_bSnap Offset: 0x1
					constexpr auto b_autoplay = 0x2; // Name: m_bAutoplay Offset: 0x2
					constexpr auto b_post = 0x3; // Name: m_bPost Offset: 0x3
					constexpr auto b_hidden = 0x4; // Name: m_bHidden Offset: 0x4
					constexpr auto b_multi = 0x5; // Name: m_bMulti Offset: 0x5
					constexpr auto b_legacy_delta = 0x6; // Name: m_bLegacyDelta Offset: 0x6
					constexpr auto b_legacy_worldspace = 0x7; // Name: m_bLegacyWorldspace Offset: 0x7
					constexpr auto b_legacy_cyclepose = 0x8; // Name: m_bLegacyCyclepose Offset: 0x8
					constexpr auto b_legacy_realtime = 0x9; // Name: m_bLegacyRealtime Offset: 0x9
					constexpr auto b_model_doc = 0xA; // Name: m_bModelDoc Offset: 0xA
				} // namespace CSeqSeqDescFlag

				namespace AnimationSnapshot_t {
					constexpr auto n_ent_index = 0x110; // Name: m_nEntIndex Offset: 0x110
					constexpr auto model_name = 0x118; // Name: m_modelName Offset: 0x118
				} // namespace AnimationSnapshot_t

				namespace CSeqBoneMaskList {
					constexpr auto s_name = 0x0; // Name: m_sName Offset: 0x0
					constexpr auto n_local_bone_array = 0x10; // Name: m_nLocalBoneArray Offset: 0x10
					constexpr auto fl_bone_weight_array = 0x28; // Name: m_flBoneWeightArray Offset: 0x28
					constexpr auto fl_default_morph_ctrl_weight = 0x40; // Name: m_flDefaultMorphCtrlWeight Offset: 0x40
					constexpr auto morph_ctrl_weight_array = 0x48; // Name: m_morphCtrlWeightArray Offset: 0x48
				} // namespace CSeqBoneMaskList

				namespace CAnimUser {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
					constexpr auto n_type = 0x10; // Name: m_nType Offset: 0x10
				} // namespace CAnimUser

				namespace CAnimEncodedFrames {
					constexpr auto file_name = 0x0; // Name: m_fileName Offset: 0x0
					constexpr auto n_frames = 0x10; // Name: m_nFrames Offset: 0x10
					constexpr auto n_frames_per_block = 0x14; // Name: m_nFramesPerBlock Offset: 0x14
					constexpr auto frameblock_array = 0x18; // Name: m_frameblockArray Offset: 0x18
					constexpr auto usage_differences = 0x30; // Name: m_usageDifferences Offset: 0x30
				} // namespace CAnimEncodedFrames

				namespace CAnimActivity {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
					constexpr auto n_activity = 0x10; // Name: m_nActivity Offset: 0x10
					constexpr auto n_flags = 0x14; // Name: m_nFlags Offset: 0x14
					constexpr auto n_weight = 0x18; // Name: m_nWeight Offset: 0x18
				} // namespace CAnimActivity

				namespace CSeqCmdLayer {
					constexpr auto cmd = 0x0; // Name: m_cmd Offset: 0x0
					constexpr auto n_local_reference = 0x2; // Name: m_nLocalReference Offset: 0x2
					constexpr auto n_local_bonemask = 0x4; // Name: m_nLocalBonemask Offset: 0x4
					constexpr auto n_dst_result = 0x6; // Name: m_nDstResult Offset: 0x6
					constexpr auto n_src_result = 0x8; // Name: m_nSrcResult Offset: 0x8
					constexpr auto b_spline = 0xA; // Name: m_bSpline Offset: 0xA
					constexpr auto fl_var1 = 0xC; // Name: m_flVar1 Offset: 0xC
					constexpr auto fl_var2 = 0x10; // Name: m_flVar2 Offset: 0x10
					constexpr auto n_line_number = 0x14; // Name: m_nLineNumber Offset: 0x14
				} // namespace CSeqCmdLayer

				namespace AnimationDecodeDebugDumpElement_t {
					constexpr auto n_entity_index = 0x0; // Name: m_nEntityIndex Offset: 0x0
					constexpr auto model_name = 0x8; // Name: m_modelName Offset: 0x8
					constexpr auto pose_params = 0x10; // Name: m_poseParams Offset: 0x10
					constexpr auto decode_ops = 0x28; // Name: m_decodeOps Offset: 0x28
					constexpr auto internal_ops = 0x40; // Name: m_internalOps Offset: 0x40
					constexpr auto decoded_anims = 0x58; // Name: m_decodedAnims Offset: 0x58
				} // namespace AnimationDecodeDebugDumpElement_t

				namespace AnimationDecodeDebugDump_t {
					constexpr auto processing_type = 0x0; // Name: m_processingType Offset: 0x0
					constexpr auto elems = 0x8; // Name: m_elems Offset: 0x8
				} // namespace AnimationDecodeDebugDump_t

				namespace CSeqTransition {
					constexpr auto fl_fade_in_time = 0x0; // Name: m_flFadeInTime Offset: 0x0
					constexpr auto fl_fade_out_time = 0x4; // Name: m_flFadeOutTime Offset: 0x4
				} // namespace CSeqTransition

				namespace MoodAnimation_t {
					constexpr auto s_name = 0x0; // Name: m_sName Offset: 0x0
					constexpr auto fl_weight = 0x8; // Name: m_flWeight Offset: 0x8
				} // namespace MoodAnimation_t

				namespace CAnimEncodeDifference {
					constexpr auto bone_array = 0x0; // Name: m_boneArray Offset: 0x0
					constexpr auto morph_array = 0x18; // Name: m_morphArray Offset: 0x18
					constexpr auto user_array = 0x30; // Name: m_userArray Offset: 0x30
					constexpr auto b_has_rotation_bit_array = 0x48; // Name: m_bHasRotationBitArray Offset: 0x48
					constexpr auto b_has_movement_bit_array = 0x60; // Name: m_bHasMovementBitArray Offset: 0x60
					constexpr auto b_has_morph_bit_array = 0x78; // Name: m_bHasMorphBitArray Offset: 0x78
					constexpr auto b_has_user_bit_array = 0x90; // Name: m_bHasUserBitArray Offset: 0x90
				} // namespace CAnimEncodeDifference

				namespace CSeqAutoLayerFlag {
					constexpr auto b_post = 0x0; // Name: m_bPost Offset: 0x0
					constexpr auto b_spline = 0x1; // Name: m_bSpline Offset: 0x1
					constexpr auto b_xfade = 0x2; // Name: m_bXFade Offset: 0x2
					constexpr auto b_no_blend = 0x3; // Name: m_bNoBlend Offset: 0x3
					constexpr auto b_local = 0x4; // Name: m_bLocal Offset: 0x4
					constexpr auto b_pose = 0x5; // Name: m_bPose Offset: 0x5
					constexpr auto b_fetch_frame = 0x6; // Name: m_bFetchFrame Offset: 0x6
					constexpr auto b_subtract = 0x7; // Name: m_bSubtract Offset: 0x7
				} // namespace CSeqAutoLayerFlag

				namespace CSeqPoseSetting {
					constexpr auto s_pose_parameter = 0x0; // Name: m_sPoseParameter Offset: 0x0
					constexpr auto s_attachment = 0x10; // Name: m_sAttachment Offset: 0x10
					constexpr auto s_reference_sequence = 0x20; // Name: m_sReferenceSequence Offset: 0x20
					constexpr auto fl_value = 0x30; // Name: m_flValue Offset: 0x30
					constexpr auto b_x = 0x34; // Name: m_bX Offset: 0x34
					constexpr auto b_y = 0x35; // Name: m_bY Offset: 0x35
					constexpr auto b_z = 0x36; // Name: m_bZ Offset: 0x36
					constexpr auto e_type = 0x38; // Name: m_eType Offset: 0x38
				} // namespace CSeqPoseSetting

				namespace CSeqMultiFetchFlag {
					constexpr auto b_realtime = 0x0; // Name: m_bRealtime Offset: 0x0
					constexpr auto b_cylepose = 0x1; // Name: m_bCylepose Offset: 0x1
					constexpr auto b0_d = 0x2; // Name: m_b0D Offset: 0x2
					constexpr auto b1_d = 0x3; // Name: m_b1D Offset: 0x3
					constexpr auto b2_d = 0x4; // Name: m_b2D Offset: 0x4
					constexpr auto b2_d__tri = 0x5; // Name: m_b2D_TRI Offset: 0x5
				} // namespace CSeqMultiFetchFlag

				namespace CAnimBoneDifference {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
					constexpr auto parent = 0x10; // Name: m_parent Offset: 0x10
					constexpr auto pos_error = 0x20; // Name: m_posError Offset: 0x20
					constexpr auto b_has_rotation = 0x2C; // Name: m_bHasRotation Offset: 0x2C
					constexpr auto b_has_movement = 0x2D; // Name: m_bHasMovement Offset: 0x2D
				} // namespace CAnimBoneDifference

				namespace CSeqSynthAnimDesc {
					constexpr auto s_name = 0x0; // Name: m_sName Offset: 0x0
					constexpr auto flags = 0x10; // Name: m_flags Offset: 0x10
					constexpr auto transition = 0x1C; // Name: m_transition Offset: 0x1C
					constexpr auto n_local_base_reference = 0x24; // Name: m_nLocalBaseReference Offset: 0x24
					constexpr auto n_local_bone_mask = 0x26; // Name: m_nLocalBoneMask Offset: 0x26
					constexpr auto activity_array = 0x28; // Name: m_activityArray Offset: 0x28
				} // namespace CSeqSynthAnimDesc

				namespace MoodAnimationLayer_t {
					constexpr auto s_name = 0x0; // Name: m_sName Offset: 0x0
					constexpr auto b_active_listening = 0x8; // Name: m_bActiveListening Offset: 0x8
					constexpr auto b_active_talking = 0x9; // Name: m_bActiveTalking Offset: 0x9
					constexpr auto layer_animations = 0x10; // Name: m_layerAnimations Offset: 0x10
					constexpr auto fl_intensity = 0x28; // Name: m_flIntensity Offset: 0x28
					constexpr auto fl_duration_scale = 0x30; // Name: m_flDurationScale Offset: 0x30
					constexpr auto b_scale_with_ints = 0x38; // Name: m_bScaleWithInts Offset: 0x38
					constexpr auto fl_next_start = 0x3C; // Name: m_flNextStart Offset: 0x3C
					constexpr auto fl_start_offset = 0x44; // Name: m_flStartOffset Offset: 0x44
					constexpr auto fl_end_offset = 0x4C; // Name: m_flEndOffset Offset: 0x4C
					constexpr auto fl_fade_in = 0x54; // Name: m_flFadeIn Offset: 0x54
					constexpr auto fl_fade_out = 0x58; // Name: m_flFadeOut Offset: 0x58
				} // namespace MoodAnimationLayer_t

				namespace AnimationSnapshotBase_t {
					constexpr auto fl_real_time = 0x0; // Name: m_flRealTime Offset: 0x0
					constexpr auto root_to_world = 0x10; // Name: m_rootToWorld Offset: 0x10
					constexpr auto b_bones_in_world_space = 0x40; // Name: m_bBonesInWorldSpace Offset: 0x40
					constexpr auto bone_setup_mask = 0x48; // Name: m_boneSetupMask Offset: 0x48
					constexpr auto bone_transforms = 0x60; // Name: m_boneTransforms Offset: 0x60
					constexpr auto flex_controllers = 0x78; // Name: m_flexControllers Offset: 0x78
					constexpr auto snapshot_type = 0x90; // Name: m_SnapshotType Offset: 0x90
					constexpr auto b_has_decode_dump = 0x94; // Name: m_bHasDecodeDump Offset: 0x94
					constexpr auto decode_dump = 0x98; // Name: m_DecodeDump Offset: 0x98
				} // namespace AnimationSnapshotBase_t

				namespace CCompressorGroup {
					constexpr auto n_total_element_count = 0x0; // Name: m_nTotalElementCount Offset: 0x0
					constexpr auto sz_channel_class = 0x8; // Name: m_szChannelClass Offset: 0x8
					constexpr auto sz_variable_name = 0x20; // Name: m_szVariableName Offset: 0x20
					constexpr auto n_type = 0x38; // Name: m_nType Offset: 0x38
					constexpr auto n_flags = 0x50; // Name: m_nFlags Offset: 0x50
					constexpr auto sz_grouping = 0x68; // Name: m_szGrouping Offset: 0x68
					constexpr auto n_compressor_index = 0x80; // Name: m_nCompressorIndex Offset: 0x80
					constexpr auto sz_element_names = 0x98; // Name: m_szElementNames Offset: 0x98
					constexpr auto n_element_unique_id = 0xB0; // Name: m_nElementUniqueID Offset: 0xB0
					constexpr auto n_element_mask = 0xC8; // Name: m_nElementMask Offset: 0xC8
					constexpr auto vector_compressor = 0xF8; // Name: m_vectorCompressor Offset: 0xF8
					constexpr auto quaternion_compressor = 0x110; // Name: m_quaternionCompressor Offset: 0x110
					constexpr auto int_compressor = 0x128; // Name: m_intCompressor Offset: 0x128
					constexpr auto bool_compressor = 0x140; // Name: m_boolCompressor Offset: 0x140
					constexpr auto color_compressor = 0x158; // Name: m_colorCompressor Offset: 0x158
					constexpr auto vector2_dcompressor = 0x170; // Name: m_vector2DCompressor Offset: 0x170
					constexpr auto vector4_dcompressor = 0x188; // Name: m_vector4DCompressor Offset: 0x188
				} // namespace CCompressorGroup

				namespace CAnimEventDefinition {
					constexpr auto n_frame = 0x8; // Name: m_nFrame Offset: 0x8
					constexpr auto n_end_frame = 0xC; // Name: m_nEndFrame Offset: 0xC
					constexpr auto fl_cycle = 0x10; // Name: m_flCycle Offset: 0x10
					constexpr auto fl_duration = 0x14; // Name: m_flDuration Offset: 0x14
					constexpr auto event_data = 0x18; // Name: m_EventData Offset: 0x18
					constexpr auto s_legacy_options = 0x28; // Name: m_sLegacyOptions Offset: 0x28
					constexpr auto s_event_name = 0x38; // Name: m_sEventName Offset: 0x38
				} // namespace CAnimEventDefinition

				namespace CAnimMovement {
					constexpr auto endframe = 0x0; // Name: endframe Offset: 0x0
					constexpr auto motionflags = 0x4; // Name: motionflags Offset: 0x4
					constexpr auto v0 = 0x8; // Name: v0 Offset: 0x8
					constexpr auto v1 = 0xC; // Name: v1 Offset: 0xC
					constexpr auto angle = 0x10; // Name: angle Offset: 0x10
					constexpr auto vector = 0x14; // Name: vector Offset: 0x14
					constexpr auto position = 0x20; // Name: position Offset: 0x20
				} // namespace CAnimMovement

				namespace CAnimDataChannelDesc {
					constexpr auto sz_channel_class = 0x0; // Name: m_szChannelClass Offset: 0x0
					constexpr auto sz_variable_name = 0x10; // Name: m_szVariableName Offset: 0x10
					constexpr auto n_flags = 0x20; // Name: m_nFlags Offset: 0x20
					constexpr auto n_type = 0x24; // Name: m_nType Offset: 0x24
					constexpr auto sz_grouping = 0x28; // Name: m_szGrouping Offset: 0x28
					constexpr auto sz_description = 0x38; // Name: m_szDescription Offset: 0x38
					constexpr auto sz_element_name_array = 0x48; // Name: m_szElementNameArray Offset: 0x48
					constexpr auto n_element_index_array = 0x60; // Name: m_nElementIndexArray Offset: 0x60
					constexpr auto n_element_mask_array = 0x78; // Name: m_nElementMaskArray Offset: 0x78
				} // namespace CAnimDataChannelDesc

				namespace CAnimDesc_Flag {
					constexpr auto b_looping = 0x0; // Name: m_bLooping Offset: 0x0
					constexpr auto b_all_zeros = 0x1; // Name: m_bAllZeros Offset: 0x1
					constexpr auto b_hidden = 0x2; // Name: m_bHidden Offset: 0x2
					constexpr auto b_delta = 0x3; // Name: m_bDelta Offset: 0x3
					constexpr auto b_legacy_worldspace = 0x4; // Name: m_bLegacyWorldspace Offset: 0x4
					constexpr auto b_model_doc = 0x5; // Name: m_bModelDoc Offset: 0x5
					constexpr auto b_implicit_seq_ignore_delta = 0x6; // Name: m_bImplicitSeqIgnoreDelta Offset: 0x6
					constexpr auto b_anim_graph_additive = 0x7; // Name: m_bAnimGraphAdditive Offset: 0x7
				} // namespace CAnimDesc_Flag

				namespace CAnimLocalHierarchy {
					constexpr auto s_bone = 0x0; // Name: m_sBone Offset: 0x0
					constexpr auto s_new_parent = 0x10; // Name: m_sNewParent Offset: 0x10
					constexpr auto n_start_frame = 0x20; // Name: m_nStartFrame Offset: 0x20
					constexpr auto n_peak_frame = 0x24; // Name: m_nPeakFrame Offset: 0x24
					constexpr auto n_tail_frame = 0x28; // Name: m_nTailFrame Offset: 0x28
					constexpr auto n_end_frame = 0x2C; // Name: m_nEndFrame Offset: 0x2C
				} // namespace CAnimLocalHierarchy

				namespace CSequenceGroupData {
					constexpr auto s_name = 0x10; // Name: m_sName Offset: 0x10
					constexpr auto n_flags = 0x20; // Name: m_nFlags Offset: 0x20
					constexpr auto local_sequence_name_array = 0x28; // Name: m_localSequenceNameArray Offset: 0x28
					constexpr auto local_s1_seq_desc_array = 0x40; // Name: m_localS1SeqDescArray Offset: 0x40
					constexpr auto local_multi_seq_desc_array = 0x58; // Name: m_localMultiSeqDescArray Offset: 0x58
					constexpr auto local_synth_anim_desc_array = 0x70; // Name: m_localSynthAnimDescArray Offset: 0x70
					constexpr auto local_cmd_seq_desc_array = 0x88; // Name: m_localCmdSeqDescArray Offset: 0x88
					constexpr auto local_bone_mask_array = 0xA0; // Name: m_localBoneMaskArray Offset: 0xA0
					constexpr auto local_scale_set_array = 0xB8; // Name: m_localScaleSetArray Offset: 0xB8
					constexpr auto local_bone_name_array = 0xD0; // Name: m_localBoneNameArray Offset: 0xD0
					constexpr auto local_node_name = 0xE8; // Name: m_localNodeName Offset: 0xE8
					constexpr auto local_pose_param_array = 0xF8; // Name: m_localPoseParamArray Offset: 0xF8
					constexpr auto key_values = 0x110; // Name: m_keyValues Offset: 0x110
					constexpr auto local_ikautoplay_lock_array = 0x120; // Name: m_localIKAutoplayLockArray Offset: 0x120
				} // namespace CSequenceGroupData

				namespace CAnimBone {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
					constexpr auto parent = 0x10; // Name: m_parent Offset: 0x10
					constexpr auto pos = 0x14; // Name: m_pos Offset: 0x14
					constexpr auto quat = 0x20; // Name: m_quat Offset: 0x20
					constexpr auto scale = 0x30; // Name: m_scale Offset: 0x30
					constexpr auto q_alignment = 0x34; // Name: m_qAlignment Offset: 0x34
					constexpr auto flags = 0x44; // Name: m_flags Offset: 0x44
				} // namespace CAnimBone

				namespace CAnimEnum {
					constexpr auto value = 0x0; // Name: m_value Offset: 0x0
				} // namespace CAnimEnum

				namespace CAnimDecoder {
					constexpr auto sz_name = 0x0; // Name: m_szName Offset: 0x0
					constexpr auto n_version = 0x10; // Name: m_nVersion Offset: 0x10
					constexpr auto n_type = 0x14; // Name: m_nType Offset: 0x14
				} // namespace CAnimDecoder

				namespace CAnimFrameSegment {
					constexpr auto n_unique_frame_index = 0x0; // Name: m_nUniqueFrameIndex Offset: 0x0
					constexpr auto n_local_element_masks = 0x4; // Name: m_nLocalElementMasks Offset: 0x4
					constexpr auto n_local_channel = 0x8; // Name: m_nLocalChannel Offset: 0x8
					constexpr auto container = 0x10; // Name: m_container Offset: 0x10
				} // namespace CAnimFrameSegment

				namespace CSeqMultiFetch {
					constexpr auto flags = 0x0; // Name: m_flags Offset: 0x0
					constexpr auto local_reference_array = 0x8; // Name: m_localReferenceArray Offset: 0x8
					constexpr auto n_group_size = 0x20; // Name: m_nGroupSize Offset: 0x20
					constexpr auto n_local_pose = 0x28; // Name: m_nLocalPose Offset: 0x28
					constexpr auto pose_key_array0 = 0x30; // Name: m_poseKeyArray0 Offset: 0x30
					constexpr auto pose_key_array1 = 0x48; // Name: m_poseKeyArray1 Offset: 0x48
					constexpr auto n_local_cycle_pose_parameter = 0x60; // Name: m_nLocalCyclePoseParameter Offset: 0x60
					constexpr auto b_calculate_pose_parameters = 0x64; // Name: m_bCalculatePoseParameters Offset: 0x64
					constexpr auto b_fixed_blend_weight = 0x65; // Name: m_bFixedBlendWeight Offset: 0x65
					constexpr auto fl_fixed_blend_weight_vals = 0x68; // Name: m_flFixedBlendWeightVals Offset: 0x68
				} // namespace CSeqMultiFetch

				namespace CAnimUserDifference {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
					constexpr auto n_type = 0x10; // Name: m_nType Offset: 0x10
				} // namespace CAnimUserDifference

				namespace CAnimMorphDifference {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
				} // namespace CAnimMorphDifference

				namespace CAnimationGroup {
					constexpr auto n_flags = 0x10; // Name: m_nFlags Offset: 0x10
					constexpr auto name = 0x18; // Name: m_name Offset: 0x18
					constexpr auto local_hanim_array__handle = 0x60; // Name: m_localHAnimArray_Handle Offset: 0x60
					constexpr auto included_group_array__handle = 0x78; // Name: m_includedGroupArray_Handle Offset: 0x78
					constexpr auto direct_hseq_group__handle = 0x90; // Name: m_directHSeqGroup_Handle Offset: 0x90
					constexpr auto decode_key = 0x98; // Name: m_decodeKey Offset: 0x98
					constexpr auto sz_scripts = 0x110; // Name: m_szScripts Offset: 0x110
					constexpr auto additional_ext_refs = 0x128; // Name: m_AdditionalExtRefs Offset: 0x128
				} // namespace CAnimationGroup

				namespace CSeqS1SeqDesc {
					constexpr auto s_name = 0x0; // Name: m_sName Offset: 0x0
					constexpr auto flags = 0x10; // Name: m_flags Offset: 0x10
					constexpr auto fetch = 0x20; // Name: m_fetch Offset: 0x20
					constexpr auto n_local_weightlist = 0x90; // Name: m_nLocalWeightlist Offset: 0x90
					constexpr auto auto_layer_array = 0x98; // Name: m_autoLayerArray Offset: 0x98
					constexpr auto iklock_array = 0xB0; // Name: m_IKLockArray Offset: 0xB0
					constexpr auto transition = 0xC8; // Name: m_transition Offset: 0xC8
					constexpr auto sequence_keys = 0xD0; // Name: m_SequenceKeys Offset: 0xD0
					constexpr auto legacy_key_value_text = 0xE0; // Name: m_LegacyKeyValueText Offset: 0xE0
					constexpr auto activity_array = 0xF0; // Name: m_activityArray Offset: 0xF0
					constexpr auto foot_motion = 0x108; // Name: m_footMotion Offset: 0x108
				} // namespace CSeqS1SeqDesc

				namespace CAnimSequenceParams {
					constexpr auto fl_fade_in_time = 0x0; // Name: m_flFadeInTime Offset: 0x0
					constexpr auto fl_fade_out_time = 0x4; // Name: m_flFadeOutTime Offset: 0x4
				} // namespace CAnimSequenceParams

				namespace CAnimKeyData {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
					constexpr auto bone_array = 0x10; // Name: m_boneArray Offset: 0x10
					constexpr auto user_array = 0x28; // Name: m_userArray Offset: 0x28
					constexpr auto morph_array = 0x40; // Name: m_morphArray Offset: 0x40
					constexpr auto n_channel_elements = 0x58; // Name: m_nChannelElements Offset: 0x58
					constexpr auto data_channel_array = 0x60; // Name: m_dataChannelArray Offset: 0x60
				} // namespace CAnimKeyData

				namespace CSeqIKLock {
					constexpr auto fl_pos_weight = 0x0; // Name: m_flPosWeight Offset: 0x0
					constexpr auto fl_angle_weight = 0x4; // Name: m_flAngleWeight Offset: 0x4
					constexpr auto n_local_bone = 0x8; // Name: m_nLocalBone Offset: 0x8
					constexpr auto b_bones_oriented_along_positive_x = 0xA; // Name: m_bBonesOrientedAlongPositiveX Offset: 0xA
				} // namespace CSeqIKLock

				namespace CAnimDesc {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
					constexpr auto flags = 0x10; // Name: m_flags Offset: 0x10
					constexpr auto fps = 0x18; // Name: fps Offset: 0x18
					constexpr auto data = 0x20; // Name: m_Data Offset: 0x20
					constexpr auto movement_array = 0xF8; // Name: m_movementArray Offset: 0xF8
					constexpr auto x_initial_offset = 0x110; // Name: m_xInitialOffset Offset: 0x110
					constexpr auto event_array = 0x130; // Name: m_eventArray Offset: 0x130
					constexpr auto activity_array = 0x148; // Name: m_activityArray Offset: 0x148
					constexpr auto hierarchy_array = 0x160; // Name: m_hierarchyArray Offset: 0x160
					constexpr auto framestalltime = 0x178; // Name: framestalltime Offset: 0x178
					constexpr auto vec_root_min = 0x17C; // Name: m_vecRootMin Offset: 0x17C
					constexpr auto vec_root_max = 0x188; // Name: m_vecRootMax Offset: 0x188
					constexpr auto vec_bone_world_min = 0x198; // Name: m_vecBoneWorldMin Offset: 0x198
					constexpr auto vec_bone_world_max = 0x1B0; // Name: m_vecBoneWorldMax Offset: 0x1B0
					constexpr auto sequence_params = 0x1C8; // Name: m_sequenceParams Offset: 0x1C8
				} // namespace CAnimDesc

				namespace CSeqCmdSeqDesc {
					constexpr auto s_name = 0x0; // Name: m_sName Offset: 0x0
					constexpr auto flags = 0x10; // Name: m_flags Offset: 0x10
					constexpr auto transition = 0x1C; // Name: m_transition Offset: 0x1C
					constexpr auto n_frame_range_sequence = 0x24; // Name: m_nFrameRangeSequence Offset: 0x24
					constexpr auto n_frame_count = 0x26; // Name: m_nFrameCount Offset: 0x26
					constexpr auto fl_fps = 0x28; // Name: m_flFPS Offset: 0x28
					constexpr auto n_sub_cycles = 0x2C; // Name: m_nSubCycles Offset: 0x2C
					constexpr auto num_local_results = 0x2E; // Name: m_numLocalResults Offset: 0x2E
					constexpr auto cmd_layer_array = 0x30; // Name: m_cmdLayerArray Offset: 0x30
					constexpr auto event_array = 0x48; // Name: m_eventArray Offset: 0x48
					constexpr auto activity_array = 0x60; // Name: m_activityArray Offset: 0x60
					constexpr auto pose_setting_array = 0x78; // Name: m_poseSettingArray Offset: 0x78
				} // namespace CSeqCmdSeqDesc

				namespace CSeqScaleSet {
					constexpr auto s_name = 0x0; // Name: m_sName Offset: 0x0
					constexpr auto b_root_offset = 0x10; // Name: m_bRootOffset Offset: 0x10
					constexpr auto v_root_offset = 0x14; // Name: m_vRootOffset Offset: 0x14
					constexpr auto n_local_bone_array = 0x20; // Name: m_nLocalBoneArray Offset: 0x20
					constexpr auto fl_bone_scale_array = 0x38; // Name: m_flBoneScaleArray Offset: 0x38
				} // namespace CSeqScaleSet

				namespace CSeqAutoLayer {
					constexpr auto n_local_reference = 0x0; // Name: m_nLocalReference Offset: 0x0
					constexpr auto n_local_pose = 0x2; // Name: m_nLocalPose Offset: 0x2
					constexpr auto flags = 0x4; // Name: m_flags Offset: 0x4
					constexpr auto start = 0xC; // Name: m_start Offset: 0xC
					constexpr auto peak = 0x10; // Name: m_peak Offset: 0x10
					constexpr auto tail = 0x14; // Name: m_tail Offset: 0x14
					constexpr auto end = 0x18; // Name: m_end Offset: 0x18
				} // namespace CSeqAutoLayer

				namespace CAnimData {
					constexpr auto name = 0x10; // Name: m_name Offset: 0x10
					constexpr auto anim_array = 0x20; // Name: m_animArray Offset: 0x20
					constexpr auto decoder_array = 0x38; // Name: m_decoderArray Offset: 0x38
					constexpr auto n_max_unique_frame_index = 0x50; // Name: m_nMaxUniqueFrameIndex Offset: 0x50
					constexpr auto segment_array = 0x58; // Name: m_segmentArray Offset: 0x58
				} // namespace CAnimData

				namespace CMoodVData {
					constexpr auto s_model_name = 0x0; // Name: m_sModelName Offset: 0x0
					constexpr auto n_mood_type = 0xE0; // Name: m_nMoodType Offset: 0xE0
					constexpr auto animation_layers = 0xE8; // Name: m_animationLayers Offset: 0xE8
				} // namespace CMoodVData
			}

			namespace animgraphlib
			{

				namespace CDemoSettingsComponentUpdater {
					constexpr auto settings = 0x30; // Name: m_settings Offset: 0x30
				} // namespace CDemoSettingsComponentUpdater

				namespace CZeroPoseUpdateNode {
				} // namespace CZeroPoseUpdateNode

				namespace CMotionGraphUpdateNode {
					constexpr auto p_motion_graph = 0x58; // Name: m_pMotionGraph Offset: 0x58
				} // namespace CMotionGraphUpdateNode

				namespace CDampedPathAnimMotorUpdater {
					constexpr auto fl_anticipation_time = 0x2C; // Name: m_flAnticipationTime Offset: 0x2C
					constexpr auto fl_min_speed_scale = 0x30; // Name: m_flMinSpeedScale Offset: 0x30
					constexpr auto h_anticipation_pos_param = 0x34; // Name: m_hAnticipationPosParam Offset: 0x34
					constexpr auto h_anticipation_heading_param = 0x36; // Name: m_hAnticipationHeadingParam Offset: 0x36
					constexpr auto fl_spring_constant = 0x38; // Name: m_flSpringConstant Offset: 0x38
					constexpr auto fl_min_spring_tension = 0x3C; // Name: m_flMinSpringTension Offset: 0x3C
					constexpr auto fl_max_spring_tension = 0x40; // Name: m_flMaxSpringTension Offset: 0x40
				} // namespace CDampedPathAnimMotorUpdater

				namespace CPathHelperUpdateNode {
					constexpr auto fl_stopping_radius = 0x68; // Name: m_flStoppingRadius Offset: 0x68
					constexpr auto fl_stopping_speed_scale = 0x6C; // Name: m_flStoppingSpeedScale Offset: 0x6C
				} // namespace CPathHelperUpdateNode

				namespace FootFixedSettings {
					constexpr auto trace_settings = 0x0; // Name: m_traceSettings Offset: 0x0
					constexpr auto v_foot_base_bind_pose_position_ms = 0x10; // Name: m_vFootBaseBindPosePositionMS Offset: 0x10
					constexpr auto fl_foot_base_length = 0x20; // Name: m_flFootBaseLength Offset: 0x20
					constexpr auto fl_max_rotation_left = 0x24; // Name: m_flMaxRotationLeft Offset: 0x24
					constexpr auto fl_max_rotation_right = 0x28; // Name: m_flMaxRotationRight Offset: 0x28
					constexpr auto footstep_landed_tag_index = 0x2C; // Name: m_footstepLandedTagIndex Offset: 0x2C
					constexpr auto b_enable_tracing = 0x30; // Name: m_bEnableTracing Offset: 0x30
					constexpr auto fl_trace_angle_blend = 0x34; // Name: m_flTraceAngleBlend Offset: 0x34
					constexpr auto n_disable_tag_index = 0x38; // Name: m_nDisableTagIndex Offset: 0x38
					constexpr auto n_foot_index = 0x3C; // Name: m_nFootIndex Offset: 0x3C
				} // namespace FootFixedSettings

				namespace CHitReactUpdateNode {
					constexpr auto op_fixed_settings = 0x68; // Name: m_opFixedSettings Offset: 0x68
					constexpr auto trigger_param = 0xB4; // Name: m_triggerParam Offset: 0xB4
					constexpr auto hit_bone_param = 0xB6; // Name: m_hitBoneParam Offset: 0xB6
					constexpr auto hit_offset_param = 0xB8; // Name: m_hitOffsetParam Offset: 0xB8
					constexpr auto hit_direction_param = 0xBA; // Name: m_hitDirectionParam Offset: 0xBA
					constexpr auto hit_strength_param = 0xBC; // Name: m_hitStrengthParam Offset: 0xBC
					constexpr auto fl_min_delay_between_hits = 0xC0; // Name: m_flMinDelayBetweenHits Offset: 0xC0
					constexpr auto b_reset_child = 0xC4; // Name: m_bResetChild Offset: 0xC4
				} // namespace CHitReactUpdateNode

				namespace CSlowDownOnSlopesUpdateNode {
					constexpr auto fl_slow_down_strength = 0x68; // Name: m_flSlowDownStrength Offset: 0x68
				} // namespace CSlowDownOnSlopesUpdateNode

				namespace CBodyGroupSetting {
					constexpr auto body_group_name = 0x0; // Name: m_BodyGroupName Offset: 0x0
					constexpr auto n_body_group_option = 0x8; // Name: m_nBodyGroupOption Offset: 0x8
				} // namespace CBodyGroupSetting

				namespace CAnimParameterBase {
					constexpr auto name = 0x18; // Name: m_name Offset: 0x18
					constexpr auto s_comment = 0x20; // Name: m_sComment Offset: 0x20
					constexpr auto group = 0x28; // Name: m_group Offset: 0x28
					constexpr auto id = 0x30; // Name: m_id Offset: 0x30
					constexpr auto component_name = 0x48; // Name: m_componentName Offset: 0x48
					constexpr auto b_networking_requested = 0x68; // Name: m_bNetworkingRequested Offset: 0x68
					constexpr auto b_is_referenced = 0x69; // Name: m_bIsReferenced Offset: 0x69
				} // namespace CAnimParameterBase

				namespace CIntAnimParameter {
					constexpr auto default_value = 0x80; // Name: m_defaultValue Offset: 0x80
					constexpr auto min_value = 0x84; // Name: m_minValue Offset: 0x84
					constexpr auto max_value = 0x88; // Name: m_maxValue Offset: 0x88
				} // namespace CIntAnimParameter

				namespace CSequenceFinishedAnimTag {
					constexpr auto sequence_name = 0x58; // Name: m_sequenceName Offset: 0x58
				} // namespace CSequenceFinishedAnimTag

				namespace COrientationWarpUpdateNode {
					constexpr auto h_facing_position_parameter = 0x6C; // Name: m_hFacingPositionParameter Offset: 0x6C
					constexpr auto turn_damping = 0x70; // Name: m_turnDamping Offset: 0x70
				} // namespace COrientationWarpUpdateNode

				namespace CAnimNodePath {
					constexpr auto path = 0x0; // Name: m_path Offset: 0x0
					constexpr auto n_count = 0x2C; // Name: m_nCount Offset: 0x2C
				} // namespace CAnimNodePath

				namespace CAnimTagManagerUpdater {
					constexpr auto tags = 0x38; // Name: m_tags Offset: 0x38
				} // namespace CAnimTagManagerUpdater

				namespace MotionBlendItem {
					constexpr auto p_child = 0x0; // Name: m_pChild Offset: 0x0
					constexpr auto fl_key_value = 0x8; // Name: m_flKeyValue Offset: 0x8
				} // namespace MotionBlendItem

				namespace CAnimationGraphVisualizerLine {
					constexpr auto v_ws_position_start = 0x40; // Name: m_vWsPositionStart Offset: 0x40
					constexpr auto v_ws_position_end = 0x50; // Name: m_vWsPositionEnd Offset: 0x50
					constexpr auto color = 0x60; // Name: m_Color Offset: 0x60
				} // namespace CAnimationGraphVisualizerLine

				namespace CInputStreamUpdateNode {
				} // namespace CInputStreamUpdateNode

				namespace CAnimGraphDebugReplay {
					constexpr auto anim_graph_file_name = 0x40; // Name: m_animGraphFileName Offset: 0x40
					constexpr auto frame_list = 0x48; // Name: m_frameList Offset: 0x48
					constexpr auto start_index = 0x60; // Name: m_startIndex Offset: 0x60
					constexpr auto write_index = 0x64; // Name: m_writeIndex Offset: 0x64
					constexpr auto frame_count = 0x68; // Name: m_frameCount Offset: 0x68
				} // namespace CAnimGraphDebugReplay

				namespace CSpeedScaleUpdateNode {
					constexpr auto param_index = 0x68; // Name: m_paramIndex Offset: 0x68
				} // namespace CSpeedScaleUpdateNode

				namespace SampleCode {
					constexpr auto sub_code = 0x0; // Name: m_subCode Offset: 0x0
				} // namespace SampleCode

				namespace CStateNodeTransitionData {
					constexpr auto curve = 0x0; // Name: m_curve Offset: 0x0
					constexpr auto blend_duration = 0x8; // Name: m_blendDuration Offset: 0x8
					constexpr auto reset_cycle_value = 0x10; // Name: m_resetCycleValue Offset: 0x10
					constexpr auto b_reset = 0x0; // Name: m_bReset Offset: 0x0
					constexpr auto reset_cycle_option = 0x0; // Name: m_resetCycleOption Offset: 0x0
				} // namespace CStateNodeTransitionData

				namespace CBonePositionMetricEvaluator {
					constexpr auto n_bone_index = 0x50; // Name: m_nBoneIndex Offset: 0x50
				} // namespace CBonePositionMetricEvaluator

				namespace CCachedPose {
					constexpr auto transforms = 0x8; // Name: m_transforms Offset: 0x8
					constexpr auto morph_weights = 0x20; // Name: m_morphWeights Offset: 0x20
					constexpr auto h_sequence = 0x38; // Name: m_hSequence Offset: 0x38
					constexpr auto fl_cycle = 0x3C; // Name: m_flCycle Offset: 0x3C
				} // namespace CCachedPose

				namespace CVectorQuantizer {
					constexpr auto centroid_vectors = 0x0; // Name: m_centroidVectors Offset: 0x0
					constexpr auto n_centroids = 0x18; // Name: m_nCentroids Offset: 0x18
					constexpr auto n_dimensions = 0x1C; // Name: m_nDimensions Offset: 0x1C
				} // namespace CVectorQuantizer

				namespace CTaskStatusAnimTag {
				} // namespace CTaskStatusAnimTag

				namespace CMotionGraphConfig {
					constexpr auto param_values = 0x0; // Name: m_paramValues Offset: 0x0
					constexpr auto fl_duration = 0x10; // Name: m_flDuration Offset: 0x10
					constexpr auto n_motion_index = 0x14; // Name: m_nMotionIndex Offset: 0x14
					constexpr auto n_sample_start = 0x18; // Name: m_nSampleStart Offset: 0x18
					constexpr auto n_sample_count = 0x1C; // Name: m_nSampleCount Offset: 0x1C
				} // namespace CMotionGraphConfig

				namespace StanceInfo_t {
					constexpr auto v_position = 0x0; // Name: m_vPosition Offset: 0x0
					constexpr auto fl_direction = 0xC; // Name: m_flDirection Offset: 0xC
				} // namespace StanceInfo_t

				namespace TwoBoneIKSettings_t {
					constexpr auto end_effector_type = 0x0; // Name: m_endEffectorType Offset: 0x0
					constexpr auto end_effector_attachment = 0x10; // Name: m_endEffectorAttachment Offset: 0x10
					constexpr auto target_type = 0x90; // Name: m_targetType Offset: 0x90
					constexpr auto target_attachment = 0xA0; // Name: m_targetAttachment Offset: 0xA0
					constexpr auto target_bone_index = 0x120; // Name: m_targetBoneIndex Offset: 0x120
					constexpr auto h_position_param = 0x124; // Name: m_hPositionParam Offset: 0x124
					constexpr auto h_rotation_param = 0x126; // Name: m_hRotationParam Offset: 0x126
					constexpr auto b_always_use_fallback_hinge = 0x128; // Name: m_bAlwaysUseFallbackHinge Offset: 0x128
					constexpr auto v_ls_fallback_hinge_axis = 0x130; // Name: m_vLsFallbackHingeAxis Offset: 0x130
					constexpr auto n_fixed_bone_index = 0x140; // Name: m_nFixedBoneIndex Offset: 0x140
					constexpr auto n_middle_bone_index = 0x144; // Name: m_nMiddleBoneIndex Offset: 0x144
					constexpr auto n_end_bone_index = 0x148; // Name: m_nEndBoneIndex Offset: 0x148
					constexpr auto b_match_target_orientation = 0x14C; // Name: m_bMatchTargetOrientation Offset: 0x14C
					constexpr auto b_constrain_twist = 0x14D; // Name: m_bConstrainTwist Offset: 0x14D
					constexpr auto fl_max_twist = 0x150; // Name: m_flMaxTwist Offset: 0x150
				} // namespace TwoBoneIKSettings_t

				namespace CMotionSearchNode {
					constexpr auto children = 0x0; // Name: m_children Offset: 0x0
					constexpr auto quantizer = 0x18; // Name: m_quantizer Offset: 0x18
					constexpr auto sample_codes = 0x38; // Name: m_sampleCodes Offset: 0x38
					constexpr auto sample_indices = 0x50; // Name: m_sampleIndices Offset: 0x50
					constexpr auto selectable_samples = 0x68; // Name: m_selectableSamples Offset: 0x68
				} // namespace CMotionSearchNode

				namespace CSequenceUpdateNodeBase {
					constexpr auto playback_speed = 0x64; // Name: m_playbackSpeed Offset: 0x64
					constexpr auto b_loop = 0x68; // Name: m_bLoop Offset: 0x68
				} // namespace CSequenceUpdateNodeBase

				namespace CTimeRemainingMetricEvaluator {
					constexpr auto b_match_by_time_remaining = 0x50; // Name: m_bMatchByTimeRemaining Offset: 0x50
					constexpr auto fl_max_time_remaining = 0x54; // Name: m_flMaxTimeRemaining Offset: 0x54
					constexpr auto b_filter_by_time_remaining = 0x58; // Name: m_bFilterByTimeRemaining Offset: 0x58
					constexpr auto fl_min_time_remaining = 0x5C; // Name: m_flMinTimeRemaining Offset: 0x5C
				} // namespace CTimeRemainingMetricEvaluator

				namespace CFootAdjustmentUpdateNode {
					constexpr auto clips = 0x70; // Name: m_clips Offset: 0x70
					constexpr auto h_base_pose_cache_handle = 0x88; // Name: m_hBasePoseCacheHandle Offset: 0x88
					constexpr auto facing_target = 0x8C; // Name: m_facingTarget Offset: 0x8C
					constexpr auto fl_turn_time_min = 0x90; // Name: m_flTurnTimeMin Offset: 0x90
					constexpr auto fl_turn_time_max = 0x94; // Name: m_flTurnTimeMax Offset: 0x94
					constexpr auto fl_step_height_max = 0x98; // Name: m_flStepHeightMax Offset: 0x98
					constexpr auto fl_step_height_max_angle = 0x9C; // Name: m_flStepHeightMaxAngle Offset: 0x9C
					constexpr auto b_reset_child = 0xA0; // Name: m_bResetChild Offset: 0xA0
					constexpr auto b_animation_driven = 0xA1; // Name: m_bAnimationDriven Offset: 0xA1
				} // namespace CFootAdjustmentUpdateNode

				namespace CAnimScriptManager {
					constexpr auto script_info = 0x10; // Name: m_scriptInfo Offset: 0x10
				} // namespace CAnimScriptManager

				namespace CAimCameraUpdateNode {
					constexpr auto h_parameter_position = 0x68; // Name: m_hParameterPosition Offset: 0x68
					constexpr auto h_parameter_orientation = 0x6A; // Name: m_hParameterOrientation Offset: 0x6A
					constexpr auto h_parameter_spine_rotation_weight = 0x6C; // Name: m_hParameterSpineRotationWeight Offset: 0x6C
					constexpr auto h_parameter_pelvis_offset = 0x6E; // Name: m_hParameterPelvisOffset Offset: 0x6E
					constexpr auto h_parameter_use_ik = 0x70; // Name: m_hParameterUseIK Offset: 0x70
					constexpr auto h_parameter_camera_only = 0x72; // Name: m_hParameterCameraOnly Offset: 0x72
					constexpr auto h_parameter_weapon_depenetration_distance = 0x74; // Name: m_hParameterWeaponDepenetrationDistance Offset: 0x74
					constexpr auto h_parameter_weapon_depenetration_delta = 0x76; // Name: m_hParameterWeaponDepenetrationDelta Offset: 0x76
					constexpr auto h_parameter_camera_clearance_distance = 0x78; // Name: m_hParameterCameraClearanceDistance Offset: 0x78
					constexpr auto op_fixed_settings = 0x80; // Name: m_opFixedSettings Offset: 0x80
				} // namespace CAimCameraUpdateNode

				namespace ConfigIndex {
					constexpr auto n_group = 0x0; // Name: m_nGroup Offset: 0x0
					constexpr auto n_config = 0x2; // Name: m_nConfig Offset: 0x2
				} // namespace ConfigIndex

				namespace MotionIndex {
					constexpr auto n_group = 0x0; // Name: m_nGroup Offset: 0x0
					constexpr auto n_motion = 0x2; // Name: m_nMotion Offset: 0x2
				} // namespace MotionIndex

				namespace FollowAttachmentSettings_t {
					constexpr auto attachment = 0x0; // Name: m_attachment Offset: 0x0
					constexpr auto bone_index = 0x80; // Name: m_boneIndex Offset: 0x80
					constexpr auto b_match_translation = 0x84; // Name: m_bMatchTranslation Offset: 0x84
					constexpr auto b_match_rotation = 0x85; // Name: m_bMatchRotation Offset: 0x85
				} // namespace FollowAttachmentSettings_t

				namespace CBoneVelocityMetricEvaluator {
					constexpr auto n_bone_index = 0x50; // Name: m_nBoneIndex Offset: 0x50
				} // namespace CBoneVelocityMetricEvaluator

				namespace CSequenceUpdateNode {
					constexpr auto h_sequence = 0x70; // Name: m_hSequence Offset: 0x70
					constexpr auto duration = 0x74; // Name: m_duration Offset: 0x74
					constexpr auto param_spans = 0x78; // Name: m_paramSpans Offset: 0x78
					constexpr auto tags = 0x90; // Name: m_tags Offset: 0x90
				} // namespace CSequenceUpdateNode

				namespace CAnimTagBase {
					constexpr auto name = 0x18; // Name: m_name Offset: 0x18
					constexpr auto s_comment = 0x20; // Name: m_sComment Offset: 0x20
					constexpr auto group = 0x28; // Name: m_group Offset: 0x28
					constexpr auto tag_id = 0x30; // Name: m_tagID Offset: 0x30
					constexpr auto b_is_referenced = 0x48; // Name: m_bIsReferenced Offset: 0x48
				} // namespace CAnimTagBase

				namespace CFutureVelocityMetricEvaluator {
					constexpr auto fl_distance = 0x50; // Name: m_flDistance Offset: 0x50
					constexpr auto fl_stopping_distance = 0x54; // Name: m_flStoppingDistance Offset: 0x54
					constexpr auto fl_target_speed = 0x58; // Name: m_flTargetSpeed Offset: 0x58
					constexpr auto e_mode = 0x5C; // Name: m_eMode Offset: 0x5C
				} // namespace CFutureVelocityMetricEvaluator

				namespace IKBoneNameAndIndex_t {
					constexpr auto name = 0x0; // Name: m_Name Offset: 0x0
				} // namespace IKBoneNameAndIndex_t

				namespace CStanceScaleUpdateNode {
					constexpr auto h_param = 0x68; // Name: m_hParam Offset: 0x68
				} // namespace CStanceScaleUpdateNode

				namespace HitReactFixedSettings_t {
					constexpr auto n_weight_list_index = 0x0; // Name: m_nWeightListIndex Offset: 0x0
					constexpr auto n_effected_bone_count = 0x4; // Name: m_nEffectedBoneCount Offset: 0x4
					constexpr auto fl_max_impact_force = 0x8; // Name: m_flMaxImpactForce Offset: 0x8
					constexpr auto fl_min_impact_force = 0xC; // Name: m_flMinImpactForce Offset: 0xC
					constexpr auto fl_whip_impact_scale = 0x10; // Name: m_flWhipImpactScale Offset: 0x10
					constexpr auto fl_counter_rotation_scale = 0x14; // Name: m_flCounterRotationScale Offset: 0x14
					constexpr auto fl_distance_fade_scale = 0x18; // Name: m_flDistanceFadeScale Offset: 0x18
					constexpr auto fl_propagation_scale = 0x1C; // Name: m_flPropagationScale Offset: 0x1C
					constexpr auto fl_whip_delay = 0x20; // Name: m_flWhipDelay Offset: 0x20
					constexpr auto fl_spring_strength = 0x24; // Name: m_flSpringStrength Offset: 0x24
					constexpr auto fl_whip_spring_strength = 0x28; // Name: m_flWhipSpringStrength Offset: 0x28
					constexpr auto fl_max_angle_radians = 0x2C; // Name: m_flMaxAngleRadians Offset: 0x2C
					constexpr auto n_hip_bone_index = 0x30; // Name: m_nHipBoneIndex Offset: 0x30
					constexpr auto fl_hip_bone_translation_scale = 0x34; // Name: m_flHipBoneTranslationScale Offset: 0x34
					constexpr auto fl_hip_dip_spring_strength = 0x38; // Name: m_flHipDipSpringStrength Offset: 0x38
					constexpr auto fl_hip_dip_impact_scale = 0x3C; // Name: m_flHipDipImpactScale Offset: 0x3C
					constexpr auto fl_hip_dip_delay = 0x40; // Name: m_flHipDipDelay Offset: 0x40
				} // namespace HitReactFixedSettings_t

				namespace CStanceOverrideUpdateNode {
					constexpr auto foot_stance_info = 0x68; // Name: m_footStanceInfo Offset: 0x68
					constexpr auto p_stance_source_node = 0x80; // Name: m_pStanceSourceNode Offset: 0x80
					constexpr auto h_parameter = 0x90; // Name: m_hParameter Offset: 0x90
					constexpr auto e_mode = 0x94; // Name: m_eMode Offset: 0x94
				} // namespace CStanceOverrideUpdateNode

				namespace CMotionGraph {
					constexpr auto param_spans = 0x10; // Name: m_paramSpans Offset: 0x10
					constexpr auto tags = 0x28; // Name: m_tags Offset: 0x28
					constexpr auto p_root_node = 0x40; // Name: m_pRootNode Offset: 0x40
					constexpr auto n_parameter_count = 0x48; // Name: m_nParameterCount Offset: 0x48
					constexpr auto n_config_start_index = 0x4C; // Name: m_nConfigStartIndex Offset: 0x4C
					constexpr auto n_config_count = 0x50; // Name: m_nConfigCount Offset: 0x50
					constexpr auto b_loop = 0x54; // Name: m_bLoop Offset: 0x54
				} // namespace CMotionGraph

				namespace CFootFallAnimTag {
					constexpr auto foot = 0x58; // Name: m_foot Offset: 0x58
				} // namespace CFootFallAnimTag

				namespace CAnimGraphSettingsGroup {
				} // namespace CAnimGraphSettingsGroup

				namespace CFootCycleMetricEvaluator {
					constexpr auto foot_indices = 0x50; // Name: m_footIndices Offset: 0x50
				} // namespace CFootCycleMetricEvaluator

				namespace CProductQuantizer {
					constexpr auto sub_quantizers = 0x0; // Name: m_subQuantizers Offset: 0x0
					constexpr auto n_dimensions = 0x18; // Name: m_nDimensions Offset: 0x18
				} // namespace CProductQuantizer

				namespace CVectorAnimParameter {
					constexpr auto default_value = 0x80; // Name: m_defaultValue Offset: 0x80
					constexpr auto b_interpolate = 0x8C; // Name: m_bInterpolate Offset: 0x8C
				} // namespace CVectorAnimParameter

				namespace CAnimDemoCaptureSettings {
					constexpr auto vec_error_range_spline_rotation = 0x0; // Name: m_vecErrorRangeSplineRotation Offset: 0x0
					constexpr auto vec_error_range_spline_translation = 0x8; // Name: m_vecErrorRangeSplineTranslation Offset: 0x8
					constexpr auto vec_error_range_spline_scale = 0x10; // Name: m_vecErrorRangeSplineScale Offset: 0x10
					constexpr auto fl_ik_rotation__max_spline_error = 0x18; // Name: m_flIkRotation_MaxSplineError Offset: 0x18
					constexpr auto fl_ik_translation__max_spline_error = 0x1C; // Name: m_flIkTranslation_MaxSplineError Offset: 0x1C
					constexpr auto vec_error_range_quantization_rotation = 0x20; // Name: m_vecErrorRangeQuantizationRotation Offset: 0x20
					constexpr auto vec_error_range_quantization_translation = 0x28; // Name: m_vecErrorRangeQuantizationTranslation Offset: 0x28
					constexpr auto vec_error_range_quantization_scale = 0x30; // Name: m_vecErrorRangeQuantizationScale Offset: 0x30
					constexpr auto fl_ik_rotation__max_quantization_error = 0x38; // Name: m_flIkRotation_MaxQuantizationError Offset: 0x38
					constexpr auto fl_ik_translation__max_quantization_error = 0x3C; // Name: m_flIkTranslation_MaxQuantizationError Offset: 0x3C
					constexpr auto base_sequence = 0x40; // Name: m_baseSequence Offset: 0x40
					constexpr auto n_base_sequence_frame = 0x48; // Name: m_nBaseSequenceFrame Offset: 0x48
					constexpr auto bone_selection_mode = 0x4C; // Name: m_boneSelectionMode Offset: 0x4C
					constexpr auto bones = 0x50; // Name: m_bones Offset: 0x50
					constexpr auto ik_chains = 0x68; // Name: m_ikChains Offset: 0x68
				} // namespace CAnimDemoCaptureSettings

				namespace LookAtBone_t {
					constexpr auto index = 0x0; // Name: m_index Offset: 0x0
					constexpr auto weight = 0x4; // Name: m_weight Offset: 0x4
				} // namespace LookAtBone_t

				namespace ChainToSolveData_t {
					constexpr auto n_chain_index = 0x0; // Name: m_nChainIndex Offset: 0x0
					constexpr auto solver_settings = 0x4; // Name: m_SolverSettings Offset: 0x4
					constexpr auto target_settings = 0x10; // Name: m_TargetSettings Offset: 0x10
					constexpr auto debug_setting = 0x38; // Name: m_DebugSetting Offset: 0x38
					constexpr auto fl_debug_normalized_value = 0x3C; // Name: m_flDebugNormalizedValue Offset: 0x3C
					constexpr auto v_debug_offset = 0x40; // Name: m_vDebugOffset Offset: 0x40
				} // namespace ChainToSolveData_t

				namespace FootLockPoseOpFixedSettings {
					constexpr auto foot_info = 0x0; // Name: m_footInfo Offset: 0x0
					constexpr auto hip_damping_settings = 0x18; // Name: m_hipDampingSettings Offset: 0x18
					constexpr auto n_hip_bone_index = 0x28; // Name: m_nHipBoneIndex Offset: 0x28
					constexpr auto ik_solver_type = 0x2C; // Name: m_ikSolverType Offset: 0x2C
					constexpr auto b_apply_tilt = 0x30; // Name: m_bApplyTilt Offset: 0x30
					constexpr auto b_apply_hip_drop = 0x31; // Name: m_bApplyHipDrop Offset: 0x31
					constexpr auto b_always_use_fallback_hinge = 0x32; // Name: m_bAlwaysUseFallbackHinge Offset: 0x32
					constexpr auto b_apply_foot_rotation_limits = 0x33; // Name: m_bApplyFootRotationLimits Offset: 0x33
					constexpr auto b_apply_leg_twist_limits = 0x34; // Name: m_bApplyLegTwistLimits Offset: 0x34
					constexpr auto fl_max_foot_height = 0x38; // Name: m_flMaxFootHeight Offset: 0x38
					constexpr auto fl_extension_scale = 0x3C; // Name: m_flExtensionScale Offset: 0x3C
					constexpr auto fl_max_leg_twist = 0x40; // Name: m_flMaxLegTwist Offset: 0x40
					constexpr auto b_enable_lock_breaking = 0x44; // Name: m_bEnableLockBreaking Offset: 0x44
					constexpr auto fl_lock_break_tolerance = 0x48; // Name: m_flLockBreakTolerance Offset: 0x48
					constexpr auto fl_lock_blend_time = 0x4C; // Name: m_flLockBlendTime Offset: 0x4C
					constexpr auto b_enable_stretching = 0x50; // Name: m_bEnableStretching Offset: 0x50
					constexpr auto fl_max_stretch_amount = 0x54; // Name: m_flMaxStretchAmount Offset: 0x54
					constexpr auto fl_stretch_extension_scale = 0x58; // Name: m_flStretchExtensionScale Offset: 0x58
				} // namespace FootLockPoseOpFixedSettings

				namespace CRootUpdateNode {
				} // namespace CRootUpdateNode

				namespace CLookComponentUpdater {
					constexpr auto h_look_heading = 0x34; // Name: m_hLookHeading Offset: 0x34
					constexpr auto h_look_heading_velocity = 0x36; // Name: m_hLookHeadingVelocity Offset: 0x36
					constexpr auto h_look_pitch = 0x38; // Name: m_hLookPitch Offset: 0x38
					constexpr auto h_look_distance = 0x3A; // Name: m_hLookDistance Offset: 0x3A
					constexpr auto h_look_direction = 0x3C; // Name: m_hLookDirection Offset: 0x3C
					constexpr auto h_look_target = 0x3E; // Name: m_hLookTarget Offset: 0x3E
					constexpr auto h_look_target_world_space = 0x40; // Name: m_hLookTargetWorldSpace Offset: 0x40
					constexpr auto b_network_look_target = 0x42; // Name: m_bNetworkLookTarget Offset: 0x42
				} // namespace CLookComponentUpdater

				namespace CExpressionActionUpdater {
					constexpr auto h_param = 0x18; // Name: m_hParam Offset: 0x18
					constexpr auto e_param_type = 0x1A; // Name: m_eParamType Offset: 0x1A
					constexpr auto h_script = 0x1C; // Name: m_hScript Offset: 0x1C
				} // namespace CExpressionActionUpdater

				namespace CAnimParamHandle {
					constexpr auto type = 0x0; // Name: m_type Offset: 0x0
					constexpr auto index = 0x1; // Name: m_index Offset: 0x1
				} // namespace CAnimParamHandle

				namespace CQuaternionAnimParameter {
					constexpr auto default_value = 0x80; // Name: m_defaultValue Offset: 0x80
					constexpr auto b_interpolate = 0x90; // Name: m_bInterpolate Offset: 0x90
				} // namespace CQuaternionAnimParameter

				namespace WeightList {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
					constexpr auto weights = 0x8; // Name: m_weights Offset: 0x8
				} // namespace WeightList

				namespace CAnimGraphNetworkSettings {
					constexpr auto b_networking_enabled = 0x20; // Name: m_bNetworkingEnabled Offset: 0x20
				} // namespace CAnimGraphNetworkSettings

				namespace CSingleFrameUpdateNode {
					constexpr auto actions = 0x58; // Name: m_actions Offset: 0x58
					constexpr auto h_pose_cache_handle = 0x70; // Name: m_hPoseCacheHandle Offset: 0x70
					constexpr auto h_sequence = 0x74; // Name: m_hSequence Offset: 0x74
					constexpr auto fl_cycle = 0x78; // Name: m_flCycle Offset: 0x78
				} // namespace CSingleFrameUpdateNode

				namespace CBlockSelectionMetricEvaluator {
				} // namespace CBlockSelectionMetricEvaluator

				namespace MotionDBIndex {
					constexpr auto n_index = 0x0; // Name: m_nIndex Offset: 0x0
				} // namespace MotionDBIndex

				namespace CFootPinningUpdateNode {
					constexpr auto pose_op_fixed_data = 0x70; // Name: m_poseOpFixedData Offset: 0x70
					constexpr auto e_timing_source = 0xA0; // Name: m_eTimingSource Offset: 0xA0
					constexpr auto params = 0xA8; // Name: m_params Offset: 0xA8
					constexpr auto b_reset_child = 0xC0; // Name: m_bResetChild Offset: 0xC0
				} // namespace CFootPinningUpdateNode

				namespace IKDemoCaptureSettings_t {
					constexpr auto parent_bone_name = 0x0; // Name: m_parentBoneName Offset: 0x0
					constexpr auto e_mode = 0x8; // Name: m_eMode Offset: 0x8
					constexpr auto ik_chain_name = 0x10; // Name: m_ikChainName Offset: 0x10
					constexpr auto one_bone_start = 0x18; // Name: m_oneBoneStart Offset: 0x18
					constexpr auto one_bone_end = 0x20; // Name: m_oneBoneEnd Offset: 0x20
				} // namespace IKDemoCaptureSettings_t

				namespace CStopAtGoalUpdateNode {
					constexpr auto fl_outer_radius = 0x6C; // Name: m_flOuterRadius Offset: 0x6C
					constexpr auto fl_inner_radius = 0x70; // Name: m_flInnerRadius Offset: 0x70
					constexpr auto fl_max_scale = 0x74; // Name: m_flMaxScale Offset: 0x74
					constexpr auto fl_min_scale = 0x78; // Name: m_flMinScale Offset: 0x78
					constexpr auto damping = 0x80; // Name: m_damping Offset: 0x80
				} // namespace CStopAtGoalUpdateNode

				namespace CActionComponentUpdater {
					constexpr auto actions = 0x30; // Name: m_actions Offset: 0x30
				} // namespace CActionComponentUpdater

				namespace CStaticPoseCache {
					constexpr auto poses = 0x10; // Name: m_poses Offset: 0x10
					constexpr auto n_bone_count = 0x28; // Name: m_nBoneCount Offset: 0x28
					constexpr auto n_morph_count = 0x2C; // Name: m_nMorphCount Offset: 0x2C
				} // namespace CStaticPoseCache

				namespace CSolveIKTargetHandle_t {
					constexpr auto position_handle = 0x0; // Name: m_positionHandle Offset: 0x0
					constexpr auto orientation_handle = 0x2; // Name: m_orientationHandle Offset: 0x2
				} // namespace CSolveIKTargetHandle_t

				namespace CChoreoUpdateNode {
				} // namespace CChoreoUpdateNode

				namespace CAddUpdateNode {
					constexpr auto foot_motion_timing = 0x8C; // Name: m_footMotionTiming Offset: 0x8C
					constexpr auto b_apply_to_foot_motion = 0x90; // Name: m_bApplyToFootMotion Offset: 0x90
					constexpr auto b_apply_channels_separately = 0x91; // Name: m_bApplyChannelsSeparately Offset: 0x91
					constexpr auto b_use_model_space = 0x92; // Name: m_bUseModelSpace Offset: 0x92
					constexpr auto b_apply_scale = 0x93; // Name: m_bApplyScale Offset: 0x93
				} // namespace CAddUpdateNode

				namespace CStepsRemainingMetricEvaluator {
					constexpr auto foot_indices = 0x50; // Name: m_footIndices Offset: 0x50
					constexpr auto fl_min_steps_remaining = 0x68; // Name: m_flMinStepsRemaining Offset: 0x68
				} // namespace CStepsRemainingMetricEvaluator

				namespace TagSpan_t {
					constexpr auto tag_index = 0x0; // Name: m_tagIndex Offset: 0x0
					constexpr auto start_cycle = 0x4; // Name: m_startCycle Offset: 0x4
					constexpr auto end_cycle = 0x8; // Name: m_endCycle Offset: 0x8
				} // namespace TagSpan_t

				namespace CMotionDataSet {
					constexpr auto groups = 0x0; // Name: m_groups Offset: 0x0
					constexpr auto n_dimension_count = 0x18; // Name: m_nDimensionCount Offset: 0x18
				} // namespace CMotionDataSet

				namespace CChoiceUpdateNode {
					constexpr auto children = 0x58; // Name: m_children Offset: 0x58
					constexpr auto weights = 0x70; // Name: m_weights Offset: 0x70
					constexpr auto blend_times = 0x88; // Name: m_blendTimes Offset: 0x88
					constexpr auto choice_method = 0xA0; // Name: m_choiceMethod Offset: 0xA0
					constexpr auto choice_change_method = 0xA4; // Name: m_choiceChangeMethod Offset: 0xA4
					constexpr auto blend_method = 0xA8; // Name: m_blendMethod Offset: 0xA8
					constexpr auto blend_time = 0xAC; // Name: m_blendTime Offset: 0xAC
					constexpr auto b_cross_fade = 0xB0; // Name: m_bCrossFade Offset: 0xB0
					constexpr auto b_reset_chosen = 0xB1; // Name: m_bResetChosen Offset: 0xB1
					constexpr auto b_dont_reset_same_selection = 0xB2; // Name: m_bDontResetSameSelection Offset: 0xB2
				} // namespace CChoiceUpdateNode

				namespace CCycleControlUpdateNode {
					constexpr auto value_source = 0x68; // Name: m_valueSource Offset: 0x68
					constexpr auto param_index = 0x6C; // Name: m_paramIndex Offset: 0x6C
				} // namespace CCycleControlUpdateNode

				namespace CDampedValueComponentUpdater {
					constexpr auto items = 0x30; // Name: m_items Offset: 0x30
				} // namespace CDampedValueComponentUpdater

				namespace CTargetSelectorUpdateNode {
					constexpr auto children = 0x58; // Name: m_children Offset: 0x58
					constexpr auto h_position_parameter = 0x74; // Name: m_hPositionParameter Offset: 0x74
					constexpr auto h_face_position_parameter = 0x76; // Name: m_hFacePositionParameter Offset: 0x76
				} // namespace CTargetSelectorUpdateNode

				namespace BlendItem_t {
					constexpr auto tags = 0x0; // Name: m_tags Offset: 0x0
					constexpr auto p_child = 0x18; // Name: m_pChild Offset: 0x18
					constexpr auto h_sequence = 0x28; // Name: m_hSequence Offset: 0x28
					constexpr auto v_pos = 0x2C; // Name: m_vPos Offset: 0x2C
					constexpr auto fl_duration = 0x34; // Name: m_flDuration Offset: 0x34
					constexpr auto b_use_custom_duration = 0x38; // Name: m_bUseCustomDuration Offset: 0x38
				} // namespace BlendItem_t

				namespace CConcreteAnimParameter {
					constexpr auto preview_button = 0x70; // Name: m_previewButton Offset: 0x70
					constexpr auto e_network_setting = 0x74; // Name: m_eNetworkSetting Offset: 0x74
					constexpr auto b_use_most_recent_value = 0x78; // Name: m_bUseMostRecentValue Offset: 0x78
					constexpr auto b_auto_reset = 0x79; // Name: m_bAutoReset Offset: 0x79
					constexpr auto b_game_writable = 0x7A; // Name: m_bGameWritable Offset: 0x7A
					constexpr auto b_graph_writable = 0x7B; // Name: m_bGraphWritable Offset: 0x7B
				} // namespace CConcreteAnimParameter

				namespace CPairedSequenceUpdateNode {
					constexpr auto s_paired_sequence_role = 0x70; // Name: m_sPairedSequenceRole Offset: 0x70
				} // namespace CPairedSequenceUpdateNode

				namespace CRagdollComponentUpdater {
					constexpr auto ragdoll_node_paths = 0x30; // Name: m_ragdollNodePaths Offset: 0x30
					constexpr auto bone_indices = 0x48; // Name: m_boneIndices Offset: 0x48
					constexpr auto bone_names = 0x60; // Name: m_boneNames Offset: 0x60
					constexpr auto weight_lists = 0x78; // Name: m_weightLists Offset: 0x78
					constexpr auto fl_spring_frequency_min = 0x90; // Name: m_flSpringFrequencyMin Offset: 0x90
					constexpr auto fl_spring_frequency_max = 0x94; // Name: m_flSpringFrequencyMax Offset: 0x94
					constexpr auto fl_max_stretch = 0x98; // Name: m_flMaxStretch Offset: 0x98
					constexpr auto b_solid_collision_at_zero_weight = 0x9C; // Name: m_bSolidCollisionAtZeroWeight Offset: 0x9C
				} // namespace CRagdollComponentUpdater

				namespace CAnimComponentUpdater {
					constexpr auto name = 0x18; // Name: m_name Offset: 0x18
					constexpr auto id = 0x20; // Name: m_id Offset: 0x20
					constexpr auto network_mode = 0x24; // Name: m_networkMode Offset: 0x24
					constexpr auto b_start_enabled = 0x28; // Name: m_bStartEnabled Offset: 0x28
				} // namespace CAnimComponentUpdater

				namespace CBlend2DUpdateNode {
					constexpr auto items = 0x60; // Name: m_items Offset: 0x60
					constexpr auto tags = 0x78; // Name: m_tags Offset: 0x78
					constexpr auto param_spans = 0x90; // Name: m_paramSpans Offset: 0x90
					constexpr auto node_item_indices = 0xA8; // Name: m_nodeItemIndices Offset: 0xA8
					constexpr auto damping = 0xC0; // Name: m_damping Offset: 0xC0
					constexpr auto blend_source_x = 0xD0; // Name: m_blendSourceX Offset: 0xD0
					constexpr auto param_x = 0xD4; // Name: m_paramX Offset: 0xD4
					constexpr auto blend_source_y = 0xD8; // Name: m_blendSourceY Offset: 0xD8
					constexpr auto param_y = 0xDC; // Name: m_paramY Offset: 0xDC
					constexpr auto e_blend_mode = 0xE0; // Name: m_eBlendMode Offset: 0xE0
					constexpr auto playback_speed = 0xE4; // Name: m_playbackSpeed Offset: 0xE4
					constexpr auto b_loop = 0xE8; // Name: m_bLoop Offset: 0xE8
					constexpr auto b_lock_blend_on_reset = 0xE9; // Name: m_bLockBlendOnReset Offset: 0xE9
					constexpr auto b_lock_when_waning = 0xEA; // Name: m_bLockWhenWaning Offset: 0xEA
					constexpr auto b_anim_events_and_tags_on_most_weighted_only = 0xEB; // Name: m_bAnimEventsAndTagsOnMostWeightedOnly Offset: 0xEB
				} // namespace CBlend2DUpdateNode

				namespace CLeanMatrixUpdateNode {
					constexpr auto frame_corners = 0x5C; // Name: m_frameCorners Offset: 0x5C
					constexpr auto poses = 0x80; // Name: m_poses Offset: 0x80
					constexpr auto damping = 0xA8; // Name: m_damping Offset: 0xA8
					constexpr auto blend_source = 0xB8; // Name: m_blendSource Offset: 0xB8
					constexpr auto param_index = 0xBC; // Name: m_paramIndex Offset: 0xBC
					constexpr auto vertical_axis = 0xC0; // Name: m_verticalAxis Offset: 0xC0
					constexpr auto horizontal_axis = 0xCC; // Name: m_horizontalAxis Offset: 0xCC
					constexpr auto h_sequence = 0xD8; // Name: m_hSequence Offset: 0xD8
					constexpr auto fl_max_value = 0xDC; // Name: m_flMaxValue Offset: 0xDC
					constexpr auto n_sequence_max_frame = 0xE0; // Name: m_nSequenceMaxFrame Offset: 0xE0
				} // namespace CLeanMatrixUpdateNode

				namespace CSymbolAnimParameter {
					constexpr auto default_value = 0x80; // Name: m_defaultValue Offset: 0x80
				} // namespace CSymbolAnimParameter

				namespace CDirectPlaybackTagData {
					constexpr auto sequence_name = 0x0; // Name: m_sequenceName Offset: 0x0
					constexpr auto tags = 0x8; // Name: m_tags Offset: 0x8
				} // namespace CDirectPlaybackTagData

				namespace CParamSpanUpdater {
					constexpr auto spans = 0x0; // Name: m_spans Offset: 0x0
				} // namespace CParamSpanUpdater

				namespace CSolveIKChainUpdateNode {
					constexpr auto target_handles = 0x68; // Name: m_targetHandles Offset: 0x68
					constexpr auto op_fixed_data = 0x80; // Name: m_opFixedData Offset: 0x80
				} // namespace CSolveIKChainUpdateNode

				namespace CAnimActionUpdater {
				} // namespace CAnimActionUpdater

				namespace CParticleAnimTag {
					constexpr auto h_particle_system = 0x58; // Name: m_hParticleSystem Offset: 0x58
					constexpr auto particle_system_name = 0x60; // Name: m_particleSystemName Offset: 0x60
					constexpr auto config_name = 0x68; // Name: m_configName Offset: 0x68
					constexpr auto b_detach_from_owner = 0x70; // Name: m_bDetachFromOwner Offset: 0x70
					constexpr auto b_stop_when_tag_ends = 0x71; // Name: m_bStopWhenTagEnds Offset: 0x71
					constexpr auto b_tag_end_stop_is_instant = 0x72; // Name: m_bTagEndStopIsInstant Offset: 0x72
					constexpr auto attachment_name = 0x78; // Name: m_attachmentName Offset: 0x78
					constexpr auto attachment_type = 0x80; // Name: m_attachmentType Offset: 0x80
					constexpr auto attachment_cp1_name = 0x88; // Name: m_attachmentCP1Name Offset: 0x88
					constexpr auto attachment_cp1_type = 0x90; // Name: m_attachmentCP1Type Offset: 0x90
				} // namespace CParticleAnimTag

				namespace FollowTargetOpFixedSettings_t {
					constexpr auto bone_index = 0x0; // Name: m_boneIndex Offset: 0x0
					constexpr auto b_bone_target = 0x4; // Name: m_bBoneTarget Offset: 0x4
					constexpr auto bone_target_index = 0x8; // Name: m_boneTargetIndex Offset: 0x8
					constexpr auto b_world_coodinate_target = 0xC; // Name: m_bWorldCoodinateTarget Offset: 0xC
					constexpr auto b_match_target_orientation = 0xD; // Name: m_bMatchTargetOrientation Offset: 0xD
				} // namespace FollowTargetOpFixedSettings_t

				namespace CEmitTagActionUpdater {
					constexpr auto n_tag_index = 0x18; // Name: m_nTagIndex Offset: 0x18
					constexpr auto b_is_zero_duration = 0x1C; // Name: m_bIsZeroDuration Offset: 0x1C
				} // namespace CEmitTagActionUpdater

				namespace CAnimStateMachineUpdater {
					constexpr auto states = 0x8; // Name: m_states Offset: 0x8
					constexpr auto transitions = 0x20; // Name: m_transitions Offset: 0x20
					constexpr auto start_state_index = 0x50; // Name: m_startStateIndex Offset: 0x50
				} // namespace CAnimStateMachineUpdater

				namespace CDirectPlaybackUpdateNode {
					constexpr auto b_finish_early = 0x6C; // Name: m_bFinishEarly Offset: 0x6C
					constexpr auto b_reset_on_finish = 0x6D; // Name: m_bResetOnFinish Offset: 0x6D
					constexpr auto all_tags = 0x70; // Name: m_allTags Offset: 0x70
				} // namespace CDirectPlaybackUpdateNode

				namespace CUnaryUpdateNode {
					constexpr auto p_child_node = 0x58; // Name: m_pChildNode Offset: 0x58
				} // namespace CUnaryUpdateNode

				namespace CSelectorUpdateNode {
					constexpr auto children = 0x58; // Name: m_children Offset: 0x58
					constexpr auto tags = 0x70; // Name: m_tags Offset: 0x70
					constexpr auto blend_curve = 0x8C; // Name: m_blendCurve Offset: 0x8C
					constexpr auto fl_blend_time = 0x94; // Name: m_flBlendTime Offset: 0x94
					constexpr auto h_parameter = 0x9C; // Name: m_hParameter Offset: 0x9C
					constexpr auto n_tag_index = 0xA0; // Name: m_nTagIndex Offset: 0xA0
					constexpr auto e_tag_behavior = 0xA4; // Name: m_eTagBehavior Offset: 0xA4
					constexpr auto b_reset_on_change = 0xA8; // Name: m_bResetOnChange Offset: 0xA8
					constexpr auto b_lock_when_waning = 0xA9; // Name: m_bLockWhenWaning Offset: 0xA9
					constexpr auto b_sync_cycles_on_change = 0xAA; // Name: m_bSyncCyclesOnChange Offset: 0xAA
				} // namespace CSelectorUpdateNode

				namespace CStateMachineComponentUpdater {
					constexpr auto state_machine = 0x30; // Name: m_stateMachine Offset: 0x30
				} // namespace CStateMachineComponentUpdater

				namespace CAnimUpdateNodeRef {
					constexpr auto node_index = 0x8; // Name: m_nodeIndex Offset: 0x8
				} // namespace CAnimUpdateNodeRef

				namespace FootStepTrigger {
					constexpr auto tags = 0x0; // Name: m_tags Offset: 0x0
					constexpr auto n_foot_index = 0x18; // Name: m_nFootIndex Offset: 0x18
					constexpr auto trigger_phase = 0x1C; // Name: m_triggerPhase Offset: 0x1C
				} // namespace FootStepTrigger

				namespace CMotionGraphGroup {
					constexpr auto search_db = 0x0; // Name: m_searchDB Offset: 0x0
					constexpr auto motion_graphs = 0xB8; // Name: m_motionGraphs Offset: 0xB8
					constexpr auto motion_graph_configs = 0xD0; // Name: m_motionGraphConfigs Offset: 0xD0
					constexpr auto sample_to_config = 0xE8; // Name: m_sampleToConfig Offset: 0xE8
					constexpr auto h_is_active_script = 0x100; // Name: m_hIsActiveScript Offset: 0x100
				} // namespace CMotionGraphGroup

				namespace CPathMetricEvaluator {
					constexpr auto path_time_samples = 0x50; // Name: m_pathTimeSamples Offset: 0x50
					constexpr auto fl_distance = 0x68; // Name: m_flDistance Offset: 0x68
					constexpr auto b_extrapolate_movement = 0x6C; // Name: m_bExtrapolateMovement Offset: 0x6C
					constexpr auto fl_min_extrapolation_speed = 0x70; // Name: m_flMinExtrapolationSpeed Offset: 0x70
				} // namespace CPathMetricEvaluator

				namespace CFootLockUpdateNode {
					constexpr auto op_fixed_settings = 0x68; // Name: m_opFixedSettings Offset: 0x68
					constexpr auto foot_settings = 0xD0; // Name: m_footSettings Offset: 0xD0
					constexpr auto hip_shift_damping = 0xE8; // Name: m_hipShiftDamping Offset: 0xE8
					constexpr auto root_height_damping = 0xF8; // Name: m_rootHeightDamping Offset: 0xF8
					constexpr auto fl_stride_curve_scale = 0x108; // Name: m_flStrideCurveScale Offset: 0x108
					constexpr auto fl_stride_curve_limit_scale = 0x10C; // Name: m_flStrideCurveLimitScale Offset: 0x10C
					constexpr auto fl_step_height_increase_scale = 0x110; // Name: m_flStepHeightIncreaseScale Offset: 0x110
					constexpr auto fl_step_height_decrease_scale = 0x114; // Name: m_flStepHeightDecreaseScale Offset: 0x114
					constexpr auto fl_hip_shift_scale = 0x118; // Name: m_flHipShiftScale Offset: 0x118
					constexpr auto fl_blend_time = 0x11C; // Name: m_flBlendTime Offset: 0x11C
					constexpr auto fl_max_root_height_offset = 0x120; // Name: m_flMaxRootHeightOffset Offset: 0x120
					constexpr auto fl_min_root_height_offset = 0x124; // Name: m_flMinRootHeightOffset Offset: 0x124
					constexpr auto fl_tilt_plane_pitch_spring_strength = 0x128; // Name: m_flTiltPlanePitchSpringStrength Offset: 0x128
					constexpr auto fl_tilt_plane_roll_spring_strength = 0x12C; // Name: m_flTiltPlaneRollSpringStrength Offset: 0x12C
					constexpr auto b_apply_foot_rotation_limits = 0x130; // Name: m_bApplyFootRotationLimits Offset: 0x130
					constexpr auto b_apply_hip_shift = 0x131; // Name: m_bApplyHipShift Offset: 0x131
					constexpr auto b_modulate_step_height = 0x132; // Name: m_bModulateStepHeight Offset: 0x132
					constexpr auto b_reset_child = 0x133; // Name: m_bResetChild Offset: 0x133
					constexpr auto b_enable_vertical_curved_paths = 0x134; // Name: m_bEnableVerticalCurvedPaths Offset: 0x134
					constexpr auto b_enable_root_height_damping = 0x135; // Name: m_bEnableRootHeightDamping Offset: 0x135
				} // namespace CFootLockUpdateNode

				namespace JiggleBoneSettings_t {
					constexpr auto n_bone_index = 0x0; // Name: m_nBoneIndex Offset: 0x0
					constexpr auto fl_spring_strength = 0x4; // Name: m_flSpringStrength Offset: 0x4
					constexpr auto fl_max_time_step = 0x8; // Name: m_flMaxTimeStep Offset: 0x8
					constexpr auto fl_damping = 0xC; // Name: m_flDamping Offset: 0xC
					constexpr auto v_bounds_max_ls = 0x10; // Name: m_vBoundsMaxLS Offset: 0x10
					constexpr auto v_bounds_min_ls = 0x1C; // Name: m_vBoundsMinLS Offset: 0x1C
					constexpr auto e_sim_space = 0x28; // Name: m_eSimSpace Offset: 0x28
				} // namespace JiggleBoneSettings_t

				namespace CJumpHelperUpdateNode {
					constexpr auto h_target_param = 0xA8; // Name: m_hTargetParam Offset: 0xA8
					constexpr auto fl_original_jump_movement = 0xAC; // Name: m_flOriginalJumpMovement Offset: 0xAC
					constexpr auto fl_original_jump_duration = 0xB8; // Name: m_flOriginalJumpDuration Offset: 0xB8
					constexpr auto fl_jump_start_cycle = 0xBC; // Name: m_flJumpStartCycle Offset: 0xBC
					constexpr auto fl_jump_end_cycle = 0xC0; // Name: m_flJumpEndCycle Offset: 0xC0
					constexpr auto e_correction_method = 0xC4; // Name: m_eCorrectionMethod Offset: 0xC4
					constexpr auto b_translation_axis = 0xC8; // Name: m_bTranslationAxis Offset: 0xC8
					constexpr auto b_scale_speed = 0xCB; // Name: m_bScaleSpeed Offset: 0xCB
				} // namespace CJumpHelperUpdateNode

				namespace CJiggleBoneUpdateNode {
					constexpr auto op_fixed_data = 0x68; // Name: m_opFixedData Offset: 0x68
				} // namespace CJiggleBoneUpdateNode

				namespace CBoolAnimParameter {
					constexpr auto b_default_value = 0x80; // Name: m_bDefaultValue Offset: 0x80
				} // namespace CBoolAnimParameter

				namespace CLODComponentUpdater {
					constexpr auto n_server_lod = 0x30; // Name: m_nServerLOD Offset: 0x30
				} // namespace CLODComponentUpdater

				namespace CPairedSequenceComponentUpdater {
				} // namespace CPairedSequenceComponentUpdater

				namespace CFootPositionMetricEvaluator {
					constexpr auto foot_indices = 0x50; // Name: m_footIndices Offset: 0x50
					constexpr auto b_ignore_slope = 0x68; // Name: m_bIgnoreSlope Offset: 0x68
				} // namespace CFootPositionMetricEvaluator

				namespace CDampedValueUpdateItem {
					constexpr auto damping = 0x0; // Name: m_damping Offset: 0x0
					constexpr auto h_param_in = 0x18; // Name: m_hParamIn Offset: 0x18
					constexpr auto h_param_out = 0x1A; // Name: m_hParamOut Offset: 0x1A
				} // namespace CDampedValueUpdateItem

				namespace CBlendUpdateNode {
					constexpr auto children = 0x60; // Name: m_children Offset: 0x60
					constexpr auto sorted_order = 0x78; // Name: m_sortedOrder Offset: 0x78
					constexpr auto target_values = 0x90; // Name: m_targetValues Offset: 0x90
					constexpr auto blend_value_source = 0xAC; // Name: m_blendValueSource Offset: 0xAC
					constexpr auto param_index = 0xB0; // Name: m_paramIndex Offset: 0xB0
					constexpr auto damping = 0xB8; // Name: m_damping Offset: 0xB8
					constexpr auto blend_key_type = 0xC8; // Name: m_blendKeyType Offset: 0xC8
					constexpr auto b_lock_blend_on_reset = 0xCC; // Name: m_bLockBlendOnReset Offset: 0xCC
					constexpr auto b_sync_cycles = 0xCD; // Name: m_bSyncCycles Offset: 0xCD
					constexpr auto b_loop = 0xCE; // Name: m_bLoop Offset: 0xCE
					constexpr auto b_lock_when_waning = 0xCF; // Name: m_bLockWhenWaning Offset: 0xCF
				} // namespace CBlendUpdateNode

				namespace CStateNodeStateData {
					constexpr auto p_child = 0x0; // Name: m_pChild Offset: 0x0
					constexpr auto b_exclusive_root_motion = 0x0; // Name: m_bExclusiveRootMotion Offset: 0x0
					constexpr auto b_exclusive_root_motion_first_frame = 0x0; // Name: m_bExclusiveRootMotionFirstFrame Offset: 0x0
				} // namespace CStateNodeStateData

				namespace CStaticPoseCacheBuilder {
				} // namespace CStaticPoseCacheBuilder

				namespace CStateMachineUpdateNode {
					constexpr auto state_machine = 0x68; // Name: m_stateMachine Offset: 0x68
					constexpr auto state_data = 0xC0; // Name: m_stateData Offset: 0xC0
					constexpr auto transition_data = 0xD8; // Name: m_transitionData Offset: 0xD8
					constexpr auto b_block_waning_tags = 0xF4; // Name: m_bBlockWaningTags Offset: 0xF4
					constexpr auto b_lock_state_when_waning = 0xF5; // Name: m_bLockStateWhenWaning Offset: 0xF5
				} // namespace CStateMachineUpdateNode

				namespace CAimMatrixUpdateNode {
					constexpr auto op_fixed_settings = 0x70; // Name: m_opFixedSettings Offset: 0x70
					constexpr auto target = 0x158; // Name: m_target Offset: 0x158
					constexpr auto param_index = 0x15C; // Name: m_paramIndex Offset: 0x15C
					constexpr auto h_sequence = 0x160; // Name: m_hSequence Offset: 0x160
					constexpr auto b_reset_child = 0x164; // Name: m_bResetChild Offset: 0x164
					constexpr auto b_lock_when_waning = 0x165; // Name: m_bLockWhenWaning Offset: 0x165
				} // namespace CAimMatrixUpdateNode

				namespace CLookAtUpdateNode {
					constexpr auto op_fixed_settings = 0x70; // Name: m_opFixedSettings Offset: 0x70
					constexpr auto target = 0x138; // Name: m_target Offset: 0x138
					constexpr auto param_index = 0x13C; // Name: m_paramIndex Offset: 0x13C
					constexpr auto weight_param_index = 0x13E; // Name: m_weightParamIndex Offset: 0x13E
					constexpr auto b_reset_child = 0x140; // Name: m_bResetChild Offset: 0x140
					constexpr auto b_lock_when_waning = 0x141; // Name: m_bLockWhenWaning Offset: 0x141
				} // namespace CLookAtUpdateNode

				namespace CAnimParameterManagerUpdater {
					constexpr auto parameters = 0x18; // Name: m_parameters Offset: 0x18
					constexpr auto id_to_index_map = 0x30; // Name: m_idToIndexMap Offset: 0x30
					constexpr auto name_to_index_map = 0x50; // Name: m_nameToIndexMap Offset: 0x50
					constexpr auto index_to_handle = 0x70; // Name: m_indexToHandle Offset: 0x70
					constexpr auto auto_reset_params = 0x88; // Name: m_autoResetParams Offset: 0x88
					constexpr auto auto_reset_map = 0xA0; // Name: m_autoResetMap Offset: 0xA0
				} // namespace CAnimParameterManagerUpdater

				namespace BoneDemoCaptureSettings_t {
					constexpr auto bone_name = 0x0; // Name: m_boneName Offset: 0x0
					constexpr auto fl_error_spline_rotation_max = 0x8; // Name: m_flErrorSplineRotationMax Offset: 0x8
					constexpr auto fl_error_spline_translation_max = 0xC; // Name: m_flErrorSplineTranslationMax Offset: 0xC
					constexpr auto fl_error_spline_scale_max = 0x10; // Name: m_flErrorSplineScaleMax Offset: 0x10
					constexpr auto fl_error_quantization_rotation_max = 0x14; // Name: m_flErrorQuantizationRotationMax Offset: 0x14
					constexpr auto fl_error_quantization_translation_max = 0x18; // Name: m_flErrorQuantizationTranslationMax Offset: 0x18
					constexpr auto fl_error_quantization_scale_max = 0x1C; // Name: m_flErrorQuantizationScaleMax Offset: 0x1C
				} // namespace BoneDemoCaptureSettings_t

				namespace CStateUpdateData {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
					constexpr auto h_script = 0x8; // Name: m_hScript Offset: 0x8
					constexpr auto transition_indices = 0x10; // Name: m_transitionIndices Offset: 0x10
					constexpr auto actions = 0x28; // Name: m_actions Offset: 0x28
					constexpr auto state_id = 0x40; // Name: m_stateID Offset: 0x40
					constexpr auto b_is_start_state = 0x0; // Name: m_bIsStartState Offset: 0x0
					constexpr auto b_is_end_state = 0x0; // Name: m_bIsEndState Offset: 0x0
					constexpr auto b_is_passthrough = 0x0; // Name: m_bIsPassthrough Offset: 0x0
				} // namespace CStateUpdateData

				namespace CSequenceTagSpans {
					constexpr auto s_sequence_name = 0x0; // Name: m_sSequenceName Offset: 0x0
					constexpr auto tags = 0x8; // Name: m_tags Offset: 0x8
				} // namespace CSequenceTagSpans

				namespace CCurrentVelocityMetricEvaluator {
				} // namespace CCurrentVelocityMetricEvaluator

				namespace CAnimReplayFrame {
					constexpr auto input_data_blocks = 0x10; // Name: m_inputDataBlocks Offset: 0x10
					constexpr auto instance_data = 0x28; // Name: m_instanceData Offset: 0x28
					constexpr auto starting_local_to_world_transform = 0x40; // Name: m_startingLocalToWorldTransform Offset: 0x40
					constexpr auto local_to_world_transform = 0x60; // Name: m_localToWorldTransform Offset: 0x60
					constexpr auto time_stamp = 0x80; // Name: m_timeStamp Offset: 0x80
				} // namespace CAnimReplayFrame

				namespace CPathAnimMotorUpdaterBase {
					constexpr auto b_lock_to_path = 0x20; // Name: m_bLockToPath Offset: 0x20
				} // namespace CPathAnimMotorUpdaterBase

				namespace AimCameraOpFixedSettings_t {
					constexpr auto n_chain_index = 0x0; // Name: m_nChainIndex Offset: 0x0
					constexpr auto n_camera_joint_index = 0x4; // Name: m_nCameraJointIndex Offset: 0x4
					constexpr auto n_pelvis_joint_index = 0x8; // Name: m_nPelvisJointIndex Offset: 0x8
					constexpr auto n_clavicle_left_joint_index = 0xC; // Name: m_nClavicleLeftJointIndex Offset: 0xC
					constexpr auto n_clavicle_right_joint_index = 0x10; // Name: m_nClavicleRightJointIndex Offset: 0x10
					constexpr auto n_depenetration_joint_index = 0x14; // Name: m_nDepenetrationJointIndex Offset: 0x14
					constexpr auto prop_joints = 0x18; // Name: m_propJoints Offset: 0x18
				} // namespace AimCameraOpFixedSettings_t

				namespace CFollowAttachmentUpdateNode {
					constexpr auto op_fixed_data = 0x70; // Name: m_opFixedData Offset: 0x70
				} // namespace CFollowAttachmentUpdateNode

				namespace CMovementComponentUpdater {
					constexpr auto motors = 0x30; // Name: m_motors Offset: 0x30
					constexpr auto facing_damping = 0x48; // Name: m_facingDamping Offset: 0x48
					constexpr auto n_default_motor_index = 0x60; // Name: m_nDefaultMotorIndex Offset: 0x60
					constexpr auto fl_default_run_speed = 0x64; // Name: m_flDefaultRunSpeed Offset: 0x64
					constexpr auto b_move_vars_disabled = 0x68; // Name: m_bMoveVarsDisabled Offset: 0x68
					constexpr auto b_network_path = 0x69; // Name: m_bNetworkPath Offset: 0x69
					constexpr auto b_network_facing = 0x6A; // Name: m_bNetworkFacing Offset: 0x6A
					constexpr auto param_handles = 0x6B; // Name: m_paramHandles Offset: 0x6B
				} // namespace CMovementComponentUpdater

				namespace CFutureFacingMetricEvaluator {
					constexpr auto fl_distance = 0x50; // Name: m_flDistance Offset: 0x50
					constexpr auto fl_time = 0x54; // Name: m_flTime Offset: 0x54
				} // namespace CFutureFacingMetricEvaluator

				namespace CFootstepLandedAnimTag {
					constexpr auto footstep_type = 0x58; // Name: m_FootstepType Offset: 0x58
					constexpr auto override_sound_name = 0x60; // Name: m_OverrideSoundName Offset: 0x60
					constexpr auto debug_anim_source_string = 0x68; // Name: m_DebugAnimSourceString Offset: 0x68
					constexpr auto bone_name = 0x70; // Name: m_BoneName Offset: 0x70
				} // namespace CFootstepLandedAnimTag

				namespace CEnumAnimParameter {
					constexpr auto default_value = 0x88; // Name: m_defaultValue Offset: 0x88
					constexpr auto enum_options = 0x90; // Name: m_enumOptions Offset: 0x90
					constexpr auto vec_enum_referenced = 0xA8; // Name: m_vecEnumReferenced Offset: 0xA8
				} // namespace CEnumAnimParameter

				namespace CHandshakeAnimTagBase {
					constexpr auto b_is_disable_tag = 0x50; // Name: m_bIsDisableTag Offset: 0x50
				} // namespace CHandshakeAnimTagBase

				namespace CSlopeComponentUpdater {
					constexpr auto fl_trace_distance = 0x34; // Name: m_flTraceDistance Offset: 0x34
					constexpr auto h_slope_angle = 0x38; // Name: m_hSlopeAngle Offset: 0x38
					constexpr auto h_slope_angle_front = 0x3A; // Name: m_hSlopeAngleFront Offset: 0x3A
					constexpr auto h_slope_angle_side = 0x3C; // Name: m_hSlopeAngleSide Offset: 0x3C
					constexpr auto h_slope_heading = 0x3E; // Name: m_hSlopeHeading Offset: 0x3E
					constexpr auto h_slope_normal = 0x40; // Name: m_hSlopeNormal Offset: 0x40
					constexpr auto h_slope_normal__world_space = 0x42; // Name: m_hSlopeNormal_WorldSpace Offset: 0x42
				} // namespace CSlopeComponentUpdater

				namespace CAnimInputDamping {
					constexpr auto speed_function = 0x8; // Name: m_speedFunction Offset: 0x8
					constexpr auto f_speed_scale = 0xC; // Name: m_fSpeedScale Offset: 0xC
				} // namespace CAnimInputDamping

				namespace CVirtualAnimParameter {
					constexpr auto expression_string = 0x70; // Name: m_expressionString Offset: 0x70
					constexpr auto e_param_type = 0x78; // Name: m_eParamType Offset: 0x78
				} // namespace CVirtualAnimParameter

				namespace CRagdollAnimTag {
					constexpr auto n_pose_control = 0x58; // Name: m_nPoseControl Offset: 0x58
					constexpr auto fl_frequency = 0x5C; // Name: m_flFrequency Offset: 0x5C
					constexpr auto fl_damping_ratio = 0x60; // Name: m_flDampingRatio Offset: 0x60
					constexpr auto fl_decay_duration = 0x64; // Name: m_flDecayDuration Offset: 0x64
					constexpr auto fl_decay_bias = 0x68; // Name: m_flDecayBias Offset: 0x68
					constexpr auto b_destroy = 0x6C; // Name: m_bDestroy Offset: 0x6C
				} // namespace CRagdollAnimTag

				namespace CMotionMetricEvaluator {
					constexpr auto means = 0x18; // Name: m_means Offset: 0x18
					constexpr auto standard_deviations = 0x30; // Name: m_standardDeviations Offset: 0x30
					constexpr auto fl_weight = 0x48; // Name: m_flWeight Offset: 0x48
					constexpr auto n_dimension_start_index = 0x4C; // Name: m_nDimensionStartIndex Offset: 0x4C
				} // namespace CMotionMetricEvaluator

				namespace CAnimUpdateNodeBase {
					constexpr auto node_path = 0x18; // Name: m_nodePath Offset: 0x18
					constexpr auto network_mode = 0x48; // Name: m_networkMode Offset: 0x48
					constexpr auto name = 0x50; // Name: m_name Offset: 0x50
				} // namespace CAnimUpdateNodeBase

				namespace CSetParameterActionUpdater {
					constexpr auto h_param = 0x18; // Name: m_hParam Offset: 0x18
					constexpr auto value = 0x1A; // Name: m_value Offset: 0x1A
				} // namespace CSetParameterActionUpdater

				namespace CClothSettingsAnimTag {
					constexpr auto fl_stiffness = 0x58; // Name: m_flStiffness Offset: 0x58
					constexpr auto fl_ease_in = 0x5C; // Name: m_flEaseIn Offset: 0x5C
					constexpr auto fl_ease_out = 0x60; // Name: m_flEaseOut Offset: 0x60
					constexpr auto n_vertex_set = 0x68; // Name: m_nVertexSet Offset: 0x68
				} // namespace CClothSettingsAnimTag

				namespace CBlendCurve {
					constexpr auto fl_control_point1 = 0x0; // Name: m_flControlPoint1 Offset: 0x0
					constexpr auto fl_control_point2 = 0x4; // Name: m_flControlPoint2 Offset: 0x4
				} // namespace CBlendCurve

				namespace CAnimationGraphVisualizerSphere {
					constexpr auto v_ws_position = 0x40; // Name: m_vWsPosition Offset: 0x40
					constexpr auto fl_radius = 0x50; // Name: m_flRadius Offset: 0x50
					constexpr auto color = 0x54; // Name: m_Color Offset: 0x54
				} // namespace CAnimationGraphVisualizerSphere

				namespace CTransitionUpdateData {
					constexpr auto src_state_index = 0x0; // Name: m_srcStateIndex Offset: 0x0
					constexpr auto dest_state_index = 0x1; // Name: m_destStateIndex Offset: 0x1
					constexpr auto n_handshake_mask_to_disable_first = 0x0; // Name: m_nHandshakeMaskToDisableFirst Offset: 0x0
					constexpr auto b_disabled = 0x0; // Name: m_bDisabled Offset: 0x0
				} // namespace CTransitionUpdateData

				namespace CMovementHandshakeAnimTag {
				} // namespace CMovementHandshakeAnimTag

				namespace CAudioAnimTag {
					constexpr auto clip_name = 0x58; // Name: m_clipName Offset: 0x58
					constexpr auto attachment_name = 0x60; // Name: m_attachmentName Offset: 0x60
					constexpr auto fl_volume = 0x68; // Name: m_flVolume Offset: 0x68
					constexpr auto b_stop_when_tag_ends = 0x6C; // Name: m_bStopWhenTagEnds Offset: 0x6C
					constexpr auto b_stop_when_graph_ends = 0x6D; // Name: m_bStopWhenGraphEnds Offset: 0x6D
					constexpr auto b_play_on_server = 0x6E; // Name: m_bPlayOnServer Offset: 0x6E
					constexpr auto b_play_on_client = 0x6F; // Name: m_bPlayOnClient Offset: 0x6F
				} // namespace CAudioAnimTag

				namespace CTurnHelperUpdateNode {
					constexpr auto facing_target = 0x6C; // Name: m_facingTarget Offset: 0x6C
					constexpr auto turn_start_time_offset = 0x70; // Name: m_turnStartTimeOffset Offset: 0x70
					constexpr auto turn_duration = 0x74; // Name: m_turnDuration Offset: 0x74
					constexpr auto b_match_child_duration = 0x78; // Name: m_bMatchChildDuration Offset: 0x78
					constexpr auto manual_turn_offset = 0x7C; // Name: m_manualTurnOffset Offset: 0x7C
					constexpr auto b_use_manual_turn_offset = 0x80; // Name: m_bUseManualTurnOffset Offset: 0x80
				} // namespace CTurnHelperUpdateNode

				namespace CToggleComponentActionUpdater {
					constexpr auto component_id = 0x18; // Name: m_componentID Offset: 0x18
					constexpr auto b_set_enabled = 0x1C; // Name: m_bSetEnabled Offset: 0x1C
				} // namespace CToggleComponentActionUpdater

				namespace CAnimationGraphVisualizerPrimitiveBase {
					constexpr auto type = 0x8; // Name: m_Type Offset: 0x8
					constexpr auto owning_anim_node_paths = 0xC; // Name: m_OwningAnimNodePaths Offset: 0xC
					constexpr auto n_owning_anim_node_path_count = 0x38; // Name: m_nOwningAnimNodePathCount Offset: 0x38
				} // namespace CAnimationGraphVisualizerPrimitiveBase

				namespace CFootStepTriggerUpdateNode {
					constexpr auto triggers = 0x68; // Name: m_triggers Offset: 0x68
					constexpr auto fl_tolerance = 0x84; // Name: m_flTolerance Offset: 0x84
				} // namespace CFootStepTriggerUpdateNode

				namespace CBindPoseUpdateNode {
				} // namespace CBindPoseUpdateNode

				namespace CAnimationGraphVisualizerText {
					constexpr auto v_ws_position = 0x40; // Name: m_vWsPosition Offset: 0x40
					constexpr auto color = 0x50; // Name: m_Color Offset: 0x50
					constexpr auto text = 0x58; // Name: m_Text Offset: 0x58
				} // namespace CAnimationGraphVisualizerText

				namespace CStateActionUpdater {
					constexpr auto p_action = 0x0; // Name: m_pAction Offset: 0x0
					constexpr auto e_behavior = 0x8; // Name: m_eBehavior Offset: 0x8
				} // namespace CStateActionUpdater

				namespace CMotionMatchingUpdateNode {
					constexpr auto data_set = 0x58; // Name: m_dataSet Offset: 0x58
					constexpr auto metrics = 0x78; // Name: m_metrics Offset: 0x78
					constexpr auto weights = 0x90; // Name: m_weights Offset: 0x90
					constexpr auto b_search_every_tick = 0xE0; // Name: m_bSearchEveryTick Offset: 0xE0
					constexpr auto fl_search_interval = 0xE4; // Name: m_flSearchInterval Offset: 0xE4
					constexpr auto b_search_when_clip_ends = 0xE8; // Name: m_bSearchWhenClipEnds Offset: 0xE8
					constexpr auto b_search_when_goal_changes = 0xE9; // Name: m_bSearchWhenGoalChanges Offset: 0xE9
					constexpr auto blend_curve = 0xEC; // Name: m_blendCurve Offset: 0xEC
					constexpr auto fl_sample_rate = 0xF4; // Name: m_flSampleRate Offset: 0xF4
					constexpr auto fl_blend_time = 0xF8; // Name: m_flBlendTime Offset: 0xF8
					constexpr auto b_lock_clip_when_waning = 0xFC; // Name: m_bLockClipWhenWaning Offset: 0xFC
					constexpr auto fl_selection_threshold = 0x100; // Name: m_flSelectionThreshold Offset: 0x100
					constexpr auto fl_reselection_time_window = 0x104; // Name: m_flReselectionTimeWindow Offset: 0x104
					constexpr auto b_enable_rotation_correction = 0x108; // Name: m_bEnableRotationCorrection Offset: 0x108
					constexpr auto b_goal_assist = 0x109; // Name: m_bGoalAssist Offset: 0x109
					constexpr auto fl_goal_assist_distance = 0x10C; // Name: m_flGoalAssistDistance Offset: 0x10C
					constexpr auto fl_goal_assist_tolerance = 0x110; // Name: m_flGoalAssistTolerance Offset: 0x110
					constexpr auto distance_scale__damping = 0x118; // Name: m_distanceScale_Damping Offset: 0x118
					constexpr auto fl_distance_scale__outer_radius = 0x128; // Name: m_flDistanceScale_OuterRadius Offset: 0x128
					constexpr auto fl_distance_scale__inner_radius = 0x12C; // Name: m_flDistanceScale_InnerRadius Offset: 0x12C
					constexpr auto fl_distance_scale__max_scale = 0x130; // Name: m_flDistanceScale_MaxScale Offset: 0x130
					constexpr auto fl_distance_scale__min_scale = 0x134; // Name: m_flDistanceScale_MinScale Offset: 0x134
					constexpr auto b_enable_distance_scaling = 0x138; // Name: m_bEnableDistanceScaling Offset: 0x138
				} // namespace CMotionMatchingUpdateNode

				namespace CMotionNodeSequence {
					constexpr auto tags = 0x28; // Name: m_tags Offset: 0x28
					constexpr auto h_sequence = 0x40; // Name: m_hSequence Offset: 0x40
					constexpr auto fl_playback_speed = 0x44; // Name: m_flPlaybackSpeed Offset: 0x44
				} // namespace CMotionNodeSequence

				namespace CAnimationGraphVisualizerAxis {
					constexpr auto x_ws_transform = 0x40; // Name: m_xWsTransform Offset: 0x40
					constexpr auto fl_axis_size = 0x60; // Name: m_flAxisSize Offset: 0x60
				} // namespace CAnimationGraphVisualizerAxis

				namespace FootPinningPoseOpFixedData_t {
					constexpr auto foot_info = 0x0; // Name: m_footInfo Offset: 0x0
					constexpr auto fl_blend_time = 0x18; // Name: m_flBlendTime Offset: 0x18
					constexpr auto fl_lock_break_distance = 0x1C; // Name: m_flLockBreakDistance Offset: 0x1C
					constexpr auto fl_max_leg_twist = 0x20; // Name: m_flMaxLegTwist Offset: 0x20
					constexpr auto n_hip_bone_index = 0x24; // Name: m_nHipBoneIndex Offset: 0x24
					constexpr auto b_apply_leg_twist_limits = 0x28; // Name: m_bApplyLegTwistLimits Offset: 0x28
					constexpr auto b_apply_foot_rotation_limits = 0x29; // Name: m_bApplyFootRotationLimits Offset: 0x29
				} // namespace FootPinningPoseOpFixedData_t

				namespace CDistanceRemainingMetricEvaluator {
					constexpr auto fl_max_distance = 0x50; // Name: m_flMaxDistance Offset: 0x50
					constexpr auto fl_min_distance = 0x54; // Name: m_flMinDistance Offset: 0x54
					constexpr auto fl_start_goal_filter_distance = 0x58; // Name: m_flStartGoalFilterDistance Offset: 0x58
					constexpr auto fl_max_goal_overshoot_scale = 0x5C; // Name: m_flMaxGoalOvershootScale Offset: 0x5C
					constexpr auto b_filter_fixed_min_distance = 0x60; // Name: m_bFilterFixedMinDistance Offset: 0x60
					constexpr auto b_filter_goal_distance = 0x61; // Name: m_bFilterGoalDistance Offset: 0x61
					constexpr auto b_filter_goal_overshoot = 0x62; // Name: m_bFilterGoalOvershoot Offset: 0x62
				} // namespace CDistanceRemainingMetricEvaluator

				namespace ScriptInfo_t {
					constexpr auto code = 0x0; // Name: m_code Offset: 0x0
					constexpr auto params_modified = 0x8; // Name: m_paramsModified Offset: 0x8
					constexpr auto proxy_read_params = 0x20; // Name: m_proxyReadParams Offset: 0x20
					constexpr auto proxy_write_params = 0x38; // Name: m_proxyWriteParams Offset: 0x38
					constexpr auto e_script_type = 0x50; // Name: m_eScriptType Offset: 0x50
				} // namespace ScriptInfo_t

				namespace CCycleControlClipUpdateNode {
					constexpr auto tags = 0x60; // Name: m_tags Offset: 0x60
					constexpr auto h_sequence = 0x7C; // Name: m_hSequence Offset: 0x7C
					constexpr auto duration = 0x80; // Name: m_duration Offset: 0x80
					constexpr auto value_source = 0x84; // Name: m_valueSource Offset: 0x84
					constexpr auto param_index = 0x88; // Name: m_paramIndex Offset: 0x88
				} // namespace CCycleControlClipUpdateNode

				namespace LookAtOpFixedSettings_t {
					constexpr auto attachment = 0x0; // Name: m_attachment Offset: 0x0
					constexpr auto damping = 0x80; // Name: m_damping Offset: 0x80
					constexpr auto bones = 0x90; // Name: m_bones Offset: 0x90
					constexpr auto fl_yaw_limit = 0xA8; // Name: m_flYawLimit Offset: 0xA8
					constexpr auto fl_pitch_limit = 0xAC; // Name: m_flPitchLimit Offset: 0xAC
					constexpr auto fl_hysteresis_inner_angle = 0xB0; // Name: m_flHysteresisInnerAngle Offset: 0xB0
					constexpr auto fl_hysteresis_outer_angle = 0xB4; // Name: m_flHysteresisOuterAngle Offset: 0xB4
					constexpr auto b_rotate_yaw_forward = 0xB8; // Name: m_bRotateYawForward Offset: 0xB8
					constexpr auto b_maintain_up_direction = 0xB9; // Name: m_bMaintainUpDirection Offset: 0xB9
					constexpr auto b_target_is_position = 0xBA; // Name: m_bTargetIsPosition Offset: 0xBA
					constexpr auto b_use_hysteresis = 0xBB; // Name: m_bUseHysteresis Offset: 0xBB
				} // namespace LookAtOpFixedSettings_t

				namespace CAnimGraphSettingsManager {
					constexpr auto settings_groups = 0x18; // Name: m_settingsGroups Offset: 0x18
				} // namespace CAnimGraphSettingsManager

				namespace CAnimGraphModelBinding {
					constexpr auto model_name = 0x8; // Name: m_modelName Offset: 0x8
					constexpr auto p_shared_data = 0x10; // Name: m_pSharedData Offset: 0x10
				} // namespace CAnimGraphModelBinding

				namespace CFloatAnimParameter {
					constexpr auto f_default_value = 0x80; // Name: m_fDefaultValue Offset: 0x80
					constexpr auto f_min_value = 0x84; // Name: m_fMinValue Offset: 0x84
					constexpr auto f_max_value = 0x88; // Name: m_fMaxValue Offset: 0x88
					constexpr auto b_interpolate = 0x8C; // Name: m_bInterpolate Offset: 0x8C
				} // namespace CFloatAnimParameter

				namespace CPlayerInputAnimMotorUpdater {
					constexpr auto sample_times = 0x20; // Name: m_sampleTimes Offset: 0x20
					constexpr auto fl_spring_constant = 0x3C; // Name: m_flSpringConstant Offset: 0x3C
					constexpr auto fl_anticipation_distance = 0x40; // Name: m_flAnticipationDistance Offset: 0x40
					constexpr auto h_anticipation_pos_param = 0x44; // Name: m_hAnticipationPosParam Offset: 0x44
					constexpr auto h_anticipation_heading_param = 0x46; // Name: m_hAnticipationHeadingParam Offset: 0x46
					constexpr auto b_use_acceleration = 0x48; // Name: m_bUseAcceleration Offset: 0x48
				} // namespace CPlayerInputAnimMotorUpdater

				namespace CAnimParamHandleMap {
					constexpr auto list = 0x0; // Name: m_list Offset: 0x0
				} // namespace CAnimParamHandleMap

				namespace CAnimationGraphVisualizerPie {
					constexpr auto v_ws_center = 0x40; // Name: m_vWsCenter Offset: 0x40
					constexpr auto v_ws_start = 0x50; // Name: m_vWsStart Offset: 0x50
					constexpr auto v_ws_end = 0x60; // Name: m_vWsEnd Offset: 0x60
					constexpr auto color = 0x70; // Name: m_Color Offset: 0x70
				} // namespace CAnimationGraphVisualizerPie

				namespace CCurrentRotationVelocityMetricEvaluator {
				} // namespace CCurrentRotationVelocityMetricEvaluator

				namespace TraceSettings_t {
					constexpr auto fl_trace_height = 0x0; // Name: m_flTraceHeight Offset: 0x0
					constexpr auto fl_trace_radius = 0x4; // Name: m_flTraceRadius Offset: 0x4
				} // namespace TraceSettings_t

				namespace ParamSpanSample_t {
					constexpr auto value = 0x0; // Name: m_value Offset: 0x0
					constexpr auto fl_cycle = 0x14; // Name: m_flCycle Offset: 0x14
				} // namespace ParamSpanSample_t

				namespace CMoverUpdateNode {
					constexpr auto damping = 0x70; // Name: m_damping Offset: 0x70
					constexpr auto facing_target = 0x80; // Name: m_facingTarget Offset: 0x80
					constexpr auto h_move_vec_param = 0x84; // Name: m_hMoveVecParam Offset: 0x84
					constexpr auto h_move_heading_param = 0x86; // Name: m_hMoveHeadingParam Offset: 0x86
					constexpr auto h_turn_to_face_param = 0x88; // Name: m_hTurnToFaceParam Offset: 0x88
					constexpr auto fl_turn_to_face_offset = 0x8C; // Name: m_flTurnToFaceOffset Offset: 0x8C
					constexpr auto fl_turn_to_face_limit = 0x90; // Name: m_flTurnToFaceLimit Offset: 0x90
					constexpr auto b_additive = 0x94; // Name: m_bAdditive Offset: 0x94
					constexpr auto b_apply_movement = 0x95; // Name: m_bApplyMovement Offset: 0x95
					constexpr auto b_orient_movement = 0x96; // Name: m_bOrientMovement Offset: 0x96
					constexpr auto b_apply_rotation = 0x97; // Name: m_bApplyRotation Offset: 0x97
					constexpr auto b_limit_only = 0x98; // Name: m_bLimitOnly Offset: 0x98
				} // namespace CMoverUpdateNode

				namespace CAnimMotorUpdaterBase {
					constexpr auto name = 0x10; // Name: m_name Offset: 0x10
					constexpr auto b_default = 0x18; // Name: m_bDefault Offset: 0x18
				} // namespace CAnimMotorUpdaterBase

				namespace JiggleBoneSettingsList_t {
					constexpr auto bone_settings = 0x0; // Name: m_boneSettings Offset: 0x0
				} // namespace JiggleBoneSettingsList_t

				namespace CSubtractUpdateNode {
					constexpr auto foot_motion_timing = 0x8C; // Name: m_footMotionTiming Offset: 0x8C
					constexpr auto b_apply_to_foot_motion = 0x90; // Name: m_bApplyToFootMotion Offset: 0x90
					constexpr auto b_apply_channels_separately = 0x91; // Name: m_bApplyChannelsSeparately Offset: 0x91
					constexpr auto b_use_model_space = 0x92; // Name: m_bUseModelSpace Offset: 0x92
				} // namespace CSubtractUpdateNode

				namespace CPoseHandle {
					constexpr auto n_index = 0x0; // Name: m_nIndex Offset: 0x0
					constexpr auto e_type = 0x2; // Name: m_eType Offset: 0x2
				} // namespace CPoseHandle

				namespace CBoneMaskUpdateNode {
					constexpr auto n_weight_list_index = 0x8C; // Name: m_nWeightListIndex Offset: 0x8C
					constexpr auto fl_root_motion_blend = 0x90; // Name: m_flRootMotionBlend Offset: 0x90
					constexpr auto blend_space = 0x94; // Name: m_blendSpace Offset: 0x94
					constexpr auto foot_motion_timing = 0x98; // Name: m_footMotionTiming Offset: 0x98
					constexpr auto b_use_blend_scale = 0x9C; // Name: m_bUseBlendScale Offset: 0x9C
					constexpr auto blend_value_source = 0xA0; // Name: m_blendValueSource Offset: 0xA0
					constexpr auto h_blend_parameter = 0xA4; // Name: m_hBlendParameter Offset: 0xA4
				} // namespace CBoneMaskUpdateNode

				namespace CLeafUpdateNode {
				} // namespace CLeafUpdateNode

				namespace SolveIKChainPoseOpFixedSettings_t {
					constexpr auto chains_to_solve_data = 0x0; // Name: m_ChainsToSolveData Offset: 0x0
				} // namespace SolveIKChainPoseOpFixedSettings_t

				namespace CAnimUpdateSharedData {
					constexpr auto nodes = 0x10; // Name: m_nodes Offset: 0x10
					constexpr auto node_index_map = 0x28; // Name: m_nodeIndexMap Offset: 0x28
					constexpr auto components = 0x48; // Name: m_components Offset: 0x48
					constexpr auto p_param_list_updater = 0x60; // Name: m_pParamListUpdater Offset: 0x60
					constexpr auto p_tag_manager_updater = 0x68; // Name: m_pTagManagerUpdater Offset: 0x68
					constexpr auto script_manager = 0x70; // Name: m_scriptManager Offset: 0x70
					constexpr auto settings = 0x78; // Name: m_settings Offset: 0x78
					constexpr auto p_static_pose_cache = 0xA8; // Name: m_pStaticPoseCache Offset: 0xA8
					constexpr auto p_skeleton = 0xB0; // Name: m_pSkeleton Offset: 0xB0
					constexpr auto root_node_path = 0xB8; // Name: m_rootNodePath Offset: 0xB8
				} // namespace CAnimUpdateSharedData

				namespace CEditableMotionGraph {
				} // namespace CEditableMotionGraph

				namespace CStringAnimTag {
				} // namespace CStringAnimTag

				namespace CMotionNode {
					constexpr auto name = 0x18; // Name: m_name Offset: 0x18
					constexpr auto id = 0x20; // Name: m_id Offset: 0x20
				} // namespace CMotionNode

				namespace CBodyGroupAnimTag {
					constexpr auto n_priority = 0x58; // Name: m_nPriority Offset: 0x58
					constexpr auto body_group_settings = 0x60; // Name: m_bodyGroupSettings Offset: 0x60
				} // namespace CBodyGroupAnimTag

				namespace CDirectionalBlendUpdateNode {
					constexpr auto h_sequences = 0x5C; // Name: m_hSequences Offset: 0x5C
					constexpr auto damping = 0x80; // Name: m_damping Offset: 0x80
					constexpr auto blend_value_source = 0x90; // Name: m_blendValueSource Offset: 0x90
					constexpr auto param_index = 0x94; // Name: m_paramIndex Offset: 0x94
					constexpr auto playback_speed = 0x98; // Name: m_playbackSpeed Offset: 0x98
					constexpr auto duration = 0x9C; // Name: m_duration Offset: 0x9C
					constexpr auto b_loop = 0xA0; // Name: m_bLoop Offset: 0xA0
					constexpr auto b_lock_blend_on_reset = 0xA1; // Name: m_bLockBlendOnReset Offset: 0xA1
				} // namespace CDirectionalBlendUpdateNode

				namespace ParamSpan_t {
					constexpr auto samples = 0x0; // Name: m_samples Offset: 0x0
					constexpr auto h_param = 0x18; // Name: m_hParam Offset: 0x18
					constexpr auto e_param_type = 0x1A; // Name: m_eParamType Offset: 0x1A
					constexpr auto fl_start_cycle = 0x1C; // Name: m_flStartCycle Offset: 0x1C
					constexpr auto fl_end_cycle = 0x20; // Name: m_flEndCycle Offset: 0x20
				} // namespace ParamSpan_t

				namespace IKTargetSettings_t {
					constexpr auto target_source = 0x0; // Name: m_TargetSource Offset: 0x0
					constexpr auto bone = 0x8; // Name: m_Bone Offset: 0x8
					constexpr auto animgraph_parameter_name_position = 0x18; // Name: m_AnimgraphParameterNamePosition Offset: 0x18
					constexpr auto animgraph_parameter_name_orientation = 0x1C; // Name: m_AnimgraphParameterNameOrientation Offset: 0x1C
					constexpr auto target_coord_system = 0x20; // Name: m_TargetCoordSystem Offset: 0x20
				} // namespace IKTargetSettings_t

				namespace CMotionSearchDB {
					constexpr auto root_node = 0x0; // Name: m_rootNode Offset: 0x0
					constexpr auto residual_quantizer = 0x80; // Name: m_residualQuantizer Offset: 0x80
					constexpr auto code_indices = 0xA0; // Name: m_codeIndices Offset: 0xA0
				} // namespace CMotionSearchDB

				namespace CMotionNodeBlend1D {
					constexpr auto blend_items = 0x28; // Name: m_blendItems Offset: 0x28
					constexpr auto n_param_index = 0x40; // Name: m_nParamIndex Offset: 0x40
				} // namespace CMotionNodeBlend1D

				namespace CTwoBoneIKUpdateNode {
					constexpr auto op_fixed_data = 0x70; // Name: m_opFixedData Offset: 0x70
				} // namespace CTwoBoneIKUpdateNode

				namespace CTaskHandshakeAnimTag {
				} // namespace CTaskHandshakeAnimTag

				namespace CFollowPathUpdateNode {
					constexpr auto fl_blend_out_time = 0x6C; // Name: m_flBlendOutTime Offset: 0x6C
					constexpr auto b_block_non_path_movement = 0x70; // Name: m_bBlockNonPathMovement Offset: 0x70
					constexpr auto b_stop_feet_at_goal = 0x71; // Name: m_bStopFeetAtGoal Offset: 0x71
					constexpr auto b_scale_speed = 0x72; // Name: m_bScaleSpeed Offset: 0x72
					constexpr auto fl_scale = 0x74; // Name: m_flScale Offset: 0x74
					constexpr auto fl_min_angle = 0x78; // Name: m_flMinAngle Offset: 0x78
					constexpr auto fl_max_angle = 0x7C; // Name: m_flMaxAngle Offset: 0x7C
					constexpr auto fl_speed_scale_blending = 0x80; // Name: m_flSpeedScaleBlending Offset: 0x80
					constexpr auto turn_damping = 0x88; // Name: m_turnDamping Offset: 0x88
					constexpr auto facing_target = 0x98; // Name: m_facingTarget Offset: 0x98
					constexpr auto h_param = 0x9C; // Name: m_hParam Offset: 0x9C
					constexpr auto fl_turn_to_face_offset = 0xA0; // Name: m_flTurnToFaceOffset Offset: 0xA0
					constexpr auto b_turn_to_face = 0xA4; // Name: m_bTurnToFace Offset: 0xA4
				} // namespace CFollowPathUpdateNode

				namespace AimMatrixOpFixedSettings_t {
					constexpr auto attachment = 0x0; // Name: m_attachment Offset: 0x0
					constexpr auto damping = 0x80; // Name: m_damping Offset: 0x80
					constexpr auto pose_cache_handles = 0x90; // Name: m_poseCacheHandles Offset: 0x90
					constexpr auto e_blend_mode = 0xB8; // Name: m_eBlendMode Offset: 0xB8
					constexpr auto fl_max_yaw_angle = 0xBC; // Name: m_flMaxYawAngle Offset: 0xBC
					constexpr auto fl_max_pitch_angle = 0xC0; // Name: m_flMaxPitchAngle Offset: 0xC0
					constexpr auto n_sequence_max_frame = 0xC4; // Name: m_nSequenceMaxFrame Offset: 0xC4
					constexpr auto n_bone_mask_index = 0xC8; // Name: m_nBoneMaskIndex Offset: 0xC8
					constexpr auto b_target_is_position = 0xCC; // Name: m_bTargetIsPosition Offset: 0xCC
					constexpr auto b_use_bias_and_clamp = 0xCD; // Name: m_bUseBiasAndClamp Offset: 0xCD
					constexpr auto fl_bias_and_clamp_yaw_offset = 0xD0; // Name: m_flBiasAndClampYawOffset Offset: 0xD0
					constexpr auto fl_bias_and_clamp_pitch_offset = 0xD4; // Name: m_flBiasAndClampPitchOffset Offset: 0xD4
					constexpr auto bias_and_clamp_blend_curve = 0xD8; // Name: m_biasAndClampBlendCurve Offset: 0xD8
				} // namespace AimMatrixOpFixedSettings_t

				namespace CAnimScriptComponentUpdater {
					constexpr auto h_script = 0x30; // Name: m_hScript Offset: 0x30
				} // namespace CAnimScriptComponentUpdater

				namespace CRagdollUpdateNode {
					constexpr auto n_weight_list_index = 0x68; // Name: m_nWeightListIndex Offset: 0x68
					constexpr auto pose_control_method = 0x6C; // Name: m_poseControlMethod Offset: 0x6C
				} // namespace CRagdollUpdateNode

				namespace CPathAnimMotorUpdater {
				} // namespace CPathAnimMotorUpdater

				namespace CMaterialAttributeAnimTag {
					constexpr auto attribute_name = 0x58; // Name: m_AttributeName Offset: 0x58
					constexpr auto attribute_type = 0x60; // Name: m_AttributeType Offset: 0x60
					constexpr auto fl_value = 0x64; // Name: m_flValue Offset: 0x64
					constexpr auto color = 0x68; // Name: m_Color Offset: 0x68
				} // namespace CMaterialAttributeAnimTag

				namespace CTargetWarpUpdateNode {
					constexpr auto h_position_parameter = 0x6C; // Name: m_hPositionParameter Offset: 0x6C
					constexpr auto h_face_position_parameter = 0x6E; // Name: m_hFacePositionParameter Offset: 0x6E
				} // namespace CTargetWarpUpdateNode

				namespace CFollowTargetUpdateNode {
					constexpr auto op_fixed_data = 0x68; // Name: m_opFixedData Offset: 0x68
					constexpr auto h_parameter_position = 0x80; // Name: m_hParameterPosition Offset: 0x80
					constexpr auto h_parameter_orientation = 0x82; // Name: m_hParameterOrientation Offset: 0x82
				} // namespace CFollowTargetUpdateNode

				namespace CCPPScriptComponentUpdater {
					constexpr auto scripts_to_run = 0x30; // Name: m_scriptsToRun Offset: 0x30
				} // namespace CCPPScriptComponentUpdater

				namespace IKSolverSettings_t {
					constexpr auto solver_type = 0x0; // Name: m_SolverType Offset: 0x0
					constexpr auto n_num_iterations = 0x4; // Name: m_nNumIterations Offset: 0x4
					constexpr auto end_effector_rotation_fix_up_mode = 0x8; // Name: m_EndEffectorRotationFixUpMode Offset: 0x8
				} // namespace IKSolverSettings_t

				namespace CBinaryUpdateNode {
					constexpr auto p_child1 = 0x58; // Name: m_pChild1 Offset: 0x58
					constexpr auto p_child2 = 0x68; // Name: m_pChild2 Offset: 0x68
					constexpr auto timing_behavior = 0x78; // Name: m_timingBehavior Offset: 0x78
					constexpr auto fl_timing_blend = 0x7C; // Name: m_flTimingBlend Offset: 0x7C
					constexpr auto b_reset_child1 = 0x80; // Name: m_bResetChild1 Offset: 0x80
					constexpr auto b_reset_child2 = 0x81; // Name: m_bResetChild2 Offset: 0x81
				} // namespace CBinaryUpdateNode

				namespace FootFixedData_t {
					constexpr auto v_toe_offset = 0x0; // Name: m_vToeOffset Offset: 0x0
					constexpr auto v_heel_offset = 0x10; // Name: m_vHeelOffset Offset: 0x10
					constexpr auto n_target_bone_index = 0x20; // Name: m_nTargetBoneIndex Offset: 0x20
					constexpr auto n_ankle_bone_index = 0x24; // Name: m_nAnkleBoneIndex Offset: 0x24
					constexpr auto n_ikanchor_bone_index = 0x28; // Name: m_nIKAnchorBoneIndex Offset: 0x28
					constexpr auto ik_chain_index = 0x2C; // Name: m_ikChainIndex Offset: 0x2C
					constexpr auto fl_max_iklength = 0x30; // Name: m_flMaxIKLength Offset: 0x30
					constexpr auto n_foot_index = 0x34; // Name: m_nFootIndex Offset: 0x34
					constexpr auto n_tag_index = 0x38; // Name: m_nTagIndex Offset: 0x38
					constexpr auto fl_max_rotation_left = 0x3C; // Name: m_flMaxRotationLeft Offset: 0x3C
					constexpr auto fl_max_rotation_right = 0x40; // Name: m_flMaxRotationRight Offset: 0x40
				} // namespace FootFixedData_t

				namespace CWayPointHelperUpdateNode {
					constexpr auto fl_start_cycle = 0x6C; // Name: m_flStartCycle Offset: 0x6C
					constexpr auto fl_end_cycle = 0x70; // Name: m_flEndCycle Offset: 0x70
					constexpr auto b_only_goals = 0x74; // Name: m_bOnlyGoals Offset: 0x74
					constexpr auto b_prevent_overshoot = 0x75; // Name: m_bPreventOvershoot Offset: 0x75
					constexpr auto b_prevent_undershoot = 0x76; // Name: m_bPreventUndershoot Offset: 0x76
				} // namespace CWayPointHelperUpdateNode
			}

			namespace animlib
			{

				namespace CNmFloatRemapNode_RemapRange_t {
					constexpr auto fl_begin = 0x0; // Name: m_flBegin Offset: 0x0
					constexpr auto fl_end = 0x4; // Name: m_flEnd Offset: 0x4
				} // namespace CNmFloatRemapNode_RemapRange_t

				namespace CNmCachedVectorNode_CDefinition {
					constexpr auto n_input_value_node_idx = 0x10; // Name: m_nInputValueNodeIdx Offset: 0x10
					constexpr auto mode = 0x14; // Name: m_mode Offset: 0x14
				} // namespace CNmCachedVectorNode_CDefinition

				namespace CNmTargetInfoNode_CDefinition {
					constexpr auto n_input_value_node_idx = 0x10; // Name: m_nInputValueNodeIdx Offset: 0x10
					constexpr auto info_type = 0x14; // Name: m_infoType Offset: 0x14
					constexpr auto b_is_world_space_target = 0x18; // Name: m_bIsWorldSpaceTarget Offset: 0x18
				} // namespace CNmTargetInfoNode_CDefinition

				namespace CNmControlParameterVectorNode_CDefinition {
				} // namespace CNmControlParameterVectorNode_CDefinition

				namespace CNmParameterizedBlendNode_CDefinition {
					constexpr auto source_node_indices = 0x10; // Name: m_sourceNodeIndices Offset: 0x10
					constexpr auto n_input_parameter_value_node_idx = 0x38; // Name: m_nInputParameterValueNodeIdx Offset: 0x38
					constexpr auto b_allow_looping = 0x3A; // Name: m_bAllowLooping Offset: 0x3A
				} // namespace CNmParameterizedBlendNode_CDefinition

				namespace CNmFrameSnapEvent {
					constexpr auto frame_snap_mode = 0x18; // Name: m_frameSnapMode Offset: 0x18
				} // namespace CNmFrameSnapEvent

				namespace CNmBoneMaskBlendNode_CDefinition {
					constexpr auto n_source_mask_node_idx = 0x10; // Name: m_nSourceMaskNodeIdx Offset: 0x10
					constexpr auto n_target_mask_node_idx = 0x12; // Name: m_nTargetMaskNodeIdx Offset: 0x12
					constexpr auto n_blend_weight_value_node_idx = 0x14; // Name: m_nBlendWeightValueNodeIdx Offset: 0x14
				} // namespace CNmBoneMaskBlendNode_CDefinition

				namespace CNmTransitionEventConditionNode_CDefinition {
					constexpr auto require_rule_id = 0x10; // Name: m_requireRuleID Offset: 0x10
					constexpr auto event_condition_rules = 0x18; // Name: m_eventConditionRules Offset: 0x18
					constexpr auto n_source_state_node_idx = 0x1C; // Name: m_nSourceStateNodeIdx Offset: 0x1C
					constexpr auto rule_condition = 0x1E; // Name: m_ruleCondition Offset: 0x1E
				} // namespace CNmTransitionEventConditionNode_CDefinition

				namespace CNmTask {
				} // namespace CNmTask

				namespace CNmClipNode_CDefinition {
					constexpr auto n_play_in_reverse_value_node_idx = 0x10; // Name: m_nPlayInReverseValueNodeIdx Offset: 0x10
					constexpr auto n_reset_time_value_node_idx = 0x12; // Name: m_nResetTimeValueNodeIdx Offset: 0x12
					constexpr auto b_sample_root_motion = 0x14; // Name: m_bSampleRootMotion Offset: 0x14
					constexpr auto b_allow_looping = 0x15; // Name: m_bAllowLooping Offset: 0x15
					constexpr auto n_data_slot_idx = 0x16; // Name: m_nDataSlotIdx Offset: 0x16
				} // namespace CNmClipNode_CDefinition

				namespace CNmPassthroughNode_CDefinition {
					constexpr auto n_child_node_idx = 0x10; // Name: m_nChildNodeIdx Offset: 0x10
				} // namespace CNmPassthroughNode_CDefinition

				namespace CNmSyncTrack {
					constexpr auto sync_events = 0x0; // Name: m_syncEvents Offset: 0x0
					constexpr auto n_start_event_offset = 0xA8; // Name: m_nStartEventOffset Offset: 0xA8
				} // namespace CNmSyncTrack

				namespace CNmGraphDefinition_ExternalGraphSlot_t {
					constexpr auto n_node_idx = 0x0; // Name: m_nNodeIdx Offset: 0x0
					constexpr auto slot_id = 0x8; // Name: m_slotID Offset: 0x8
				} // namespace CNmGraphDefinition_ExternalGraphSlot_t

				namespace CNmTargetOffsetNode_CDefinition {
					constexpr auto n_input_value_node_idx = 0x10; // Name: m_nInputValueNodeIdx Offset: 0x10
					constexpr auto b_is_bone_space_offset = 0x12; // Name: m_bIsBoneSpaceOffset Offset: 0x12
					constexpr auto rotation_offset = 0x20; // Name: m_rotationOffset Offset: 0x20
					constexpr auto translation_offset = 0x30; // Name: m_translationOffset Offset: 0x30
				} // namespace CNmTargetOffsetNode_CDefinition

				namespace CNmVelocityBasedSpeedScaleNode_CDefinition {
				} // namespace CNmVelocityBasedSpeedScaleNode_CDefinition

				namespace CNmClip {
					constexpr auto skeleton = 0x0; // Name: m_skeleton Offset: 0x0
					constexpr auto n_num_frames = 0x8; // Name: m_nNumFrames Offset: 0x8
					constexpr auto fl_duration = 0xC; // Name: m_flDuration Offset: 0xC
					constexpr auto compressed_pose_data = 0x10; // Name: m_compressedPoseData Offset: 0x10
					constexpr auto track_compression_settings = 0x28; // Name: m_trackCompressionSettings Offset: 0x28
					constexpr auto compressed_pose_offsets = 0x40; // Name: m_compressedPoseOffsets Offset: 0x40
					constexpr auto sync_track = 0xA0; // Name: m_syncTrack Offset: 0xA0
					constexpr auto root_motion = 0x150; // Name: m_rootMotion Offset: 0x150
					constexpr auto b_is_additive = 0x1A0; // Name: m_bIsAdditive Offset: 0x1A0
				} // namespace CNmClip

				namespace CNmIDEventNode_CDefinition {
					constexpr auto n_source_state_node_idx = 0x10; // Name: m_nSourceStateNodeIdx Offset: 0x10
					constexpr auto event_condition_rules = 0x14; // Name: m_eventConditionRules Offset: 0x14
					constexpr auto default_value = 0x18; // Name: m_defaultValue Offset: 0x18
				} // namespace CNmIDEventNode_CDefinition

				namespace CNmOrNode_CDefinition {
					constexpr auto condition_node_indices = 0x10; // Name: m_conditionNodeIndices Offset: 0x10
				} // namespace CNmOrNode_CDefinition

				namespace CNmCachedPoseReadTask {
				} // namespace CNmCachedPoseReadTask

				namespace CNmReferencePoseNode_CDefinition {
				} // namespace CNmReferencePoseNode_CDefinition

				namespace CNmSampleTask {
				} // namespace CNmSampleTask

				namespace CNmPoseNode_CDefinition {
				} // namespace CNmPoseNode_CDefinition

				namespace CNmVectorInfoNode_CDefinition {
					constexpr auto n_input_value_node_idx = 0x10; // Name: m_nInputValueNodeIdx Offset: 0x10
					constexpr auto desired_info = 0x12; // Name: m_desiredInfo Offset: 0x12
				} // namespace CNmVectorInfoNode_CDefinition

				namespace CNmCachedFloatNode_CDefinition {
					constexpr auto n_input_value_node_idx = 0x10; // Name: m_nInputValueNodeIdx Offset: 0x10
					constexpr auto mode = 0x14; // Name: m_mode Offset: 0x14
				} // namespace CNmCachedFloatNode_CDefinition

				namespace CNmStateNode_CDefinition {
					constexpr auto n_child_node_idx = 0x10; // Name: m_nChildNodeIdx Offset: 0x10
					constexpr auto entry_events = 0x18; // Name: m_entryEvents Offset: 0x18
					constexpr auto execute_events = 0x38; // Name: m_executeEvents Offset: 0x38
					constexpr auto exit_events = 0x58; // Name: m_exitEvents Offset: 0x58
					constexpr auto timed_remaining_events = 0x78; // Name: m_timedRemainingEvents Offset: 0x78
					constexpr auto timed_elapsed_events = 0x90; // Name: m_timedElapsedEvents Offset: 0x90
					constexpr auto n_layer_weight_node_idx = 0xA8; // Name: m_nLayerWeightNodeIdx Offset: 0xA8
					constexpr auto n_layer_root_motion_weight_node_idx = 0xAA; // Name: m_nLayerRootMotionWeightNodeIdx Offset: 0xAA
					constexpr auto n_layer_bone_mask_node_idx = 0xAC; // Name: m_nLayerBoneMaskNodeIdx Offset: 0xAC
					constexpr auto b_is_off_state = 0xAE; // Name: m_bIsOffState Offset: 0xAE
				} // namespace CNmStateNode_CDefinition

				namespace CNmBlendTask {
				} // namespace CNmBlendTask

				namespace CNmVectorValueNode_CDefinition {
				} // namespace CNmVectorValueNode_CDefinition

				namespace CNmFloatValueNode_CDefinition {
				} // namespace CNmFloatValueNode_CDefinition

				namespace CNmClipSelectorNode_CDefinition {
					constexpr auto option_node_indices = 0x10; // Name: m_optionNodeIndices Offset: 0x10
					constexpr auto condition_node_indices = 0x28; // Name: m_conditionNodeIndices Offset: 0x28
				} // namespace CNmClipSelectorNode_CDefinition

				namespace CNmIKRig {
					constexpr auto skeleton = 0x0; // Name: m_skeleton Offset: 0x0
				} // namespace CNmIKRig

				namespace CNmVirtualParameterTargetNode_CDefinition {
					constexpr auto n_child_node_idx = 0x10; // Name: m_nChildNodeIdx Offset: 0x10
				} // namespace CNmVirtualParameterTargetNode_CDefinition

				namespace CNmExternalGraphNode_CDefinition {
				} // namespace CNmExternalGraphNode_CDefinition

				namespace CNmStateMachineNode_StateDefinition_t {
					constexpr auto n_state_node_idx = 0x0; // Name: m_nStateNodeIdx Offset: 0x0
					constexpr auto n_entry_condition_node_idx = 0x2; // Name: m_nEntryConditionNodeIdx Offset: 0x2
					constexpr auto transition_definitions = 0x8; // Name: m_transitionDefinitions Offset: 0x8
				} // namespace CNmStateMachineNode_StateDefinition_t

				namespace CNmTransitionNode_CDefinition {
					constexpr auto n_target_state_node_idx = 0x10; // Name: m_nTargetStateNodeIdx Offset: 0x10
					constexpr auto n_duration_override_node_idx = 0x12; // Name: m_nDurationOverrideNodeIdx Offset: 0x12
					constexpr auto sync_event_offset_override_node_idx = 0x14; // Name: m_syncEventOffsetOverrideNodeIdx Offset: 0x14
					constexpr auto start_bone_mask_node_idx = 0x16; // Name: m_startBoneMaskNodeIdx Offset: 0x16
					constexpr auto fl_duration = 0x18; // Name: m_flDuration Offset: 0x18
					constexpr auto bone_mask_blend_in_time_percentage = 0x1C; // Name: m_boneMaskBlendInTimePercentage Offset: 0x1C
					constexpr auto sync_event_offset = 0x20; // Name: m_syncEventOffset Offset: 0x20
					constexpr auto transition_options = 0x24; // Name: m_transitionOptions Offset: 0x24
					constexpr auto target_sync_idnode_idx = 0x28; // Name: m_targetSyncIDNodeIdx Offset: 0x28
					constexpr auto blend_weight_easing = 0x2A; // Name: m_blendWeightEasing Offset: 0x2A
					constexpr auto root_motion_blend = 0x2B; // Name: m_rootMotionBlend Offset: 0x2B
				} // namespace CNmTransitionNode_CDefinition

				namespace CNmFloatEaseNode_CDefinition {
					constexpr auto fl_ease_time = 0x10; // Name: m_flEaseTime Offset: 0x10
					constexpr auto fl_start_value = 0x14; // Name: m_flStartValue Offset: 0x14
					constexpr auto n_input_value_node_idx = 0x18; // Name: m_nInputValueNodeIdx Offset: 0x18
					constexpr auto easing_op = 0x1A; // Name: m_easingOp Offset: 0x1A
					constexpr auto b_use_start_value = 0x1B; // Name: m_bUseStartValue Offset: 0x1B
				} // namespace CNmFloatEaseNode_CDefinition

				namespace CNmGraphVariation {
					constexpr auto graph_definition = 0x0; // Name: m_graphDefinition Offset: 0x0
					constexpr auto data_set = 0x8; // Name: m_dataSet Offset: 0x8
				} // namespace CNmGraphVariation

				namespace CNmVirtualParameterFloatNode_CDefinition {
					constexpr auto n_child_node_idx = 0x10; // Name: m_nChildNodeIdx Offset: 0x10
				} // namespace CNmVirtualParameterFloatNode_CDefinition

				namespace CNmVelocityBlendNode_CDefinition {
				} // namespace CNmVelocityBlendNode_CDefinition

				namespace CNmFloatAngleMathNode_CDefinition {
					constexpr auto n_input_value_node_idx = 0x10; // Name: m_nInputValueNodeIdx Offset: 0x10
					constexpr auto operation = 0x12; // Name: m_operation Offset: 0x12
				} // namespace CNmFloatAngleMathNode_CDefinition

				namespace CNmBlend1DNode_CDefinition {
					constexpr auto parameterization = 0x40; // Name: m_parameterization Offset: 0x40
				} // namespace CNmBlend1DNode_CDefinition

				namespace CNmIDEventConditionNode_CDefinition {
					constexpr auto n_source_state_node_idx = 0x10; // Name: m_nSourceStateNodeIdx Offset: 0x10
					constexpr auto event_condition_rules = 0x14; // Name: m_eventConditionRules Offset: 0x14
					constexpr auto event_ids = 0x18; // Name: m_eventIDs Offset: 0x18
				} // namespace CNmIDEventConditionNode_CDefinition

				namespace CNmCurrentSyncEventIndexNode_CDefinition {
					constexpr auto n_source_state_node_idx = 0x10; // Name: m_nSourceStateNodeIdx Offset: 0x10
				} // namespace CNmCurrentSyncEventIndexNode_CDefinition

				namespace CNmGraphDefinition {
					constexpr auto persistent_node_indices = 0x0; // Name: m_persistentNodeIndices Offset: 0x0
					constexpr auto n_root_node_idx = 0x18; // Name: m_nRootNodeIdx Offset: 0x18
					constexpr auto control_parameter_ids = 0x20; // Name: m_controlParameterIDs Offset: 0x20
					constexpr auto virtual_parameter_ids = 0x38; // Name: m_virtualParameterIDs Offset: 0x38
					constexpr auto virtual_parameter_node_indices = 0x50; // Name: m_virtualParameterNodeIndices Offset: 0x50
					constexpr auto child_graph_slots = 0x68; // Name: m_childGraphSlots Offset: 0x68
					constexpr auto external_graph_slots = 0x80; // Name: m_externalGraphSlots Offset: 0x80
					constexpr auto node_paths = 0x108; // Name: m_nodePaths Offset: 0x108
					constexpr auto runtime_version_id = 0x120; // Name: m_runtimeVersionID Offset: 0x120
				} // namespace CNmGraphDefinition

				namespace CNmSelectorNode_CDefinition {
					constexpr auto option_node_indices = 0x10; // Name: m_optionNodeIndices Offset: 0x10
					constexpr auto condition_node_indices = 0x28; // Name: m_conditionNodeIndices Offset: 0x28
				} // namespace CNmSelectorNode_CDefinition

				namespace CNmSkeleton {
					constexpr auto id = 0x0; // Name: m_ID Offset: 0x0
					constexpr auto bone_ids = 0x8; // Name: m_boneIDs Offset: 0x8
					constexpr auto parent_indices = 0x18; // Name: m_parentIndices Offset: 0x18
					constexpr auto parent_space_reference_pose = 0x30; // Name: m_parentSpaceReferencePose Offset: 0x30
					constexpr auto model_space_reference_pose = 0x48; // Name: m_modelSpaceReferencePose Offset: 0x48
					constexpr auto num_bones_to_sample_at_low_lod = 0x60; // Name: m_numBonesToSampleAtLowLOD Offset: 0x60
					constexpr auto bone_masks = 0x68; // Name: m_boneMasks Offset: 0x68
				} // namespace CNmSkeleton

				namespace CNmIDEventPercentageThroughNode_CDefinition {
					constexpr auto n_source_state_node_idx = 0x10; // Name: m_nSourceStateNodeIdx Offset: 0x10
					constexpr auto event_condition_rules = 0x14; // Name: m_eventConditionRules Offset: 0x14
					constexpr auto event_id = 0x18; // Name: m_eventID Offset: 0x18
				} // namespace CNmIDEventPercentageThroughNode_CDefinition

				namespace CNmCachedBoolNode_CDefinition {
					constexpr auto n_input_value_node_idx = 0x10; // Name: m_nInputValueNodeIdx Offset: 0x10
					constexpr auto mode = 0x14; // Name: m_mode Offset: 0x14
				} // namespace CNmCachedBoolNode_CDefinition

				namespace CNmGraphDataSet {
					constexpr auto variation_id = 0x0; // Name: m_variationID Offset: 0x0
					constexpr auto skeleton = 0x8; // Name: m_skeleton Offset: 0x8
					constexpr auto resources = 0x10; // Name: m_resources Offset: 0x10
				} // namespace CNmGraphDataSet

				namespace CNmSyncEventIndexConditionNode_CDefinition {
					constexpr auto n_source_state_node_idx = 0x10; // Name: m_nSourceStateNodeIdx Offset: 0x10
					constexpr auto trigger_mode = 0x12; // Name: m_triggerMode Offset: 0x12
					constexpr auto sync_event_idx = 0x14; // Name: m_syncEventIdx Offset: 0x14
				} // namespace CNmSyncEventIndexConditionNode_CDefinition

				namespace CNmAdditiveBlendTask {
				} // namespace CNmAdditiveBlendTask

				namespace CNmFloatSwitchNode_CDefinition {
					constexpr auto n_switch_value_node_idx = 0x10; // Name: m_nSwitchValueNodeIdx Offset: 0x10
					constexpr auto n_true_value_node_idx = 0x12; // Name: m_nTrueValueNodeIdx Offset: 0x12
					constexpr auto n_false_value_node_idx = 0x14; // Name: m_nFalseValueNodeIdx Offset: 0x14
				} // namespace CNmFloatSwitchNode_CDefinition

				namespace CNmVirtualParameterBoneMaskNode_CDefinition {
					constexpr auto n_child_node_idx = 0x10; // Name: m_nChildNodeIdx Offset: 0x10
				} // namespace CNmVirtualParameterBoneMaskNode_CDefinition

				namespace CNmBlendTaskBase {
				} // namespace CNmBlendTaskBase

				namespace CNmZeroPoseTask {
				} // namespace CNmZeroPoseTask

				namespace CNmReferencePoseTask {
				} // namespace CNmReferencePoseTask

				namespace CNmVectorCreateNode_CDefinition {
					constexpr auto input_vector_value_node_idx = 0x10; // Name: m_inputVectorValueNodeIdx Offset: 0x10
					constexpr auto input_value_xnode_idx = 0x12; // Name: m_inputValueXNodeIdx Offset: 0x12
					constexpr auto input_value_ynode_idx = 0x14; // Name: m_inputValueYNodeIdx Offset: 0x14
					constexpr auto input_value_znode_idx = 0x16; // Name: m_inputValueZNodeIdx Offset: 0x16
				} // namespace CNmVectorCreateNode_CDefinition

				namespace CNmBoneMaskSelectorNode_CDefinition {
					constexpr auto default_mask_node_idx = 0x10; // Name: m_defaultMaskNodeIdx Offset: 0x10
					constexpr auto parameter_value_node_idx = 0x12; // Name: m_parameterValueNodeIdx Offset: 0x12
					constexpr auto switch_dynamically = 0x14; // Name: m_switchDynamically Offset: 0x14
					constexpr auto mask_node_indices = 0x18; // Name: m_maskNodeIndices Offset: 0x18
					constexpr auto parameter_values = 0x40; // Name: m_parameterValues Offset: 0x40
					constexpr auto fl_blend_time_seconds = 0x90; // Name: m_flBlendTimeSeconds Offset: 0x90
				} // namespace CNmBoneMaskSelectorNode_CDefinition

				namespace CNmVirtualParameterVectorNode_CDefinition {
					constexpr auto n_child_node_idx = 0x10; // Name: m_nChildNodeIdx Offset: 0x10
				} // namespace CNmVirtualParameterVectorNode_CDefinition

				namespace CNmConstIDNode_CDefinition {
					constexpr auto value = 0x10; // Name: m_value Offset: 0x10
				} // namespace CNmConstIDNode_CDefinition

				namespace CNmParameterizedSelectorNode_CDefinition {
					constexpr auto option_node_indices = 0x10; // Name: m_optionNodeIndices Offset: 0x10
					constexpr auto parameter_node_idx = 0x28; // Name: m_parameterNodeIdx Offset: 0x28
				} // namespace CNmParameterizedSelectorNode_CDefinition

				namespace CNmEvent {
					constexpr auto fl_start_time_seconds = 0x8; // Name: m_flStartTimeSeconds Offset: 0x8
					constexpr auto fl_duration_seconds = 0xC; // Name: m_flDurationSeconds Offset: 0xC
					constexpr auto sync_id = 0x10; // Name: m_syncID Offset: 0x10
				} // namespace CNmEvent

				namespace CNmStateCompletedConditionNode_CDefinition {
					constexpr auto n_source_state_node_idx = 0x10; // Name: m_nSourceStateNodeIdx Offset: 0x10
					constexpr auto n_transition_duration_override_node_idx = 0x12; // Name: m_nTransitionDurationOverrideNodeIdx Offset: 0x12
					constexpr auto fl_transition_duration_seconds = 0x14; // Name: m_flTransitionDurationSeconds Offset: 0x14
				} // namespace CNmStateCompletedConditionNode_CDefinition

				namespace NmCompressionSettings_t_QuantizationRange_t {
					constexpr auto fl_range_start = 0x0; // Name: m_flRangeStart Offset: 0x0
					constexpr auto fl_range_length = 0x4; // Name: m_flRangeLength Offset: 0x4
				} // namespace NmCompressionSettings_t_QuantizationRange_t

				namespace CNmConstTargetNode_CDefinition {
					constexpr auto value = 0x10; // Name: m_value Offset: 0x10
				} // namespace CNmConstTargetNode_CDefinition

				namespace CNmFloatMathNode_CDefinition {
					constexpr auto n_input_value_node_idx_a = 0x10; // Name: m_nInputValueNodeIdxA Offset: 0x10
					constexpr auto n_input_value_node_idx_b = 0x12; // Name: m_nInputValueNodeIdxB Offset: 0x12
					constexpr auto b_return_absolute_result = 0x14; // Name: m_bReturnAbsoluteResult Offset: 0x14
					constexpr auto _operator = 0x15; // Name: m_operator Offset: 0x15
					constexpr auto fl_value_b = 0x18; // Name: m_flValueB Offset: 0x18
				} // namespace CNmFloatMathNode_CDefinition

				namespace CNmStateMachineNode_TransitionDefinition_t {
					constexpr auto n_target_state_idx = 0x0; // Name: m_nTargetStateIdx Offset: 0x0
					constexpr auto n_condition_node_idx = 0x2; // Name: m_nConditionNodeIdx Offset: 0x2
					constexpr auto n_transition_node_idx = 0x4; // Name: m_nTransitionNodeIdx Offset: 0x4
					constexpr auto b_can_be_forced = 0x6; // Name: m_bCanBeForced Offset: 0x6
				} // namespace CNmStateMachineNode_TransitionDefinition_t

				namespace CNmControlParameterFloatNode_CDefinition {
				} // namespace CNmControlParameterFloatNode_CDefinition

				namespace CNmStateEventConditionNode_CDefinition {
					constexpr auto n_source_state_node_idx = 0x10; // Name: m_nSourceStateNodeIdx Offset: 0x10
					constexpr auto event_condition_rules = 0x14; // Name: m_eventConditionRules Offset: 0x14
					constexpr auto conditions = 0x18; // Name: m_conditions Offset: 0x18
				} // namespace CNmStateEventConditionNode_CDefinition

				namespace CNmLayerBlendNode_LayerDefinition_t {
					constexpr auto n_input_node_idx = 0x0; // Name: m_nInputNodeIdx Offset: 0x0
					constexpr auto n_weight_value_node_idx = 0x2; // Name: m_nWeightValueNodeIdx Offset: 0x2
					constexpr auto n_bone_mask_value_node_idx = 0x4; // Name: m_nBoneMaskValueNodeIdx Offset: 0x4
					constexpr auto n_root_motion_weight_value_node_idx = 0x6; // Name: m_nRootMotionWeightValueNodeIdx Offset: 0x6
					constexpr auto b_is_synchronized = 0x8; // Name: m_bIsSynchronized Offset: 0x8
					constexpr auto b_ignore_events = 0x9; // Name: m_bIgnoreEvents Offset: 0x9
					constexpr auto b_is_state_machine_layer = 0xA; // Name: m_bIsStateMachineLayer Offset: 0xA
					constexpr auto blend_mode = 0xB; // Name: m_blendMode Offset: 0xB
				} // namespace CNmLayerBlendNode_LayerDefinition_t

				namespace CNmTimeConditionNode_CDefinition {
					constexpr auto source_state_node_idx = 0x10; // Name: m_sourceStateNodeIdx Offset: 0x10
					constexpr auto n_input_value_node_idx = 0x12; // Name: m_nInputValueNodeIdx Offset: 0x12
					constexpr auto fl_comparand = 0x14; // Name: m_flComparand Offset: 0x14
					constexpr auto type = 0x18; // Name: m_type Offset: 0x18
					constexpr auto _operator = 0x19; // Name: m_operator Offset: 0x19
				} // namespace CNmTimeConditionNode_CDefinition

				namespace CNmLegacyEvent {
					constexpr auto anim_event_class_name = 0x18; // Name: m_animEventClassName Offset: 0x18
					constexpr auto kv = 0x20; // Name: m_KV Offset: 0x20
				} // namespace CNmLegacyEvent

				namespace CNmFloatSelectorNode_CDefinition {
					constexpr auto condition_node_indices = 0x10; // Name: m_conditionNodeIndices Offset: 0x10
					constexpr auto values = 0x38; // Name: m_values Offset: 0x38
					constexpr auto fl_default_value = 0x68; // Name: m_flDefaultValue Offset: 0x68
					constexpr auto fl_ease_time = 0x6C; // Name: m_flEaseTime Offset: 0x6C
					constexpr auto easing_op = 0x70; // Name: m_easingOp Offset: 0x70
				} // namespace CNmFloatSelectorNode_CDefinition

				namespace CNmCachedIDNode_CDefinition {
					constexpr auto n_input_value_node_idx = 0x10; // Name: m_nInputValueNodeIdx Offset: 0x10
					constexpr auto mode = 0x14; // Name: m_mode Offset: 0x14
				} // namespace CNmCachedIDNode_CDefinition

				namespace CNmBoneMaskValueNode_CDefinition {
				} // namespace CNmBoneMaskValueNode_CDefinition

				namespace CNmCurrentSyncEventIDNode_CDefinition {
					constexpr auto n_source_state_node_idx = 0x10; // Name: m_nSourceStateNodeIdx Offset: 0x10
				} // namespace CNmCurrentSyncEventIDNode_CDefinition

				namespace CNmTargetWarpEvent {
					constexpr auto rule = 0x18; // Name: m_rule Offset: 0x18
					constexpr auto algorithm = 0x19; // Name: m_algorithm Offset: 0x19
				} // namespace CNmTargetWarpEvent

				namespace CNmBoolValueNode_CDefinition {
				} // namespace CNmBoolValueNode_CDefinition

				namespace CNmRootMotionEvent {
					constexpr auto fl_blend_time_seconds = 0x18; // Name: m_flBlendTimeSeconds Offset: 0x18
				} // namespace CNmRootMotionEvent

				namespace CNmIDToFloatNode_CDefinition {
					constexpr auto n_input_value_node_idx = 0x10; // Name: m_nInputValueNodeIdx Offset: 0x10
					constexpr auto default_value = 0x14; // Name: m_defaultValue Offset: 0x14
					constexpr auto ids = 0x18; // Name: m_IDs Offset: 0x18
					constexpr auto values = 0x48; // Name: m_values Offset: 0x48
				} // namespace CNmIDToFloatNode_CDefinition

				namespace NmPercent_t {
					constexpr auto fl_value = 0x0; // Name: m_flValue Offset: 0x0
				} // namespace NmPercent_t

				namespace CNmFloatAbsNode_CDefinition {
					constexpr auto n_input_value_node_idx = 0x10; // Name: m_nInputValueNodeIdx Offset: 0x10
				} // namespace CNmFloatAbsNode_CDefinition

				namespace CNmSyncTrack_EventMarker_t {
					constexpr auto start_time = 0x0; // Name: m_startTime Offset: 0x0
					constexpr auto id = 0x8; // Name: m_ID Offset: 0x8
				} // namespace CNmSyncTrack_EventMarker_t

				namespace CNmOrientationWarpEvent {
				} // namespace CNmOrientationWarpEvent

				namespace CNmIDValueNode_CDefinition {
				} // namespace CNmIDValueNode_CDefinition

				namespace CNmControlParameterBoolNode_CDefinition {
				} // namespace CNmControlParameterBoolNode_CDefinition

				namespace CNmConstVectorNode_CDefinition {
					constexpr auto value = 0x10; // Name: m_value Offset: 0x10
				} // namespace CNmConstVectorNode_CDefinition

				namespace CNmIsTargetSetNode_CDefinition {
					constexpr auto n_input_value_node_idx = 0x10; // Name: m_nInputValueNodeIdx Offset: 0x10
				} // namespace CNmIsTargetSetNode_CDefinition

				namespace CNmBoneMask {
					constexpr auto id = 0x0; // Name: m_ID Offset: 0x0
					constexpr auto weight_info = 0x8; // Name: m_weightInfo Offset: 0x8
					constexpr auto weights = 0x18; // Name: m_weights Offset: 0x18
				} // namespace CNmBoneMask

				namespace CNmStateNode_TimedEvent_t {
					constexpr auto id = 0x0; // Name: m_ID Offset: 0x0
					constexpr auto fl_time_value_seconds = 0x8; // Name: m_flTimeValueSeconds Offset: 0x8
				} // namespace CNmStateNode_TimedEvent_t

				namespace CNmFloatCurveNode_CDefinition {
					constexpr auto n_input_value_node_idx = 0x10; // Name: m_nInputValueNodeIdx Offset: 0x10
					constexpr auto curve = 0x18; // Name: m_curve Offset: 0x18
				} // namespace CNmFloatCurveNode_CDefinition

				namespace CNmRootMotionData {
					constexpr auto transforms = 0x0; // Name: m_transforms Offset: 0x0
					constexpr auto n_num_frames = 0x18; // Name: m_nNumFrames Offset: 0x18
					constexpr auto fl_average_linear_velocity = 0x1C; // Name: m_flAverageLinearVelocity Offset: 0x1C
					constexpr auto fl_average_angular_velocity_radians = 0x20; // Name: m_flAverageAngularVelocityRadians Offset: 0x20
					constexpr auto total_delta = 0x30; // Name: m_totalDelta Offset: 0x30
				} // namespace CNmRootMotionData

				namespace CNmGraphDefinition_ChildGraphSlot_t {
					constexpr auto n_node_idx = 0x0; // Name: m_nNodeIdx Offset: 0x0
					constexpr auto data_slot_idx = 0x2; // Name: m_dataSlotIdx Offset: 0x2
				} // namespace CNmGraphDefinition_ChildGraphSlot_t

				namespace CNmTransitionEvent {
					constexpr auto rule = 0x18; // Name: m_rule Offset: 0x18
					constexpr auto id = 0x20; // Name: m_ID Offset: 0x20
				} // namespace CNmTransitionEvent

				namespace CNmFootstepEventPercentageThroughNode_CDefinition {
					constexpr auto n_source_state_node_idx = 0x10; // Name: m_nSourceStateNodeIdx Offset: 0x10
					constexpr auto phase_condition = 0x12; // Name: m_phaseCondition Offset: 0x12
					constexpr auto event_condition_rules = 0x14; // Name: m_eventConditionRules Offset: 0x14
				} // namespace CNmFootstepEventPercentageThroughNode_CDefinition

				namespace NmCompressionSettings_t {
					constexpr auto translation_range_x = 0x0; // Name: m_translationRangeX Offset: 0x0
					constexpr auto translation_range_y = 0x8; // Name: m_translationRangeY Offset: 0x8
					constexpr auto translation_range_z = 0x10; // Name: m_translationRangeZ Offset: 0x10
					constexpr auto scale_range = 0x18; // Name: m_scaleRange Offset: 0x18
					constexpr auto constant_rotation = 0x20; // Name: m_constantRotation Offset: 0x20
					constexpr auto b_is_rotation_static = 0x30; // Name: m_bIsRotationStatic Offset: 0x30
					constexpr auto b_is_translation_static = 0x31; // Name: m_bIsTranslationStatic Offset: 0x31
					constexpr auto b_is_scale_static = 0x32; // Name: m_bIsScaleStatic Offset: 0x32
				} // namespace NmCompressionSettings_t

				namespace CNmCachedTargetNode_CDefinition {
					constexpr auto n_input_value_node_idx = 0x10; // Name: m_nInputValueNodeIdx Offset: 0x10
					constexpr auto mode = 0x14; // Name: m_mode Offset: 0x14
				} // namespace CNmCachedTargetNode_CDefinition

				namespace CNmConstBoolNode_CDefinition {
					constexpr auto b_value = 0x10; // Name: m_bValue Offset: 0x10
				} // namespace CNmConstBoolNode_CDefinition

				namespace CNmBitFlags {
					constexpr auto flags = 0x0; // Name: m_flags Offset: 0x0
				} // namespace CNmBitFlags

				namespace CNmFixedWeightBoneMaskNode_CDefinition {
					constexpr auto fl_bone_weight = 0x10; // Name: m_flBoneWeight Offset: 0x10
				} // namespace CNmFixedWeightBoneMaskNode_CDefinition

				namespace CNmParameterizedBlendNode_Parameterization_t {
					constexpr auto blend_ranges = 0x0; // Name: m_blendRanges Offset: 0x0
					constexpr auto parameter_range = 0x48; // Name: m_parameterRange Offset: 0x48
				} // namespace CNmParameterizedBlendNode_Parameterization_t

				namespace CNmNotNode_CDefinition {
					constexpr auto n_input_value_node_idx = 0x10; // Name: m_nInputValueNodeIdx Offset: 0x10
				} // namespace CNmNotNode_CDefinition

				namespace CNmAndNode_CDefinition {
					constexpr auto condition_node_indices = 0x10; // Name: m_conditionNodeIndices Offset: 0x10
				} // namespace CNmAndNode_CDefinition

				namespace CNmBlend2DNode_CDefinition {
					constexpr auto source_node_indices = 0x10; // Name: m_sourceNodeIndices Offset: 0x10
					constexpr auto n_input_parameter_node_idx0 = 0x38; // Name: m_nInputParameterNodeIdx0 Offset: 0x38
					constexpr auto n_input_parameter_node_idx1 = 0x3A; // Name: m_nInputParameterNodeIdx1 Offset: 0x3A
					constexpr auto values = 0x40; // Name: m_values Offset: 0x40
					constexpr auto indices = 0xA8; // Name: m_indices Offset: 0xA8
					constexpr auto hull_indices = 0xE0; // Name: m_hullIndices Offset: 0xE0
					constexpr auto b_allow_looping = 0x108; // Name: m_bAllowLooping Offset: 0x108
				} // namespace CNmBlend2DNode_CDefinition

				namespace CNmGraphNode_CDefinition {
					constexpr auto n_node_idx = 0x8; // Name: m_nNodeIdx Offset: 0x8
				} // namespace CNmGraphNode_CDefinition

				namespace CNmDurationScaleNode_CDefinition {
				} // namespace CNmDurationScaleNode_CDefinition

				namespace CNmTargetPointNode_CDefinition {
					constexpr auto n_input_value_node_idx = 0x10; // Name: m_nInputValueNodeIdx Offset: 0x10
					constexpr auto b_is_world_space_target = 0x12; // Name: m_bIsWorldSpaceTarget Offset: 0x12
				} // namespace CNmTargetPointNode_CDefinition

				namespace NmSyncTrackTime_t {
					constexpr auto n_event_idx = 0x0; // Name: m_nEventIdx Offset: 0x0
					constexpr auto percentage_through = 0x4; // Name: m_percentageThrough Offset: 0x4
				} // namespace NmSyncTrackTime_t

				namespace CNmOverlayBlendTask {
				} // namespace CNmOverlayBlendTask

				namespace CNmFootEventConditionNode_CDefinition {
					constexpr auto n_source_state_node_idx = 0x10; // Name: m_nSourceStateNodeIdx Offset: 0x10
					constexpr auto phase_condition = 0x12; // Name: m_phaseCondition Offset: 0x12
					constexpr auto event_condition_rules = 0x14; // Name: m_eventConditionRules Offset: 0x14
				} // namespace CNmFootEventConditionNode_CDefinition

				namespace CNmSpeedScaleBaseNode_CDefinition {
					constexpr auto n_input_value_node_idx = 0x18; // Name: m_nInputValueNodeIdx Offset: 0x18
					constexpr auto fl_default_input_value = 0x1C; // Name: m_flDefaultInputValue Offset: 0x1C
				} // namespace CNmSpeedScaleBaseNode_CDefinition

				namespace CNmValueNode_CDefinition {
				} // namespace CNmValueNode_CDefinition

				namespace NmSyncTrackTimeRange_t {
					constexpr auto start_time = 0x0; // Name: m_startTime Offset: 0x0
					constexpr auto end_time = 0x8; // Name: m_endTime Offset: 0x8
				} // namespace NmSyncTrackTimeRange_t

				namespace CNmFloatRangeComparisonNode_CDefinition {
					constexpr auto range = 0x10; // Name: m_range Offset: 0x10
					constexpr auto n_input_value_node_idx = 0x18; // Name: m_nInputValueNodeIdx Offset: 0x18
					constexpr auto b_is_inclusive_check = 0x1A; // Name: m_bIsInclusiveCheck Offset: 0x1A
				} // namespace CNmFloatRangeComparisonNode_CDefinition

				namespace CNmIDEvent {
					constexpr auto id = 0x18; // Name: m_ID Offset: 0x18
				} // namespace CNmIDEvent

				namespace CNmParameterizedClipSelectorNode_CDefinition {
					constexpr auto option_node_indices = 0x10; // Name: m_optionNodeIndices Offset: 0x10
					constexpr auto parameter_node_idx = 0x28; // Name: m_parameterNodeIdx Offset: 0x28
				} // namespace CNmParameterizedClipSelectorNode_CDefinition

				namespace CNmSpeedScaleNode_CDefinition {
				} // namespace CNmSpeedScaleNode_CDefinition

				namespace CNmFloatClampNode_CDefinition {
					constexpr auto n_input_value_node_idx = 0x10; // Name: m_nInputValueNodeIdx Offset: 0x10
					constexpr auto clamp_range = 0x14; // Name: m_clampRange Offset: 0x14
				} // namespace CNmFloatClampNode_CDefinition

				namespace CNmRootMotionOverrideNode_CDefinition {
					constexpr auto desired_moving_velocity_node_idx = 0x18; // Name: m_desiredMovingVelocityNodeIdx Offset: 0x18
					constexpr auto desired_facing_direction_node_idx = 0x1A; // Name: m_desiredFacingDirectionNodeIdx Offset: 0x1A
					constexpr auto linear_velocity_limit_node_idx = 0x1C; // Name: m_linearVelocityLimitNodeIdx Offset: 0x1C
					constexpr auto angular_velocity_limit_node_idx = 0x1E; // Name: m_angularVelocityLimitNodeIdx Offset: 0x1E
					constexpr auto max_linear_velocity = 0x20; // Name: m_maxLinearVelocity Offset: 0x20
					constexpr auto max_angular_velocity_radians = 0x24; // Name: m_maxAngularVelocityRadians Offset: 0x24
					constexpr auto override_flags = 0x28; // Name: m_overrideFlags Offset: 0x28
				} // namespace CNmRootMotionOverrideNode_CDefinition

				namespace CNmTargetWarpNode_CDefinition {
					constexpr auto n_clip_reference_node_idx = 0x10; // Name: m_nClipReferenceNodeIdx Offset: 0x10
					constexpr auto n_target_value_node_idx = 0x12; // Name: m_nTargetValueNodeIdx Offset: 0x12
					constexpr auto sampling_mode = 0x14; // Name: m_samplingMode Offset: 0x14
					constexpr auto b_allow_target_update = 0x15; // Name: m_bAllowTargetUpdate Offset: 0x15
					constexpr auto fl_sampling_position_error_threshold_sq = 0x18; // Name: m_flSamplingPositionErrorThresholdSq Offset: 0x18
					constexpr auto fl_max_tangent_length = 0x1C; // Name: m_flMaxTangentLength Offset: 0x1C
					constexpr auto fl_lerp_fallback_distance_threshold = 0x20; // Name: m_flLerpFallbackDistanceThreshold Offset: 0x20
					constexpr auto fl_target_update_distance_threshold = 0x24; // Name: m_flTargetUpdateDistanceThreshold Offset: 0x24
					constexpr auto fl_target_update_angle_threshold_radians = 0x28; // Name: m_flTargetUpdateAngleThresholdRadians Offset: 0x28
				} // namespace CNmTargetWarpNode_CDefinition

				namespace CNmFloatComparisonNode_CDefinition {
					constexpr auto n_input_value_node_idx = 0x10; // Name: m_nInputValueNodeIdx Offset: 0x10
					constexpr auto n_comparand_value_node_idx = 0x12; // Name: m_nComparandValueNodeIdx Offset: 0x12
					constexpr auto comparison = 0x14; // Name: m_comparison Offset: 0x14
					constexpr auto fl_epsilon = 0x18; // Name: m_flEpsilon Offset: 0x18
					constexpr auto fl_comparison_value = 0x1C; // Name: m_flComparisonValue Offset: 0x1C
				} // namespace CNmFloatComparisonNode_CDefinition

				namespace CNmTargetValueNode_CDefinition {
				} // namespace CNmTargetValueNode_CDefinition

				namespace CNmLayerBlendNode_CDefinition {
					constexpr auto n_base_node_idx = 0x10; // Name: m_nBaseNodeIdx Offset: 0x10
					constexpr auto b_only_sample_base_root_motion = 0x12; // Name: m_bOnlySampleBaseRootMotion Offset: 0x12
					constexpr auto layer_definition = 0x18; // Name: m_layerDefinition Offset: 0x18
				} // namespace CNmLayerBlendNode_CDefinition

				namespace CNmFloatRemapNode_CDefinition {
					constexpr auto n_input_value_node_idx = 0x10; // Name: m_nInputValueNodeIdx Offset: 0x10
					constexpr auto input_range = 0x14; // Name: m_inputRange Offset: 0x14
					constexpr auto output_range = 0x1C; // Name: m_outputRange Offset: 0x1C
				} // namespace CNmFloatRemapNode_CDefinition

				namespace CNmFootstepEventIDNode_CDefinition {
					constexpr auto n_source_state_node_idx = 0x10; // Name: m_nSourceStateNodeIdx Offset: 0x10
					constexpr auto event_condition_rules = 0x14; // Name: m_eventConditionRules Offset: 0x14
				} // namespace CNmFootstepEventIDNode_CDefinition

				namespace CNmOrientationWarpNode_CDefinition {
					constexpr auto n_clip_reference_node_idx = 0x10; // Name: m_nClipReferenceNodeIdx Offset: 0x10
					constexpr auto n_target_value_node_idx = 0x12; // Name: m_nTargetValueNodeIdx Offset: 0x12
					constexpr auto b_is_offset_node = 0x14; // Name: m_bIsOffsetNode Offset: 0x14
					constexpr auto b_is_offset_relative_to_character = 0x15; // Name: m_bIsOffsetRelativeToCharacter Offset: 0x15
					constexpr auto sampling_mode = 0x16; // Name: m_samplingMode Offset: 0x16
				} // namespace CNmOrientationWarpNode_CDefinition

				namespace CNmCachedPoseWriteTask {
				} // namespace CNmCachedPoseWriteTask

				namespace CNmIDComparisonNode_CDefinition {
					constexpr auto n_input_value_node_idx = 0x10; // Name: m_nInputValueNodeIdx Offset: 0x10
					constexpr auto comparison = 0x12; // Name: m_comparison Offset: 0x12
					constexpr auto comparision_ids = 0x18; // Name: m_comparisionIDs Offset: 0x18
				} // namespace CNmIDComparisonNode_CDefinition

				namespace CNmConstFloatNode_CDefinition {
					constexpr auto fl_value = 0x10; // Name: m_flValue Offset: 0x10
				} // namespace CNmConstFloatNode_CDefinition

				namespace CNmStateMachineNode_CDefinition {
					constexpr auto state_definitions = 0x10; // Name: m_stateDefinitions Offset: 0x10
					constexpr auto n_default_state_index = 0x130; // Name: m_nDefaultStateIndex Offset: 0x130
				} // namespace CNmStateMachineNode_CDefinition

				namespace CNmModelSpaceBlendTask {
				} // namespace CNmModelSpaceBlendTask

				namespace CNmZeroPoseNode_CDefinition {
				} // namespace CNmZeroPoseNode_CDefinition

				namespace CNmBoneMaskNode_CDefinition {
					constexpr auto bone_mask_id = 0x10; // Name: m_boneMaskID Offset: 0x10
				} // namespace CNmBoneMaskNode_CDefinition

				namespace CNmChildGraphNode_CDefinition {
					constexpr auto n_child_graph_idx = 0x10; // Name: m_nChildGraphIdx Offset: 0x10
				} // namespace CNmChildGraphNode_CDefinition

				namespace CNmVirtualParameterIDNode_CDefinition {
					constexpr auto n_child_node_idx = 0x10; // Name: m_nChildNodeIdx Offset: 0x10
				} // namespace CNmVirtualParameterIDNode_CDefinition

				namespace CNmAnimationPoseNode_CDefinition {
					constexpr auto n_pose_time_value_node_idx = 0x10; // Name: m_nPoseTimeValueNodeIdx Offset: 0x10
					constexpr auto n_data_slot_idx = 0x12; // Name: m_nDataSlotIdx Offset: 0x12
					constexpr auto input_time_remap_range = 0x14; // Name: m_inputTimeRemapRange Offset: 0x14
					constexpr auto fl_user_specified_time = 0x1C; // Name: m_flUserSpecifiedTime Offset: 0x1C
					constexpr auto b_use_frames_as_input = 0x20; // Name: m_bUseFramesAsInput Offset: 0x20
				} // namespace CNmAnimationPoseNode_CDefinition

				namespace CNmControlParameterTargetNode_CDefinition {
				} // namespace CNmControlParameterTargetNode_CDefinition

				namespace CNmStateEventConditionNode_Condition_t {
					constexpr auto event_id = 0x0; // Name: m_eventID Offset: 0x0
					constexpr auto event_type_condition = 0x8; // Name: m_eventTypeCondition Offset: 0x8
				} // namespace CNmStateEventConditionNode_Condition_t

				namespace CNmFootEvent {
					constexpr auto phase = 0x18; // Name: m_phase Offset: 0x18
				} // namespace CNmFootEvent

				namespace CNmCurrentSyncEventPercentageThroughNode_CDefinition {
					constexpr auto n_source_state_node_idx = 0x10; // Name: m_nSourceStateNodeIdx Offset: 0x10
				} // namespace CNmCurrentSyncEventPercentageThroughNode_CDefinition

				namespace CNmVirtualParameterBoolNode_CDefinition {
					constexpr auto n_child_node_idx = 0x10; // Name: m_nChildNodeIdx Offset: 0x10
				} // namespace CNmVirtualParameterBoolNode_CDefinition

				namespace CNmParameterizedBlendNode_BlendRange_t {
					constexpr auto n_input_idx0 = 0x0; // Name: m_nInputIdx0 Offset: 0x0
					constexpr auto n_input_idx1 = 0x2; // Name: m_nInputIdx1 Offset: 0x2
					constexpr auto parameter_value_range = 0x4; // Name: m_parameterValueRange Offset: 0x4
				} // namespace CNmParameterizedBlendNode_BlendRange_t

				namespace CNmVectorNegateNode_CDefinition {
					constexpr auto n_input_value_node_idx = 0x10; // Name: m_nInputValueNodeIdx Offset: 0x10
				} // namespace CNmVectorNegateNode_CDefinition

				namespace CNmSyncTrack_Event_t {
					constexpr auto id = 0x0; // Name: m_ID Offset: 0x0
					constexpr auto start_time = 0x8; // Name: m_startTime Offset: 0x8
					constexpr auto duration = 0xC; // Name: m_duration Offset: 0xC
				} // namespace CNmSyncTrack_Event_t

				namespace CNmTarget {
					constexpr auto transform = 0x0; // Name: m_transform Offset: 0x0
					constexpr auto bone_id = 0x20; // Name: m_boneID Offset: 0x20
					constexpr auto b_is_bone_target = 0x28; // Name: m_bIsBoneTarget Offset: 0x28
					constexpr auto b_is_using_bone_space_offsets = 0x29; // Name: m_bIsUsingBoneSpaceOffsets Offset: 0x29
					constexpr auto b_has_offsets = 0x2A; // Name: m_bHasOffsets Offset: 0x2A
					constexpr auto b_is_set = 0x2B; // Name: m_bIsSet Offset: 0x2B
				} // namespace CNmTarget

				namespace CNmControlParameterIDNode_CDefinition {
				} // namespace CNmControlParameterIDNode_CDefinition
			}

			namespace modellib
			{

				namespace PermModelDataAnimatedMaterialAttribute_t {
					constexpr auto attribute_name = 0x0; // Name: m_AttributeName Offset: 0x0
					constexpr auto n_num_channels = 0x8; // Name: m_nNumChannels Offset: 0x8
				} // namespace PermModelDataAnimatedMaterialAttribute_t

				namespace AttachmentHandle_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace AttachmentHandle_t

				namespace CModelConfigElement_UserPick {
					constexpr auto choices = 0x48; // Name: m_Choices Offset: 0x48
				} // namespace CModelConfigElement_UserPick

				namespace CSceneObjectData {
					constexpr auto v_min_bounds = 0x0; // Name: m_vMinBounds Offset: 0x0
					constexpr auto v_max_bounds = 0xC; // Name: m_vMaxBounds Offset: 0xC
					constexpr auto draw_calls = 0x18; // Name: m_drawCalls Offset: 0x18
					constexpr auto draw_bounds = 0x28; // Name: m_drawBounds Offset: 0x28
					constexpr auto meshlets = 0x38; // Name: m_meshlets Offset: 0x38
					constexpr auto v_tint_color = 0x48; // Name: m_vTintColor Offset: 0x48
				} // namespace CSceneObjectData

				namespace CBoneConstraintPoseSpaceMorph_Input_t {
					constexpr auto input_value = 0x0; // Name: m_inputValue Offset: 0x0
					constexpr auto output_weight_list = 0x10; // Name: m_outputWeightList Offset: 0x10
				} // namespace CBoneConstraintPoseSpaceMorph_Input_t

				namespace CFootCycle {
				} // namespace CFootCycle

				namespace CModelConfigList {
					constexpr auto b_hide_material_group_in_tools = 0x0; // Name: m_bHideMaterialGroupInTools Offset: 0x0
					constexpr auto b_hide_render_color_in_tools = 0x1; // Name: m_bHideRenderColorInTools Offset: 0x1
					constexpr auto configs = 0x8; // Name: m_Configs Offset: 0x8
				} // namespace CModelConfigList

				namespace AnimNodeOutputID {
					constexpr auto id = 0x0; // Name: m_id Offset: 0x0
				} // namespace AnimNodeOutputID

				namespace VPhysXCollisionAttributes_t {
					constexpr auto collision_group = 0x0; // Name: m_CollisionGroup Offset: 0x0
					constexpr auto interact_as = 0x8; // Name: m_InteractAs Offset: 0x8
					constexpr auto interact_with = 0x20; // Name: m_InteractWith Offset: 0x20
					constexpr auto interact_exclude = 0x38; // Name: m_InteractExclude Offset: 0x38
					constexpr auto collision_group_string = 0x50; // Name: m_CollisionGroupString Offset: 0x50
					constexpr auto interact_as_strings = 0x58; // Name: m_InteractAsStrings Offset: 0x58
					constexpr auto interact_with_strings = 0x70; // Name: m_InteractWithStrings Offset: 0x70
					constexpr auto interact_exclude_strings = 0x88; // Name: m_InteractExcludeStrings Offset: 0x88
				} // namespace VPhysXCollisionAttributes_t

				namespace CMaterialDrawDescriptor {
					constexpr auto fl_uv_density = 0x0; // Name: m_flUvDensity Offset: 0x0
					constexpr auto v_tint_color = 0x4; // Name: m_vTintColor Offset: 0x4
					constexpr auto fl_alpha = 0x10; // Name: m_flAlpha Offset: 0x10
					constexpr auto n_num_meshlets = 0x16; // Name: m_nNumMeshlets Offset: 0x16
					constexpr auto n_first_meshlet = 0x1C; // Name: m_nFirstMeshlet Offset: 0x1C
					constexpr auto n_primitive_type = 0x20; // Name: m_nPrimitiveType Offset: 0x20
					constexpr auto n_base_vertex = 0x24; // Name: m_nBaseVertex Offset: 0x24
					constexpr auto n_vertex_count = 0x28; // Name: m_nVertexCount Offset: 0x28
					constexpr auto n_start_index = 0x2C; // Name: m_nStartIndex Offset: 0x2C
					constexpr auto n_index_count = 0x30; // Name: m_nIndexCount Offset: 0x30
					constexpr auto index_buffer = 0x98; // Name: m_indexBuffer Offset: 0x98
					constexpr auto material = 0xC8; // Name: m_material Offset: 0xC8
				} // namespace CMaterialDrawDescriptor

				namespace CMeshletDescriptor {
					constexpr auto packed_aabb = 0x0; // Name: m_PackedAABB Offset: 0x0
					constexpr auto culling_data = 0x8; // Name: m_CullingData Offset: 0x8
				} // namespace CMeshletDescriptor

				namespace CPhysSurfacePropertiesSoundNames {
					constexpr auto impact_soft = 0x0; // Name: m_impactSoft Offset: 0x0
					constexpr auto impact_hard = 0x8; // Name: m_impactHard Offset: 0x8
					constexpr auto scrape_smooth = 0x10; // Name: m_scrapeSmooth Offset: 0x10
					constexpr auto scrape_rough = 0x18; // Name: m_scrapeRough Offset: 0x18
					constexpr auto bullet_impact = 0x20; // Name: m_bulletImpact Offset: 0x20
					constexpr auto rolling = 0x28; // Name: m_rolling Offset: 0x28
					constexpr auto _break = 0x30; // Name: m_break Offset: 0x30
					constexpr auto strain = 0x38; // Name: m_strain Offset: 0x38
					constexpr auto melee_impact = 0x40; // Name: m_meleeImpact Offset: 0x40
					constexpr auto push_off = 0x48; // Name: m_pushOff Offset: 0x48
					constexpr auto skid_stop = 0x50; // Name: m_skidStop Offset: 0x50
				} // namespace CPhysSurfacePropertiesSoundNames

				namespace PermModelInfo_t {
					constexpr auto n_flags = 0x0; // Name: m_nFlags Offset: 0x0
					constexpr auto v_hull_min = 0x4; // Name: m_vHullMin Offset: 0x4
					constexpr auto v_hull_max = 0x10; // Name: m_vHullMax Offset: 0x10
					constexpr auto v_view_min = 0x1C; // Name: m_vViewMin Offset: 0x1C
					constexpr auto v_view_max = 0x28; // Name: m_vViewMax Offset: 0x28
					constexpr auto fl_mass = 0x34; // Name: m_flMass Offset: 0x34
					constexpr auto v_eye_position = 0x38; // Name: m_vEyePosition Offset: 0x38
					constexpr auto fl_max_eye_deflection = 0x44; // Name: m_flMaxEyeDeflection Offset: 0x44
					constexpr auto s_surface_property = 0x48; // Name: m_sSurfaceProperty Offset: 0x48
					constexpr auto key_value_text = 0x50; // Name: m_keyValueText Offset: 0x50
				} // namespace PermModelInfo_t

				namespace CMorphConstraint {
					constexpr auto s_target_morph = 0x68; // Name: m_sTargetMorph Offset: 0x68
					constexpr auto n_slave_channel = 0x70; // Name: m_nSlaveChannel Offset: 0x70
					constexpr auto fl_min = 0x74; // Name: m_flMin Offset: 0x74
					constexpr auto fl_max = 0x78; // Name: m_flMax Offset: 0x78
				} // namespace CMorphConstraint

				namespace CModelConfigElement_SetBodygroupOnAttachedModels {
					constexpr auto group_name = 0x48; // Name: m_GroupName Offset: 0x48
					constexpr auto n_choice = 0x50; // Name: m_nChoice Offset: 0x50
				} // namespace CModelConfigElement_SetBodygroupOnAttachedModels

				namespace AnimNodeID {
					constexpr auto id = 0x0; // Name: m_id Offset: 0x0
				} // namespace AnimNodeID

				namespace AnimStateID {
					constexpr auto id = 0x0; // Name: m_id Offset: 0x0
				} // namespace AnimStateID

				namespace CModelConfigElement_SetRenderColor {
					constexpr auto color = 0x48; // Name: m_Color Offset: 0x48
				} // namespace CModelConfigElement_SetRenderColor

				namespace CHitBox {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
					constexpr auto s_surface_property = 0x8; // Name: m_sSurfaceProperty Offset: 0x8
					constexpr auto s_bone_name = 0x10; // Name: m_sBoneName Offset: 0x10
					constexpr auto v_min_bounds = 0x18; // Name: m_vMinBounds Offset: 0x18
					constexpr auto v_max_bounds = 0x24; // Name: m_vMaxBounds Offset: 0x24
					constexpr auto fl_shape_radius = 0x30; // Name: m_flShapeRadius Offset: 0x30
					constexpr auto n_bone_name_hash = 0x34; // Name: m_nBoneNameHash Offset: 0x34
					constexpr auto n_group_id = 0x38; // Name: m_nGroupId Offset: 0x38
					constexpr auto n_shape_type = 0x3C; // Name: m_nShapeType Offset: 0x3C
					constexpr auto b_translation_only = 0x3D; // Name: m_bTranslationOnly Offset: 0x3D
					constexpr auto crc = 0x40; // Name: m_CRC Offset: 0x40
					constexpr auto c_render_color = 0x44; // Name: m_cRenderColor Offset: 0x44
					constexpr auto n_hit_box_index = 0x48; // Name: m_nHitBoxIndex Offset: 0x48
				} // namespace CHitBox

				namespace ModelBoneFlexDriver_t {
					constexpr auto bone_name = 0x0; // Name: m_boneName Offset: 0x0
					constexpr auto bone_name_token = 0x8; // Name: m_boneNameToken Offset: 0x8
					constexpr auto controls = 0x10; // Name: m_controls Offset: 0x10
				} // namespace ModelBoneFlexDriver_t

				namespace CAnimCycle {
				} // namespace CAnimCycle

				namespace CMorphData {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
					constexpr auto morph_rect_datas = 0x8; // Name: m_morphRectDatas Offset: 0x8
				} // namespace CMorphData

				namespace CFootMotion {
					constexpr auto strides = 0x0; // Name: m_strides Offset: 0x0
					constexpr auto name = 0x18; // Name: m_name Offset: 0x18
					constexpr auto b_additive = 0x20; // Name: m_bAdditive Offset: 0x20
				} // namespace CFootMotion

				namespace CAttachment {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
					constexpr auto influence_names = 0x8; // Name: m_influenceNames Offset: 0x8
					constexpr auto v_influence_rotations = 0x20; // Name: m_vInfluenceRotations Offset: 0x20
					constexpr auto v_influence_offsets = 0x50; // Name: m_vInfluenceOffsets Offset: 0x50
					constexpr auto influence_weights = 0x74; // Name: m_influenceWeights Offset: 0x74
					constexpr auto b_influence_root_transform = 0x80; // Name: m_bInfluenceRootTransform Offset: 0x80
					constexpr auto n_influences = 0x83; // Name: m_nInfluences Offset: 0x83
					constexpr auto b_ignore_rotation = 0x84; // Name: m_bIgnoreRotation Offset: 0x84
				} // namespace CAttachment

				namespace VPhysXBodyPart_t {
					constexpr auto n_flags = 0x0; // Name: m_nFlags Offset: 0x0
					constexpr auto fl_mass = 0x4; // Name: m_flMass Offset: 0x4
					constexpr auto rn_shape = 0x8; // Name: m_rnShape Offset: 0x8
					constexpr auto n_collision_attribute_index = 0x80; // Name: m_nCollisionAttributeIndex Offset: 0x80
					constexpr auto n_reserved = 0x82; // Name: m_nReserved Offset: 0x82
					constexpr auto fl_inertia_scale = 0x84; // Name: m_flInertiaScale Offset: 0x84
					constexpr auto fl_linear_damping = 0x88; // Name: m_flLinearDamping Offset: 0x88
					constexpr auto fl_angular_damping = 0x8C; // Name: m_flAngularDamping Offset: 0x8C
					constexpr auto b_override_mass_center = 0x90; // Name: m_bOverrideMassCenter Offset: 0x90
					constexpr auto v_mass_center_override = 0x94; // Name: m_vMassCenterOverride Offset: 0x94
				} // namespace VPhysXBodyPart_t

				namespace CDrawCullingData {
					constexpr auto v_cone_apex = 0x0; // Name: m_vConeApex Offset: 0x0
					constexpr auto cone_axis = 0xC; // Name: m_ConeAxis Offset: 0xC
					constexpr auto cone_cutoff = 0xF; // Name: m_ConeCutoff Offset: 0xF
				} // namespace CDrawCullingData

				namespace PermModelData_t {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
					constexpr auto model_info = 0x8; // Name: m_modelInfo Offset: 0x8
					constexpr auto ext_parts = 0x60; // Name: m_ExtParts Offset: 0x60
					constexpr auto ref_meshes = 0x78; // Name: m_refMeshes Offset: 0x78
					constexpr auto ref_mesh_group_masks = 0x90; // Name: m_refMeshGroupMasks Offset: 0x90
					constexpr auto ref_phys_group_masks = 0xA8; // Name: m_refPhysGroupMasks Offset: 0xA8
					constexpr auto ref_lodgroup_masks = 0xC0; // Name: m_refLODGroupMasks Offset: 0xC0
					constexpr auto lod_group_switch_distances = 0xD8; // Name: m_lodGroupSwitchDistances Offset: 0xD8
					constexpr auto ref_physics_data = 0xF0; // Name: m_refPhysicsData Offset: 0xF0
					constexpr auto ref_physics_hitbox_data = 0x108; // Name: m_refPhysicsHitboxData Offset: 0x108
					constexpr auto ref_anim_groups = 0x120; // Name: m_refAnimGroups Offset: 0x120
					constexpr auto ref_sequence_groups = 0x138; // Name: m_refSequenceGroups Offset: 0x138
					constexpr auto mesh_groups = 0x150; // Name: m_meshGroups Offset: 0x150
					constexpr auto material_groups = 0x168; // Name: m_materialGroups Offset: 0x168
					constexpr auto n_default_mesh_group_mask = 0x180; // Name: m_nDefaultMeshGroupMask Offset: 0x180
					constexpr auto model_skeleton = 0x188; // Name: m_modelSkeleton Offset: 0x188
					constexpr auto remapping_table = 0x230; // Name: m_remappingTable Offset: 0x230
					constexpr auto remapping_table_starts = 0x248; // Name: m_remappingTableStarts Offset: 0x248
					constexpr auto bone_flex_drivers = 0x260; // Name: m_boneFlexDrivers Offset: 0x260
					constexpr auto p_model_config_list = 0x278; // Name: m_pModelConfigList Offset: 0x278
					constexpr auto body_groups_hidden_in_tools = 0x280; // Name: m_BodyGroupsHiddenInTools Offset: 0x280
					constexpr auto ref_anim_include_models = 0x298; // Name: m_refAnimIncludeModels Offset: 0x298
					constexpr auto animated_material_attributes = 0x2B0; // Name: m_AnimatedMaterialAttributes Offset: 0x2B0
				} // namespace PermModelData_t

				namespace VPhysXJoint_t {
					constexpr auto n_type = 0x0; // Name: m_nType Offset: 0x0
					constexpr auto n_body1 = 0x2; // Name: m_nBody1 Offset: 0x2
					constexpr auto n_body2 = 0x4; // Name: m_nBody2 Offset: 0x4
					constexpr auto n_flags = 0x6; // Name: m_nFlags Offset: 0x6
					constexpr auto frame1 = 0x10; // Name: m_Frame1 Offset: 0x10
					constexpr auto frame2 = 0x30; // Name: m_Frame2 Offset: 0x30
					constexpr auto b_enable_collision = 0x50; // Name: m_bEnableCollision Offset: 0x50
					constexpr auto b_enable_linear_limit = 0x51; // Name: m_bEnableLinearLimit Offset: 0x51
					constexpr auto linear_limit = 0x54; // Name: m_LinearLimit Offset: 0x54
					constexpr auto b_enable_linear_motor = 0x5C; // Name: m_bEnableLinearMotor Offset: 0x5C
					constexpr auto v_linear_target_velocity = 0x60; // Name: m_vLinearTargetVelocity Offset: 0x60
					constexpr auto fl_max_force = 0x6C; // Name: m_flMaxForce Offset: 0x6C
					constexpr auto b_enable_swing_limit = 0x70; // Name: m_bEnableSwingLimit Offset: 0x70
					constexpr auto swing_limit = 0x74; // Name: m_SwingLimit Offset: 0x74
					constexpr auto b_enable_twist_limit = 0x7C; // Name: m_bEnableTwistLimit Offset: 0x7C
					constexpr auto twist_limit = 0x80; // Name: m_TwistLimit Offset: 0x80
					constexpr auto b_enable_angular_motor = 0x88; // Name: m_bEnableAngularMotor Offset: 0x88
					constexpr auto v_angular_target_velocity = 0x8C; // Name: m_vAngularTargetVelocity Offset: 0x8C
					constexpr auto fl_max_torque = 0x98; // Name: m_flMaxTorque Offset: 0x98
					constexpr auto fl_linear_frequency = 0x9C; // Name: m_flLinearFrequency Offset: 0x9C
					constexpr auto fl_linear_damping_ratio = 0xA0; // Name: m_flLinearDampingRatio Offset: 0xA0
					constexpr auto fl_angular_frequency = 0xA4; // Name: m_flAngularFrequency Offset: 0xA4
					constexpr auto fl_angular_damping_ratio = 0xA8; // Name: m_flAngularDampingRatio Offset: 0xA8
					constexpr auto fl_friction = 0xAC; // Name: m_flFriction Offset: 0xAC
					constexpr auto fl_elasticity = 0xB0; // Name: m_flElasticity Offset: 0xB0
					constexpr auto fl_elastic_damping = 0xB4; // Name: m_flElasticDamping Offset: 0xB4
					constexpr auto fl_plasticity = 0xB8; // Name: m_flPlasticity Offset: 0xB8
				} // namespace VPhysXJoint_t

				namespace CFootCycleDefinition {
					constexpr auto v_stance_position_ms = 0x0; // Name: m_vStancePositionMS Offset: 0x0
					constexpr auto v_midpoint_position_ms = 0xC; // Name: m_vMidpointPositionMS Offset: 0xC
					constexpr auto fl_stance_direction_ms = 0x18; // Name: m_flStanceDirectionMS Offset: 0x18
					constexpr auto v_to_stride_start_pos = 0x1C; // Name: m_vToStrideStartPos Offset: 0x1C
					constexpr auto stance_cycle = 0x28; // Name: m_stanceCycle Offset: 0x28
					constexpr auto foot_lift_cycle = 0x2C; // Name: m_footLiftCycle Offset: 0x2C
					constexpr auto foot_off_cycle = 0x30; // Name: m_footOffCycle Offset: 0x30
					constexpr auto foot_strike_cycle = 0x34; // Name: m_footStrikeCycle Offset: 0x34
					constexpr auto foot_land_cycle = 0x38; // Name: m_footLandCycle Offset: 0x38
				} // namespace CFootCycleDefinition

				namespace CModelConfigElement {
					constexpr auto element_name = 0x8; // Name: m_ElementName Offset: 0x8
					constexpr auto nested_elements = 0x10; // Name: m_NestedElements Offset: 0x10
				} // namespace CModelConfigElement

				namespace RenderHairStrandInfo_t {
					constexpr auto n_guide_hair_indices_n_surface_tri_index = 0x0; // Name: m_nGuideHairIndices_nSurfaceTriIndex Offset: 0x0
					constexpr auto v_guide_bary_v_base_bary = 0x8; // Name: m_vGuideBary_vBaseBary Offset: 0x8
					constexpr auto v_root_offset_fl_length_scale = 0x10; // Name: m_vRootOffset_flLengthScale Offset: 0x10
					constexpr auto n_packed_base_uv = 0x18; // Name: m_nPackedBaseUv Offset: 0x18
					constexpr auto n_packed_surface_normal_os = 0x1C; // Name: m_nPackedSurfaceNormalOs Offset: 0x1C
					constexpr auto n_packed_surface_tangent_os = 0x20; // Name: m_nPackedSurfaceTangentOs Offset: 0x20
				} // namespace RenderHairStrandInfo_t

				namespace CModelConfig {
					constexpr auto config_name = 0x0; // Name: m_ConfigName Offset: 0x0
					constexpr auto elements = 0x8; // Name: m_Elements Offset: 0x8
					constexpr auto b_top_level = 0x20; // Name: m_bTopLevel Offset: 0x20
				} // namespace CModelConfig

				namespace CCycleBase {
					constexpr auto fl_cycle = 0x0; // Name: m_flCycle Offset: 0x0
				} // namespace CCycleBase

				namespace VPhysXConstraintParams_t {
					constexpr auto n_type = 0x0; // Name: m_nType Offset: 0x0
					constexpr auto n_translate_motion = 0x1; // Name: m_nTranslateMotion Offset: 0x1
					constexpr auto n_rotate_motion = 0x2; // Name: m_nRotateMotion Offset: 0x2
					constexpr auto n_flags = 0x3; // Name: m_nFlags Offset: 0x3
					constexpr auto anchor = 0x4; // Name: m_anchor Offset: 0x4
					constexpr auto axes = 0x1C; // Name: m_axes Offset: 0x1C
					constexpr auto max_force = 0x3C; // Name: m_maxForce Offset: 0x3C
					constexpr auto max_torque = 0x40; // Name: m_maxTorque Offset: 0x40
					constexpr auto linear_limit_value = 0x44; // Name: m_linearLimitValue Offset: 0x44
					constexpr auto linear_limit_restitution = 0x48; // Name: m_linearLimitRestitution Offset: 0x48
					constexpr auto linear_limit_spring = 0x4C; // Name: m_linearLimitSpring Offset: 0x4C
					constexpr auto linear_limit_damping = 0x50; // Name: m_linearLimitDamping Offset: 0x50
					constexpr auto twist_low_limit_value = 0x54; // Name: m_twistLowLimitValue Offset: 0x54
					constexpr auto twist_low_limit_restitution = 0x58; // Name: m_twistLowLimitRestitution Offset: 0x58
					constexpr auto twist_low_limit_spring = 0x5C; // Name: m_twistLowLimitSpring Offset: 0x5C
					constexpr auto twist_low_limit_damping = 0x60; // Name: m_twistLowLimitDamping Offset: 0x60
					constexpr auto twist_high_limit_value = 0x64; // Name: m_twistHighLimitValue Offset: 0x64
					constexpr auto twist_high_limit_restitution = 0x68; // Name: m_twistHighLimitRestitution Offset: 0x68
					constexpr auto twist_high_limit_spring = 0x6C; // Name: m_twistHighLimitSpring Offset: 0x6C
					constexpr auto twist_high_limit_damping = 0x70; // Name: m_twistHighLimitDamping Offset: 0x70
					constexpr auto swing1_limit_value = 0x74; // Name: m_swing1LimitValue Offset: 0x74
					constexpr auto swing1_limit_restitution = 0x78; // Name: m_swing1LimitRestitution Offset: 0x78
					constexpr auto swing1_limit_spring = 0x7C; // Name: m_swing1LimitSpring Offset: 0x7C
					constexpr auto swing1_limit_damping = 0x80; // Name: m_swing1LimitDamping Offset: 0x80
					constexpr auto swing2_limit_value = 0x84; // Name: m_swing2LimitValue Offset: 0x84
					constexpr auto swing2_limit_restitution = 0x88; // Name: m_swing2LimitRestitution Offset: 0x88
					constexpr auto swing2_limit_spring = 0x8C; // Name: m_swing2LimitSpring Offset: 0x8C
					constexpr auto swing2_limit_damping = 0x90; // Name: m_swing2LimitDamping Offset: 0x90
					constexpr auto goal_position = 0x94; // Name: m_goalPosition Offset: 0x94
					constexpr auto goal_orientation = 0xA0; // Name: m_goalOrientation Offset: 0xA0
					constexpr auto goal_angular_velocity = 0xB0; // Name: m_goalAngularVelocity Offset: 0xB0
					constexpr auto drive_spring_x = 0xBC; // Name: m_driveSpringX Offset: 0xBC
					constexpr auto drive_spring_y = 0xC0; // Name: m_driveSpringY Offset: 0xC0
					constexpr auto drive_spring_z = 0xC4; // Name: m_driveSpringZ Offset: 0xC4
					constexpr auto drive_damping_x = 0xC8; // Name: m_driveDampingX Offset: 0xC8
					constexpr auto drive_damping_y = 0xCC; // Name: m_driveDampingY Offset: 0xCC
					constexpr auto drive_damping_z = 0xD0; // Name: m_driveDampingZ Offset: 0xD0
					constexpr auto drive_spring_twist = 0xD4; // Name: m_driveSpringTwist Offset: 0xD4
					constexpr auto drive_spring_swing = 0xD8; // Name: m_driveSpringSwing Offset: 0xD8
					constexpr auto drive_spring_slerp = 0xDC; // Name: m_driveSpringSlerp Offset: 0xDC
					constexpr auto drive_damping_twist = 0xE0; // Name: m_driveDampingTwist Offset: 0xE0
					constexpr auto drive_damping_swing = 0xE4; // Name: m_driveDampingSwing Offset: 0xE4
					constexpr auto drive_damping_slerp = 0xE8; // Name: m_driveDampingSlerp Offset: 0xE8
					constexpr auto solver_iteration_count = 0xEC; // Name: m_solverIterationCount Offset: 0xEC
					constexpr auto projection_linear_tolerance = 0xF0; // Name: m_projectionLinearTolerance Offset: 0xF0
					constexpr auto projection_angular_tolerance = 0xF4; // Name: m_projectionAngularTolerance Offset: 0xF4
				} // namespace VPhysXConstraintParams_t

				namespace AnimComponentID {
					constexpr auto id = 0x0; // Name: m_id Offset: 0x0
				} // namespace AnimComponentID

				namespace CHitBoxSetList {
					constexpr auto hit_box_sets = 0x0; // Name: m_HitBoxSets Offset: 0x0
				} // namespace CHitBoxSetList

				namespace VPhysXAggregateData_t {
					constexpr auto n_flags = 0x0; // Name: m_nFlags Offset: 0x0
					constexpr auto n_ref_counter = 0x2; // Name: m_nRefCounter Offset: 0x2
					constexpr auto bones_hash = 0x8; // Name: m_bonesHash Offset: 0x8
					constexpr auto bone_names = 0x20; // Name: m_boneNames Offset: 0x20
					constexpr auto index_names = 0x38; // Name: m_indexNames Offset: 0x38
					constexpr auto index_hash = 0x50; // Name: m_indexHash Offset: 0x50
					constexpr auto bind_pose = 0x68; // Name: m_bindPose Offset: 0x68
					constexpr auto parts = 0x80; // Name: m_parts Offset: 0x80
					constexpr auto constraints2 = 0x98; // Name: m_constraints2 Offset: 0x98
					constexpr auto joints = 0xB0; // Name: m_joints Offset: 0xB0
					constexpr auto p_fe_model = 0xC8; // Name: m_pFeModel Offset: 0xC8
					constexpr auto bone_parents = 0xD0; // Name: m_boneParents Offset: 0xD0
					constexpr auto surface_property_hashes = 0xE8; // Name: m_surfacePropertyHashes Offset: 0xE8
					constexpr auto collision_attributes = 0x100; // Name: m_collisionAttributes Offset: 0x100
					constexpr auto debug_part_names = 0x118; // Name: m_debugPartNames Offset: 0x118
					constexpr auto embedded_keyvalues = 0x130; // Name: m_embeddedKeyvalues Offset: 0x130
				} // namespace VPhysXAggregateData_t

				namespace VPhysXRange_t {
					constexpr auto fl_min = 0x0; // Name: m_flMin Offset: 0x0
					constexpr auto fl_max = 0x4; // Name: m_flMax Offset: 0x4
				} // namespace VPhysXRange_t

				namespace CConstraintSlave {
					constexpr auto q_base_orientation = 0x0; // Name: m_qBaseOrientation Offset: 0x0
					constexpr auto v_base_position = 0x10; // Name: m_vBasePosition Offset: 0x10
					constexpr auto n_bone_hash = 0x1C; // Name: m_nBoneHash Offset: 0x1C
					constexpr auto fl_weight = 0x20; // Name: m_flWeight Offset: 0x20
					constexpr auto s_name = 0x28; // Name: m_sName Offset: 0x28
				} // namespace CConstraintSlave

				namespace CModelConfigElement_SetMaterialGroupOnAttachedModels {
					constexpr auto material_group_name = 0x48; // Name: m_MaterialGroupName Offset: 0x48
				} // namespace CModelConfigElement_SetMaterialGroupOnAttachedModels

				namespace MaterialGroup_t {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
					constexpr auto materials = 0x8; // Name: m_materials Offset: 0x8
				} // namespace MaterialGroup_t

				namespace CMorphBundleData {
					constexpr auto fl_uleft_src = 0x0; // Name: m_flULeftSrc Offset: 0x0
					constexpr auto fl_vtop_src = 0x4; // Name: m_flVTopSrc Offset: 0x4
					constexpr auto offsets = 0x8; // Name: m_offsets Offset: 0x8
					constexpr auto ranges = 0x20; // Name: m_ranges Offset: 0x20
				} // namespace CMorphBundleData

				namespace CFootTrajectories {
					constexpr auto trajectories = 0x0; // Name: m_trajectories Offset: 0x0
				} // namespace CFootTrajectories

				namespace CRenderBufferBinding {
					constexpr auto h_buffer = 0x0; // Name: m_hBuffer Offset: 0x0
					constexpr auto n_bind_offset_bytes = 0x10; // Name: m_nBindOffsetBytes Offset: 0x10
				} // namespace CRenderBufferBinding

				namespace CAimConstraint {
					constexpr auto q_aim_offset = 0x70; // Name: m_qAimOffset Offset: 0x70
					constexpr auto n_up_type = 0x80; // Name: m_nUpType Offset: 0x80
				} // namespace CAimConstraint

				namespace CModelConfigElement_SetMaterialGroup {
					constexpr auto material_group_name = 0x48; // Name: m_MaterialGroupName Offset: 0x48
				} // namespace CModelConfigElement_SetMaterialGroup

				namespace ModelSkeletonData_t {
					constexpr auto bone_name = 0x0; // Name: m_boneName Offset: 0x0
					constexpr auto n_parent = 0x18; // Name: m_nParent Offset: 0x18
					constexpr auto bone_sphere = 0x30; // Name: m_boneSphere Offset: 0x30
					constexpr auto n_flag = 0x48; // Name: m_nFlag Offset: 0x48
					constexpr auto bone_pos_parent = 0x60; // Name: m_bonePosParent Offset: 0x60
					constexpr auto bone_rot_parent = 0x78; // Name: m_boneRotParent Offset: 0x78
					constexpr auto bone_scale_parent = 0x90; // Name: m_boneScaleParent Offset: 0x90
				} // namespace ModelSkeletonData_t

				namespace CMorphSetData {
					constexpr auto n_width = 0x10; // Name: m_nWidth Offset: 0x10
					constexpr auto n_height = 0x14; // Name: m_nHeight Offset: 0x14
					constexpr auto bundle_types = 0x18; // Name: m_bundleTypes Offset: 0x18
					constexpr auto morph_datas = 0x30; // Name: m_morphDatas Offset: 0x30
					constexpr auto p_texture_atlas = 0x48; // Name: m_pTextureAtlas Offset: 0x48
					constexpr auto flex_desc = 0x50; // Name: m_FlexDesc Offset: 0x50
					constexpr auto flex_controllers = 0x68; // Name: m_FlexControllers Offset: 0x68
					constexpr auto flex_rules = 0x80; // Name: m_FlexRules Offset: 0x80
				} // namespace CMorphSetData

				namespace SkeletonAnimCapture_t_Bone_t {
					constexpr auto name = 0x0; // Name: m_Name Offset: 0x0
					constexpr auto bind_pose = 0x10; // Name: m_BindPose Offset: 0x10
					constexpr auto n_parent = 0x30; // Name: m_nParent Offset: 0x30
				} // namespace SkeletonAnimCapture_t_Bone_t

				namespace CBaseConstraint {
					constexpr auto name = 0x28; // Name: m_name Offset: 0x28
					constexpr auto v_up_vector = 0x30; // Name: m_vUpVector Offset: 0x30
					constexpr auto slaves = 0x40; // Name: m_slaves Offset: 0x40
					constexpr auto targets = 0x50; // Name: m_targets Offset: 0x50
				} // namespace CBaseConstraint

				namespace SkeletonAnimCapture_t {
					constexpr auto n_ent_index = 0x0; // Name: m_nEntIndex Offset: 0x0
					constexpr auto n_ent_parent = 0x4; // Name: m_nEntParent Offset: 0x4
					constexpr auto imported_collision = 0x8; // Name: m_ImportedCollision Offset: 0x8
					constexpr auto model_name = 0x20; // Name: m_ModelName Offset: 0x20
					constexpr auto capture_name = 0x28; // Name: m_CaptureName Offset: 0x28
					constexpr auto model_bind_pose = 0x30; // Name: m_ModelBindPose Offset: 0x30
					constexpr auto fe_model_init_pose = 0x48; // Name: m_FeModelInitPose Offset: 0x48
					constexpr auto n_flex_controllers = 0x60; // Name: m_nFlexControllers Offset: 0x60
					constexpr auto b_predicted = 0x64; // Name: m_bPredicted Offset: 0x64
					constexpr auto frames = 0xA8; // Name: m_Frames Offset: 0xA8
				} // namespace SkeletonAnimCapture_t

				namespace CModelConfigElement_RandomPick {
					constexpr auto choices = 0x48; // Name: m_Choices Offset: 0x48
					constexpr auto choice_weights = 0x60; // Name: m_ChoiceWeights Offset: 0x60
				} // namespace CModelConfigElement_RandomPick

				namespace VPhysXConstraint2_t {
					constexpr auto n_flags = 0x0; // Name: m_nFlags Offset: 0x0
					constexpr auto n_parent = 0x4; // Name: m_nParent Offset: 0x4
					constexpr auto n_child = 0x6; // Name: m_nChild Offset: 0x6
					constexpr auto params = 0x8; // Name: m_params Offset: 0x8
				} // namespace VPhysXConstraint2_t

				namespace CPhysSurfaceProperties {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
					constexpr auto name_hash = 0x8; // Name: m_nameHash Offset: 0x8
					constexpr auto base_name_hash = 0xC; // Name: m_baseNameHash Offset: 0xC
					constexpr auto b_hidden = 0x18; // Name: m_bHidden Offset: 0x18
					constexpr auto description = 0x20; // Name: m_description Offset: 0x20
					constexpr auto physics = 0x28; // Name: m_physics Offset: 0x28
					constexpr auto audio_sounds = 0x50; // Name: m_audioSounds Offset: 0x50
					constexpr auto audio_params = 0xA8; // Name: m_audioParams Offset: 0xA8
				} // namespace CPhysSurfaceProperties

				namespace CModelConfigElement_Command {
					constexpr auto command = 0x48; // Name: m_Command Offset: 0x48
					constexpr auto args = 0x50; // Name: m_Args Offset: 0x50
				} // namespace CModelConfigElement_Command

				namespace CConstraintTarget {
					constexpr auto q_offset = 0x20; // Name: m_qOffset Offset: 0x20
					constexpr auto v_offset = 0x30; // Name: m_vOffset Offset: 0x30
					constexpr auto n_bone_hash = 0x3C; // Name: m_nBoneHash Offset: 0x3C
					constexpr auto s_name = 0x40; // Name: m_sName Offset: 0x40
					constexpr auto fl_weight = 0x48; // Name: m_flWeight Offset: 0x48
					constexpr auto b_is_attachment = 0x59; // Name: m_bIsAttachment Offset: 0x59
				} // namespace CConstraintTarget

				namespace CFootDefinition {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
					constexpr auto ankle_bone_name = 0x8; // Name: m_ankleBoneName Offset: 0x8
					constexpr auto toe_bone_name = 0x10; // Name: m_toeBoneName Offset: 0x10
					constexpr auto v_ball_offset = 0x18; // Name: m_vBallOffset Offset: 0x18
					constexpr auto v_heel_offset = 0x24; // Name: m_vHeelOffset Offset: 0x24
					constexpr auto fl_foot_length = 0x30; // Name: m_flFootLength Offset: 0x30
					constexpr auto fl_bind_pose_direction_ms = 0x34; // Name: m_flBindPoseDirectionMS Offset: 0x34
					constexpr auto fl_trace_height = 0x38; // Name: m_flTraceHeight Offset: 0x38
					constexpr auto fl_trace_radius = 0x3C; // Name: m_flTraceRadius Offset: 0x3C
				} // namespace CFootDefinition

				namespace PermModelExtPart_t {
					constexpr auto transform = 0x0; // Name: m_Transform Offset: 0x0
					constexpr auto name = 0x20; // Name: m_Name Offset: 0x20
					constexpr auto n_parent = 0x28; // Name: m_nParent Offset: 0x28
					constexpr auto ref_model = 0x30; // Name: m_refModel Offset: 0x30
				} // namespace PermModelExtPart_t

				namespace AnimScriptHandle {
					constexpr auto id = 0x0; // Name: m_id Offset: 0x0
				} // namespace AnimScriptHandle

				namespace DynamicMeshDeformParams_t {
					constexpr auto fl_tension_compress_scale = 0x0; // Name: m_flTensionCompressScale Offset: 0x0
					constexpr auto fl_tension_stretch_scale = 0x4; // Name: m_flTensionStretchScale Offset: 0x4
					constexpr auto b_recompute_smooth_normals_after_animation = 0x8; // Name: m_bRecomputeSmoothNormalsAfterAnimation Offset: 0x8
					constexpr auto b_compute_dynamic_mesh_tension_after_animation = 0x9; // Name: m_bComputeDynamicMeshTensionAfterAnimation Offset: 0x9
					constexpr auto b_smooth_normals_across_uv_seams = 0xA; // Name: m_bSmoothNormalsAcrossUvSeams Offset: 0xA
				} // namespace DynamicMeshDeformParams_t

				namespace CParentConstraint {
				} // namespace CParentConstraint

				namespace SkeletonAnimCapture_t_FrameStamp_t {
					constexpr auto fl_time = 0x0; // Name: m_flTime Offset: 0x0
					constexpr auto fl_entity_sim_time = 0x4; // Name: m_flEntitySimTime Offset: 0x4
					constexpr auto b_teleport_tick = 0x8; // Name: m_bTeleportTick Offset: 0x8
					constexpr auto b_predicted = 0x9; // Name: m_bPredicted Offset: 0x9
					constexpr auto fl_cur_time = 0xC; // Name: m_flCurTime Offset: 0xC
					constexpr auto fl_real_time = 0x10; // Name: m_flRealTime Offset: 0x10
					constexpr auto n_frame_count = 0x14; // Name: m_nFrameCount Offset: 0x14
					constexpr auto n_tick_count = 0x18; // Name: m_nTickCount Offset: 0x18
				} // namespace SkeletonAnimCapture_t_FrameStamp_t

				namespace AnimTagID {
					constexpr auto id = 0x0; // Name: m_id Offset: 0x0
				} // namespace AnimTagID

				namespace CHitBoxSet {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
					constexpr auto n_name_hash = 0x8; // Name: m_nNameHash Offset: 0x8
					constexpr auto hit_boxes = 0x10; // Name: m_HitBoxes Offset: 0x10
					constexpr auto source_filename = 0x28; // Name: m_SourceFilename Offset: 0x28
				} // namespace CHitBoxSet

				namespace CModelConfigElement_SetBodygroup {
					constexpr auto group_name = 0x48; // Name: m_GroupName Offset: 0x48
					constexpr auto n_choice = 0x50; // Name: m_nChoice Offset: 0x50
				} // namespace CModelConfigElement_SetBodygroup

				namespace CModelConfigElement_RandomColor {
					constexpr auto gradient = 0x48; // Name: m_Gradient Offset: 0x48
				} // namespace CModelConfigElement_RandomColor

				namespace CMorphRectData {
					constexpr auto n_xleft_dst = 0x0; // Name: m_nXLeftDst Offset: 0x0
					constexpr auto n_ytop_dst = 0x2; // Name: m_nYTopDst Offset: 0x2
					constexpr auto fl_uwidth_src = 0x4; // Name: m_flUWidthSrc Offset: 0x4
					constexpr auto fl_vheight_src = 0x8; // Name: m_flVHeightSrc Offset: 0x8
					constexpr auto bundle_datas = 0x10; // Name: m_bundleDatas Offset: 0x10
				} // namespace CMorphRectData

				namespace CAnimFoot {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
					constexpr auto v_ball_offset = 0x8; // Name: m_vBallOffset Offset: 0x8
					constexpr auto v_heel_offset = 0x14; // Name: m_vHeelOffset Offset: 0x14
					constexpr auto ankle_bone_index = 0x20; // Name: m_ankleBoneIndex Offset: 0x20
					constexpr auto toe_bone_index = 0x24; // Name: m_toeBoneIndex Offset: 0x24
				} // namespace CAnimFoot

				namespace SkeletonAnimCapture_t_Camera_t {
					constexpr auto tm_camera = 0x0; // Name: m_tmCamera Offset: 0x0
					constexpr auto fl_time = 0x20; // Name: m_flTime Offset: 0x20
				} // namespace SkeletonAnimCapture_t_Camera_t

				namespace SkeletonAnimCapture_t_Frame_t {
					constexpr auto fl_time = 0x0; // Name: m_flTime Offset: 0x0
					constexpr auto stamp = 0x4; // Name: m_Stamp Offset: 0x4
					constexpr auto transform = 0x20; // Name: m_Transform Offset: 0x20
					constexpr auto b_teleport = 0x40; // Name: m_bTeleport Offset: 0x40
					constexpr auto composite_bones = 0x48; // Name: m_CompositeBones Offset: 0x48
					constexpr auto sim_state_bones = 0x60; // Name: m_SimStateBones Offset: 0x60
					constexpr auto fe_model_anims = 0x78; // Name: m_FeModelAnims Offset: 0x78
					constexpr auto fe_model_pos = 0x90; // Name: m_FeModelPos Offset: 0x90
					constexpr auto flex_controller_weights = 0xA8; // Name: m_FlexControllerWeights Offset: 0xA8
				} // namespace SkeletonAnimCapture_t_Frame_t

				namespace CFlexOp {
					constexpr auto op_code = 0x0; // Name: m_OpCode Offset: 0x0
					constexpr auto data = 0x4; // Name: m_Data Offset: 0x4
				} // namespace CFlexOp

				namespace CFootStride {
					constexpr auto definition = 0x0; // Name: m_definition Offset: 0x0
					constexpr auto trajectories = 0x40; // Name: m_trajectories Offset: 0x40
				} // namespace CFootStride

				namespace CBoneConstraintPoseSpaceBone_Input_t {
					constexpr auto input_value = 0x0; // Name: m_inputValue Offset: 0x0
					constexpr auto output_transform_list = 0x10; // Name: m_outputTransformList Offset: 0x10
				} // namespace CBoneConstraintPoseSpaceBone_Input_t

				namespace CFootTrajectory {
					constexpr auto v_offset = 0x0; // Name: m_vOffset Offset: 0x0
					constexpr auto fl_rotation_offset = 0xC; // Name: m_flRotationOffset Offset: 0xC
					constexpr auto fl_progression = 0x10; // Name: m_flProgression Offset: 0x10
				} // namespace CFootTrajectory

				namespace CFlexController {
					constexpr auto sz_name = 0x0; // Name: m_szName Offset: 0x0
					constexpr auto sz_type = 0x8; // Name: m_szType Offset: 0x8
					constexpr auto min = 0x10; // Name: min Offset: 0x10
					constexpr auto max = 0x14; // Name: max Offset: 0x14
				} // namespace CFlexController

				namespace SkeletonDemoDb_t {
					constexpr auto anim_captures = 0x0; // Name: m_AnimCaptures Offset: 0x0
					constexpr auto camera_track = 0x18; // Name: m_CameraTrack Offset: 0x18
					constexpr auto fl_recording_time = 0x30; // Name: m_flRecordingTime Offset: 0x30
				} // namespace SkeletonDemoDb_t

				namespace CFlexDesc {
					constexpr auto sz_facs = 0x0; // Name: m_szFacs Offset: 0x0
				} // namespace CFlexDesc

				namespace CRenderMesh {
					constexpr auto scene_objects = 0x10; // Name: m_sceneObjects Offset: 0x10
					constexpr auto constraints = 0x78; // Name: m_constraints Offset: 0x78
					constexpr auto skeleton = 0x88; // Name: m_skeleton Offset: 0x88
					constexpr auto mesh_deform_params = 0x1A8; // Name: m_meshDeformParams Offset: 0x1A8
					constexpr auto p_groom_data = 0x1B8; // Name: m_pGroomData Offset: 0x1B8
				} // namespace CRenderMesh

				namespace CAnimSkeleton {
					constexpr auto local_space_transforms = 0x10; // Name: m_localSpaceTransforms Offset: 0x10
					constexpr auto model_space_transforms = 0x28; // Name: m_modelSpaceTransforms Offset: 0x28
					constexpr auto bone_names = 0x40; // Name: m_boneNames Offset: 0x40
					constexpr auto children = 0x58; // Name: m_children Offset: 0x58
					constexpr auto parents = 0x70; // Name: m_parents Offset: 0x70
					constexpr auto feet = 0x88; // Name: m_feet Offset: 0x88
					constexpr auto morph_names = 0xA0; // Name: m_morphNames Offset: 0xA0
					constexpr auto lod_bone_counts = 0xB8; // Name: m_lodBoneCounts Offset: 0xB8
				} // namespace CAnimSkeleton

				namespace VPhysics2ShapeDef_t {
					constexpr auto spheres = 0x0; // Name: m_spheres Offset: 0x0
					constexpr auto capsules = 0x18; // Name: m_capsules Offset: 0x18
					constexpr auto hulls = 0x30; // Name: m_hulls Offset: 0x30
					constexpr auto meshes = 0x48; // Name: m_meshes Offset: 0x48
					constexpr auto collision_attribute_indices = 0x60; // Name: m_CollisionAttributeIndices Offset: 0x60
				} // namespace VPhysics2ShapeDef_t

				namespace CTwistConstraint {
					constexpr auto b_inverse = 0x68; // Name: m_bInverse Offset: 0x68
					constexpr auto q_parent_bind_rotation = 0x70; // Name: m_qParentBindRotation Offset: 0x70
					constexpr auto q_child_bind_rotation = 0x80; // Name: m_qChildBindRotation Offset: 0x80
				} // namespace CTwistConstraint

				namespace ModelBoneFlexDriverControl_t {
					constexpr auto n_bone_component = 0x0; // Name: m_nBoneComponent Offset: 0x0
					constexpr auto flex_controller = 0x8; // Name: m_flexController Offset: 0x8
					constexpr auto flex_controller_token = 0x10; // Name: m_flexControllerToken Offset: 0x10
					constexpr auto fl_min = 0x14; // Name: m_flMin Offset: 0x14
					constexpr auto fl_max = 0x18; // Name: m_flMax Offset: 0x18
				} // namespace ModelBoneFlexDriverControl_t

				namespace RenderSkeletonBone_t {
					constexpr auto bone_name = 0x0; // Name: m_boneName Offset: 0x0
					constexpr auto parent_name = 0x8; // Name: m_parentName Offset: 0x8
					constexpr auto inv_bind_pose = 0x10; // Name: m_invBindPose Offset: 0x10
					constexpr auto bbox = 0x40; // Name: m_bbox Offset: 0x40
					constexpr auto fl_sphere_radius = 0x58; // Name: m_flSphereRadius Offset: 0x58
				} // namespace RenderSkeletonBone_t

				namespace CFlexRule {
					constexpr auto n_flex = 0x0; // Name: m_nFlex Offset: 0x0
					constexpr auto flex_ops = 0x8; // Name: m_FlexOps Offset: 0x8
				} // namespace CFlexRule

				namespace CRenderGroom {
					constexpr auto hairs = 0x0; // Name: m_hairs Offset: 0x0
					constexpr auto hair_position_offsets = 0x18; // Name: m_hairPositionOffsets Offset: 0x18
					constexpr auto h_sim_params_mat = 0x40; // Name: m_hSimParamsMat Offset: 0x40
					constexpr auto n_segments_per_hair_strand = 0x48; // Name: m_nSegmentsPerHairStrand Offset: 0x48
					constexpr auto n_guide_hair_count = 0x4C; // Name: m_nGuideHairCount Offset: 0x4C
					constexpr auto n_hair_count = 0x50; // Name: m_nHairCount Offset: 0x50
					constexpr auto n_groom_group_id = 0x54; // Name: m_nGroomGroupID Offset: 0x54
					constexpr auto n_attach_bone_idx = 0x58; // Name: m_nAttachBoneIdx Offset: 0x58
					constexpr auto n_attach_mesh_idx = 0x5C; // Name: m_nAttachMeshIdx Offset: 0x5C
					constexpr auto n_attach_mesh_draw_call_idx = 0x60; // Name: m_nAttachMeshDrawCallIdx Offset: 0x60
					constexpr auto b_enable_simulation = 0x64; // Name: m_bEnableSimulation Offset: 0x64
				} // namespace CRenderGroom

				namespace CTiltTwistConstraint {
					constexpr auto n_target_axis = 0x68; // Name: m_nTargetAxis Offset: 0x68
					constexpr auto n_slave_axis = 0x6C; // Name: m_nSlaveAxis Offset: 0x6C
				} // namespace CTiltTwistConstraint

				namespace AnimParamID {
					constexpr auto id = 0x0; // Name: m_id Offset: 0x0
				} // namespace AnimParamID

				namespace CVPhysXSurfacePropertiesList {
					constexpr auto surface_properties_list = 0x0; // Name: m_surfacePropertiesList Offset: 0x0
				} // namespace CVPhysXSurfacePropertiesList

				namespace CBoneConstraintPoseSpaceBone {
					constexpr auto input_list = 0x68; // Name: m_inputList Offset: 0x68
				} // namespace CBoneConstraintPoseSpaceBone

				namespace CBoneConstraintPoseSpaceMorph {
					constexpr auto s_bone_name = 0x28; // Name: m_sBoneName Offset: 0x28
					constexpr auto s_attachment_name = 0x30; // Name: m_sAttachmentName Offset: 0x30
					constexpr auto output_morph = 0x38; // Name: m_outputMorph Offset: 0x38
					constexpr auto input_list = 0x50; // Name: m_inputList Offset: 0x50
					constexpr auto b_clamp = 0x68; // Name: m_bClamp Offset: 0x68
				} // namespace CBoneConstraintPoseSpaceMorph

				namespace CRenderSkeleton {
					constexpr auto bones = 0x0; // Name: m_bones Offset: 0x0
					constexpr auto bone_parents = 0x30; // Name: m_boneParents Offset: 0x30
					constexpr auto n_bone_weight_count = 0x48; // Name: m_nBoneWeightCount Offset: 0x48
				} // namespace CRenderSkeleton

				namespace CPhysSurfacePropertiesPhysics {
					constexpr auto friction = 0x0; // Name: m_friction Offset: 0x0
					constexpr auto elasticity = 0x4; // Name: m_elasticity Offset: 0x4
					constexpr auto density = 0x8; // Name: m_density Offset: 0x8
					constexpr auto thickness = 0xC; // Name: m_thickness Offset: 0xC
					constexpr auto soft_contact_frequency = 0x10; // Name: m_softContactFrequency Offset: 0x10
					constexpr auto soft_contact_damping_ratio = 0x14; // Name: m_softContactDampingRatio Offset: 0x14
					constexpr auto wheel_drag = 0x18; // Name: m_wheelDrag Offset: 0x18
					constexpr auto heat_conductivity = 0x1C; // Name: m_heatConductivity Offset: 0x1C
					constexpr auto flashpoint = 0x20; // Name: m_flashpoint Offset: 0x20
				} // namespace CPhysSurfacePropertiesPhysics

				namespace CBoneConstraintDotToMorph {
					constexpr auto s_bone_name = 0x28; // Name: m_sBoneName Offset: 0x28
					constexpr auto s_target_bone_name = 0x30; // Name: m_sTargetBoneName Offset: 0x30
					constexpr auto s_morph_channel_name = 0x38; // Name: m_sMorphChannelName Offset: 0x38
					constexpr auto fl_remap = 0x40; // Name: m_flRemap Offset: 0x40
				} // namespace CBoneConstraintDotToMorph

				namespace CPointConstraint {
				} // namespace CPointConstraint

				namespace COrientConstraint {
				} // namespace COrientConstraint

				namespace CAnimAttachment {
					constexpr auto influence_rotations = 0x0; // Name: m_influenceRotations Offset: 0x0
					constexpr auto influence_offsets = 0x30; // Name: m_influenceOffsets Offset: 0x30
					constexpr auto influence_indices = 0x60; // Name: m_influenceIndices Offset: 0x60
					constexpr auto influence_weights = 0x6C; // Name: m_influenceWeights Offset: 0x6C
					constexpr auto num_influences = 0x78; // Name: m_numInfluences Offset: 0x78
				} // namespace CAnimAttachment

				namespace SkeletonBoneBounds_t {
					constexpr auto vec_center = 0x0; // Name: m_vecCenter Offset: 0x0
					constexpr auto vec_size = 0xC; // Name: m_vecSize Offset: 0xC
				} // namespace SkeletonBoneBounds_t

				namespace CBoneConstraintBase {
				} // namespace CBoneConstraintBase

				namespace CPhysSurfacePropertiesAudio {
					constexpr auto reflectivity = 0x0; // Name: m_reflectivity Offset: 0x0
					constexpr auto hardness_factor = 0x4; // Name: m_hardnessFactor Offset: 0x4
					constexpr auto roughness_factor = 0x8; // Name: m_roughnessFactor Offset: 0x8
					constexpr auto rough_threshold = 0xC; // Name: m_roughThreshold Offset: 0xC
					constexpr auto hard_threshold = 0x10; // Name: m_hardThreshold Offset: 0x10
					constexpr auto hard_velocity_threshold = 0x14; // Name: m_hardVelocityThreshold Offset: 0x14
					constexpr auto fl_static_impact_volume = 0x18; // Name: m_flStaticImpactVolume Offset: 0x18
					constexpr auto fl_occlusion_factor = 0x1C; // Name: m_flOcclusionFactor Offset: 0x1C
				} // namespace CPhysSurfacePropertiesAudio

				namespace PhysSoftbodyDesc_t {
					constexpr auto particle_bone_hash = 0x0; // Name: m_ParticleBoneHash Offset: 0x0
					constexpr auto particles = 0x18; // Name: m_Particles Offset: 0x18
					constexpr auto springs = 0x30; // Name: m_Springs Offset: 0x30
					constexpr auto capsules = 0x48; // Name: m_Capsules Offset: 0x48
					constexpr auto init_pose = 0x60; // Name: m_InitPose Offset: 0x60
					constexpr auto particle_bone_name = 0x78; // Name: m_ParticleBoneName Offset: 0x78
				} // namespace PhysSoftbodyDesc_t

				namespace CModelConfigElement_AttachedModel {
					constexpr auto instance_name = 0x48; // Name: m_InstanceName Offset: 0x48
					constexpr auto entity_class = 0x50; // Name: m_EntityClass Offset: 0x50
					constexpr auto h_model = 0x58; // Name: m_hModel Offset: 0x58
					constexpr auto v_offset = 0x60; // Name: m_vOffset Offset: 0x60
					constexpr auto a_ang_offset = 0x6C; // Name: m_aAngOffset Offset: 0x6C
					constexpr auto attachment_name = 0x78; // Name: m_AttachmentName Offset: 0x78
					constexpr auto local_attachment_offset_name = 0x80; // Name: m_LocalAttachmentOffsetName Offset: 0x80
					constexpr auto attachment_type = 0x88; // Name: m_AttachmentType Offset: 0x88
					constexpr auto b_bone_merge_flex = 0x8C; // Name: m_bBoneMergeFlex Offset: 0x8C
					constexpr auto b_user_specified_color = 0x8D; // Name: m_bUserSpecifiedColor Offset: 0x8D
					constexpr auto b_user_specified_material_group = 0x8E; // Name: m_bUserSpecifiedMaterialGroup Offset: 0x8E
					constexpr auto b_accept_parent_material_driven_decals = 0x8F; // Name: m_bAcceptParentMaterialDrivenDecals Offset: 0x8F
					constexpr auto bodygroup_on_other_models = 0x90; // Name: m_BodygroupOnOtherModels Offset: 0x90
					constexpr auto material_group_on_other_models = 0x98; // Name: m_MaterialGroupOnOtherModels Offset: 0x98
				} // namespace CModelConfigElement_AttachedModel
			}

			namespace materialsystem2
			{

				namespace MaterialParam_t {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
				} // namespace MaterialParam_t

				namespace MaterialParamVector_t {
					constexpr auto value = 0x8; // Name: m_value Offset: 0x8
				} // namespace MaterialParamVector_t

				namespace PostProcessingResource_t {
					constexpr auto b_has_tonemap_params = 0x0; // Name: m_bHasTonemapParams Offset: 0x0
					constexpr auto tone_map_params = 0x4; // Name: m_toneMapParams Offset: 0x4
					constexpr auto b_has_bloom_params = 0x40; // Name: m_bHasBloomParams Offset: 0x40
					constexpr auto bloom_params = 0x44; // Name: m_bloomParams Offset: 0x44
					constexpr auto b_has_vignette_params = 0xB4; // Name: m_bHasVignetteParams Offset: 0xB4
					constexpr auto vignette_params = 0xB8; // Name: m_vignetteParams Offset: 0xB8
					constexpr auto b_has_local_contrast_params = 0xDC; // Name: m_bHasLocalContrastParams Offset: 0xDC
					constexpr auto local_constrast_params = 0xE0; // Name: m_localConstrastParams Offset: 0xE0
					constexpr auto n_color_correction_volume_dim = 0xF4; // Name: m_nColorCorrectionVolumeDim Offset: 0xF4
					constexpr auto color_correction_volume_data = 0xF8; // Name: m_colorCorrectionVolumeData Offset: 0xF8
					constexpr auto b_has_color_correction = 0x110; // Name: m_bHasColorCorrection Offset: 0x110
				} // namespace PostProcessingResource_t

				namespace PostProcessingTonemapParameters_t {
					constexpr auto fl_exposure_bias = 0x0; // Name: m_flExposureBias Offset: 0x0
					constexpr auto fl_shoulder_strength = 0x4; // Name: m_flShoulderStrength Offset: 0x4
					constexpr auto fl_linear_strength = 0x8; // Name: m_flLinearStrength Offset: 0x8
					constexpr auto fl_linear_angle = 0xC; // Name: m_flLinearAngle Offset: 0xC
					constexpr auto fl_toe_strength = 0x10; // Name: m_flToeStrength Offset: 0x10
					constexpr auto fl_toe_num = 0x14; // Name: m_flToeNum Offset: 0x14
					constexpr auto fl_toe_denom = 0x18; // Name: m_flToeDenom Offset: 0x18
					constexpr auto fl_white_point = 0x1C; // Name: m_flWhitePoint Offset: 0x1C
					constexpr auto fl_luminance_source = 0x20; // Name: m_flLuminanceSource Offset: 0x20
					constexpr auto fl_exposure_bias_shadows = 0x24; // Name: m_flExposureBiasShadows Offset: 0x24
					constexpr auto fl_exposure_bias_highlights = 0x28; // Name: m_flExposureBiasHighlights Offset: 0x28
					constexpr auto fl_min_shadow_lum = 0x2C; // Name: m_flMinShadowLum Offset: 0x2C
					constexpr auto fl_max_shadow_lum = 0x30; // Name: m_flMaxShadowLum Offset: 0x30
					constexpr auto fl_min_highlight_lum = 0x34; // Name: m_flMinHighlightLum Offset: 0x34
					constexpr auto fl_max_highlight_lum = 0x38; // Name: m_flMaxHighlightLum Offset: 0x38
				} // namespace PostProcessingTonemapParameters_t

				namespace MaterialParamString_t {
					constexpr auto value = 0x8; // Name: m_value Offset: 0x8
				} // namespace MaterialParamString_t

				namespace MaterialResourceData_t {
					constexpr auto material_name = 0x0; // Name: m_materialName Offset: 0x0
					constexpr auto shader_name = 0x8; // Name: m_shaderName Offset: 0x8
					constexpr auto int_params = 0x10; // Name: m_intParams Offset: 0x10
					constexpr auto float_params = 0x28; // Name: m_floatParams Offset: 0x28
					constexpr auto vector_params = 0x40; // Name: m_vectorParams Offset: 0x40
					constexpr auto texture_params = 0x58; // Name: m_textureParams Offset: 0x58
					constexpr auto dynamic_params = 0x70; // Name: m_dynamicParams Offset: 0x70
					constexpr auto dynamic_texture_params = 0x88; // Name: m_dynamicTextureParams Offset: 0x88
					constexpr auto int_attributes = 0xA0; // Name: m_intAttributes Offset: 0xA0
					constexpr auto float_attributes = 0xB8; // Name: m_floatAttributes Offset: 0xB8
					constexpr auto vector_attributes = 0xD0; // Name: m_vectorAttributes Offset: 0xD0
					constexpr auto texture_attributes = 0xE8; // Name: m_textureAttributes Offset: 0xE8
					constexpr auto string_attributes = 0x100; // Name: m_stringAttributes Offset: 0x100
					constexpr auto render_attributes_used = 0x118; // Name: m_renderAttributesUsed Offset: 0x118
				} // namespace MaterialResourceData_t

				namespace MaterialParamInt_t {
					constexpr auto n_value = 0x8; // Name: m_nValue Offset: 0x8
				} // namespace MaterialParamInt_t

				namespace PostProcessingVignetteParameters_t {
					constexpr auto fl_vignette_strength = 0x0; // Name: m_flVignetteStrength Offset: 0x0
					constexpr auto v_center = 0x4; // Name: m_vCenter Offset: 0x4
					constexpr auto fl_radius = 0xC; // Name: m_flRadius Offset: 0xC
					constexpr auto fl_roundness = 0x10; // Name: m_flRoundness Offset: 0x10
					constexpr auto fl_feather = 0x14; // Name: m_flFeather Offset: 0x14
					constexpr auto v_color_tint = 0x18; // Name: m_vColorTint Offset: 0x18
				} // namespace PostProcessingVignetteParameters_t

				namespace PostProcessingLocalContrastParameters_t {
					constexpr auto fl_local_contrast_strength = 0x0; // Name: m_flLocalContrastStrength Offset: 0x0
					constexpr auto fl_local_contrast_edge_strength = 0x4; // Name: m_flLocalContrastEdgeStrength Offset: 0x4
					constexpr auto fl_local_contrast_vignette_start = 0x8; // Name: m_flLocalContrastVignetteStart Offset: 0x8
					constexpr auto fl_local_contrast_vignette_end = 0xC; // Name: m_flLocalContrastVignetteEnd Offset: 0xC
					constexpr auto fl_local_contrast_vignette_blur = 0x10; // Name: m_flLocalContrastVignetteBlur Offset: 0x10
				} // namespace PostProcessingLocalContrastParameters_t

				namespace MaterialParamBuffer_t {
					constexpr auto value = 0x8; // Name: m_value Offset: 0x8
				} // namespace MaterialParamBuffer_t

				namespace PostProcessingBloomParameters_t {
					constexpr auto blend_mode = 0x0; // Name: m_blendMode Offset: 0x0
					constexpr auto fl_bloom_strength = 0x4; // Name: m_flBloomStrength Offset: 0x4
					constexpr auto fl_screen_bloom_strength = 0x8; // Name: m_flScreenBloomStrength Offset: 0x8
					constexpr auto fl_blur_bloom_strength = 0xC; // Name: m_flBlurBloomStrength Offset: 0xC
					constexpr auto fl_bloom_threshold = 0x10; // Name: m_flBloomThreshold Offset: 0x10
					constexpr auto fl_bloom_threshold_width = 0x14; // Name: m_flBloomThresholdWidth Offset: 0x14
					constexpr auto fl_skybox_bloom_strength = 0x18; // Name: m_flSkyboxBloomStrength Offset: 0x18
					constexpr auto fl_bloom_start_value = 0x1C; // Name: m_flBloomStartValue Offset: 0x1C
					constexpr auto fl_blur_weight = 0x20; // Name: m_flBlurWeight Offset: 0x20
					constexpr auto v_blur_tint = 0x34; // Name: m_vBlurTint Offset: 0x34
				} // namespace PostProcessingBloomParameters_t

				namespace MaterialParamFloat_t {
					constexpr auto fl_value = 0x8; // Name: m_flValue Offset: 0x8
				} // namespace MaterialParamFloat_t

				namespace MaterialParamTexture_t {
					constexpr auto p_value = 0x8; // Name: m_pValue Offset: 0x8
				} // namespace MaterialParamTexture_t
			}

			namespace host
			{

				namespace EmptyTestScript {
					constexpr auto h_test = 0x10; // Name: m_hTest Offset: 0x10
				} // namespace EmptyTestScript

				namespace CAnimScriptBase {
					constexpr auto b_is_valid = 0x8; // Name: m_bIsValid Offset: 0x8
				} // namespace CAnimScriptBase
			}

			namespace networksystem
			{

				namespace ChangeAccessorFieldPathIndex_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace ChangeAccessorFieldPathIndex_t
			}

			namespace panorama_content
			{
			}

			namespace particles
			{

				namespace C_INIT_OffsetVectorToVector {
					constexpr auto n_field_input = 0x1C8; // Name: m_nFieldInput Offset: 0x1C8
					constexpr auto n_field_output = 0x1CC; // Name: m_nFieldOutput Offset: 0x1CC
					constexpr auto vec_output_min = 0x1D0; // Name: m_vecOutputMin Offset: 0x1D0
					constexpr auto vec_output_max = 0x1DC; // Name: m_vecOutputMax Offset: 0x1DC
					constexpr auto randomness_parameters = 0x1E8; // Name: m_randomnessParameters Offset: 0x1E8
				} // namespace C_INIT_OffsetVectorToVector

				namespace C_OP_RemapGravityToVector {
					constexpr auto v_input1 = 0x1C0; // Name: m_vInput1 Offset: 0x1C0
					constexpr auto n_output_field = 0x838; // Name: m_nOutputField Offset: 0x838
					constexpr auto n_set_method = 0x83C; // Name: m_nSetMethod Offset: 0x83C
					constexpr auto b_normalized_output = 0x840; // Name: m_bNormalizedOutput Offset: 0x840
				} // namespace C_OP_RemapGravityToVector

				namespace C_INIT_Orient2DRelToCP {
					constexpr auto n_cp = 0x1C8; // Name: m_nCP Offset: 0x1C8
					constexpr auto n_field_output = 0x1CC; // Name: m_nFieldOutput Offset: 0x1CC
					constexpr auto fl_rot_offset = 0x1D0; // Name: m_flRotOffset Offset: 0x1D0
				} // namespace C_INIT_Orient2DRelToCP

				namespace C_OP_ColorInterpolate {
					constexpr auto color_fade = 0x1C0; // Name: m_ColorFade Offset: 0x1C0
					constexpr auto fl_fade_start_time = 0x1D0; // Name: m_flFadeStartTime Offset: 0x1D0
					constexpr auto fl_fade_end_time = 0x1D4; // Name: m_flFadeEndTime Offset: 0x1D4
					constexpr auto n_field_output = 0x1D8; // Name: m_nFieldOutput Offset: 0x1D8
					constexpr auto b_ease_in_out = 0x1DC; // Name: m_bEaseInOut Offset: 0x1DC
				} // namespace C_OP_ColorInterpolate

				namespace C_INIT_VelocityRadialRandom {
					constexpr auto n_control_point_number = 0x1C8; // Name: m_nControlPointNumber Offset: 0x1C8
					constexpr auto f_speed_min = 0x1D0; // Name: m_fSpeedMin Offset: 0x1D0
					constexpr auto f_speed_max = 0x330; // Name: m_fSpeedMax Offset: 0x330
					constexpr auto vec_local_coordinate_system_speed_scale = 0x490; // Name: m_vecLocalCoordinateSystemSpeedScale Offset: 0x490
					constexpr auto b_ignore_delta = 0x49D; // Name: m_bIgnoreDelta Offset: 0x49D
				} // namespace C_INIT_VelocityRadialRandom

				namespace CParticleVisibilityInputs {
					constexpr auto fl_camera_bias = 0x0; // Name: m_flCameraBias Offset: 0x0
					constexpr auto n_cpin = 0x4; // Name: m_nCPin Offset: 0x4
					constexpr auto fl_proxy_radius = 0x8; // Name: m_flProxyRadius Offset: 0x8
					constexpr auto fl_input_min = 0xC; // Name: m_flInputMin Offset: 0xC
					constexpr auto fl_input_max = 0x10; // Name: m_flInputMax Offset: 0x10
					constexpr auto fl_input_pixel_vis_fade = 0x14; // Name: m_flInputPixelVisFade Offset: 0x14
					constexpr auto fl_no_pixel_visibility_fallback = 0x18; // Name: m_flNoPixelVisibilityFallback Offset: 0x18
					constexpr auto fl_distance_input_min = 0x1C; // Name: m_flDistanceInputMin Offset: 0x1C
					constexpr auto fl_distance_input_max = 0x20; // Name: m_flDistanceInputMax Offset: 0x20
					constexpr auto fl_dot_input_min = 0x24; // Name: m_flDotInputMin Offset: 0x24
					constexpr auto fl_dot_input_max = 0x28; // Name: m_flDotInputMax Offset: 0x28
					constexpr auto b_dot_cpangles = 0x2C; // Name: m_bDotCPAngles Offset: 0x2C
					constexpr auto b_dot_camera_angles = 0x2D; // Name: m_bDotCameraAngles Offset: 0x2D
					constexpr auto fl_alpha_scale_min = 0x30; // Name: m_flAlphaScaleMin Offset: 0x30
					constexpr auto fl_alpha_scale_max = 0x34; // Name: m_flAlphaScaleMax Offset: 0x34
					constexpr auto fl_radius_scale_min = 0x38; // Name: m_flRadiusScaleMin Offset: 0x38
					constexpr auto fl_radius_scale_max = 0x3C; // Name: m_flRadiusScaleMax Offset: 0x3C
					constexpr auto fl_radius_scale_fovbase = 0x40; // Name: m_flRadiusScaleFOVBase Offset: 0x40
					constexpr auto b_right_eye = 0x44; // Name: m_bRightEye Offset: 0x44
				} // namespace CParticleVisibilityInputs

				namespace C_OP_TeleportBeam {
					constexpr auto n_cpposition = 0x1C0; // Name: m_nCPPosition Offset: 0x1C0
					constexpr auto n_cpvelocity = 0x1C4; // Name: m_nCPVelocity Offset: 0x1C4
					constexpr auto n_cpmisc = 0x1C8; // Name: m_nCPMisc Offset: 0x1C8
					constexpr auto n_cpcolor = 0x1CC; // Name: m_nCPColor Offset: 0x1CC
					constexpr auto n_cpinvalid_color = 0x1D0; // Name: m_nCPInvalidColor Offset: 0x1D0
					constexpr auto n_cpextra_arc_data = 0x1D4; // Name: m_nCPExtraArcData Offset: 0x1D4
					constexpr auto v_gravity = 0x1D8; // Name: m_vGravity Offset: 0x1D8
					constexpr auto fl_arc_max_duration = 0x1E4; // Name: m_flArcMaxDuration Offset: 0x1E4
					constexpr auto fl_segment_break = 0x1E8; // Name: m_flSegmentBreak Offset: 0x1E8
					constexpr auto fl_arc_speed = 0x1EC; // Name: m_flArcSpeed Offset: 0x1EC
					constexpr auto fl_alpha = 0x1F0; // Name: m_flAlpha Offset: 0x1F0
				} // namespace C_OP_TeleportBeam

				namespace C_OP_RemapAverageHitboxSpeedtoCP {
					constexpr auto n_in_control_point_number = 0x1C8; // Name: m_nInControlPointNumber Offset: 0x1C8
					constexpr auto n_out_control_point_number = 0x1CC; // Name: m_nOutControlPointNumber Offset: 0x1CC
					constexpr auto n_field = 0x1D0; // Name: m_nField Offset: 0x1D0
					constexpr auto n_hitbox_data_type = 0x1D4; // Name: m_nHitboxDataType Offset: 0x1D4
					constexpr auto fl_input_min = 0x1D8; // Name: m_flInputMin Offset: 0x1D8
					constexpr auto fl_input_max = 0x338; // Name: m_flInputMax Offset: 0x338
					constexpr auto fl_output_min = 0x498; // Name: m_flOutputMin Offset: 0x498
					constexpr auto fl_output_max = 0x5F8; // Name: m_flOutputMax Offset: 0x5F8
					constexpr auto n_height_control_point_number = 0x758; // Name: m_nHeightControlPointNumber Offset: 0x758
					constexpr auto vec_comparison_velocity = 0x760; // Name: m_vecComparisonVelocity Offset: 0x760
					constexpr auto hitbox_set_name = 0xDD8; // Name: m_HitboxSetName Offset: 0xDD8
				} // namespace C_OP_RemapAverageHitboxSpeedtoCP

				namespace C_OP_DecayOffscreen {
					constexpr auto fl_offscreen_time = 0x1C0; // Name: m_flOffscreenTime Offset: 0x1C0
				} // namespace C_OP_DecayOffscreen

				namespace C_OP_RenderDeferredLight {
					constexpr auto b_use_alpha_test_window = 0x210; // Name: m_bUseAlphaTestWindow Offset: 0x210
					constexpr auto b_use_texture = 0x211; // Name: m_bUseTexture Offset: 0x211
					constexpr auto fl_radius_scale = 0x214; // Name: m_flRadiusScale Offset: 0x214
					constexpr auto fl_alpha_scale = 0x218; // Name: m_flAlphaScale Offset: 0x218
					constexpr auto n_alpha2_field = 0x21C; // Name: m_nAlpha2Field Offset: 0x21C
					constexpr auto vec_color_scale = 0x220; // Name: m_vecColorScale Offset: 0x220
					constexpr auto n_color_blend_type = 0x898; // Name: m_nColorBlendType Offset: 0x898
					constexpr auto fl_light_distance = 0x89C; // Name: m_flLightDistance Offset: 0x89C
					constexpr auto fl_start_falloff = 0x8A0; // Name: m_flStartFalloff Offset: 0x8A0
					constexpr auto fl_distance_falloff = 0x8A4; // Name: m_flDistanceFalloff Offset: 0x8A4
					constexpr auto fl_spot_fo_v = 0x8A8; // Name: m_flSpotFoV Offset: 0x8A8
					constexpr auto n_alpha_test_point_field = 0x8AC; // Name: m_nAlphaTestPointField Offset: 0x8AC
					constexpr auto n_alpha_test_range_field = 0x8B0; // Name: m_nAlphaTestRangeField Offset: 0x8B0
					constexpr auto n_alpha_test_sharpness_field = 0x8B4; // Name: m_nAlphaTestSharpnessField Offset: 0x8B4
					constexpr auto h_texture = 0x8B8; // Name: m_hTexture Offset: 0x8B8
					constexpr auto n_hsvshift_control_point = 0x8C0; // Name: m_nHSVShiftControlPoint Offset: 0x8C0
				} // namespace C_OP_RenderDeferredLight

				namespace C_INIT_RandomTrailLength {
					constexpr auto fl_min_length = 0x1C8; // Name: m_flMinLength Offset: 0x1C8
					constexpr auto fl_max_length = 0x1CC; // Name: m_flMaxLength Offset: 0x1CC
					constexpr auto fl_length_rand_exponent = 0x1D0; // Name: m_flLengthRandExponent Offset: 0x1D0
				} // namespace C_INIT_RandomTrailLength

				namespace C_OP_AttractToControlPoint {
					constexpr auto vec_component_scale = 0x1D0; // Name: m_vecComponentScale Offset: 0x1D0
					constexpr auto f_force_amount = 0x1E0; // Name: m_fForceAmount Offset: 0x1E0
					constexpr auto f_falloff_power = 0x340; // Name: m_fFalloffPower Offset: 0x340
					constexpr auto transform_input = 0x348; // Name: m_TransformInput Offset: 0x348
					constexpr auto f_force_amount_min = 0x3B0; // Name: m_fForceAmountMin Offset: 0x3B0
					constexpr auto b_apply_min_force = 0x510; // Name: m_bApplyMinForce Offset: 0x510
				} // namespace C_OP_AttractToControlPoint

				namespace C_OP_SetGravityToCP {
					constexpr auto n_cpinput = 0x1C8; // Name: m_nCPInput Offset: 0x1C8
					constexpr auto n_cpoutput = 0x1CC; // Name: m_nCPOutput Offset: 0x1CC
					constexpr auto fl_scale = 0x1D0; // Name: m_flScale Offset: 0x1D0
					constexpr auto b_set_orientation = 0x330; // Name: m_bSetOrientation Offset: 0x330
					constexpr auto b_set_zdown = 0x331; // Name: m_bSetZDown Offset: 0x331
				} // namespace C_OP_SetGravityToCP

				namespace CParticleFunctionEmitter {
					constexpr auto n_emitter_index = 0x1C0; // Name: m_nEmitterIndex Offset: 0x1C0
				} // namespace CParticleFunctionEmitter

				namespace CBaseRendererSource2 {
					constexpr auto fl_radius_scale = 0x210; // Name: m_flRadiusScale Offset: 0x210
					constexpr auto fl_alpha_scale = 0x370; // Name: m_flAlphaScale Offset: 0x370
					constexpr auto fl_roll_scale = 0x4D0; // Name: m_flRollScale Offset: 0x4D0
					constexpr auto n_alpha2_field = 0x630; // Name: m_nAlpha2Field Offset: 0x630
					constexpr auto vec_color_scale = 0x638; // Name: m_vecColorScale Offset: 0x638
					constexpr auto n_color_blend_type = 0xCB0; // Name: m_nColorBlendType Offset: 0xCB0
					constexpr auto n_shader_type = 0xCB4; // Name: m_nShaderType Offset: 0xCB4
					constexpr auto str_shader_override = 0xCB8; // Name: m_strShaderOverride Offset: 0xCB8
					constexpr auto fl_center_xoffset = 0xCC0; // Name: m_flCenterXOffset Offset: 0xCC0
					constexpr auto fl_center_yoffset = 0xE20; // Name: m_flCenterYOffset Offset: 0xE20
					constexpr auto fl_bump_strength = 0xF80; // Name: m_flBumpStrength Offset: 0xF80
					constexpr auto n_crop_texture_override = 0xF84; // Name: m_nCropTextureOverride Offset: 0xF84
					constexpr auto vec_textures_input = 0xF88; // Name: m_vecTexturesInput Offset: 0xF88
					constexpr auto fl_animation_rate = 0xFA0; // Name: m_flAnimationRate Offset: 0xFA0
					constexpr auto n_animation_type = 0xFA4; // Name: m_nAnimationType Offset: 0xFA4
					constexpr auto b_animate_in_fps = 0xFA8; // Name: m_bAnimateInFPS Offset: 0xFA8
					constexpr auto fl_motion_vector_scale_u = 0xFB0; // Name: m_flMotionVectorScaleU Offset: 0xFB0
					constexpr auto fl_motion_vector_scale_v = 0x1110; // Name: m_flMotionVectorScaleV Offset: 0x1110
					constexpr auto fl_self_illum_amount = 0x1270; // Name: m_flSelfIllumAmount Offset: 0x1270
					constexpr auto fl_diffuse_amount = 0x13D0; // Name: m_flDiffuseAmount Offset: 0x13D0
					constexpr auto fl_diffuse_clamp = 0x1530; // Name: m_flDiffuseClamp Offset: 0x1530
					constexpr auto n_lighting_control_point = 0x1690; // Name: m_nLightingControlPoint Offset: 0x1690
					constexpr auto n_self_illum_per_particle = 0x1694; // Name: m_nSelfIllumPerParticle Offset: 0x1694
					constexpr auto n_output_blend_mode = 0x1698; // Name: m_nOutputBlendMode Offset: 0x1698
					constexpr auto b_gamma_correct_vertex_colors = 0x169C; // Name: m_bGammaCorrectVertexColors Offset: 0x169C
					constexpr auto b_saturate_color_pre_alpha_blend = 0x169D; // Name: m_bSaturateColorPreAlphaBlend Offset: 0x169D
					constexpr auto fl_add_self_amount = 0x16A0; // Name: m_flAddSelfAmount Offset: 0x16A0
					constexpr auto fl_desaturation = 0x1800; // Name: m_flDesaturation Offset: 0x1800
					constexpr auto fl_overbright_factor = 0x1960; // Name: m_flOverbrightFactor Offset: 0x1960
					constexpr auto n_hsvshift_control_point = 0x1AC0; // Name: m_nHSVShiftControlPoint Offset: 0x1AC0
					constexpr auto n_fog_type = 0x1AC4; // Name: m_nFogType Offset: 0x1AC4
					constexpr auto fl_fog_amount = 0x1AC8; // Name: m_flFogAmount Offset: 0x1AC8
					constexpr auto b_tint_by_fow = 0x1C28; // Name: m_bTintByFOW Offset: 0x1C28
					constexpr auto b_tint_by_global_light = 0x1C29; // Name: m_bTintByGlobalLight Offset: 0x1C29
					constexpr auto n_per_particle_alpha_reference = 0x1C2C; // Name: m_nPerParticleAlphaReference Offset: 0x1C2C
					constexpr auto n_per_particle_alpha_ref_window = 0x1C30; // Name: m_nPerParticleAlphaRefWindow Offset: 0x1C30
					constexpr auto n_alpha_reference_type = 0x1C34; // Name: m_nAlphaReferenceType Offset: 0x1C34
					constexpr auto fl_alpha_reference_softness = 0x1C38; // Name: m_flAlphaReferenceSoftness Offset: 0x1C38
					constexpr auto fl_source_alpha_value_to_map_to_zero = 0x1D98; // Name: m_flSourceAlphaValueToMapToZero Offset: 0x1D98
					constexpr auto fl_source_alpha_value_to_map_to_one = 0x1EF8; // Name: m_flSourceAlphaValueToMapToOne Offset: 0x1EF8
					constexpr auto b_refract = 0x2058; // Name: m_bRefract Offset: 0x2058
					constexpr auto b_refract_solid = 0x2059; // Name: m_bRefractSolid Offset: 0x2059
					constexpr auto fl_refract_amount = 0x2060; // Name: m_flRefractAmount Offset: 0x2060
					constexpr auto n_refract_blur_radius = 0x21C0; // Name: m_nRefractBlurRadius Offset: 0x21C0
					constexpr auto n_refract_blur_type = 0x21C4; // Name: m_nRefractBlurType Offset: 0x21C4
					constexpr auto b_only_render_in_effects_bloom_pass = 0x21C8; // Name: m_bOnlyRenderInEffectsBloomPass Offset: 0x21C8
					constexpr auto b_only_render_in_effects_water_pass = 0x21C9; // Name: m_bOnlyRenderInEffectsWaterPass Offset: 0x21C9
					constexpr auto b_use_mixed_resolution_rendering = 0x21CA; // Name: m_bUseMixedResolutionRendering Offset: 0x21CA
					constexpr auto b_only_render_in_effecs_game_overlay = 0x21CB; // Name: m_bOnlyRenderInEffecsGameOverlay Offset: 0x21CB
					constexpr auto stencil_test_id = 0x21CC; // Name: m_stencilTestID Offset: 0x21CC
					constexpr auto b_stencil_test_exclude = 0x224C; // Name: m_bStencilTestExclude Offset: 0x224C
					constexpr auto stencil_write_id = 0x224D; // Name: m_stencilWriteID Offset: 0x224D
					constexpr auto b_write_stencil_on_depth_pass = 0x22CD; // Name: m_bWriteStencilOnDepthPass Offset: 0x22CD
					constexpr auto b_write_stencil_on_depth_fail = 0x22CE; // Name: m_bWriteStencilOnDepthFail Offset: 0x22CE
					constexpr auto b_reverse_zbuffering = 0x22CF; // Name: m_bReverseZBuffering Offset: 0x22CF
					constexpr auto b_disable_zbuffering = 0x22D0; // Name: m_bDisableZBuffering Offset: 0x22D0
					constexpr auto n_feathering_mode = 0x22D4; // Name: m_nFeatheringMode Offset: 0x22D4
					constexpr auto fl_feathering_min_dist = 0x22D8; // Name: m_flFeatheringMinDist Offset: 0x22D8
					constexpr auto fl_feathering_max_dist = 0x2438; // Name: m_flFeatheringMaxDist Offset: 0x2438
					constexpr auto fl_feathering_filter = 0x2598; // Name: m_flFeatheringFilter Offset: 0x2598
					constexpr auto fl_depth_bias = 0x26F8; // Name: m_flDepthBias Offset: 0x26F8
					constexpr auto n_sort_method = 0x2858; // Name: m_nSortMethod Offset: 0x2858
					constexpr auto b_blend_frames_seq0 = 0x285C; // Name: m_bBlendFramesSeq0 Offset: 0x285C
					constexpr auto b_max_luminance_blending_sequence0 = 0x285D; // Name: m_bMaxLuminanceBlendingSequence0 Offset: 0x285D
				} // namespace CBaseRendererSource2

				namespace CollisionGroupContext_t {
					constexpr auto n_collision_group_number = 0x0; // Name: m_nCollisionGroupNumber Offset: 0x0
				} // namespace CollisionGroupContext_t

				namespace C_INIT_InitialVelocityNoise {
					constexpr auto vec_abs_val = 0x1C8; // Name: m_vecAbsVal Offset: 0x1C8
					constexpr auto vec_abs_val_inv = 0x1D4; // Name: m_vecAbsValInv Offset: 0x1D4
					constexpr auto vec_offset_loc = 0x1E0; // Name: m_vecOffsetLoc Offset: 0x1E0
					constexpr auto fl_offset = 0x858; // Name: m_flOffset Offset: 0x858
					constexpr auto vec_output_min = 0x9B8; // Name: m_vecOutputMin Offset: 0x9B8
					constexpr auto vec_output_max = 0x1030; // Name: m_vecOutputMax Offset: 0x1030
					constexpr auto fl_noise_scale = 0x16A8; // Name: m_flNoiseScale Offset: 0x16A8
					constexpr auto fl_noise_scale_loc = 0x1808; // Name: m_flNoiseScaleLoc Offset: 0x1808
					constexpr auto transform_input = 0x1968; // Name: m_TransformInput Offset: 0x1968
					constexpr auto b_ignore_dt = 0x19D0; // Name: m_bIgnoreDt Offset: 0x19D0
				} // namespace C_INIT_InitialVelocityNoise

				namespace C_OP_RemapSpeedtoCP {
					constexpr auto n_in_control_point_number = 0x1C8; // Name: m_nInControlPointNumber Offset: 0x1C8
					constexpr auto n_out_control_point_number = 0x1CC; // Name: m_nOutControlPointNumber Offset: 0x1CC
					constexpr auto n_field = 0x1D0; // Name: m_nField Offset: 0x1D0
					constexpr auto fl_input_min = 0x1D4; // Name: m_flInputMin Offset: 0x1D4
					constexpr auto fl_input_max = 0x1D8; // Name: m_flInputMax Offset: 0x1D8
					constexpr auto fl_output_min = 0x1DC; // Name: m_flOutputMin Offset: 0x1DC
					constexpr auto fl_output_max = 0x1E0; // Name: m_flOutputMax Offset: 0x1E0
					constexpr auto b_use_delta_v = 0x1E4; // Name: m_bUseDeltaV Offset: 0x1E4
				} // namespace C_OP_RemapSpeedtoCP

				namespace C_OP_Decay {
					constexpr auto b_rope_decay = 0x1C0; // Name: m_bRopeDecay Offset: 0x1C0
					constexpr auto b_force_preserve_particle_order = 0x1C1; // Name: m_bForcePreserveParticleOrder Offset: 0x1C1
				} // namespace C_OP_Decay

				namespace C_INIT_RingWave {
					constexpr auto transform_input = 0x1C8; // Name: m_TransformInput Offset: 0x1C8
					constexpr auto fl_particles_per_orbit = 0x230; // Name: m_flParticlesPerOrbit Offset: 0x230
					constexpr auto fl_initial_radius = 0x390; // Name: m_flInitialRadius Offset: 0x390
					constexpr auto fl_thickness = 0x4F0; // Name: m_flThickness Offset: 0x4F0
					constexpr auto fl_initial_speed_min = 0x650; // Name: m_flInitialSpeedMin Offset: 0x650
					constexpr auto fl_initial_speed_max = 0x7B0; // Name: m_flInitialSpeedMax Offset: 0x7B0
					constexpr auto fl_roll = 0x910; // Name: m_flRoll Offset: 0x910
					constexpr auto fl_pitch = 0xA70; // Name: m_flPitch Offset: 0xA70
					constexpr auto fl_yaw = 0xBD0; // Name: m_flYaw Offset: 0xBD0
					constexpr auto b_even_distribution = 0xD30; // Name: m_bEvenDistribution Offset: 0xD30
					constexpr auto b_xyvelocity_only = 0xD31; // Name: m_bXYVelocityOnly Offset: 0xD31
				} // namespace C_INIT_RingWave

				namespace C_OP_PositionLock {
					constexpr auto transform_input = 0x1C0; // Name: m_TransformInput Offset: 0x1C0
					constexpr auto fl_start_time_min = 0x228; // Name: m_flStartTime_min Offset: 0x228
					constexpr auto fl_start_time_max = 0x22C; // Name: m_flStartTime_max Offset: 0x22C
					constexpr auto fl_start_time_exp = 0x230; // Name: m_flStartTime_exp Offset: 0x230
					constexpr auto fl_end_time_min = 0x234; // Name: m_flEndTime_min Offset: 0x234
					constexpr auto fl_end_time_max = 0x238; // Name: m_flEndTime_max Offset: 0x238
					constexpr auto fl_end_time_exp = 0x23C; // Name: m_flEndTime_exp Offset: 0x23C
					constexpr auto fl_range = 0x240; // Name: m_flRange Offset: 0x240
					constexpr auto fl_range_bias = 0x248; // Name: m_flRangeBias Offset: 0x248
					constexpr auto fl_jump_threshold = 0x3A8; // Name: m_flJumpThreshold Offset: 0x3A8
					constexpr auto fl_prev_pos_scale = 0x3AC; // Name: m_flPrevPosScale Offset: 0x3AC
					constexpr auto b_lock_rot = 0x3B0; // Name: m_bLockRot Offset: 0x3B0
					constexpr auto vec_scale = 0x3B8; // Name: m_vecScale Offset: 0x3B8
					constexpr auto n_field_output = 0xA30; // Name: m_nFieldOutput Offset: 0xA30
					constexpr auto n_field_output_prev = 0xA34; // Name: m_nFieldOutputPrev Offset: 0xA34
				} // namespace C_OP_PositionLock

				namespace C_OP_RemapTransformToVelocity {
					constexpr auto transform_input = 0x1C0; // Name: m_TransformInput Offset: 0x1C0
				} // namespace C_OP_RemapTransformToVelocity

				namespace C_INIT_NormalOffset {
					constexpr auto offset_min = 0x1C8; // Name: m_OffsetMin Offset: 0x1C8
					constexpr auto offset_max = 0x1D4; // Name: m_OffsetMax Offset: 0x1D4
					constexpr auto n_control_point_number = 0x1E0; // Name: m_nControlPointNumber Offset: 0x1E0
					constexpr auto b_local_coords = 0x1E4; // Name: m_bLocalCoords Offset: 0x1E4
					constexpr auto b_normalize = 0x1E5; // Name: m_bNormalize Offset: 0x1E5
				} // namespace C_INIT_NormalOffset

				namespace C_OP_RemapSDFDistanceToVectorAttribute {
					constexpr auto n_vector_field_output = 0x1C0; // Name: m_nVectorFieldOutput Offset: 0x1C0
					constexpr auto n_vector_field_input = 0x1C4; // Name: m_nVectorFieldInput Offset: 0x1C4
					constexpr auto fl_min_distance = 0x1C8; // Name: m_flMinDistance Offset: 0x1C8
					constexpr auto fl_max_distance = 0x328; // Name: m_flMaxDistance Offset: 0x328
					constexpr auto v_value_below_min = 0x488; // Name: m_vValueBelowMin Offset: 0x488
					constexpr auto v_value_at_min = 0x494; // Name: m_vValueAtMin Offset: 0x494
					constexpr auto v_value_at_max = 0x4A0; // Name: m_vValueAtMax Offset: 0x4A0
					constexpr auto v_value_above_max = 0x4AC; // Name: m_vValueAboveMax Offset: 0x4AC
				} // namespace C_OP_RemapSDFDistanceToVectorAttribute

				namespace C_OP_SetControlPointPositions {
					constexpr auto b_use_world_location = 0x1C8; // Name: m_bUseWorldLocation Offset: 0x1C8
					constexpr auto b_orient = 0x1C9; // Name: m_bOrient Offset: 0x1C9
					constexpr auto b_set_once = 0x1CA; // Name: m_bSetOnce Offset: 0x1CA
					constexpr auto n_cp1 = 0x1CC; // Name: m_nCP1 Offset: 0x1CC
					constexpr auto n_cp2 = 0x1D0; // Name: m_nCP2 Offset: 0x1D0
					constexpr auto n_cp3 = 0x1D4; // Name: m_nCP3 Offset: 0x1D4
					constexpr auto n_cp4 = 0x1D8; // Name: m_nCP4 Offset: 0x1D8
					constexpr auto vec_cp1_pos = 0x1DC; // Name: m_vecCP1Pos Offset: 0x1DC
					constexpr auto vec_cp2_pos = 0x1E8; // Name: m_vecCP2Pos Offset: 0x1E8
					constexpr auto vec_cp3_pos = 0x1F4; // Name: m_vecCP3Pos Offset: 0x1F4
					constexpr auto vec_cp4_pos = 0x200; // Name: m_vecCP4Pos Offset: 0x200
					constexpr auto n_head_location = 0x20C; // Name: m_nHeadLocation Offset: 0x20C
				} // namespace C_OP_SetControlPointPositions

				namespace CParticleFunctionPreEmission {
					constexpr auto b_run_once = 0x1C0; // Name: m_bRunOnce Offset: 0x1C0
				} // namespace CParticleFunctionPreEmission

				namespace C_OP_RemapVisibilityScalar {
					constexpr auto n_field_input = 0x1C0; // Name: m_nFieldInput Offset: 0x1C0
					constexpr auto n_field_output = 0x1C4; // Name: m_nFieldOutput Offset: 0x1C4
					constexpr auto fl_input_min = 0x1C8; // Name: m_flInputMin Offset: 0x1C8
					constexpr auto fl_input_max = 0x1CC; // Name: m_flInputMax Offset: 0x1CC
					constexpr auto fl_output_min = 0x1D0; // Name: m_flOutputMin Offset: 0x1D0
					constexpr auto fl_output_max = 0x1D4; // Name: m_flOutputMax Offset: 0x1D4
					constexpr auto fl_radius_scale = 0x1D8; // Name: m_flRadiusScale Offset: 0x1D8
				} // namespace C_OP_RemapVisibilityScalar

				namespace C_OP_ConstrainDistance {
					constexpr auto f_min_distance = 0x1C0; // Name: m_fMinDistance Offset: 0x1C0
					constexpr auto f_max_distance = 0x320; // Name: m_fMaxDistance Offset: 0x320
					constexpr auto n_control_point_number = 0x480; // Name: m_nControlPointNumber Offset: 0x480
					constexpr auto center_offset = 0x484; // Name: m_CenterOffset Offset: 0x484
					constexpr auto b_global_center = 0x490; // Name: m_bGlobalCenter Offset: 0x490
				} // namespace C_OP_ConstrainDistance

				namespace C_OP_ChladniWave {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto fl_input_min = 0x1C8; // Name: m_flInputMin Offset: 0x1C8
					constexpr auto fl_input_max = 0x328; // Name: m_flInputMax Offset: 0x328
					constexpr auto fl_output_min = 0x488; // Name: m_flOutputMin Offset: 0x488
					constexpr auto fl_output_max = 0x5E8; // Name: m_flOutputMax Offset: 0x5E8
					constexpr auto vec_wave_length = 0x748; // Name: m_vecWaveLength Offset: 0x748
					constexpr auto vec_harmonics = 0xDC0; // Name: m_vecHarmonics Offset: 0xDC0
					constexpr auto n_set_method = 0x1438; // Name: m_nSetMethod Offset: 0x1438
					constexpr auto n_local_space_control_point = 0x143C; // Name: m_nLocalSpaceControlPoint Offset: 0x143C
					constexpr auto b3_d = 0x1440; // Name: m_b3D Offset: 0x1440
				} // namespace C_OP_ChladniWave

				namespace C_OP_FadeOutSimple {
					constexpr auto fl_fade_out_time = 0x1C0; // Name: m_flFadeOutTime Offset: 0x1C0
					constexpr auto n_field_output = 0x1C4; // Name: m_nFieldOutput Offset: 0x1C4
				} // namespace C_OP_FadeOutSimple

				namespace C_OP_RenderTrails {
					constexpr auto b_enable_fading_and_clamping = 0x2D80; // Name: m_bEnableFadingAndClamping Offset: 0x2D80
					constexpr auto fl_start_fade_dot = 0x2D84; // Name: m_flStartFadeDot Offset: 0x2D84
					constexpr auto fl_end_fade_dot = 0x2D88; // Name: m_flEndFadeDot Offset: 0x2D88
					constexpr auto n_prev_pnt_source = 0x2D8C; // Name: m_nPrevPntSource Offset: 0x2D8C
					constexpr auto fl_max_length = 0x2D90; // Name: m_flMaxLength Offset: 0x2D90
					constexpr auto fl_min_length = 0x2D94; // Name: m_flMinLength Offset: 0x2D94
					constexpr auto b_ignore_dt = 0x2D98; // Name: m_bIgnoreDT Offset: 0x2D98
					constexpr auto fl_constrain_radius_to_length_ratio = 0x2D9C; // Name: m_flConstrainRadiusToLengthRatio Offset: 0x2D9C
					constexpr auto fl_length_scale = 0x2DA0; // Name: m_flLengthScale Offset: 0x2DA0
					constexpr auto fl_length_fade_in_time = 0x2DA4; // Name: m_flLengthFadeInTime Offset: 0x2DA4
					constexpr auto fl_radius_head_taper = 0x2DA8; // Name: m_flRadiusHeadTaper Offset: 0x2DA8
					constexpr auto vec_head_color_scale = 0x2F08; // Name: m_vecHeadColorScale Offset: 0x2F08
					constexpr auto fl_head_alpha_scale = 0x3580; // Name: m_flHeadAlphaScale Offset: 0x3580
					constexpr auto fl_radius_taper = 0x36E0; // Name: m_flRadiusTaper Offset: 0x36E0
					constexpr auto vec_tail_color_scale = 0x3840; // Name: m_vecTailColorScale Offset: 0x3840
					constexpr auto fl_tail_alpha_scale = 0x3EB8; // Name: m_flTailAlphaScale Offset: 0x3EB8
					constexpr auto n_horiz_crop_field = 0x4018; // Name: m_nHorizCropField Offset: 0x4018
					constexpr auto n_vert_crop_field = 0x401C; // Name: m_nVertCropField Offset: 0x401C
					constexpr auto fl_forward_shift = 0x4020; // Name: m_flForwardShift Offset: 0x4020
					constexpr auto b_flip_uvbased_on_pitch_yaw = 0x4024; // Name: m_bFlipUVBasedOnPitchYaw Offset: 0x4024
				} // namespace C_OP_RenderTrails

				namespace CParticleFunctionOperator {
				} // namespace CParticleFunctionOperator

				namespace C_OP_LightningSnapshotGenerator {
					constexpr auto n_cpsnapshot = 0x1C8; // Name: m_nCPSnapshot Offset: 0x1C8
					constexpr auto n_cpstart_pnt = 0x1CC; // Name: m_nCPStartPnt Offset: 0x1CC
					constexpr auto n_cpend_pnt = 0x1D0; // Name: m_nCPEndPnt Offset: 0x1D0
					constexpr auto fl_segments = 0x1D8; // Name: m_flSegments Offset: 0x1D8
					constexpr auto fl_offset = 0x338; // Name: m_flOffset Offset: 0x338
					constexpr auto fl_offset_decay = 0x498; // Name: m_flOffsetDecay Offset: 0x498
					constexpr auto fl_recalc_rate = 0x5F8; // Name: m_flRecalcRate Offset: 0x5F8
					constexpr auto fl_uvscale = 0x758; // Name: m_flUVScale Offset: 0x758
					constexpr auto fl_uvoffset = 0x8B8; // Name: m_flUVOffset Offset: 0x8B8
					constexpr auto fl_split_rate = 0xA18; // Name: m_flSplitRate Offset: 0xA18
					constexpr auto fl_branch_twist = 0xB78; // Name: m_flBranchTwist Offset: 0xB78
					constexpr auto n_branch_behavior = 0xCD8; // Name: m_nBranchBehavior Offset: 0xCD8
					constexpr auto fl_radius_start = 0xCE0; // Name: m_flRadiusStart Offset: 0xCE0
					constexpr auto fl_radius_end = 0xE40; // Name: m_flRadiusEnd Offset: 0xE40
					constexpr auto fl_dedicated_pool = 0xFA0; // Name: m_flDedicatedPool Offset: 0xFA0
				} // namespace C_OP_LightningSnapshotGenerator

				namespace C_OP_SpringToVectorConstraint {
					constexpr auto fl_rest_length = 0x1C0; // Name: m_flRestLength Offset: 0x1C0
					constexpr auto fl_min_distance = 0x320; // Name: m_flMinDistance Offset: 0x320
					constexpr auto fl_max_distance = 0x480; // Name: m_flMaxDistance Offset: 0x480
					constexpr auto fl_resting_length = 0x5E0; // Name: m_flRestingLength Offset: 0x5E0
					constexpr auto vec_anchor_vector = 0x740; // Name: m_vecAnchorVector Offset: 0x740
				} // namespace C_OP_SpringToVectorConstraint

				namespace ParticleAttributeIndex_t {
					constexpr auto value = 0x0; // Name: m_Value Offset: 0x0
				} // namespace ParticleAttributeIndex_t

				namespace C_INIT_RemapParticleCountToNamedModelElementScalar {
					constexpr auto h_model = 0x1F8; // Name: m_hModel Offset: 0x1F8
					constexpr auto output_min_name = 0x200; // Name: m_outputMinName Offset: 0x200
					constexpr auto output_max_name = 0x208; // Name: m_outputMaxName Offset: 0x208
					constexpr auto b_model_from_renderer = 0x210; // Name: m_bModelFromRenderer Offset: 0x210
				} // namespace C_INIT_RemapParticleCountToNamedModelElementScalar

				namespace TextureGroup_t {
					constexpr auto b_enabled = 0x0; // Name: m_bEnabled Offset: 0x0
					constexpr auto b_replace_texture_with_gradient = 0x1; // Name: m_bReplaceTextureWithGradient Offset: 0x1
					constexpr auto h_texture = 0x8; // Name: m_hTexture Offset: 0x8
					constexpr auto gradient = 0x10; // Name: m_Gradient Offset: 0x10
					constexpr auto n_texture_type = 0x28; // Name: m_nTextureType Offset: 0x28
					constexpr auto n_texture_channels = 0x2C; // Name: m_nTextureChannels Offset: 0x2C
					constexpr auto n_texture_blend_mode = 0x30; // Name: m_nTextureBlendMode Offset: 0x30
					constexpr auto fl_texture_blend = 0x38; // Name: m_flTextureBlend Offset: 0x38
					constexpr auto texture_controls = 0x198; // Name: m_TextureControls Offset: 0x198
				} // namespace TextureGroup_t

				namespace C_OP_RemapTransformVisibilityToScalar {
					constexpr auto n_set_method = 0x1C0; // Name: m_nSetMethod Offset: 0x1C0
					constexpr auto transform_input = 0x1C8; // Name: m_TransformInput Offset: 0x1C8
					constexpr auto n_field_output = 0x230; // Name: m_nFieldOutput Offset: 0x230
					constexpr auto fl_input_min = 0x234; // Name: m_flInputMin Offset: 0x234
					constexpr auto fl_input_max = 0x238; // Name: m_flInputMax Offset: 0x238
					constexpr auto fl_output_min = 0x23C; // Name: m_flOutputMin Offset: 0x23C
					constexpr auto fl_output_max = 0x240; // Name: m_flOutputMax Offset: 0x240
					constexpr auto fl_radius = 0x244; // Name: m_flRadius Offset: 0x244
				} // namespace C_OP_RemapTransformVisibilityToScalar

				namespace C_OP_RenderRopes {
					constexpr auto b_enable_fading_and_clamping = 0x2AA8; // Name: m_bEnableFadingAndClamping Offset: 0x2AA8
					constexpr auto fl_min_size = 0x2AAC; // Name: m_flMinSize Offset: 0x2AAC
					constexpr auto fl_max_size = 0x2AB0; // Name: m_flMaxSize Offset: 0x2AB0
					constexpr auto fl_start_fade_size = 0x2AB4; // Name: m_flStartFadeSize Offset: 0x2AB4
					constexpr auto fl_end_fade_size = 0x2AB8; // Name: m_flEndFadeSize Offset: 0x2AB8
					constexpr auto fl_start_fade_dot = 0x2ABC; // Name: m_flStartFadeDot Offset: 0x2ABC
					constexpr auto fl_end_fade_dot = 0x2AC0; // Name: m_flEndFadeDot Offset: 0x2AC0
					constexpr auto fl_radius_taper = 0x2AC4; // Name: m_flRadiusTaper Offset: 0x2AC4
					constexpr auto n_min_tesselation = 0x2AC8; // Name: m_nMinTesselation Offset: 0x2AC8
					constexpr auto n_max_tesselation = 0x2ACC; // Name: m_nMaxTesselation Offset: 0x2ACC
					constexpr auto fl_tess_scale = 0x2AD0; // Name: m_flTessScale Offset: 0x2AD0
					constexpr auto fl_texture_vworld_size = 0x2AD8; // Name: m_flTextureVWorldSize Offset: 0x2AD8
					constexpr auto fl_texture_vscroll_rate = 0x2C38; // Name: m_flTextureVScrollRate Offset: 0x2C38
					constexpr auto fl_texture_voffset = 0x2D98; // Name: m_flTextureVOffset Offset: 0x2D98
					constexpr auto n_texture_vparams_cp = 0x2EF8; // Name: m_nTextureVParamsCP Offset: 0x2EF8
					constexpr auto b_clamp_v = 0x2EFC; // Name: m_bClampV Offset: 0x2EFC
					constexpr auto n_scale_cp1 = 0x2F00; // Name: m_nScaleCP1 Offset: 0x2F00
					constexpr auto n_scale_cp2 = 0x2F04; // Name: m_nScaleCP2 Offset: 0x2F04
					constexpr auto fl_scale_vsize_by_control_point_distance = 0x2F08; // Name: m_flScaleVSizeByControlPointDistance Offset: 0x2F08
					constexpr auto fl_scale_vscroll_by_control_point_distance = 0x2F0C; // Name: m_flScaleVScrollByControlPointDistance Offset: 0x2F0C
					constexpr auto fl_scale_voffset_by_control_point_distance = 0x2F10; // Name: m_flScaleVOffsetByControlPointDistance Offset: 0x2F10
					constexpr auto b_use_scalar_for_texture_coordinate = 0x2F15; // Name: m_bUseScalarForTextureCoordinate Offset: 0x2F15
					constexpr auto n_scalar_field_for_texture_coordinate = 0x2F18; // Name: m_nScalarFieldForTextureCoordinate Offset: 0x2F18
					constexpr auto fl_scalar_attribute_texture_coord_scale = 0x2F1C; // Name: m_flScalarAttributeTextureCoordScale Offset: 0x2F1C
					constexpr auto b_reverse_order = 0x2F20; // Name: m_bReverseOrder Offset: 0x2F20
					constexpr auto b_closed_loop = 0x2F21; // Name: m_bClosedLoop Offset: 0x2F21
					constexpr auto n_orientation_type = 0x2F24; // Name: m_nOrientationType Offset: 0x2F24
					constexpr auto n_vector_field_for_orientation = 0x2F28; // Name: m_nVectorFieldForOrientation Offset: 0x2F28
					constexpr auto b_draw_as_opaque = 0x2F2C; // Name: m_bDrawAsOpaque Offset: 0x2F2C
					constexpr auto b_generate_normals = 0x2F2D; // Name: m_bGenerateNormals Offset: 0x2F2D
				} // namespace C_OP_RenderRopes

				namespace CParticleSystemDefinition {
					constexpr auto n_behavior_version = 0x8; // Name: m_nBehaviorVersion Offset: 0x8
					constexpr auto pre_emission_operators = 0x10; // Name: m_PreEmissionOperators Offset: 0x10
					constexpr auto emitters = 0x28; // Name: m_Emitters Offset: 0x28
					constexpr auto initializers = 0x40; // Name: m_Initializers Offset: 0x40
					constexpr auto operators = 0x58; // Name: m_Operators Offset: 0x58
					constexpr auto force_generators = 0x70; // Name: m_ForceGenerators Offset: 0x70
					constexpr auto constraints = 0x88; // Name: m_Constraints Offset: 0x88
					constexpr auto renderers = 0xA0; // Name: m_Renderers Offset: 0xA0
					constexpr auto children = 0xB8; // Name: m_Children Offset: 0xB8
					constexpr auto n_first_multiple_override__backward_compat = 0x178; // Name: m_nFirstMultipleOverride_BackwardCompat Offset: 0x178
					constexpr auto n_initial_particles = 0x210; // Name: m_nInitialParticles Offset: 0x210
					constexpr auto n_max_particles = 0x214; // Name: m_nMaxParticles Offset: 0x214
					constexpr auto n_group_id = 0x218; // Name: m_nGroupID Offset: 0x218
					constexpr auto bounding_box_min = 0x21C; // Name: m_BoundingBoxMin Offset: 0x21C
					constexpr auto bounding_box_max = 0x228; // Name: m_BoundingBoxMax Offset: 0x228
					constexpr auto fl_depth_sort_bias = 0x234; // Name: m_flDepthSortBias Offset: 0x234
					constexpr auto n_sort_override_position_cp = 0x238; // Name: m_nSortOverridePositionCP Offset: 0x238
					constexpr auto b_infinite_bounds = 0x23C; // Name: m_bInfiniteBounds Offset: 0x23C
					constexpr auto b_enable_named_values = 0x23D; // Name: m_bEnableNamedValues Offset: 0x23D
					constexpr auto named_value_domain = 0x240; // Name: m_NamedValueDomain Offset: 0x240
					constexpr auto named_value_locals = 0x248; // Name: m_NamedValueLocals Offset: 0x248
					constexpr auto constant_color = 0x260; // Name: m_ConstantColor Offset: 0x260
					constexpr auto constant_normal = 0x264; // Name: m_ConstantNormal Offset: 0x264
					constexpr auto fl_constant_radius = 0x270; // Name: m_flConstantRadius Offset: 0x270
					constexpr auto fl_constant_rotation = 0x274; // Name: m_flConstantRotation Offset: 0x274
					constexpr auto fl_constant_rotation_speed = 0x278; // Name: m_flConstantRotationSpeed Offset: 0x278
					constexpr auto fl_constant_lifespan = 0x27C; // Name: m_flConstantLifespan Offset: 0x27C
					constexpr auto n_constant_sequence_number = 0x280; // Name: m_nConstantSequenceNumber Offset: 0x280
					constexpr auto n_constant_sequence_number1 = 0x284; // Name: m_nConstantSequenceNumber1 Offset: 0x284
					constexpr auto n_snapshot_control_point = 0x288; // Name: m_nSnapshotControlPoint Offset: 0x288
					constexpr auto h_snapshot = 0x290; // Name: m_hSnapshot Offset: 0x290
					constexpr auto psz_cull_replacement_name = 0x298; // Name: m_pszCullReplacementName Offset: 0x298
					constexpr auto fl_cull_radius = 0x2A0; // Name: m_flCullRadius Offset: 0x2A0
					constexpr auto fl_cull_fill_cost = 0x2A4; // Name: m_flCullFillCost Offset: 0x2A4
					constexpr auto n_cull_control_point = 0x2A8; // Name: m_nCullControlPoint Offset: 0x2A8
					constexpr auto h_fallback = 0x2B0; // Name: m_hFallback Offset: 0x2B0
					constexpr auto n_fallback_max_count = 0x2B8; // Name: m_nFallbackMaxCount Offset: 0x2B8
					constexpr auto h_low_violence_def = 0x2C0; // Name: m_hLowViolenceDef Offset: 0x2C0
					constexpr auto h_reference_replacement = 0x2C8; // Name: m_hReferenceReplacement Offset: 0x2C8
					constexpr auto fl_pre_simulation_time = 0x2D0; // Name: m_flPreSimulationTime Offset: 0x2D0
					constexpr auto fl_stop_simulation_after_time = 0x2D4; // Name: m_flStopSimulationAfterTime Offset: 0x2D4
					constexpr auto fl_maximum_time_step = 0x2D8; // Name: m_flMaximumTimeStep Offset: 0x2D8
					constexpr auto fl_maximum_sim_time = 0x2DC; // Name: m_flMaximumSimTime Offset: 0x2DC
					constexpr auto fl_minimum_sim_time = 0x2E0; // Name: m_flMinimumSimTime Offset: 0x2E0
					constexpr auto fl_minimum_time_step = 0x2E4; // Name: m_flMinimumTimeStep Offset: 0x2E4
					constexpr auto n_minimum_frames = 0x2E8; // Name: m_nMinimumFrames Offset: 0x2E8
					constexpr auto n_min_cpulevel = 0x2EC; // Name: m_nMinCPULevel Offset: 0x2EC
					constexpr auto n_min_gpulevel = 0x2F0; // Name: m_nMinGPULevel Offset: 0x2F0
					constexpr auto fl_no_draw_time_to_go_to_sleep = 0x2F4; // Name: m_flNoDrawTimeToGoToSleep Offset: 0x2F4
					constexpr auto fl_max_draw_distance = 0x2F8; // Name: m_flMaxDrawDistance Offset: 0x2F8
					constexpr auto fl_start_fade_distance = 0x2FC; // Name: m_flStartFadeDistance Offset: 0x2FC
					constexpr auto fl_max_creation_distance = 0x300; // Name: m_flMaxCreationDistance Offset: 0x300
					constexpr auto n_aggregation_min_available_particles = 0x304; // Name: m_nAggregationMinAvailableParticles Offset: 0x304
					constexpr auto fl_aggregate_radius = 0x308; // Name: m_flAggregateRadius Offset: 0x308
					constexpr auto b_should_batch = 0x30C; // Name: m_bShouldBatch Offset: 0x30C
					constexpr auto b_should_hitboxes_fallback_to_render_bounds = 0x30D; // Name: m_bShouldHitboxesFallbackToRenderBounds Offset: 0x30D
					constexpr auto b_should_hitboxes_fallback_to_snapshot = 0x30E; // Name: m_bShouldHitboxesFallbackToSnapshot Offset: 0x30E
					constexpr auto b_should_hitboxes_fallback_to_collision_hulls = 0x30F; // Name: m_bShouldHitboxesFallbackToCollisionHulls Offset: 0x30F
					constexpr auto n_view_model_effect = 0x310; // Name: m_nViewModelEffect Offset: 0x310
					constexpr auto b_screen_space_effect = 0x314; // Name: m_bScreenSpaceEffect Offset: 0x314
					constexpr auto psz_target_layer_id = 0x318; // Name: m_pszTargetLayerID Offset: 0x318
					constexpr auto n_skip_render_control_point = 0x320; // Name: m_nSkipRenderControlPoint Offset: 0x320
					constexpr auto n_allow_render_control_point = 0x324; // Name: m_nAllowRenderControlPoint Offset: 0x324
					constexpr auto b_should_sort = 0x328; // Name: m_bShouldSort Offset: 0x328
					constexpr auto control_point_configurations = 0x370; // Name: m_controlPointConfigurations Offset: 0x370
				} // namespace CParticleSystemDefinition

				namespace C_INIT_StatusEffectCitadel {
					constexpr auto fl_sfxcolor_warp_amount = 0x1C8; // Name: m_flSFXColorWarpAmount Offset: 0x1C8
					constexpr auto fl_sfxnormal_amount = 0x1CC; // Name: m_flSFXNormalAmount Offset: 0x1CC
					constexpr auto fl_sfxmetalness_amount = 0x1D0; // Name: m_flSFXMetalnessAmount Offset: 0x1D0
					constexpr auto fl_sfxroughness_amount = 0x1D4; // Name: m_flSFXRoughnessAmount Offset: 0x1D4
					constexpr auto fl_sfxself_illum_amount = 0x1D8; // Name: m_flSFXSelfIllumAmount Offset: 0x1D8
					constexpr auto fl_sfxsscale = 0x1DC; // Name: m_flSFXSScale Offset: 0x1DC
					constexpr auto fl_sfxsscroll_x = 0x1E0; // Name: m_flSFXSScrollX Offset: 0x1E0
					constexpr auto fl_sfxsscroll_y = 0x1E4; // Name: m_flSFXSScrollY Offset: 0x1E4
					constexpr auto fl_sfxsscroll_z = 0x1E8; // Name: m_flSFXSScrollZ Offset: 0x1E8
					constexpr auto fl_sfxsoffset_x = 0x1EC; // Name: m_flSFXSOffsetX Offset: 0x1EC
					constexpr auto fl_sfxsoffset_y = 0x1F0; // Name: m_flSFXSOffsetY Offset: 0x1F0
					constexpr auto fl_sfxsoffset_z = 0x1F4; // Name: m_flSFXSOffsetZ Offset: 0x1F4
					constexpr auto n_detail_combo = 0x1F8; // Name: m_nDetailCombo Offset: 0x1F8
					constexpr auto fl_sfxsdetail_amount = 0x1FC; // Name: m_flSFXSDetailAmount Offset: 0x1FC
					constexpr auto fl_sfxsdetail_scale = 0x200; // Name: m_flSFXSDetailScale Offset: 0x200
					constexpr auto fl_sfxsdetail_scroll_x = 0x204; // Name: m_flSFXSDetailScrollX Offset: 0x204
					constexpr auto fl_sfxsdetail_scroll_y = 0x208; // Name: m_flSFXSDetailScrollY Offset: 0x208
					constexpr auto fl_sfxsdetail_scroll_z = 0x20C; // Name: m_flSFXSDetailScrollZ Offset: 0x20C
					constexpr auto fl_sfxsuse_model_uvs = 0x210; // Name: m_flSFXSUseModelUVs Offset: 0x210
				} // namespace C_INIT_StatusEffectCitadel

				namespace C_INIT_ScaleVelocity {
					constexpr auto vec_scale = 0x1C8; // Name: m_vecScale Offset: 0x1C8
				} // namespace C_INIT_ScaleVelocity

				namespace C_OP_RemapExternalWindToCP {
					constexpr auto n_cp = 0x1C8; // Name: m_nCP Offset: 0x1C8
					constexpr auto n_cpoutput = 0x1CC; // Name: m_nCPOutput Offset: 0x1CC
					constexpr auto vec_scale = 0x1D0; // Name: m_vecScale Offset: 0x1D0
					constexpr auto b_set_magnitude = 0x848; // Name: m_bSetMagnitude Offset: 0x848
					constexpr auto n_out_vector_field = 0x84C; // Name: m_nOutVectorField Offset: 0x84C
				} // namespace C_OP_RemapExternalWindToCP

				namespace C_OP_EndCapDecay {
				} // namespace C_OP_EndCapDecay

				namespace C_OP_RenderSound {
					constexpr auto fl_duration_scale = 0x210; // Name: m_flDurationScale Offset: 0x210
					constexpr auto fl_snd_lvl_scale = 0x214; // Name: m_flSndLvlScale Offset: 0x214
					constexpr auto fl_pitch_scale = 0x218; // Name: m_flPitchScale Offset: 0x218
					constexpr auto fl_volume_scale = 0x21C; // Name: m_flVolumeScale Offset: 0x21C
					constexpr auto n_snd_lvl_field = 0x220; // Name: m_nSndLvlField Offset: 0x220
					constexpr auto n_duration_field = 0x224; // Name: m_nDurationField Offset: 0x224
					constexpr auto n_pitch_field = 0x228; // Name: m_nPitchField Offset: 0x228
					constexpr auto n_volume_field = 0x22C; // Name: m_nVolumeField Offset: 0x22C
					constexpr auto n_channel = 0x230; // Name: m_nChannel Offset: 0x230
					constexpr auto n_cpreference = 0x234; // Name: m_nCPReference Offset: 0x234
					constexpr auto psz_sound_name = 0x238; // Name: m_pszSoundName Offset: 0x238
					constexpr auto b_suppress_stop_sound_event = 0x338; // Name: m_bSuppressStopSoundEvent Offset: 0x338
				} // namespace C_OP_RenderSound

				namespace C_OP_OscillateScalar {
					constexpr auto rate_min = 0x1C0; // Name: m_RateMin Offset: 0x1C0
					constexpr auto rate_max = 0x1C4; // Name: m_RateMax Offset: 0x1C4
					constexpr auto frequency_min = 0x1C8; // Name: m_FrequencyMin Offset: 0x1C8
					constexpr auto frequency_max = 0x1CC; // Name: m_FrequencyMax Offset: 0x1CC
					constexpr auto n_field = 0x1D0; // Name: m_nField Offset: 0x1D0
					constexpr auto b_proportional = 0x1D4; // Name: m_bProportional Offset: 0x1D4
					constexpr auto b_proportional_op = 0x1D5; // Name: m_bProportionalOp Offset: 0x1D5
					constexpr auto fl_start_time_min = 0x1D8; // Name: m_flStartTime_min Offset: 0x1D8
					constexpr auto fl_start_time_max = 0x1DC; // Name: m_flStartTime_max Offset: 0x1DC
					constexpr auto fl_end_time_min = 0x1E0; // Name: m_flEndTime_min Offset: 0x1E0
					constexpr auto fl_end_time_max = 0x1E4; // Name: m_flEndTime_max Offset: 0x1E4
					constexpr auto fl_osc_mult = 0x1E8; // Name: m_flOscMult Offset: 0x1E8
					constexpr auto fl_osc_add = 0x1EC; // Name: m_flOscAdd Offset: 0x1EC
				} // namespace C_OP_OscillateScalar

				namespace C_OP_SetControlPointsToParticle {
					constexpr auto n_child_group_id = 0x1C0; // Name: m_nChildGroupID Offset: 0x1C0
					constexpr auto n_first_control_point = 0x1C4; // Name: m_nFirstControlPoint Offset: 0x1C4
					constexpr auto n_num_control_points = 0x1C8; // Name: m_nNumControlPoints Offset: 0x1C8
					constexpr auto n_first_source_point = 0x1CC; // Name: m_nFirstSourcePoint Offset: 0x1CC
					constexpr auto b_set_orientation = 0x1D0; // Name: m_bSetOrientation Offset: 0x1D0
					constexpr auto n_orientation_mode = 0x1D4; // Name: m_nOrientationMode Offset: 0x1D4
					constexpr auto n_set_parent = 0x1D8; // Name: m_nSetParent Offset: 0x1D8
				} // namespace C_OP_SetControlPointsToParticle

				namespace C_INIT_PlaneCull {
					constexpr auto n_control_point = 0x1C8; // Name: m_nControlPoint Offset: 0x1C8
					constexpr auto fl_distance = 0x1D0; // Name: m_flDistance Offset: 0x1D0
					constexpr auto b_cull_inside = 0x330; // Name: m_bCullInside Offset: 0x330
				} // namespace C_INIT_PlaneCull

				namespace C_OP_ModelDampenMovement {
					constexpr auto n_control_point_number = 0x1C0; // Name: m_nControlPointNumber Offset: 0x1C0
					constexpr auto b_bound_box = 0x1C4; // Name: m_bBoundBox Offset: 0x1C4
					constexpr auto b_outside = 0x1C5; // Name: m_bOutside Offset: 0x1C5
					constexpr auto b_use_bones = 0x1C6; // Name: m_bUseBones Offset: 0x1C6
					constexpr auto hitbox_set_name = 0x1C7; // Name: m_HitboxSetName Offset: 0x1C7
					constexpr auto vec_pos_offset = 0x248; // Name: m_vecPosOffset Offset: 0x248
					constexpr auto f_drag = 0x8C0; // Name: m_fDrag Offset: 0x8C0
				} // namespace C_OP_ModelDampenMovement

				namespace C_OP_RemapCPVelocityToVector {
					constexpr auto n_control_point = 0x1C0; // Name: m_nControlPoint Offset: 0x1C0
					constexpr auto n_field_output = 0x1C4; // Name: m_nFieldOutput Offset: 0x1C4
					constexpr auto fl_scale = 0x1C8; // Name: m_flScale Offset: 0x1C8
					constexpr auto b_normalize = 0x1CC; // Name: m_bNormalize Offset: 0x1CC
				} // namespace C_OP_RemapCPVelocityToVector

				namespace C_INIT_SetHitboxToClosest {
					constexpr auto n_control_point_number = 0x1C8; // Name: m_nControlPointNumber Offset: 0x1C8
					constexpr auto n_desired_hitbox = 0x1CC; // Name: m_nDesiredHitbox Offset: 0x1CC
					constexpr auto vec_hit_box_scale = 0x1D0; // Name: m_vecHitBoxScale Offset: 0x1D0
					constexpr auto hitbox_set_name = 0x848; // Name: m_HitboxSetName Offset: 0x848
					constexpr auto b_use_bones = 0x8C8; // Name: m_bUseBones Offset: 0x8C8
					constexpr auto b_use_closest_point_on_hitbox = 0x8C9; // Name: m_bUseClosestPointOnHitbox Offset: 0x8C9
					constexpr auto n_test_type = 0x8CC; // Name: m_nTestType Offset: 0x8CC
					constexpr auto fl_hybrid_ratio = 0x8D0; // Name: m_flHybridRatio Offset: 0x8D0
					constexpr auto b_update_position = 0xA30; // Name: m_bUpdatePosition Offset: 0xA30
				} // namespace C_INIT_SetHitboxToClosest

				namespace C_OP_PointVectorAtNextParticle {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto fl_interpolation = 0x1C8; // Name: m_flInterpolation Offset: 0x1C8
				} // namespace C_OP_PointVectorAtNextParticle

				namespace C_OP_PinParticleToCP {
					constexpr auto n_control_point_number = 0x1C0; // Name: m_nControlPointNumber Offset: 0x1C0
					constexpr auto vec_offset = 0x1C8; // Name: m_vecOffset Offset: 0x1C8
					constexpr auto b_offset_local = 0x840; // Name: m_bOffsetLocal Offset: 0x840
					constexpr auto n_particle_selection = 0x844; // Name: m_nParticleSelection Offset: 0x844
					constexpr auto n_particle_number = 0x848; // Name: m_nParticleNumber Offset: 0x848
					constexpr auto n_pin_break_type = 0x9A8; // Name: m_nPinBreakType Offset: 0x9A8
					constexpr auto fl_break_distance = 0x9B0; // Name: m_flBreakDistance Offset: 0x9B0
					constexpr auto fl_break_speed = 0xB10; // Name: m_flBreakSpeed Offset: 0xB10
					constexpr auto fl_age = 0xC70; // Name: m_flAge Offset: 0xC70
					constexpr auto n_break_control_point_number = 0xDD0; // Name: m_nBreakControlPointNumber Offset: 0xDD0
					constexpr auto n_break_control_point_number2 = 0xDD4; // Name: m_nBreakControlPointNumber2 Offset: 0xDD4
					constexpr auto fl_break_value = 0xDD8; // Name: m_flBreakValue Offset: 0xDD8
					constexpr auto fl_interpolation = 0xF38; // Name: m_flInterpolation Offset: 0xF38
				} // namespace C_OP_PinParticleToCP

				namespace ParticlePreviewBodyGroup_t {
					constexpr auto body_group_name = 0x0; // Name: m_bodyGroupName Offset: 0x0
					constexpr auto n_value = 0x8; // Name: m_nValue Offset: 0x8
				} // namespace ParticlePreviewBodyGroup_t

				namespace C_OP_OscillateScalarSimple {
					constexpr auto rate = 0x1C0; // Name: m_Rate Offset: 0x1C0
					constexpr auto frequency = 0x1C4; // Name: m_Frequency Offset: 0x1C4
					constexpr auto n_field = 0x1C8; // Name: m_nField Offset: 0x1C8
					constexpr auto fl_osc_mult = 0x1CC; // Name: m_flOscMult Offset: 0x1CC
					constexpr auto fl_osc_add = 0x1D0; // Name: m_flOscAdd Offset: 0x1D0
				} // namespace C_OP_OscillateScalarSimple

				namespace C_OP_RenderTonemapController {
					constexpr auto fl_tonemap_level = 0x210; // Name: m_flTonemapLevel Offset: 0x210
					constexpr auto fl_tonemap_weight = 0x214; // Name: m_flTonemapWeight Offset: 0x214
					constexpr auto n_tonemap_level_field = 0x218; // Name: m_nTonemapLevelField Offset: 0x218
					constexpr auto n_tonemap_weight_field = 0x21C; // Name: m_nTonemapWeightField Offset: 0x21C
				} // namespace C_OP_RenderTonemapController

				namespace C_INIT_StatusEffect {
					constexpr auto n_detail2_combo = 0x1C8; // Name: m_nDetail2Combo Offset: 0x1C8
					constexpr auto fl_detail2_rotation = 0x1CC; // Name: m_flDetail2Rotation Offset: 0x1CC
					constexpr auto fl_detail2_scale = 0x1D0; // Name: m_flDetail2Scale Offset: 0x1D0
					constexpr auto fl_detail2_blend_factor = 0x1D4; // Name: m_flDetail2BlendFactor Offset: 0x1D4
					constexpr auto fl_color_warp_intensity = 0x1D8; // Name: m_flColorWarpIntensity Offset: 0x1D8
					constexpr auto fl_diffuse_warp_blend_to_full = 0x1DC; // Name: m_flDiffuseWarpBlendToFull Offset: 0x1DC
					constexpr auto fl_env_map_intensity = 0x1E0; // Name: m_flEnvMapIntensity Offset: 0x1E0
					constexpr auto fl_ambient_scale = 0x1E4; // Name: m_flAmbientScale Offset: 0x1E4
					constexpr auto specular_color = 0x1E8; // Name: m_specularColor Offset: 0x1E8
					constexpr auto fl_specular_scale = 0x1EC; // Name: m_flSpecularScale Offset: 0x1EC
					constexpr auto fl_specular_exponent = 0x1F0; // Name: m_flSpecularExponent Offset: 0x1F0
					constexpr auto fl_specular_exponent_blend_to_full = 0x1F4; // Name: m_flSpecularExponentBlendToFull Offset: 0x1F4
					constexpr auto fl_specular_blend_to_full = 0x1F8; // Name: m_flSpecularBlendToFull Offset: 0x1F8
					constexpr auto rim_light_color = 0x1FC; // Name: m_rimLightColor Offset: 0x1FC
					constexpr auto fl_rim_light_scale = 0x200; // Name: m_flRimLightScale Offset: 0x200
					constexpr auto fl_reflections_tint_by_base_blend_to_none = 0x204; // Name: m_flReflectionsTintByBaseBlendToNone Offset: 0x204
					constexpr auto fl_metalness_blend_to_full = 0x208; // Name: m_flMetalnessBlendToFull Offset: 0x208
					constexpr auto fl_self_illum_blend_to_full = 0x20C; // Name: m_flSelfIllumBlendToFull Offset: 0x20C
				} // namespace C_INIT_StatusEffect

				namespace C_INIT_RtEnvCull {
					constexpr auto vec_test_dir = 0x1C8; // Name: m_vecTestDir Offset: 0x1C8
					constexpr auto vec_test_normal = 0x1D4; // Name: m_vecTestNormal Offset: 0x1D4
					constexpr auto b_use_velocity = 0x1E0; // Name: m_bUseVelocity Offset: 0x1E0
					constexpr auto b_cull_on_miss = 0x1E1; // Name: m_bCullOnMiss Offset: 0x1E1
					constexpr auto b_life_adjust = 0x1E2; // Name: m_bLifeAdjust Offset: 0x1E2
					constexpr auto rt_env_name = 0x1E3; // Name: m_RtEnvName Offset: 0x1E3
					constexpr auto n_rtenv_cp = 0x264; // Name: m_nRTEnvCP Offset: 0x264
					constexpr auto n_component = 0x268; // Name: m_nComponent Offset: 0x268
				} // namespace C_INIT_RtEnvCull

				namespace C_INIT_RandomVector {
					constexpr auto vec_min = 0x1C8; // Name: m_vecMin Offset: 0x1C8
					constexpr auto vec_max = 0x1D4; // Name: m_vecMax Offset: 0x1D4
					constexpr auto n_field_output = 0x1E0; // Name: m_nFieldOutput Offset: 0x1E0
					constexpr auto randomness_parameters = 0x1E4; // Name: m_randomnessParameters Offset: 0x1E4
				} // namespace C_INIT_RandomVector

				namespace ParticleChildrenInfo_t {
					constexpr auto child_ref = 0x0; // Name: m_ChildRef Offset: 0x0
					constexpr auto fl_delay = 0x8; // Name: m_flDelay Offset: 0x8
					constexpr auto b_end_cap = 0xC; // Name: m_bEndCap Offset: 0xC
					constexpr auto b_disable_child = 0xD; // Name: m_bDisableChild Offset: 0xD
					constexpr auto n_detail_level = 0x10; // Name: m_nDetailLevel Offset: 0x10
				} // namespace ParticleChildrenInfo_t

				namespace C_OP_RemapScalarOnceTimed {
					constexpr auto b_proportional = 0x1C0; // Name: m_bProportional Offset: 0x1C0
					constexpr auto n_field_input = 0x1C4; // Name: m_nFieldInput Offset: 0x1C4
					constexpr auto n_field_output = 0x1C8; // Name: m_nFieldOutput Offset: 0x1C8
					constexpr auto fl_input_min = 0x1CC; // Name: m_flInputMin Offset: 0x1CC
					constexpr auto fl_input_max = 0x1D0; // Name: m_flInputMax Offset: 0x1D0
					constexpr auto fl_output_min = 0x1D4; // Name: m_flOutputMin Offset: 0x1D4
					constexpr auto fl_output_max = 0x1D8; // Name: m_flOutputMax Offset: 0x1D8
					constexpr auto fl_remap_time = 0x1DC; // Name: m_flRemapTime Offset: 0x1DC
				} // namespace C_OP_RemapScalarOnceTimed

				namespace C_OP_SpinYaw {
				} // namespace C_OP_SpinYaw

				namespace C_OP_RemapSDFDistanceToScalarAttribute {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto n_vector_field_input = 0x1C4; // Name: m_nVectorFieldInput Offset: 0x1C4
					constexpr auto fl_min_distance = 0x1C8; // Name: m_flMinDistance Offset: 0x1C8
					constexpr auto fl_max_distance = 0x328; // Name: m_flMaxDistance Offset: 0x328
					constexpr auto fl_value_below_min = 0x488; // Name: m_flValueBelowMin Offset: 0x488
					constexpr auto fl_value_at_min = 0x5E8; // Name: m_flValueAtMin Offset: 0x5E8
					constexpr auto fl_value_at_max = 0x748; // Name: m_flValueAtMax Offset: 0x748
					constexpr auto fl_value_above_max = 0x8A8; // Name: m_flValueAboveMax Offset: 0x8A8
				} // namespace C_OP_RemapSDFDistanceToScalarAttribute

				namespace C_INIT_RandomNamedModelSequence {
				} // namespace C_INIT_RandomNamedModelSequence

				namespace C_OP_ExternalGameImpulseForce {
					constexpr auto fl_force_scale = 0x1D0; // Name: m_flForceScale Offset: 0x1D0
					constexpr auto b_ropes = 0x330; // Name: m_bRopes Offset: 0x330
					constexpr auto b_ropes_zonly = 0x331; // Name: m_bRopesZOnly Offset: 0x331
					constexpr auto b_explosions = 0x332; // Name: m_bExplosions Offset: 0x332
					constexpr auto b_particles = 0x333; // Name: m_bParticles Offset: 0x333
				} // namespace C_OP_ExternalGameImpulseForce

				namespace C_OP_PlaneCull {
					constexpr auto n_plane_control_point = 0x1C0; // Name: m_nPlaneControlPoint Offset: 0x1C0
					constexpr auto vec_plane_direction = 0x1C4; // Name: m_vecPlaneDirection Offset: 0x1C4
					constexpr auto b_local_space = 0x1D0; // Name: m_bLocalSpace Offset: 0x1D0
					constexpr auto fl_plane_offset = 0x1D4; // Name: m_flPlaneOffset Offset: 0x1D4
				} // namespace C_OP_PlaneCull

				namespace C_INIT_VelocityRandom {
					constexpr auto n_control_point_number = 0x1C8; // Name: m_nControlPointNumber Offset: 0x1C8
					constexpr auto f_speed_min = 0x1D0; // Name: m_fSpeedMin Offset: 0x1D0
					constexpr auto f_speed_max = 0x330; // Name: m_fSpeedMax Offset: 0x330
					constexpr auto local_coordinate_system_speed_min = 0x490; // Name: m_LocalCoordinateSystemSpeedMin Offset: 0x490
					constexpr auto local_coordinate_system_speed_max = 0xB08; // Name: m_LocalCoordinateSystemSpeedMax Offset: 0xB08
					constexpr auto b_ignore_dt = 0x1180; // Name: m_bIgnoreDT Offset: 0x1180
					constexpr auto randomness_parameters = 0x1184; // Name: m_randomnessParameters Offset: 0x1184
				} // namespace C_INIT_VelocityRandom

				namespace C_OP_RemapParticleCountOnScalarEndCap {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto n_input_min = 0x1C4; // Name: m_nInputMin Offset: 0x1C4
					constexpr auto n_input_max = 0x1C8; // Name: m_nInputMax Offset: 0x1C8
					constexpr auto fl_output_min = 0x1CC; // Name: m_flOutputMin Offset: 0x1CC
					constexpr auto fl_output_max = 0x1D0; // Name: m_flOutputMax Offset: 0x1D0
					constexpr auto b_backwards = 0x1D4; // Name: m_bBackwards Offset: 0x1D4
					constexpr auto n_set_method = 0x1D8; // Name: m_nSetMethod Offset: 0x1D8
				} // namespace C_OP_RemapParticleCountOnScalarEndCap

				namespace C_OP_TwistAroundAxis {
					constexpr auto f_force_amount = 0x1D0; // Name: m_fForceAmount Offset: 0x1D0
					constexpr auto twist_axis = 0x1D4; // Name: m_TwistAxis Offset: 0x1D4
					constexpr auto b_local_space = 0x1E0; // Name: m_bLocalSpace Offset: 0x1E0
					constexpr auto n_control_point_number = 0x1E4; // Name: m_nControlPointNumber Offset: 0x1E4
				} // namespace C_OP_TwistAroundAxis

				namespace C_INIT_LifespanFromVelocity {
					constexpr auto vec_component_scale = 0x1C8; // Name: m_vecComponentScale Offset: 0x1C8
					constexpr auto fl_trace_offset = 0x1D4; // Name: m_flTraceOffset Offset: 0x1D4
					constexpr auto fl_max_trace_length = 0x1D8; // Name: m_flMaxTraceLength Offset: 0x1D8
					constexpr auto fl_trace_tolerance = 0x1DC; // Name: m_flTraceTolerance Offset: 0x1DC
					constexpr auto n_max_planes = 0x1E0; // Name: m_nMaxPlanes Offset: 0x1E0
					constexpr auto collision_group_name = 0x1E8; // Name: m_CollisionGroupName Offset: 0x1E8
					constexpr auto n_trace_set = 0x268; // Name: m_nTraceSet Offset: 0x268
					constexpr auto b_include_water = 0x278; // Name: m_bIncludeWater Offset: 0x278
				} // namespace C_INIT_LifespanFromVelocity

				namespace ParticleControlPointDriver_t {
					constexpr auto i_control_point = 0x0; // Name: m_iControlPoint Offset: 0x0
					constexpr auto i_attach_type = 0x4; // Name: m_iAttachType Offset: 0x4
					constexpr auto attachment_name = 0x8; // Name: m_attachmentName Offset: 0x8
					constexpr auto vec_offset = 0x10; // Name: m_vecOffset Offset: 0x10
					constexpr auto ang_offset = 0x1C; // Name: m_angOffset Offset: 0x1C
					constexpr auto entity_name = 0x28; // Name: m_entityName Offset: 0x28
				} // namespace ParticleControlPointDriver_t

				namespace CSpinUpdateBase {
				} // namespace CSpinUpdateBase

				namespace C_OP_RemapDensityToVector {
					constexpr auto fl_radius_scale = 0x1C0; // Name: m_flRadiusScale Offset: 0x1C0
					constexpr auto n_field_output = 0x1C4; // Name: m_nFieldOutput Offset: 0x1C4
					constexpr auto fl_density_min = 0x1C8; // Name: m_flDensityMin Offset: 0x1C8
					constexpr auto fl_density_max = 0x1CC; // Name: m_flDensityMax Offset: 0x1CC
					constexpr auto vec_output_min = 0x1D0; // Name: m_vecOutputMin Offset: 0x1D0
					constexpr auto vec_output_max = 0x1DC; // Name: m_vecOutputMax Offset: 0x1DC
					constexpr auto b_use_parent_density = 0x1E8; // Name: m_bUseParentDensity Offset: 0x1E8
					constexpr auto n_voxel_grid_resolution = 0x1EC; // Name: m_nVoxelGridResolution Offset: 0x1EC
				} // namespace C_OP_RemapDensityToVector

				namespace C_OP_OrientTo2dDirection {
					constexpr auto fl_rot_offset = 0x1C0; // Name: m_flRotOffset Offset: 0x1C0
					constexpr auto fl_spin_strength = 0x1C4; // Name: m_flSpinStrength Offset: 0x1C4
					constexpr auto n_field_output = 0x1C8; // Name: m_nFieldOutput Offset: 0x1C8
				} // namespace C_OP_OrientTo2dDirection

				namespace C_OP_RemapDotProductToCP {
					constexpr auto n_input_cp1 = 0x1C8; // Name: m_nInputCP1 Offset: 0x1C8
					constexpr auto n_input_cp2 = 0x1CC; // Name: m_nInputCP2 Offset: 0x1CC
					constexpr auto n_output_cp = 0x1D0; // Name: m_nOutputCP Offset: 0x1D0
					constexpr auto n_out_vector_field = 0x1D4; // Name: m_nOutVectorField Offset: 0x1D4
					constexpr auto fl_input_min = 0x1D8; // Name: m_flInputMin Offset: 0x1D8
					constexpr auto fl_input_max = 0x338; // Name: m_flInputMax Offset: 0x338
					constexpr auto fl_output_min = 0x498; // Name: m_flOutputMin Offset: 0x498
					constexpr auto fl_output_max = 0x5F8; // Name: m_flOutputMax Offset: 0x5F8
				} // namespace C_OP_RemapDotProductToCP

				namespace C_INIT_InitSkinnedPositionFromCPSnapshot {
					constexpr auto n_snapshot_control_point_number = 0x1C8; // Name: m_nSnapshotControlPointNumber Offset: 0x1C8
					constexpr auto n_control_point_number = 0x1CC; // Name: m_nControlPointNumber Offset: 0x1CC
					constexpr auto b_random = 0x1D0; // Name: m_bRandom Offset: 0x1D0
					constexpr auto n_random_seed = 0x1D4; // Name: m_nRandomSeed Offset: 0x1D4
					constexpr auto b_rigid = 0x1D8; // Name: m_bRigid Offset: 0x1D8
					constexpr auto b_set_normal = 0x1D9; // Name: m_bSetNormal Offset: 0x1D9
					constexpr auto b_ignore_dt = 0x1DA; // Name: m_bIgnoreDt Offset: 0x1DA
					constexpr auto fl_min_normal_velocity = 0x1DC; // Name: m_flMinNormalVelocity Offset: 0x1DC
					constexpr auto fl_max_normal_velocity = 0x1E0; // Name: m_flMaxNormalVelocity Offset: 0x1E0
					constexpr auto n_index_type = 0x1E4; // Name: m_nIndexType Offset: 0x1E4
					constexpr auto fl_read_index = 0x1E8; // Name: m_flReadIndex Offset: 0x1E8
					constexpr auto fl_increment = 0x348; // Name: m_flIncrement Offset: 0x348
					constexpr auto n_full_loop_increment = 0x34C; // Name: m_nFullLoopIncrement Offset: 0x34C
					constexpr auto n_snap_shot_start_point = 0x350; // Name: m_nSnapShotStartPoint Offset: 0x350
					constexpr auto fl_bone_velocity = 0x354; // Name: m_flBoneVelocity Offset: 0x354
					constexpr auto fl_bone_velocity_max = 0x358; // Name: m_flBoneVelocityMax Offset: 0x358
					constexpr auto b_copy_color = 0x35C; // Name: m_bCopyColor Offset: 0x35C
					constexpr auto b_copy_alpha = 0x35D; // Name: m_bCopyAlpha Offset: 0x35D
					constexpr auto b_set_radius = 0x35E; // Name: m_bSetRadius Offset: 0x35E
				} // namespace C_INIT_InitSkinnedPositionFromCPSnapshot

				namespace C_OP_RemapAverageScalarValuetoCP {
					constexpr auto n_out_control_point_number = 0x1C8; // Name: m_nOutControlPointNumber Offset: 0x1C8
					constexpr auto n_out_vector_field = 0x1CC; // Name: m_nOutVectorField Offset: 0x1CC
					constexpr auto n_field = 0x1D0; // Name: m_nField Offset: 0x1D0
					constexpr auto fl_input_min = 0x1D4; // Name: m_flInputMin Offset: 0x1D4
					constexpr auto fl_input_max = 0x1D8; // Name: m_flInputMax Offset: 0x1D8
					constexpr auto fl_output_min = 0x1DC; // Name: m_flOutputMin Offset: 0x1DC
					constexpr auto fl_output_max = 0x1E0; // Name: m_flOutputMax Offset: 0x1E0
				} // namespace C_OP_RemapAverageScalarValuetoCP

				namespace C_INIT_RandomModelSequence {
					constexpr auto activity_name = 0x1C8; // Name: m_ActivityName Offset: 0x1C8
					constexpr auto sequence_name = 0x2C8; // Name: m_SequenceName Offset: 0x2C8
					constexpr auto h_model = 0x3C8; // Name: m_hModel Offset: 0x3C8
				} // namespace C_INIT_RandomModelSequence

				namespace C_OP_SetControlPointPositionToTimeOfDayValue {
					constexpr auto n_control_point_number = 0x1C8; // Name: m_nControlPointNumber Offset: 0x1C8
					constexpr auto psz_time_of_day_parameter = 0x1CC; // Name: m_pszTimeOfDayParameter Offset: 0x1CC
					constexpr auto vec_default_value = 0x24C; // Name: m_vecDefaultValue Offset: 0x24C
				} // namespace C_OP_SetControlPointPositionToTimeOfDayValue

				namespace C_OP_LocalAccelerationForce {
					constexpr auto n_cp = 0x1D0; // Name: m_nCP Offset: 0x1D0
					constexpr auto n_scale_cp = 0x1D4; // Name: m_nScaleCP Offset: 0x1D4
					constexpr auto vec_accel = 0x1D8; // Name: m_vecAccel Offset: 0x1D8
				} // namespace C_OP_LocalAccelerationForce

				namespace C_OP_DecayMaintainCount {
					constexpr auto n_particles_to_maintain = 0x1C0; // Name: m_nParticlesToMaintain Offset: 0x1C0
					constexpr auto fl_decay_delay = 0x1C4; // Name: m_flDecayDelay Offset: 0x1C4
					constexpr auto n_snapshot_control_point = 0x1C8; // Name: m_nSnapshotControlPoint Offset: 0x1C8
					constexpr auto b_lifespan_decay = 0x1CC; // Name: m_bLifespanDecay Offset: 0x1CC
					constexpr auto fl_scale = 0x1D0; // Name: m_flScale Offset: 0x1D0
					constexpr auto b_kill_newest = 0x330; // Name: m_bKillNewest Offset: 0x330
				} // namespace C_OP_DecayMaintainCount

				namespace C_OP_RemapDistanceToLineSegmentBase {
					constexpr auto n_cp0 = 0x1C0; // Name: m_nCP0 Offset: 0x1C0
					constexpr auto n_cp1 = 0x1C4; // Name: m_nCP1 Offset: 0x1C4
					constexpr auto fl_min_input_value = 0x1C8; // Name: m_flMinInputValue Offset: 0x1C8
					constexpr auto fl_max_input_value = 0x1CC; // Name: m_flMaxInputValue Offset: 0x1CC
					constexpr auto b_infinite_line = 0x1D0; // Name: m_bInfiniteLine Offset: 0x1D0
				} // namespace C_OP_RemapDistanceToLineSegmentBase

				namespace C_OP_LerpEndCapScalar {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto fl_output = 0x1C4; // Name: m_flOutput Offset: 0x1C4
					constexpr auto fl_lerp_time = 0x1C8; // Name: m_flLerpTime Offset: 0x1C8
				} // namespace C_OP_LerpEndCapScalar

				namespace C_OP_RepeatedTriggerChildGroup {
					constexpr auto n_child_group_id = 0x1C8; // Name: m_nChildGroupID Offset: 0x1C8
					constexpr auto fl_cluster_refire_time = 0x1D0; // Name: m_flClusterRefireTime Offset: 0x1D0
					constexpr auto fl_cluster_size = 0x330; // Name: m_flClusterSize Offset: 0x330
					constexpr auto fl_cluster_cooldown = 0x490; // Name: m_flClusterCooldown Offset: 0x490
					constexpr auto b_limit_child_count = 0x5F0; // Name: m_bLimitChildCount Offset: 0x5F0
				} // namespace C_OP_RepeatedTriggerChildGroup

				namespace C_OP_RemapNamedModelElementOnceTimed {
					constexpr auto h_model = 0x1C0; // Name: m_hModel Offset: 0x1C0
					constexpr auto in_names = 0x1C8; // Name: m_inNames Offset: 0x1C8
					constexpr auto out_names = 0x1E0; // Name: m_outNames Offset: 0x1E0
					constexpr auto fallback_names = 0x1F8; // Name: m_fallbackNames Offset: 0x1F8
					constexpr auto b_model_from_renderer = 0x210; // Name: m_bModelFromRenderer Offset: 0x210
					constexpr auto b_proportional = 0x211; // Name: m_bProportional Offset: 0x211
					constexpr auto n_field_input = 0x214; // Name: m_nFieldInput Offset: 0x214
					constexpr auto n_field_output = 0x218; // Name: m_nFieldOutput Offset: 0x218
					constexpr auto fl_remap_time = 0x21C; // Name: m_flRemapTime Offset: 0x21C
				} // namespace C_OP_RemapNamedModelElementOnceTimed

				namespace C_INIT_RandomAlpha {
					constexpr auto n_field_output = 0x1C8; // Name: m_nFieldOutput Offset: 0x1C8
					constexpr auto n_alpha_min = 0x1CC; // Name: m_nAlphaMin Offset: 0x1CC
					constexpr auto n_alpha_max = 0x1D0; // Name: m_nAlphaMax Offset: 0x1D0
					constexpr auto fl_alpha_rand_exponent = 0x1DC; // Name: m_flAlphaRandExponent Offset: 0x1DC
				} // namespace C_INIT_RandomAlpha

				namespace C_OP_NormalizeVector {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto fl_scale = 0x1C4; // Name: m_flScale Offset: 0x1C4
				} // namespace C_OP_NormalizeVector

				namespace C_OP_SetControlPointFromObjectScale {
					constexpr auto n_cpinput = 0x1C8; // Name: m_nCPInput Offset: 0x1C8
					constexpr auto n_cpoutput = 0x1CC; // Name: m_nCPOutput Offset: 0x1CC
				} // namespace C_OP_SetControlPointFromObjectScale

				namespace C_OP_DistanceBetweenTransforms {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto transform_start = 0x1C8; // Name: m_TransformStart Offset: 0x1C8
					constexpr auto transform_end = 0x230; // Name: m_TransformEnd Offset: 0x230
					constexpr auto fl_input_min = 0x298; // Name: m_flInputMin Offset: 0x298
					constexpr auto fl_input_max = 0x3F8; // Name: m_flInputMax Offset: 0x3F8
					constexpr auto fl_output_min = 0x558; // Name: m_flOutputMin Offset: 0x558
					constexpr auto fl_output_max = 0x6B8; // Name: m_flOutputMax Offset: 0x6B8
					constexpr auto fl_max_trace_length = 0x818; // Name: m_flMaxTraceLength Offset: 0x818
					constexpr auto fl_losscale = 0x81C; // Name: m_flLOSScale Offset: 0x81C
					constexpr auto collision_group_name = 0x820; // Name: m_CollisionGroupName Offset: 0x820
					constexpr auto n_trace_set = 0x8A0; // Name: m_nTraceSet Offset: 0x8A0
					constexpr auto b_los = 0x8A4; // Name: m_bLOS Offset: 0x8A4
					constexpr auto n_set_method = 0x8A8; // Name: m_nSetMethod Offset: 0x8A8
				} // namespace C_OP_DistanceBetweenTransforms

				namespace C_OP_SetControlPointToHand {
					constexpr auto n_cp1 = 0x1C8; // Name: m_nCP1 Offset: 0x1C8
					constexpr auto n_hand = 0x1CC; // Name: m_nHand Offset: 0x1CC
					constexpr auto vec_cp1_pos = 0x1D0; // Name: m_vecCP1Pos Offset: 0x1D0
					constexpr auto b_orient_to_hand = 0x1DC; // Name: m_bOrientToHand Offset: 0x1DC
				} // namespace C_OP_SetControlPointToHand

				namespace C_OP_FadeInSimple {
					constexpr auto fl_fade_in_time = 0x1C0; // Name: m_flFadeInTime Offset: 0x1C0
					constexpr auto n_field_output = 0x1C4; // Name: m_nFieldOutput Offset: 0x1C4
				} // namespace C_OP_FadeInSimple

				namespace C_OP_SetToCP {
					constexpr auto n_control_point_number = 0x1C0; // Name: m_nControlPointNumber Offset: 0x1C0
					constexpr auto vec_offset = 0x1C4; // Name: m_vecOffset Offset: 0x1C4
					constexpr auto b_offset_local = 0x1D0; // Name: m_bOffsetLocal Offset: 0x1D0
				} // namespace C_OP_SetToCP

				namespace C_OP_RemapVelocityToVector {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto fl_scale = 0x1C4; // Name: m_flScale Offset: 0x1C4
					constexpr auto b_normalize = 0x1C8; // Name: m_bNormalize Offset: 0x1C8
				} // namespace C_OP_RemapVelocityToVector

				namespace C_OP_RemapScalar {
					constexpr auto n_field_input = 0x1C0; // Name: m_nFieldInput Offset: 0x1C0
					constexpr auto n_field_output = 0x1C4; // Name: m_nFieldOutput Offset: 0x1C4
					constexpr auto fl_input_min = 0x1C8; // Name: m_flInputMin Offset: 0x1C8
					constexpr auto fl_input_max = 0x1CC; // Name: m_flInputMax Offset: 0x1CC
					constexpr auto fl_output_min = 0x1D0; // Name: m_flOutputMin Offset: 0x1D0
					constexpr auto fl_output_max = 0x1D4; // Name: m_flOutputMax Offset: 0x1D4
					constexpr auto b_old_code = 0x1D8; // Name: m_bOldCode Offset: 0x1D8
				} // namespace C_OP_RemapScalar

				namespace C_INIT_CreateSequentialPath {
					constexpr auto f_max_distance = 0x1C8; // Name: m_fMaxDistance Offset: 0x1C8
					constexpr auto fl_num_to_assign = 0x1CC; // Name: m_flNumToAssign Offset: 0x1CC
					constexpr auto b_loop = 0x1D0; // Name: m_bLoop Offset: 0x1D0
					constexpr auto b_cppairs = 0x1D1; // Name: m_bCPPairs Offset: 0x1D1
					constexpr auto b_save_offset = 0x1D2; // Name: m_bSaveOffset Offset: 0x1D2
					constexpr auto path_params = 0x1E0; // Name: m_PathParams Offset: 0x1E0
				} // namespace C_INIT_CreateSequentialPath

				namespace C_INIT_InitialRepulsionVelocity {
					constexpr auto collision_group_name = 0x1C8; // Name: m_CollisionGroupName Offset: 0x1C8
					constexpr auto n_trace_set = 0x248; // Name: m_nTraceSet Offset: 0x248
					constexpr auto vec_output_min = 0x24C; // Name: m_vecOutputMin Offset: 0x24C
					constexpr auto vec_output_max = 0x258; // Name: m_vecOutputMax Offset: 0x258
					constexpr auto n_control_point_number = 0x264; // Name: m_nControlPointNumber Offset: 0x264
					constexpr auto b_per_particle = 0x268; // Name: m_bPerParticle Offset: 0x268
					constexpr auto b_translate = 0x269; // Name: m_bTranslate Offset: 0x269
					constexpr auto b_proportional = 0x26A; // Name: m_bProportional Offset: 0x26A
					constexpr auto fl_trace_length = 0x26C; // Name: m_flTraceLength Offset: 0x26C
					constexpr auto b_per_particle_tr = 0x270; // Name: m_bPerParticleTR Offset: 0x270
					constexpr auto b_inherit = 0x271; // Name: m_bInherit Offset: 0x271
					constexpr auto n_child_cp = 0x274; // Name: m_nChildCP Offset: 0x274
					constexpr auto n_child_group_id = 0x278; // Name: m_nChildGroupID Offset: 0x278
				} // namespace C_INIT_InitialRepulsionVelocity

				namespace C_OP_EndCapTimedDecay {
					constexpr auto fl_decay_time = 0x1C0; // Name: m_flDecayTime Offset: 0x1C0
				} // namespace C_OP_EndCapTimedDecay

				namespace C_OP_ExternalWindForce {
					constexpr auto vec_sample_position = 0x1D0; // Name: m_vecSamplePosition Offset: 0x1D0
					constexpr auto vec_scale = 0x848; // Name: m_vecScale Offset: 0x848
					constexpr auto b_sample_wind = 0xEC0; // Name: m_bSampleWind Offset: 0xEC0
					constexpr auto b_sample_water = 0xEC1; // Name: m_bSampleWater Offset: 0xEC1
					constexpr auto b_dampen_near_water_plane = 0xEC2; // Name: m_bDampenNearWaterPlane Offset: 0xEC2
					constexpr auto b_sample_gravity = 0xEC3; // Name: m_bSampleGravity Offset: 0xEC3
					constexpr auto vec_gravity_force = 0xEC8; // Name: m_vecGravityForce Offset: 0xEC8
					constexpr auto b_use_basic_movement_gravity = 0x1540; // Name: m_bUseBasicMovementGravity Offset: 0x1540
					constexpr auto fl_local_gravity_scale = 0x1548; // Name: m_flLocalGravityScale Offset: 0x1548
					constexpr auto fl_local_buoyancy_scale = 0x16A8; // Name: m_flLocalBuoyancyScale Offset: 0x16A8
					constexpr auto vec_buoyancy_force = 0x1808; // Name: m_vecBuoyancyForce Offset: 0x1808
				} // namespace C_OP_ExternalWindForce

				namespace C_OP_ContinuousEmitter {
					constexpr auto fl_emission_duration = 0x1C8; // Name: m_flEmissionDuration Offset: 0x1C8
					constexpr auto fl_start_time = 0x328; // Name: m_flStartTime Offset: 0x328
					constexpr auto fl_emit_rate = 0x488; // Name: m_flEmitRate Offset: 0x488
					constexpr auto fl_emission_scale = 0x5E8; // Name: m_flEmissionScale Offset: 0x5E8
					constexpr auto fl_scale_per_parent_particle = 0x5EC; // Name: m_flScalePerParentParticle Offset: 0x5EC
					constexpr auto b_init_from_killed_parent_particles = 0x5F0; // Name: m_bInitFromKilledParentParticles Offset: 0x5F0
					constexpr auto n_event_type = 0x5F4; // Name: m_nEventType Offset: 0x5F4
					constexpr auto n_snapshot_control_point = 0x5F8; // Name: m_nSnapshotControlPoint Offset: 0x5F8
					constexpr auto n_limit_per_update = 0x5FC; // Name: m_nLimitPerUpdate Offset: 0x5FC
					constexpr auto b_force_emit_on_first_update = 0x600; // Name: m_bForceEmitOnFirstUpdate Offset: 0x600
					constexpr auto b_force_emit_on_last_update = 0x601; // Name: m_bForceEmitOnLastUpdate Offset: 0x601
				} // namespace C_OP_ContinuousEmitter

				namespace C_OP_SetUserEvent {
					constexpr auto fl_input = 0x1C0; // Name: m_flInput Offset: 0x1C0
					constexpr auto fl_rising_edge = 0x320; // Name: m_flRisingEdge Offset: 0x320
					constexpr auto n_rising_event_type = 0x480; // Name: m_nRisingEventType Offset: 0x480
					constexpr auto fl_falling_edge = 0x488; // Name: m_flFallingEdge Offset: 0x488
					constexpr auto n_falling_event_type = 0x5E8; // Name: m_nFallingEventType Offset: 0x5E8
				} // namespace C_OP_SetUserEvent

				namespace C_OP_OscillateVectorSimple {
					constexpr auto rate = 0x1C0; // Name: m_Rate Offset: 0x1C0
					constexpr auto frequency = 0x1CC; // Name: m_Frequency Offset: 0x1CC
					constexpr auto n_field = 0x1D8; // Name: m_nField Offset: 0x1D8
					constexpr auto fl_osc_mult = 0x1DC; // Name: m_flOscMult Offset: 0x1DC
					constexpr auto fl_osc_add = 0x1E0; // Name: m_flOscAdd Offset: 0x1E0
					constexpr auto b_offset = 0x1E4; // Name: m_bOffset Offset: 0x1E4
				} // namespace C_OP_OscillateVectorSimple

				namespace C_INIT_SequenceLifeTime {
					constexpr auto fl_framerate = 0x1C8; // Name: m_flFramerate Offset: 0x1C8
				} // namespace C_INIT_SequenceLifeTime

				namespace C_INIT_MoveBetweenPoints {
					constexpr auto fl_speed_min = 0x1C8; // Name: m_flSpeedMin Offset: 0x1C8
					constexpr auto fl_speed_max = 0x328; // Name: m_flSpeedMax Offset: 0x328
					constexpr auto fl_end_spread = 0x488; // Name: m_flEndSpread Offset: 0x488
					constexpr auto fl_start_offset = 0x5E8; // Name: m_flStartOffset Offset: 0x5E8
					constexpr auto fl_end_offset = 0x748; // Name: m_flEndOffset Offset: 0x748
					constexpr auto n_end_control_point_number = 0x8A8; // Name: m_nEndControlPointNumber Offset: 0x8A8
					constexpr auto b_trail_bias = 0x8AC; // Name: m_bTrailBias Offset: 0x8AC
				} // namespace C_INIT_MoveBetweenPoints

				namespace C_INIT_SetAttributeToScalarExpression {
					constexpr auto n_expression = 0x1C8; // Name: m_nExpression Offset: 0x1C8
					constexpr auto fl_input1 = 0x1D0; // Name: m_flInput1 Offset: 0x1D0
					constexpr auto fl_input2 = 0x330; // Name: m_flInput2 Offset: 0x330
					constexpr auto fl_output_remap = 0x490; // Name: m_flOutputRemap Offset: 0x490
					constexpr auto n_output_field = 0x5F0; // Name: m_nOutputField Offset: 0x5F0
					constexpr auto n_set_method = 0x5F4; // Name: m_nSetMethod Offset: 0x5F4
				} // namespace C_INIT_SetAttributeToScalarExpression

				namespace C_OP_RemapNamedModelSequenceOnceTimed {
				} // namespace C_OP_RemapNamedModelSequenceOnceTimed

				namespace C_INIT_RemapScalar {
					constexpr auto n_field_input = 0x1C8; // Name: m_nFieldInput Offset: 0x1C8
					constexpr auto n_field_output = 0x1CC; // Name: m_nFieldOutput Offset: 0x1CC
					constexpr auto fl_input_min = 0x1D0; // Name: m_flInputMin Offset: 0x1D0
					constexpr auto fl_input_max = 0x1D4; // Name: m_flInputMax Offset: 0x1D4
					constexpr auto fl_output_min = 0x1D8; // Name: m_flOutputMin Offset: 0x1D8
					constexpr auto fl_output_max = 0x1DC; // Name: m_flOutputMax Offset: 0x1DC
					constexpr auto fl_start_time = 0x1E0; // Name: m_flStartTime Offset: 0x1E0
					constexpr auto fl_end_time = 0x1E4; // Name: m_flEndTime Offset: 0x1E4
					constexpr auto n_set_method = 0x1E8; // Name: m_nSetMethod Offset: 0x1E8
					constexpr auto b_active_range = 0x1EC; // Name: m_bActiveRange Offset: 0x1EC
					constexpr auto fl_remap_bias = 0x1F0; // Name: m_flRemapBias Offset: 0x1F0
				} // namespace C_INIT_RemapScalar

				namespace C_OP_QuantizeFloat {
					constexpr auto input_value = 0x1C0; // Name: m_InputValue Offset: 0x1C0
					constexpr auto n_output_field = 0x320; // Name: m_nOutputField Offset: 0x320
				} // namespace C_OP_QuantizeFloat

				namespace C_OP_DriveCPFromGlobalSoundFloat {
					constexpr auto n_output_control_point = 0x1C8; // Name: m_nOutputControlPoint Offset: 0x1C8
					constexpr auto n_output_field = 0x1CC; // Name: m_nOutputField Offset: 0x1CC
					constexpr auto fl_input_min = 0x1D0; // Name: m_flInputMin Offset: 0x1D0
					constexpr auto fl_input_max = 0x1D4; // Name: m_flInputMax Offset: 0x1D4
					constexpr auto fl_output_min = 0x1D8; // Name: m_flOutputMin Offset: 0x1D8
					constexpr auto fl_output_max = 0x1DC; // Name: m_flOutputMax Offset: 0x1DC
					constexpr auto stack_name = 0x1E0; // Name: m_StackName Offset: 0x1E0
					constexpr auto operator_name = 0x1E8; // Name: m_OperatorName Offset: 0x1E8
					constexpr auto field_name = 0x1F0; // Name: m_FieldName Offset: 0x1F0
				} // namespace C_OP_DriveCPFromGlobalSoundFloat

				namespace C_OP_BasicMovement {
					constexpr auto gravity = 0x1C0; // Name: m_Gravity Offset: 0x1C0
					constexpr auto f_drag = 0x838; // Name: m_fDrag Offset: 0x838
					constexpr auto mass_controls = 0x998; // Name: m_massControls Offset: 0x998
					constexpr auto n_max_constraint_passes = 0xDC0; // Name: m_nMaxConstraintPasses Offset: 0xDC0
					constexpr auto b_use_new_code = 0xDC4; // Name: m_bUseNewCode Offset: 0xDC4
				} // namespace C_OP_BasicMovement

				namespace C_INIT_RandomNamedModelElement {
					constexpr auto h_model = 0x1C8; // Name: m_hModel Offset: 0x1C8
					constexpr auto names = 0x1D0; // Name: m_names Offset: 0x1D0
					constexpr auto b_shuffle = 0x1E8; // Name: m_bShuffle Offset: 0x1E8
					constexpr auto b_linear = 0x1E9; // Name: m_bLinear Offset: 0x1E9
					constexpr auto b_model_from_renderer = 0x1EA; // Name: m_bModelFromRenderer Offset: 0x1EA
					constexpr auto n_field_output = 0x1EC; // Name: m_nFieldOutput Offset: 0x1EC
				} // namespace C_INIT_RandomNamedModelElement

				namespace C_INIT_InitFromParentKilled {
					constexpr auto n_attribute_to_copy = 0x1C8; // Name: m_nAttributeToCopy Offset: 0x1C8
					constexpr auto n_event_type = 0x1CC; // Name: m_nEventType Offset: 0x1CC
				} // namespace C_INIT_InitFromParentKilled

				namespace C_OP_Callback {
				} // namespace C_OP_Callback

				namespace C_OP_RemapTransformVisibilityToVector {
					constexpr auto n_set_method = 0x1C0; // Name: m_nSetMethod Offset: 0x1C0
					constexpr auto transform_input = 0x1C8; // Name: m_TransformInput Offset: 0x1C8
					constexpr auto n_field_output = 0x230; // Name: m_nFieldOutput Offset: 0x230
					constexpr auto fl_input_min = 0x234; // Name: m_flInputMin Offset: 0x234
					constexpr auto fl_input_max = 0x238; // Name: m_flInputMax Offset: 0x238
					constexpr auto vec_output_min = 0x23C; // Name: m_vecOutputMin Offset: 0x23C
					constexpr auto vec_output_max = 0x248; // Name: m_vecOutputMax Offset: 0x248
					constexpr auto fl_radius = 0x254; // Name: m_flRadius Offset: 0x254
				} // namespace C_OP_RemapTransformVisibilityToVector

				namespace CParticleFunction {
					constexpr auto fl_op_strength = 0x8; // Name: m_flOpStrength Offset: 0x8
					constexpr auto n_op_end_cap_state = 0x168; // Name: m_nOpEndCapState Offset: 0x168
					constexpr auto fl_op_start_fade_in_time = 0x16C; // Name: m_flOpStartFadeInTime Offset: 0x16C
					constexpr auto fl_op_end_fade_in_time = 0x170; // Name: m_flOpEndFadeInTime Offset: 0x170
					constexpr auto fl_op_start_fade_out_time = 0x174; // Name: m_flOpStartFadeOutTime Offset: 0x174
					constexpr auto fl_op_end_fade_out_time = 0x178; // Name: m_flOpEndFadeOutTime Offset: 0x178
					constexpr auto fl_op_fade_oscillate_period = 0x17C; // Name: m_flOpFadeOscillatePeriod Offset: 0x17C
					constexpr auto b_normalize_to_stop_time = 0x180; // Name: m_bNormalizeToStopTime Offset: 0x180
					constexpr auto fl_op_time_offset_min = 0x184; // Name: m_flOpTimeOffsetMin Offset: 0x184
					constexpr auto fl_op_time_offset_max = 0x188; // Name: m_flOpTimeOffsetMax Offset: 0x188
					constexpr auto n_op_time_offset_seed = 0x18C; // Name: m_nOpTimeOffsetSeed Offset: 0x18C
					constexpr auto n_op_time_scale_seed = 0x190; // Name: m_nOpTimeScaleSeed Offset: 0x190
					constexpr auto fl_op_time_scale_min = 0x194; // Name: m_flOpTimeScaleMin Offset: 0x194
					constexpr auto fl_op_time_scale_max = 0x198; // Name: m_flOpTimeScaleMax Offset: 0x198
					constexpr auto b_disable_operator = 0x19E; // Name: m_bDisableOperator Offset: 0x19E
					constexpr auto notes = 0x1A0; // Name: m_Notes Offset: 0x1A0
				} // namespace CParticleFunction

				namespace C_INIT_RandomYaw {
				} // namespace C_INIT_RandomYaw

				namespace C_OP_GlobalLight {
					constexpr auto fl_scale = 0x1C0; // Name: m_flScale Offset: 0x1C0
					constexpr auto b_clamp_lower_range = 0x1C4; // Name: m_bClampLowerRange Offset: 0x1C4
					constexpr auto b_clamp_upper_range = 0x1C5; // Name: m_bClampUpperRange Offset: 0x1C5
				} // namespace C_OP_GlobalLight

				namespace C_OP_SetPerChildControlPointFromAttribute {
					constexpr auto n_child_group_id = 0x1C0; // Name: m_nChildGroupID Offset: 0x1C0
					constexpr auto n_first_control_point = 0x1C4; // Name: m_nFirstControlPoint Offset: 0x1C4
					constexpr auto n_num_control_points = 0x1C8; // Name: m_nNumControlPoints Offset: 0x1C8
					constexpr auto n_particle_increment = 0x1CC; // Name: m_nParticleIncrement Offset: 0x1CC
					constexpr auto n_first_source_point = 0x1D0; // Name: m_nFirstSourcePoint Offset: 0x1D0
					constexpr auto b_num_based_on_particle_count = 0x1D4; // Name: m_bNumBasedOnParticleCount Offset: 0x1D4
					constexpr auto n_attribute_to_read = 0x1D8; // Name: m_nAttributeToRead Offset: 0x1D8
					constexpr auto n_cpfield = 0x1DC; // Name: m_nCPField Offset: 0x1DC
				} // namespace C_OP_SetPerChildControlPointFromAttribute

				namespace C_OP_RemapScalarEndCap {
					constexpr auto n_field_input = 0x1C0; // Name: m_nFieldInput Offset: 0x1C0
					constexpr auto n_field_output = 0x1C4; // Name: m_nFieldOutput Offset: 0x1C4
					constexpr auto fl_input_min = 0x1C8; // Name: m_flInputMin Offset: 0x1C8
					constexpr auto fl_input_max = 0x1CC; // Name: m_flInputMax Offset: 0x1CC
					constexpr auto fl_output_min = 0x1D0; // Name: m_flOutputMin Offset: 0x1D0
					constexpr auto fl_output_max = 0x1D4; // Name: m_flOutputMax Offset: 0x1D4
				} // namespace C_OP_RemapScalarEndCap

				namespace C_OP_SetParentControlPointsToChildCP {
					constexpr auto n_child_group_id = 0x1C8; // Name: m_nChildGroupID Offset: 0x1C8
					constexpr auto n_child_control_point = 0x1CC; // Name: m_nChildControlPoint Offset: 0x1CC
					constexpr auto n_num_control_points = 0x1D0; // Name: m_nNumControlPoints Offset: 0x1D0
					constexpr auto n_first_source_point = 0x1D4; // Name: m_nFirstSourcePoint Offset: 0x1D4
					constexpr auto b_set_orientation = 0x1D8; // Name: m_bSetOrientation Offset: 0x1D8
				} // namespace C_OP_SetParentControlPointsToChildCP

				namespace C_OP_SDFForce {
					constexpr auto fl_force_scale = 0x1D0; // Name: m_flForceScale Offset: 0x1D0
				} // namespace C_OP_SDFForce

				namespace C_OP_SetVectorAttributeToVectorExpression {
					constexpr auto n_expression = 0x1C0; // Name: m_nExpression Offset: 0x1C0
					constexpr auto v_input1 = 0x1C8; // Name: m_vInput1 Offset: 0x1C8
					constexpr auto v_input2 = 0x840; // Name: m_vInput2 Offset: 0x840
					constexpr auto n_output_field = 0xEB8; // Name: m_nOutputField Offset: 0xEB8
					constexpr auto n_set_method = 0xEBC; // Name: m_nSetMethod Offset: 0xEBC
					constexpr auto b_normalized_output = 0xEC0; // Name: m_bNormalizedOutput Offset: 0xEC0
				} // namespace C_OP_SetVectorAttributeToVectorExpression

				namespace C_OP_RemapCPtoVector {
					constexpr auto n_cpinput = 0x1C0; // Name: m_nCPInput Offset: 0x1C0
					constexpr auto n_field_output = 0x1C4; // Name: m_nFieldOutput Offset: 0x1C4
					constexpr auto n_local_space_cp = 0x1C8; // Name: m_nLocalSpaceCP Offset: 0x1C8
					constexpr auto v_input_min = 0x1CC; // Name: m_vInputMin Offset: 0x1CC
					constexpr auto v_input_max = 0x1D8; // Name: m_vInputMax Offset: 0x1D8
					constexpr auto v_output_min = 0x1E4; // Name: m_vOutputMin Offset: 0x1E4
					constexpr auto v_output_max = 0x1F0; // Name: m_vOutputMax Offset: 0x1F0
					constexpr auto fl_start_time = 0x1FC; // Name: m_flStartTime Offset: 0x1FC
					constexpr auto fl_end_time = 0x200; // Name: m_flEndTime Offset: 0x200
					constexpr auto fl_interp_rate = 0x204; // Name: m_flInterpRate Offset: 0x204
					constexpr auto n_set_method = 0x208; // Name: m_nSetMethod Offset: 0x208
					constexpr auto b_offset = 0x20C; // Name: m_bOffset Offset: 0x20C
					constexpr auto b_accelerate = 0x20D; // Name: m_bAccelerate Offset: 0x20D
				} // namespace C_OP_RemapCPtoVector

				namespace C_OP_BoxConstraint {
					constexpr auto vec_min = 0x1C0; // Name: m_vecMin Offset: 0x1C0
					constexpr auto vec_max = 0x838; // Name: m_vecMax Offset: 0x838
					constexpr auto n_cp = 0xEB0; // Name: m_nCP Offset: 0xEB0
					constexpr auto b_local_space = 0xEB4; // Name: m_bLocalSpace Offset: 0xEB4
					constexpr auto b_account_for_radius = 0xEB5; // Name: m_bAccountForRadius Offset: 0xEB5
				} // namespace C_OP_BoxConstraint

				namespace C_OP_SetVec {
					constexpr auto input_value = 0x1C0; // Name: m_InputValue Offset: 0x1C0
					constexpr auto n_output_field = 0x838; // Name: m_nOutputField Offset: 0x838
					constexpr auto n_set_method = 0x83C; // Name: m_nSetMethod Offset: 0x83C
					constexpr auto lerp = 0x840; // Name: m_Lerp Offset: 0x840
					constexpr auto b_normalized_output = 0x9A0; // Name: m_bNormalizedOutput Offset: 0x9A0
				} // namespace C_OP_SetVec

				namespace C_OP_ClientPhysics {
					constexpr auto str_physics_type = 0x210; // Name: m_strPhysicsType Offset: 0x210
					constexpr auto b_start_asleep = 0x218; // Name: m_bStartAsleep Offset: 0x218
					constexpr auto fl_player_wake_radius = 0x220; // Name: m_flPlayerWakeRadius Offset: 0x220
					constexpr auto fl_vehicle_wake_radius = 0x380; // Name: m_flVehicleWakeRadius Offset: 0x380
					constexpr auto b_use_high_quality_simulation = 0x4E0; // Name: m_bUseHighQualitySimulation Offset: 0x4E0
					constexpr auto n_max_particle_count = 0x4E4; // Name: m_nMaxParticleCount Offset: 0x4E4
					constexpr auto b_respect_exclusion_volumes = 0x4E8; // Name: m_bRespectExclusionVolumes Offset: 0x4E8
					constexpr auto b_kill_particles = 0x4E9; // Name: m_bKillParticles Offset: 0x4E9
					constexpr auto b_delete_sim = 0x4EA; // Name: m_bDeleteSim Offset: 0x4EA
					constexpr auto n_control_point = 0x4EC; // Name: m_nControlPoint Offset: 0x4EC
					constexpr auto n_color_blend_type = 0x4F0; // Name: m_nColorBlendType Offset: 0x4F0
				} // namespace C_OP_ClientPhysics

				namespace C_INIT_CreatePhyllotaxis {
					constexpr auto n_control_point_number = 0x1C8; // Name: m_nControlPointNumber Offset: 0x1C8
					constexpr auto n_scale_cp = 0x1CC; // Name: m_nScaleCP Offset: 0x1CC
					constexpr auto n_component = 0x1D0; // Name: m_nComponent Offset: 0x1D0
					constexpr auto f_rad_cent_core = 0x1D4; // Name: m_fRadCentCore Offset: 0x1D4
					constexpr auto f_rad_per_point = 0x1D8; // Name: m_fRadPerPoint Offset: 0x1D8
					constexpr auto f_rad_per_point_to = 0x1DC; // Name: m_fRadPerPointTo Offset: 0x1DC
					constexpr auto fpoint_angle = 0x1E0; // Name: m_fpointAngle Offset: 0x1E0
					constexpr auto fsize_overall = 0x1E4; // Name: m_fsizeOverall Offset: 0x1E4
					constexpr auto f_rad_bias = 0x1E8; // Name: m_fRadBias Offset: 0x1E8
					constexpr auto f_min_rad = 0x1EC; // Name: m_fMinRad Offset: 0x1EC
					constexpr auto f_dist_bias = 0x1F0; // Name: m_fDistBias Offset: 0x1F0
					constexpr auto b_use_local_coords = 0x1F4; // Name: m_bUseLocalCoords Offset: 0x1F4
					constexpr auto b_use_with_cont_emit = 0x1F5; // Name: m_bUseWithContEmit Offset: 0x1F5
					constexpr auto b_use_orig_radius = 0x1F6; // Name: m_bUseOrigRadius Offset: 0x1F6
				} // namespace C_INIT_CreatePhyllotaxis

				namespace C_INIT_RandomLifeTime {
					constexpr auto f_lifetime_min = 0x1C8; // Name: m_fLifetimeMin Offset: 0x1C8
					constexpr auto f_lifetime_max = 0x1CC; // Name: m_fLifetimeMax Offset: 0x1CC
					constexpr auto f_lifetime_rand_exponent = 0x1D0; // Name: m_fLifetimeRandExponent Offset: 0x1D0
				} // namespace C_INIT_RandomLifeTime

				namespace C_OP_RenderVRHapticEvent {
					constexpr auto n_hand = 0x210; // Name: m_nHand Offset: 0x210
					constexpr auto n_output_hand_cp = 0x214; // Name: m_nOutputHandCP Offset: 0x214
					constexpr auto n_output_field = 0x218; // Name: m_nOutputField Offset: 0x218
					constexpr auto fl_amplitude = 0x220; // Name: m_flAmplitude Offset: 0x220
				} // namespace C_OP_RenderVRHapticEvent

				namespace C_INIT_RemapParticleCountToNamedModelSequenceScalar {
				} // namespace C_INIT_RemapParticleCountToNamedModelSequenceScalar

				namespace C_INIT_RandomRadius {
					constexpr auto fl_radius_min = 0x1C8; // Name: m_flRadiusMin Offset: 0x1C8
					constexpr auto fl_radius_max = 0x1CC; // Name: m_flRadiusMax Offset: 0x1CC
					constexpr auto fl_radius_rand_exponent = 0x1D0; // Name: m_flRadiusRandExponent Offset: 0x1D0
				} // namespace C_INIT_RandomRadius

				namespace C_OP_DifferencePreviousParticle {
					constexpr auto n_field_input = 0x1C0; // Name: m_nFieldInput Offset: 0x1C0
					constexpr auto n_field_output = 0x1C4; // Name: m_nFieldOutput Offset: 0x1C4
					constexpr auto fl_input_min = 0x1C8; // Name: m_flInputMin Offset: 0x1C8
					constexpr auto fl_input_max = 0x1CC; // Name: m_flInputMax Offset: 0x1CC
					constexpr auto fl_output_min = 0x1D0; // Name: m_flOutputMin Offset: 0x1D0
					constexpr auto fl_output_max = 0x1D4; // Name: m_flOutputMax Offset: 0x1D4
					constexpr auto n_set_method = 0x1D8; // Name: m_nSetMethod Offset: 0x1D8
					constexpr auto b_active_range = 0x1DC; // Name: m_bActiveRange Offset: 0x1DC
					constexpr auto b_set_previous_particle = 0x1DD; // Name: m_bSetPreviousParticle Offset: 0x1DD
				} // namespace C_OP_DifferencePreviousParticle

				namespace C_OP_Orient2DRelToCP {
					constexpr auto fl_rot_offset = 0x1C0; // Name: m_flRotOffset Offset: 0x1C0
					constexpr auto fl_spin_strength = 0x1C4; // Name: m_flSpinStrength Offset: 0x1C4
					constexpr auto n_cp = 0x1C8; // Name: m_nCP Offset: 0x1C8
					constexpr auto n_field_output = 0x1CC; // Name: m_nFieldOutput Offset: 0x1CC
				} // namespace C_OP_Orient2DRelToCP

				namespace TextureControls_t {
					constexpr auto fl_final_texture_scale_u = 0x0; // Name: m_flFinalTextureScaleU Offset: 0x0
					constexpr auto fl_final_texture_scale_v = 0x160; // Name: m_flFinalTextureScaleV Offset: 0x160
					constexpr auto fl_final_texture_offset_u = 0x2C0; // Name: m_flFinalTextureOffsetU Offset: 0x2C0
					constexpr auto fl_final_texture_offset_v = 0x420; // Name: m_flFinalTextureOffsetV Offset: 0x420
					constexpr auto fl_final_texture_uvrotation = 0x580; // Name: m_flFinalTextureUVRotation Offset: 0x580
					constexpr auto fl_zoom_scale = 0x6E0; // Name: m_flZoomScale Offset: 0x6E0
					constexpr auto fl_distortion = 0x840; // Name: m_flDistortion Offset: 0x840
					constexpr auto b_randomize_offsets = 0x9A0; // Name: m_bRandomizeOffsets Offset: 0x9A0
					constexpr auto b_clamp_uvs = 0x9A1; // Name: m_bClampUVs Offset: 0x9A1
					constexpr auto n_per_particle_blend = 0x9A4; // Name: m_nPerParticleBlend Offset: 0x9A4
					constexpr auto n_per_particle_scale = 0x9A8; // Name: m_nPerParticleScale Offset: 0x9A8
					constexpr auto n_per_particle_offset_u = 0x9AC; // Name: m_nPerParticleOffsetU Offset: 0x9AC
					constexpr auto n_per_particle_offset_v = 0x9B0; // Name: m_nPerParticleOffsetV Offset: 0x9B0
					constexpr auto n_per_particle_rotation = 0x9B4; // Name: m_nPerParticleRotation Offset: 0x9B4
					constexpr auto n_per_particle_zoom = 0x9B8; // Name: m_nPerParticleZoom Offset: 0x9B8
					constexpr auto n_per_particle_distortion = 0x9BC; // Name: m_nPerParticleDistortion Offset: 0x9BC
				} // namespace TextureControls_t

				namespace C_INIT_SetHitboxToModel {
					constexpr auto n_control_point_number = 0x1C8; // Name: m_nControlPointNumber Offset: 0x1C8
					constexpr auto n_force_in_model = 0x1CC; // Name: m_nForceInModel Offset: 0x1CC
					constexpr auto b_even_distribution = 0x1D0; // Name: m_bEvenDistribution Offset: 0x1D0
					constexpr auto n_desired_hitbox = 0x1D4; // Name: m_nDesiredHitbox Offset: 0x1D4
					constexpr auto vec_hit_box_scale = 0x1D8; // Name: m_vecHitBoxScale Offset: 0x1D8
					constexpr auto vec_direction_bias = 0x850; // Name: m_vecDirectionBias Offset: 0x850
					constexpr auto b_maintain_hitbox = 0x85C; // Name: m_bMaintainHitbox Offset: 0x85C
					constexpr auto b_use_bones = 0x85D; // Name: m_bUseBones Offset: 0x85D
					constexpr auto hitbox_set_name = 0x85E; // Name: m_HitboxSetName Offset: 0x85E
					constexpr auto fl_shell_size = 0x8E0; // Name: m_flShellSize Offset: 0x8E0
				} // namespace C_INIT_SetHitboxToModel

				namespace ControlPointReference_t {
					constexpr auto control_point_name_string = 0x0; // Name: m_controlPointNameString Offset: 0x0
					constexpr auto v_offset_from_control_point = 0x4; // Name: m_vOffsetFromControlPoint Offset: 0x4
					constexpr auto b_offset_in_local_space = 0x10; // Name: m_bOffsetInLocalSpace Offset: 0x10
				} // namespace ControlPointReference_t

				namespace C_OP_Noise {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto fl_output_min = 0x1C4; // Name: m_flOutputMin Offset: 0x1C4
					constexpr auto fl_output_max = 0x1C8; // Name: m_flOutputMax Offset: 0x1C8
					constexpr auto fl4_noise_scale = 0x1CC; // Name: m_fl4NoiseScale Offset: 0x1CC
					constexpr auto b_additive = 0x1D0; // Name: m_bAdditive Offset: 0x1D0
					constexpr auto fl_noise_animation_time_scale = 0x1D4; // Name: m_flNoiseAnimationTimeScale Offset: 0x1D4
				} // namespace C_OP_Noise

				namespace C_OP_SetControlPointToVectorExpression {
					constexpr auto n_expression = 0x1C8; // Name: m_nExpression Offset: 0x1C8
					constexpr auto n_output_cp = 0x1CC; // Name: m_nOutputCP Offset: 0x1CC
					constexpr auto v_input1 = 0x1D0; // Name: m_vInput1 Offset: 0x1D0
					constexpr auto v_input2 = 0x848; // Name: m_vInput2 Offset: 0x848
					constexpr auto b_normalized_output = 0xEC0; // Name: m_bNormalizedOutput Offset: 0xEC0
				} // namespace C_OP_SetControlPointToVectorExpression

				namespace C_OP_RemapNamedModelMeshGroupOnceTimed {
				} // namespace C_OP_RemapNamedModelMeshGroupOnceTimed

				namespace C_INIT_RemapSpeedToScalar {
					constexpr auto n_field_output = 0x1C8; // Name: m_nFieldOutput Offset: 0x1C8
					constexpr auto n_control_point_number = 0x1CC; // Name: m_nControlPointNumber Offset: 0x1CC
					constexpr auto fl_start_time = 0x1D0; // Name: m_flStartTime Offset: 0x1D0
					constexpr auto fl_end_time = 0x1D4; // Name: m_flEndTime Offset: 0x1D4
					constexpr auto fl_input_min = 0x1D8; // Name: m_flInputMin Offset: 0x1D8
					constexpr auto fl_input_max = 0x1DC; // Name: m_flInputMax Offset: 0x1DC
					constexpr auto fl_output_min = 0x1E0; // Name: m_flOutputMin Offset: 0x1E0
					constexpr auto fl_output_max = 0x1E4; // Name: m_flOutputMax Offset: 0x1E4
					constexpr auto n_set_method = 0x1E8; // Name: m_nSetMethod Offset: 0x1E8
					constexpr auto b_per_particle = 0x1EC; // Name: m_bPerParticle Offset: 0x1EC
				} // namespace C_INIT_RemapSpeedToScalar

				namespace C_INIT_RemapQAnglesToRotation {
					constexpr auto transform_input = 0x1C8; // Name: m_TransformInput Offset: 0x1C8
				} // namespace C_INIT_RemapQAnglesToRotation

				namespace C_INIT_PositionWarp {
					constexpr auto vec_warp_min = 0x1C8; // Name: m_vecWarpMin Offset: 0x1C8
					constexpr auto vec_warp_max = 0x840; // Name: m_vecWarpMax Offset: 0x840
					constexpr auto n_scale_control_point_number = 0xEB8; // Name: m_nScaleControlPointNumber Offset: 0xEB8
					constexpr auto n_control_point_number = 0xEBC; // Name: m_nControlPointNumber Offset: 0xEBC
					constexpr auto n_radius_component = 0xEC0; // Name: m_nRadiusComponent Offset: 0xEC0
					constexpr auto fl_warp_time = 0xEC4; // Name: m_flWarpTime Offset: 0xEC4
					constexpr auto fl_warp_start_time = 0xEC8; // Name: m_flWarpStartTime Offset: 0xEC8
					constexpr auto fl_prev_pos_scale = 0xECC; // Name: m_flPrevPosScale Offset: 0xECC
					constexpr auto b_invert_warp = 0xED0; // Name: m_bInvertWarp Offset: 0xED0
					constexpr auto b_use_count = 0xED1; // Name: m_bUseCount Offset: 0xED1
				} // namespace C_INIT_PositionWarp

				namespace C_OP_SDFConstraint {
					constexpr auto fl_min_dist = 0x1C0; // Name: m_flMinDist Offset: 0x1C0
					constexpr auto fl_max_dist = 0x320; // Name: m_flMaxDist Offset: 0x320
					constexpr auto n_max_iterations = 0x480; // Name: m_nMaxIterations Offset: 0x480
				} // namespace C_OP_SDFConstraint

				namespace C_INIT_RemapParticleCountToNamedModelMeshGroupScalar {
				} // namespace C_INIT_RemapParticleCountToNamedModelMeshGroupScalar

				namespace C_OP_SetControlPointFieldToScalarExpression {
					constexpr auto n_expression = 0x1C8; // Name: m_nExpression Offset: 0x1C8
					constexpr auto fl_input1 = 0x1D0; // Name: m_flInput1 Offset: 0x1D0
					constexpr auto fl_input2 = 0x330; // Name: m_flInput2 Offset: 0x330
					constexpr auto fl_output_remap = 0x490; // Name: m_flOutputRemap Offset: 0x490
					constexpr auto n_output_cp = 0x5F0; // Name: m_nOutputCP Offset: 0x5F0
					constexpr auto n_out_vector_field = 0x5F4; // Name: m_nOutVectorField Offset: 0x5F4
				} // namespace C_OP_SetControlPointFieldToScalarExpression

				namespace C_OP_SetFloatAttributeToVectorExpression {
					constexpr auto n_expression = 0x1C0; // Name: m_nExpression Offset: 0x1C0
					constexpr auto v_input1 = 0x1C8; // Name: m_vInput1 Offset: 0x1C8
					constexpr auto v_input2 = 0x840; // Name: m_vInput2 Offset: 0x840
					constexpr auto fl_output_remap = 0xEB8; // Name: m_flOutputRemap Offset: 0xEB8
					constexpr auto n_output_field = 0x1018; // Name: m_nOutputField Offset: 0x1018
					constexpr auto n_set_method = 0x101C; // Name: m_nSetMethod Offset: 0x101C
				} // namespace C_OP_SetFloatAttributeToVectorExpression

				namespace CParticleFunctionForce {
				} // namespace CParticleFunctionForce

				namespace C_OP_RampScalarSpline {
					constexpr auto rate_min = 0x1C0; // Name: m_RateMin Offset: 0x1C0
					constexpr auto rate_max = 0x1C4; // Name: m_RateMax Offset: 0x1C4
					constexpr auto fl_start_time_min = 0x1C8; // Name: m_flStartTime_min Offset: 0x1C8
					constexpr auto fl_start_time_max = 0x1CC; // Name: m_flStartTime_max Offset: 0x1CC
					constexpr auto fl_end_time_min = 0x1D0; // Name: m_flEndTime_min Offset: 0x1D0
					constexpr auto fl_end_time_max = 0x1D4; // Name: m_flEndTime_max Offset: 0x1D4
					constexpr auto fl_bias = 0x1D8; // Name: m_flBias Offset: 0x1D8
					constexpr auto n_field = 0x200; // Name: m_nField Offset: 0x200
					constexpr auto b_proportional_op = 0x204; // Name: m_bProportionalOp Offset: 0x204
					constexpr auto b_ease_out = 0x205; // Name: m_bEaseOut Offset: 0x205
				} // namespace C_OP_RampScalarSpline

				namespace C_INIT_RandomVectorComponent {
					constexpr auto fl_min = 0x1C8; // Name: m_flMin Offset: 0x1C8
					constexpr auto fl_max = 0x1CC; // Name: m_flMax Offset: 0x1CC
					constexpr auto n_field_output = 0x1D0; // Name: m_nFieldOutput Offset: 0x1D0
					constexpr auto n_component = 0x1D4; // Name: m_nComponent Offset: 0x1D4
				} // namespace C_INIT_RandomVectorComponent

				namespace C_OP_FadeAndKillForTracers {
					constexpr auto fl_start_fade_in_time = 0x1C0; // Name: m_flStartFadeInTime Offset: 0x1C0
					constexpr auto fl_end_fade_in_time = 0x1C4; // Name: m_flEndFadeInTime Offset: 0x1C4
					constexpr auto fl_start_fade_out_time = 0x1C8; // Name: m_flStartFadeOutTime Offset: 0x1C8
					constexpr auto fl_end_fade_out_time = 0x1CC; // Name: m_flEndFadeOutTime Offset: 0x1CC
					constexpr auto fl_start_alpha = 0x1D0; // Name: m_flStartAlpha Offset: 0x1D0
					constexpr auto fl_end_alpha = 0x1D4; // Name: m_flEndAlpha Offset: 0x1D4
				} // namespace C_OP_FadeAndKillForTracers

				namespace C_OP_InheritFromParentParticles {
					constexpr auto fl_scale = 0x1C0; // Name: m_flScale Offset: 0x1C0
					constexpr auto n_field_output = 0x1C4; // Name: m_nFieldOutput Offset: 0x1C4
					constexpr auto n_increment = 0x1C8; // Name: m_nIncrement Offset: 0x1C8
					constexpr auto b_random_distribution = 0x1CC; // Name: m_bRandomDistribution Offset: 0x1CC
				} // namespace C_OP_InheritFromParentParticles

				namespace C_INIT_SetVectorAttributeToVectorExpression {
					constexpr auto n_expression = 0x1C8; // Name: m_nExpression Offset: 0x1C8
					constexpr auto v_input1 = 0x1D0; // Name: m_vInput1 Offset: 0x1D0
					constexpr auto v_input2 = 0x848; // Name: m_vInput2 Offset: 0x848
					constexpr auto n_output_field = 0xEC0; // Name: m_nOutputField Offset: 0xEC0
					constexpr auto n_set_method = 0xEC4; // Name: m_nSetMethod Offset: 0xEC4
					constexpr auto b_normalized_output = 0xEC8; // Name: m_bNormalizedOutput Offset: 0xEC8
				} // namespace C_INIT_SetVectorAttributeToVectorExpression

				namespace C_OP_DirectionBetweenVecsToVec {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto vec_point1 = 0x1C8; // Name: m_vecPoint1 Offset: 0x1C8
					constexpr auto vec_point2 = 0x840; // Name: m_vecPoint2 Offset: 0x840
				} // namespace C_OP_DirectionBetweenVecsToVec

				namespace C_OP_MovementLoopInsideSphere {
					constexpr auto n_cp = 0x1C0; // Name: m_nCP Offset: 0x1C0
					constexpr auto fl_distance = 0x1C8; // Name: m_flDistance Offset: 0x1C8
					constexpr auto vec_scale = 0x328; // Name: m_vecScale Offset: 0x328
					constexpr auto n_dist_sqr_attr = 0x9A0; // Name: m_nDistSqrAttr Offset: 0x9A0
				} // namespace C_OP_MovementLoopInsideSphere

				namespace C_OP_RenderSimpleModelCollection {
					constexpr auto b_center_offset = 0x210; // Name: m_bCenterOffset Offset: 0x210
					constexpr auto h_model = 0x218; // Name: m_hModel Offset: 0x218
					constexpr auto model_input = 0x220; // Name: m_modelInput Offset: 0x220
					constexpr auto f_size_cull_scale = 0x280; // Name: m_fSizeCullScale Offset: 0x280
					constexpr auto b_disable_shadows = 0x3E0; // Name: m_bDisableShadows Offset: 0x3E0
					constexpr auto b_disable_motion_blur = 0x3E1; // Name: m_bDisableMotionBlur Offset: 0x3E1
					constexpr auto b_accepts_decals = 0x3E2; // Name: m_bAcceptsDecals Offset: 0x3E2
					constexpr auto n_angular_velocity_field = 0x3E4; // Name: m_nAngularVelocityField Offset: 0x3E4
				} // namespace C_OP_RenderSimpleModelCollection

				namespace C_OP_SequenceFromModel {
					constexpr auto n_control_point_number = 0x1C0; // Name: m_nControlPointNumber Offset: 0x1C0
					constexpr auto n_field_output = 0x1C4; // Name: m_nFieldOutput Offset: 0x1C4
					constexpr auto n_field_output_anim = 0x1C8; // Name: m_nFieldOutputAnim Offset: 0x1C8
					constexpr auto fl_input_min = 0x1CC; // Name: m_flInputMin Offset: 0x1CC
					constexpr auto fl_input_max = 0x1D0; // Name: m_flInputMax Offset: 0x1D0
					constexpr auto fl_output_min = 0x1D4; // Name: m_flOutputMin Offset: 0x1D4
					constexpr auto fl_output_max = 0x1D8; // Name: m_flOutputMax Offset: 0x1D8
					constexpr auto n_set_method = 0x1DC; // Name: m_nSetMethod Offset: 0x1DC
				} // namespace C_OP_SequenceFromModel

				namespace C_INIT_RemapNamedModelElementToScalar {
					constexpr auto h_model = 0x1C8; // Name: m_hModel Offset: 0x1C8
					constexpr auto names = 0x1D0; // Name: m_names Offset: 0x1D0
					constexpr auto values = 0x1E8; // Name: m_values Offset: 0x1E8
					constexpr auto n_field_input = 0x200; // Name: m_nFieldInput Offset: 0x200
					constexpr auto n_field_output = 0x204; // Name: m_nFieldOutput Offset: 0x204
					constexpr auto n_set_method = 0x208; // Name: m_nSetMethod Offset: 0x208
					constexpr auto b_model_from_renderer = 0x20C; // Name: m_bModelFromRenderer Offset: 0x20C
				} // namespace C_INIT_RemapNamedModelElementToScalar

				namespace C_OP_QuantizeCPComponent {
					constexpr auto fl_input_value = 0x1C8; // Name: m_flInputValue Offset: 0x1C8
					constexpr auto n_cpoutput = 0x328; // Name: m_nCPOutput Offset: 0x328
					constexpr auto n_out_vector_field = 0x32C; // Name: m_nOutVectorField Offset: 0x32C
					constexpr auto fl_quantize_value = 0x330; // Name: m_flQuantizeValue Offset: 0x330
				} // namespace C_OP_QuantizeCPComponent

				namespace C_OP_PlayEndCapWhenFinished {
					constexpr auto b_fire_on_emission_end = 0x1C8; // Name: m_bFireOnEmissionEnd Offset: 0x1C8
					constexpr auto b_include_children = 0x1C9; // Name: m_bIncludeChildren Offset: 0x1C9
				} // namespace C_OP_PlayEndCapWhenFinished

				namespace C_OP_ColorInterpolateRandom {
					constexpr auto color_fade_min = 0x1C0; // Name: m_ColorFadeMin Offset: 0x1C0
					constexpr auto color_fade_max = 0x1DC; // Name: m_ColorFadeMax Offset: 0x1DC
					constexpr auto fl_fade_start_time = 0x1EC; // Name: m_flFadeStartTime Offset: 0x1EC
					constexpr auto fl_fade_end_time = 0x1F0; // Name: m_flFadeEndTime Offset: 0x1F0
					constexpr auto n_field_output = 0x1F4; // Name: m_nFieldOutput Offset: 0x1F4
					constexpr auto b_ease_in_out = 0x1F8; // Name: m_bEaseInOut Offset: 0x1F8
				} // namespace C_OP_ColorInterpolateRandom

				namespace C_INIT_InitFloatCollection {
					constexpr auto input_value = 0x1C8; // Name: m_InputValue Offset: 0x1C8
					constexpr auto n_output_field = 0x328; // Name: m_nOutputField Offset: 0x328
				} // namespace C_INIT_InitFloatCollection

				namespace CPathParameters {
					constexpr auto n_start_control_point_number = 0x0; // Name: m_nStartControlPointNumber Offset: 0x0
					constexpr auto n_end_control_point_number = 0x4; // Name: m_nEndControlPointNumber Offset: 0x4
					constexpr auto n_bulge_control = 0x8; // Name: m_nBulgeControl Offset: 0x8
					constexpr auto fl_bulge = 0xC; // Name: m_flBulge Offset: 0xC
					constexpr auto fl_mid_point = 0x10; // Name: m_flMidPoint Offset: 0x10
					constexpr auto v_start_point_offset = 0x14; // Name: m_vStartPointOffset Offset: 0x14
					constexpr auto v_mid_point_offset = 0x20; // Name: m_vMidPointOffset Offset: 0x20
					constexpr auto v_end_offset = 0x2C; // Name: m_vEndOffset Offset: 0x2C
				} // namespace CPathParameters

				namespace C_INIT_CreateFromPlaneCache {
					constexpr auto vec_offset_min = 0x1C8; // Name: m_vecOffsetMin Offset: 0x1C8
					constexpr auto vec_offset_max = 0x1D4; // Name: m_vecOffsetMax Offset: 0x1D4
					constexpr auto b_use_normal = 0x1E1; // Name: m_bUseNormal Offset: 0x1E1
				} // namespace C_INIT_CreateFromPlaneCache

				namespace C_OP_SetSingleControlPointPosition {
					constexpr auto b_set_once = 0x1C8; // Name: m_bSetOnce Offset: 0x1C8
					constexpr auto n_cp1 = 0x1CC; // Name: m_nCP1 Offset: 0x1CC
					constexpr auto vec_cp1_pos = 0x1D0; // Name: m_vecCP1Pos Offset: 0x1D0
					constexpr auto transform_input = 0x848; // Name: m_transformInput Offset: 0x848
				} // namespace C_OP_SetSingleControlPointPosition

				namespace C_OP_SetPerChildControlPoint {
					constexpr auto n_child_group_id = 0x1C0; // Name: m_nChildGroupID Offset: 0x1C0
					constexpr auto n_first_control_point = 0x1C4; // Name: m_nFirstControlPoint Offset: 0x1C4
					constexpr auto n_num_control_points = 0x1C8; // Name: m_nNumControlPoints Offset: 0x1C8
					constexpr auto n_particle_increment = 0x1D0; // Name: m_nParticleIncrement Offset: 0x1D0
					constexpr auto n_first_source_point = 0x330; // Name: m_nFirstSourcePoint Offset: 0x330
					constexpr auto b_set_orientation = 0x490; // Name: m_bSetOrientation Offset: 0x490
					constexpr auto n_orientation_field = 0x494; // Name: m_nOrientationField Offset: 0x494
					constexpr auto b_num_based_on_particle_count = 0x498; // Name: m_bNumBasedOnParticleCount Offset: 0x498
				} // namespace C_OP_SetPerChildControlPoint

				namespace C_OP_ControlPointToRadialScreenSpace {
					constexpr auto n_cpin = 0x1C8; // Name: m_nCPIn Offset: 0x1C8
					constexpr auto vec_cp1_pos = 0x1CC; // Name: m_vecCP1Pos Offset: 0x1CC
					constexpr auto n_cpout = 0x1D8; // Name: m_nCPOut Offset: 0x1D8
					constexpr auto n_cpout_field = 0x1DC; // Name: m_nCPOutField Offset: 0x1DC
					constexpr auto n_cpsspos_out = 0x1E0; // Name: m_nCPSSPosOut Offset: 0x1E0
				} // namespace C_OP_ControlPointToRadialScreenSpace

				namespace C_INIT_DistanceToCPInit {
					constexpr auto n_field_output = 0x1C8; // Name: m_nFieldOutput Offset: 0x1C8
					constexpr auto fl_input_min = 0x1D0; // Name: m_flInputMin Offset: 0x1D0
					constexpr auto fl_input_max = 0x330; // Name: m_flInputMax Offset: 0x330
					constexpr auto fl_output_min = 0x490; // Name: m_flOutputMin Offset: 0x490
					constexpr auto fl_output_max = 0x5F0; // Name: m_flOutputMax Offset: 0x5F0
					constexpr auto n_start_cp = 0x750; // Name: m_nStartCP Offset: 0x750
					constexpr auto b_los = 0x754; // Name: m_bLOS Offset: 0x754
					constexpr auto collision_group_name = 0x755; // Name: m_CollisionGroupName Offset: 0x755
					constexpr auto n_trace_set = 0x7D8; // Name: m_nTraceSet Offset: 0x7D8
					constexpr auto fl_max_trace_length = 0x7E0; // Name: m_flMaxTraceLength Offset: 0x7E0
					constexpr auto fl_losscale = 0x940; // Name: m_flLOSScale Offset: 0x940
					constexpr auto n_set_method = 0x944; // Name: m_nSetMethod Offset: 0x944
					constexpr auto b_active_range = 0x948; // Name: m_bActiveRange Offset: 0x948
					constexpr auto vec_distance_scale = 0x94C; // Name: m_vecDistanceScale Offset: 0x94C
					constexpr auto fl_remap_bias = 0x958; // Name: m_flRemapBias Offset: 0x958
				} // namespace C_INIT_DistanceToCPInit

				namespace C_OP_SpinUpdate {
				} // namespace C_OP_SpinUpdate

				namespace C_OP_ReadFromNeighboringParticle {
					constexpr auto n_field_input = 0x1C0; // Name: m_nFieldInput Offset: 0x1C0
					constexpr auto n_field_output = 0x1C4; // Name: m_nFieldOutput Offset: 0x1C4
					constexpr auto n_increment = 0x1C8; // Name: m_nIncrement Offset: 0x1C8
					constexpr auto distance_check = 0x1D0; // Name: m_DistanceCheck Offset: 0x1D0
					constexpr auto fl_interpolation = 0x330; // Name: m_flInterpolation Offset: 0x330
				} // namespace C_OP_ReadFromNeighboringParticle

				namespace C_OP_RemapDistanceToLineSegmentToVector {
					constexpr auto n_field_output = 0x1D8; // Name: m_nFieldOutput Offset: 0x1D8
					constexpr auto v_min_output_value = 0x1DC; // Name: m_vMinOutputValue Offset: 0x1DC
					constexpr auto v_max_output_value = 0x1E8; // Name: m_vMaxOutputValue Offset: 0x1E8
				} // namespace C_OP_RemapDistanceToLineSegmentToVector

				namespace C_OP_RenderAsModels {
					constexpr auto model_list = 0x210; // Name: m_ModelList Offset: 0x210
					constexpr auto fl_model_scale = 0x22C; // Name: m_flModelScale Offset: 0x22C
					constexpr auto b_fit_to_model_size = 0x230; // Name: m_bFitToModelSize Offset: 0x230
					constexpr auto b_non_uniform_scaling = 0x231; // Name: m_bNonUniformScaling Offset: 0x231
					constexpr auto n_xaxis_scaling_attribute = 0x234; // Name: m_nXAxisScalingAttribute Offset: 0x234
					constexpr auto n_yaxis_scaling_attribute = 0x238; // Name: m_nYAxisScalingAttribute Offset: 0x238
					constexpr auto n_zaxis_scaling_attribute = 0x23C; // Name: m_nZAxisScalingAttribute Offset: 0x23C
					constexpr auto n_size_cull_bloat = 0x240; // Name: m_nSizeCullBloat Offset: 0x240
				} // namespace C_OP_RenderAsModels

				namespace C_INIT_CreationNoise {
					constexpr auto n_field_output = 0x1C8; // Name: m_nFieldOutput Offset: 0x1C8
					constexpr auto b_abs_val = 0x1CC; // Name: m_bAbsVal Offset: 0x1CC
					constexpr auto b_abs_val_inv = 0x1CD; // Name: m_bAbsValInv Offset: 0x1CD
					constexpr auto fl_offset = 0x1D0; // Name: m_flOffset Offset: 0x1D0
					constexpr auto fl_output_min = 0x1D4; // Name: m_flOutputMin Offset: 0x1D4
					constexpr auto fl_output_max = 0x1D8; // Name: m_flOutputMax Offset: 0x1D8
					constexpr auto fl_noise_scale = 0x1DC; // Name: m_flNoiseScale Offset: 0x1DC
					constexpr auto fl_noise_scale_loc = 0x1E0; // Name: m_flNoiseScaleLoc Offset: 0x1E0
					constexpr auto vec_offset_loc = 0x1E4; // Name: m_vecOffsetLoc Offset: 0x1E4
					constexpr auto fl_world_time_scale = 0x1F0; // Name: m_flWorldTimeScale Offset: 0x1F0
				} // namespace C_INIT_CreationNoise

				namespace C_OP_Spin {
				} // namespace C_OP_Spin

				namespace C_OP_SetCPOrientationToGroundNormal {
					constexpr auto fl_interp_rate = 0x1C0; // Name: m_flInterpRate Offset: 0x1C0
					constexpr auto fl_max_trace_length = 0x1C4; // Name: m_flMaxTraceLength Offset: 0x1C4
					constexpr auto fl_tolerance = 0x1C8; // Name: m_flTolerance Offset: 0x1C8
					constexpr auto fl_trace_offset = 0x1CC; // Name: m_flTraceOffset Offset: 0x1CC
					constexpr auto collision_group_name = 0x1D0; // Name: m_CollisionGroupName Offset: 0x1D0
					constexpr auto n_trace_set = 0x250; // Name: m_nTraceSet Offset: 0x250
					constexpr auto n_input_cp = 0x254; // Name: m_nInputCP Offset: 0x254
					constexpr auto n_output_cp = 0x258; // Name: m_nOutputCP Offset: 0x258
					constexpr auto b_include_water = 0x268; // Name: m_bIncludeWater Offset: 0x268
				} // namespace C_OP_SetCPOrientationToGroundNormal

				namespace C_OP_InstantaneousEmitter {
					constexpr auto n_particles_to_emit = 0x1C8; // Name: m_nParticlesToEmit Offset: 0x1C8
					constexpr auto fl_start_time = 0x328; // Name: m_flStartTime Offset: 0x328
					constexpr auto fl_init_from_killed_parent_particles = 0x488; // Name: m_flInitFromKilledParentParticles Offset: 0x488
					constexpr auto n_event_type = 0x48C; // Name: m_nEventType Offset: 0x48C
					constexpr auto fl_parent_particle_scale = 0x490; // Name: m_flParentParticleScale Offset: 0x490
					constexpr auto n_max_emitted_per_frame = 0x5F0; // Name: m_nMaxEmittedPerFrame Offset: 0x5F0
					constexpr auto n_snapshot_control_point = 0x5F4; // Name: m_nSnapshotControlPoint Offset: 0x5F4
				} // namespace C_OP_InstantaneousEmitter

				namespace C_OP_ConstrainLineLength {
					constexpr auto fl_min_distance = 0x1C0; // Name: m_flMinDistance Offset: 0x1C0
					constexpr auto fl_max_distance = 0x1C4; // Name: m_flMaxDistance Offset: 0x1C4
				} // namespace C_OP_ConstrainLineLength

				namespace CBaseTrailRenderer {
					constexpr auto n_orientation_type = 0x2AA8; // Name: m_nOrientationType Offset: 0x2AA8
					constexpr auto n_orientation_control_point = 0x2AAC; // Name: m_nOrientationControlPoint Offset: 0x2AAC
					constexpr auto fl_min_size = 0x2AB0; // Name: m_flMinSize Offset: 0x2AB0
					constexpr auto fl_max_size = 0x2AB4; // Name: m_flMaxSize Offset: 0x2AB4
					constexpr auto fl_start_fade_size = 0x2AB8; // Name: m_flStartFadeSize Offset: 0x2AB8
					constexpr auto fl_end_fade_size = 0x2C18; // Name: m_flEndFadeSize Offset: 0x2C18
					constexpr auto b_clamp_v = 0x2D78; // Name: m_bClampV Offset: 0x2D78
				} // namespace CBaseTrailRenderer

				namespace C_INIT_VelocityFromCP {
					constexpr auto velocity_input = 0x1C8; // Name: m_velocityInput Offset: 0x1C8
					constexpr auto transform_input = 0x840; // Name: m_transformInput Offset: 0x840
					constexpr auto fl_velocity_scale = 0x8A8; // Name: m_flVelocityScale Offset: 0x8A8
					constexpr auto b_direction_only = 0x8AC; // Name: m_bDirectionOnly Offset: 0x8AC
				} // namespace C_INIT_VelocityFromCP

				namespace C_INIT_RemapParticleCountToScalar {
					constexpr auto n_field_output = 0x1C8; // Name: m_nFieldOutput Offset: 0x1C8
					constexpr auto n_input_min = 0x1CC; // Name: m_nInputMin Offset: 0x1CC
					constexpr auto n_input_max = 0x1D0; // Name: m_nInputMax Offset: 0x1D0
					constexpr auto n_scale_control_point = 0x1D4; // Name: m_nScaleControlPoint Offset: 0x1D4
					constexpr auto n_scale_control_point_field = 0x1D8; // Name: m_nScaleControlPointField Offset: 0x1D8
					constexpr auto fl_output_min = 0x1DC; // Name: m_flOutputMin Offset: 0x1DC
					constexpr auto fl_output_max = 0x1E0; // Name: m_flOutputMax Offset: 0x1E0
					constexpr auto n_set_method = 0x1E4; // Name: m_nSetMethod Offset: 0x1E4
					constexpr auto b_active_range = 0x1E8; // Name: m_bActiveRange Offset: 0x1E8
					constexpr auto b_invert = 0x1E9; // Name: m_bInvert Offset: 0x1E9
					constexpr auto b_wrap = 0x1EA; // Name: m_bWrap Offset: 0x1EA
					constexpr auto fl_remap_bias = 0x1EC; // Name: m_flRemapBias Offset: 0x1EC
				} // namespace C_INIT_RemapParticleCountToScalar

				namespace C_OP_SetControlPointOrientation {
					constexpr auto b_use_world_location = 0x1C8; // Name: m_bUseWorldLocation Offset: 0x1C8
					constexpr auto b_randomize = 0x1CA; // Name: m_bRandomize Offset: 0x1CA
					constexpr auto b_set_once = 0x1CB; // Name: m_bSetOnce Offset: 0x1CB
					constexpr auto n_cp = 0x1CC; // Name: m_nCP Offset: 0x1CC
					constexpr auto n_head_location = 0x1D0; // Name: m_nHeadLocation Offset: 0x1D0
					constexpr auto vec_rotation = 0x1D4; // Name: m_vecRotation Offset: 0x1D4
					constexpr auto vec_rotation_b = 0x1E0; // Name: m_vecRotationB Offset: 0x1E0
					constexpr auto fl_interpolation = 0x1F0; // Name: m_flInterpolation Offset: 0x1F0
				} // namespace C_OP_SetControlPointOrientation

				namespace C_OP_MovementSkinnedPositionFromCPSnapshot {
					constexpr auto n_snapshot_control_point_number = 0x1C0; // Name: m_nSnapshotControlPointNumber Offset: 0x1C0
					constexpr auto n_control_point_number = 0x1C4; // Name: m_nControlPointNumber Offset: 0x1C4
					constexpr auto b_random = 0x1C8; // Name: m_bRandom Offset: 0x1C8
					constexpr auto n_random_seed = 0x1CC; // Name: m_nRandomSeed Offset: 0x1CC
					constexpr auto b_set_normal = 0x1D0; // Name: m_bSetNormal Offset: 0x1D0
					constexpr auto b_set_radius = 0x1D1; // Name: m_bSetRadius Offset: 0x1D1
					constexpr auto n_index_type = 0x1D4; // Name: m_nIndexType Offset: 0x1D4
					constexpr auto fl_read_index = 0x1D8; // Name: m_flReadIndex Offset: 0x1D8
					constexpr auto fl_increment = 0x338; // Name: m_flIncrement Offset: 0x338
					constexpr auto n_full_loop_increment = 0x498; // Name: m_nFullLoopIncrement Offset: 0x498
					constexpr auto n_snap_shot_start_point = 0x5F8; // Name: m_nSnapShotStartPoint Offset: 0x5F8
					constexpr auto fl_interpolation = 0x758; // Name: m_flInterpolation Offset: 0x758
				} // namespace C_OP_MovementSkinnedPositionFromCPSnapshot

				namespace C_OP_OscillateVector {
					constexpr auto rate_min = 0x1C0; // Name: m_RateMin Offset: 0x1C0
					constexpr auto rate_max = 0x1CC; // Name: m_RateMax Offset: 0x1CC
					constexpr auto frequency_min = 0x1D8; // Name: m_FrequencyMin Offset: 0x1D8
					constexpr auto frequency_max = 0x1E4; // Name: m_FrequencyMax Offset: 0x1E4
					constexpr auto n_field = 0x1F0; // Name: m_nField Offset: 0x1F0
					constexpr auto b_proportional = 0x1F4; // Name: m_bProportional Offset: 0x1F4
					constexpr auto b_proportional_op = 0x1F5; // Name: m_bProportionalOp Offset: 0x1F5
					constexpr auto b_offset = 0x1F6; // Name: m_bOffset Offset: 0x1F6
					constexpr auto fl_start_time_min = 0x1F8; // Name: m_flStartTime_min Offset: 0x1F8
					constexpr auto fl_start_time_max = 0x1FC; // Name: m_flStartTime_max Offset: 0x1FC
					constexpr auto fl_end_time_min = 0x200; // Name: m_flEndTime_min Offset: 0x200
					constexpr auto fl_end_time_max = 0x204; // Name: m_flEndTime_max Offset: 0x204
					constexpr auto fl_osc_mult = 0x208; // Name: m_flOscMult Offset: 0x208
					constexpr auto fl_osc_add = 0x368; // Name: m_flOscAdd Offset: 0x368
					constexpr auto fl_rate_scale = 0x4C8; // Name: m_flRateScale Offset: 0x4C8
				} // namespace C_OP_OscillateVector

				namespace C_OP_RenderScreenVelocityRotate {
					constexpr auto fl_rotate_rate_degrees = 0x210; // Name: m_flRotateRateDegrees Offset: 0x210
					constexpr auto fl_forward_degrees = 0x214; // Name: m_flForwardDegrees Offset: 0x214
				} // namespace C_OP_RenderScreenVelocityRotate

				namespace C_OP_SetControlPointToImpactPoint {
					constexpr auto n_cpout = 0x1C8; // Name: m_nCPOut Offset: 0x1C8
					constexpr auto n_cpin = 0x1CC; // Name: m_nCPIn Offset: 0x1CC
					constexpr auto fl_update_rate = 0x1D0; // Name: m_flUpdateRate Offset: 0x1D0
					constexpr auto fl_trace_length = 0x1D8; // Name: m_flTraceLength Offset: 0x1D8
					constexpr auto fl_start_offset = 0x338; // Name: m_flStartOffset Offset: 0x338
					constexpr auto fl_offset = 0x33C; // Name: m_flOffset Offset: 0x33C
					constexpr auto vec_trace_dir = 0x340; // Name: m_vecTraceDir Offset: 0x340
					constexpr auto collision_group_name = 0x34C; // Name: m_CollisionGroupName Offset: 0x34C
					constexpr auto n_trace_set = 0x3CC; // Name: m_nTraceSet Offset: 0x3CC
					constexpr auto b_set_to_endpoint = 0x3D0; // Name: m_bSetToEndpoint Offset: 0x3D0
					constexpr auto b_trace_to_closest_surface = 0x3D1; // Name: m_bTraceToClosestSurface Offset: 0x3D1
					constexpr auto b_include_water = 0x3D2; // Name: m_bIncludeWater Offset: 0x3D2
				} // namespace C_OP_SetControlPointToImpactPoint

				namespace C_OP_InheritFromPeerSystem {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto n_field_input = 0x1C4; // Name: m_nFieldInput Offset: 0x1C4
					constexpr auto n_increment = 0x1C8; // Name: m_nIncrement Offset: 0x1C8
					constexpr auto n_group_id = 0x1CC; // Name: m_nGroupID Offset: 0x1CC
				} // namespace C_OP_InheritFromPeerSystem

				namespace C_OP_InterpolateRadius {
					constexpr auto fl_start_time = 0x1C0; // Name: m_flStartTime Offset: 0x1C0
					constexpr auto fl_end_time = 0x1C4; // Name: m_flEndTime Offset: 0x1C4
					constexpr auto fl_start_scale = 0x1C8; // Name: m_flStartScale Offset: 0x1C8
					constexpr auto fl_end_scale = 0x1CC; // Name: m_flEndScale Offset: 0x1CC
					constexpr auto b_ease_in_and_out = 0x1D0; // Name: m_bEaseInAndOut Offset: 0x1D0
					constexpr auto fl_bias = 0x1D4; // Name: m_flBias Offset: 0x1D4
				} // namespace C_OP_InterpolateRadius

				namespace C_OP_LockToSavedSequentialPath {
					constexpr auto fl_fade_start = 0x1C4; // Name: m_flFadeStart Offset: 0x1C4
					constexpr auto fl_fade_end = 0x1C8; // Name: m_flFadeEnd Offset: 0x1C8
					constexpr auto b_cppairs = 0x1CC; // Name: m_bCPPairs Offset: 0x1CC
					constexpr auto path_params = 0x1D0; // Name: m_PathParams Offset: 0x1D0
				} // namespace C_OP_LockToSavedSequentialPath

				namespace C_OP_ReinitializeScalarEndCap {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto fl_output_min = 0x1C4; // Name: m_flOutputMin Offset: 0x1C4
					constexpr auto fl_output_max = 0x1C8; // Name: m_flOutputMax Offset: 0x1C8
				} // namespace C_OP_ReinitializeScalarEndCap

				namespace C_OP_RemapDistanceToLineSegmentToScalar {
					constexpr auto n_field_output = 0x1D8; // Name: m_nFieldOutput Offset: 0x1D8
					constexpr auto fl_min_output_value = 0x1DC; // Name: m_flMinOutputValue Offset: 0x1DC
					constexpr auto fl_max_output_value = 0x1E0; // Name: m_flMaxOutputValue Offset: 0x1E0
				} // namespace C_OP_RemapDistanceToLineSegmentToScalar

				namespace C_OP_TurbulenceForce {
					constexpr auto fl_noise_coord_scale0 = 0x1D0; // Name: m_flNoiseCoordScale0 Offset: 0x1D0
					constexpr auto fl_noise_coord_scale1 = 0x1D4; // Name: m_flNoiseCoordScale1 Offset: 0x1D4
					constexpr auto fl_noise_coord_scale2 = 0x1D8; // Name: m_flNoiseCoordScale2 Offset: 0x1D8
					constexpr auto fl_noise_coord_scale3 = 0x1DC; // Name: m_flNoiseCoordScale3 Offset: 0x1DC
					constexpr auto vec_noise_amount0 = 0x1E0; // Name: m_vecNoiseAmount0 Offset: 0x1E0
					constexpr auto vec_noise_amount1 = 0x1EC; // Name: m_vecNoiseAmount1 Offset: 0x1EC
					constexpr auto vec_noise_amount2 = 0x1F8; // Name: m_vecNoiseAmount2 Offset: 0x1F8
					constexpr auto vec_noise_amount3 = 0x204; // Name: m_vecNoiseAmount3 Offset: 0x204
				} // namespace C_OP_TurbulenceForce

				namespace C_OP_SetControlPointToPlayer {
					constexpr auto n_cp1 = 0x1C8; // Name: m_nCP1 Offset: 0x1C8
					constexpr auto vec_cp1_pos = 0x1CC; // Name: m_vecCP1Pos Offset: 0x1CC
					constexpr auto b_orient_to_eyes = 0x1D8; // Name: m_bOrientToEyes Offset: 0x1D8
				} // namespace C_OP_SetControlPointToPlayer

				namespace C_OP_RestartAfterDuration {
					constexpr auto fl_duration_min = 0x1C0; // Name: m_flDurationMin Offset: 0x1C0
					constexpr auto fl_duration_max = 0x1C4; // Name: m_flDurationMax Offset: 0x1C4
					constexpr auto n_cp = 0x1C8; // Name: m_nCP Offset: 0x1C8
					constexpr auto n_cpfield = 0x1CC; // Name: m_nCPField Offset: 0x1CC
					constexpr auto n_child_group_id = 0x1D0; // Name: m_nChildGroupID Offset: 0x1D0
					constexpr auto b_only_children = 0x1D4; // Name: m_bOnlyChildren Offset: 0x1D4
				} // namespace C_OP_RestartAfterDuration

				namespace C_OP_EndCapTimedFreeze {
					constexpr auto fl_freeze_time = 0x1C0; // Name: m_flFreezeTime Offset: 0x1C0
				} // namespace C_OP_EndCapTimedFreeze

				namespace C_INIT_DistanceToNeighborCull {
					constexpr auto fl_distance = 0x1C8; // Name: m_flDistance Offset: 0x1C8
					constexpr auto b_include_radii = 0x328; // Name: m_bIncludeRadii Offset: 0x328
				} // namespace C_INIT_DistanceToNeighborCull

				namespace C_OP_RenderGpuImplicit {
					constexpr auto b_use_per_particle_radius = 0x210; // Name: m_bUsePerParticleRadius Offset: 0x210
					constexpr auto n_vertex_count_kb = 0x214; // Name: m_nVertexCountKb Offset: 0x214
					constexpr auto n_index_count_kb = 0x218; // Name: m_nIndexCountKb Offset: 0x218
					constexpr auto f_grid_size = 0x220; // Name: m_fGridSize Offset: 0x220
					constexpr auto f_radius_scale = 0x380; // Name: m_fRadiusScale Offset: 0x380
					constexpr auto f_isosurface_threshold = 0x4E0; // Name: m_fIsosurfaceThreshold Offset: 0x4E0
					constexpr auto n_scale_cp = 0x640; // Name: m_nScaleCP Offset: 0x640
					constexpr auto h_material = 0x648; // Name: m_hMaterial Offset: 0x648
				} // namespace C_OP_RenderGpuImplicit

				namespace C_OP_RemapTransformOrientationToRotations {
					constexpr auto transform_input = 0x1C0; // Name: m_TransformInput Offset: 0x1C0
					constexpr auto vec_rotation = 0x228; // Name: m_vecRotation Offset: 0x228
					constexpr auto b_use_quat = 0x234; // Name: m_bUseQuat Offset: 0x234
					constexpr auto b_write_normal = 0x235; // Name: m_bWriteNormal Offset: 0x235
				} // namespace C_OP_RemapTransformOrientationToRotations

				namespace C_OP_EnableChildrenFromParentParticleCount {
					constexpr auto n_child_group_id = 0x1C8; // Name: m_nChildGroupID Offset: 0x1C8
					constexpr auto n_first_child = 0x1CC; // Name: m_nFirstChild Offset: 0x1CC
					constexpr auto n_num_children_to_enable = 0x1D0; // Name: m_nNumChildrenToEnable Offset: 0x1D0
					constexpr auto b_disable_children = 0x330; // Name: m_bDisableChildren Offset: 0x330
					constexpr auto b_play_endcap_on_stop = 0x331; // Name: m_bPlayEndcapOnStop Offset: 0x331
					constexpr auto b_destroy_immediately = 0x332; // Name: m_bDestroyImmediately Offset: 0x332
				} // namespace C_OP_EnableChildrenFromParentParticleCount

				namespace C_OP_SetRandomControlPointPosition {
					constexpr auto b_use_world_location = 0x1C8; // Name: m_bUseWorldLocation Offset: 0x1C8
					constexpr auto b_orient = 0x1C9; // Name: m_bOrient Offset: 0x1C9
					constexpr auto n_cp1 = 0x1CC; // Name: m_nCP1 Offset: 0x1CC
					constexpr auto n_head_location = 0x1D0; // Name: m_nHeadLocation Offset: 0x1D0
					constexpr auto fl_re_random_rate = 0x1D8; // Name: m_flReRandomRate Offset: 0x1D8
					constexpr auto vec_cpmin_pos = 0x338; // Name: m_vecCPMinPos Offset: 0x338
					constexpr auto vec_cpmax_pos = 0x344; // Name: m_vecCPMaxPos Offset: 0x344
					constexpr auto fl_interpolation = 0x350; // Name: m_flInterpolation Offset: 0x350
				} // namespace C_OP_SetRandomControlPointPosition

				namespace C_OP_CylindricalDistanceToTransform {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto fl_input_min = 0x1C8; // Name: m_flInputMin Offset: 0x1C8
					constexpr auto fl_input_max = 0x328; // Name: m_flInputMax Offset: 0x328
					constexpr auto fl_output_min = 0x488; // Name: m_flOutputMin Offset: 0x488
					constexpr auto fl_output_max = 0x5E8; // Name: m_flOutputMax Offset: 0x5E8
					constexpr auto transform_start = 0x748; // Name: m_TransformStart Offset: 0x748
					constexpr auto transform_end = 0x7B0; // Name: m_TransformEnd Offset: 0x7B0
					constexpr auto n_set_method = 0x818; // Name: m_nSetMethod Offset: 0x818
					constexpr auto b_active_range = 0x81C; // Name: m_bActiveRange Offset: 0x81C
					constexpr auto b_additive = 0x81D; // Name: m_bAdditive Offset: 0x81D
					constexpr auto b_capsule = 0x81E; // Name: m_bCapsule Offset: 0x81E
				} // namespace C_OP_CylindricalDistanceToTransform

				namespace C_OP_RemapControlPointDirectionToVector {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto fl_scale = 0x1C4; // Name: m_flScale Offset: 0x1C4
					constexpr auto n_control_point_number = 0x1C8; // Name: m_nControlPointNumber Offset: 0x1C8
				} // namespace C_OP_RemapControlPointDirectionToVector

				namespace C_OP_RemapModelVolumetoCP {
					constexpr auto n_bbox_type = 0x1C8; // Name: m_nBBoxType Offset: 0x1C8
					constexpr auto n_in_control_point_number = 0x1CC; // Name: m_nInControlPointNumber Offset: 0x1CC
					constexpr auto n_out_control_point_number = 0x1D0; // Name: m_nOutControlPointNumber Offset: 0x1D0
					constexpr auto n_out_control_point_max_number = 0x1D4; // Name: m_nOutControlPointMaxNumber Offset: 0x1D4
					constexpr auto n_field = 0x1D8; // Name: m_nField Offset: 0x1D8
					constexpr auto fl_input_min = 0x1DC; // Name: m_flInputMin Offset: 0x1DC
					constexpr auto fl_input_max = 0x1E0; // Name: m_flInputMax Offset: 0x1E0
					constexpr auto fl_output_min = 0x1E4; // Name: m_flOutputMin Offset: 0x1E4
					constexpr auto fl_output_max = 0x1E8; // Name: m_flOutputMax Offset: 0x1E8
					constexpr auto b_bbox_only = 0x1EC; // Name: m_bBBoxOnly Offset: 0x1EC
					constexpr auto b_cube_root = 0x1ED; // Name: m_bCubeRoot Offset: 0x1ED
				} // namespace C_OP_RemapModelVolumetoCP

				namespace C_OP_DragRelativeToPlane {
					constexpr auto fl_drag_at_plane = 0x1C0; // Name: m_flDragAtPlane Offset: 0x1C0
					constexpr auto fl_falloff = 0x320; // Name: m_flFalloff Offset: 0x320
					constexpr auto b_directional = 0x480; // Name: m_bDirectional Offset: 0x480
					constexpr auto vec_plane_normal = 0x488; // Name: m_vecPlaneNormal Offset: 0x488
					constexpr auto n_control_point_number = 0xB00; // Name: m_nControlPointNumber Offset: 0xB00
				} // namespace C_OP_DragRelativeToPlane

				namespace C_OP_SetCPtoVector {
					constexpr auto n_cpinput = 0x1C0; // Name: m_nCPInput Offset: 0x1C0
					constexpr auto n_field_output = 0x1C4; // Name: m_nFieldOutput Offset: 0x1C4
				} // namespace C_OP_SetCPtoVector

				namespace C_OP_SnapshotRigidSkinToBones {
					constexpr auto b_transform_normals = 0x1C0; // Name: m_bTransformNormals Offset: 0x1C0
					constexpr auto b_transform_radii = 0x1C1; // Name: m_bTransformRadii Offset: 0x1C1
					constexpr auto n_control_point_number = 0x1C4; // Name: m_nControlPointNumber Offset: 0x1C4
				} // namespace C_OP_SnapshotRigidSkinToBones

				namespace C_INIT_InheritFromParentParticles {
					constexpr auto fl_scale = 0x1C8; // Name: m_flScale Offset: 0x1C8
					constexpr auto n_field_output = 0x1CC; // Name: m_nFieldOutput Offset: 0x1CC
					constexpr auto n_increment = 0x1D0; // Name: m_nIncrement Offset: 0x1D0
					constexpr auto b_random_distribution = 0x1D4; // Name: m_bRandomDistribution Offset: 0x1D4
					constexpr auto n_random_seed = 0x1D8; // Name: m_nRandomSeed Offset: 0x1D8
				} // namespace C_INIT_InheritFromParentParticles

				namespace C_OP_RemapCPtoScalar {
					constexpr auto n_cpinput = 0x1C0; // Name: m_nCPInput Offset: 0x1C0
					constexpr auto n_field_output = 0x1C4; // Name: m_nFieldOutput Offset: 0x1C4
					constexpr auto n_field = 0x1C8; // Name: m_nField Offset: 0x1C8
					constexpr auto fl_input_min = 0x1CC; // Name: m_flInputMin Offset: 0x1CC
					constexpr auto fl_input_max = 0x1D0; // Name: m_flInputMax Offset: 0x1D0
					constexpr auto fl_output_min = 0x1D4; // Name: m_flOutputMin Offset: 0x1D4
					constexpr auto fl_output_max = 0x1D8; // Name: m_flOutputMax Offset: 0x1D8
					constexpr auto fl_start_time = 0x1DC; // Name: m_flStartTime Offset: 0x1DC
					constexpr auto fl_end_time = 0x1E0; // Name: m_flEndTime Offset: 0x1E0
					constexpr auto fl_interp_rate = 0x1E4; // Name: m_flInterpRate Offset: 0x1E4
					constexpr auto n_set_method = 0x1E8; // Name: m_nSetMethod Offset: 0x1E8
				} // namespace C_OP_RemapCPtoScalar

				namespace C_OP_RenderClothForce {
				} // namespace C_OP_RenderClothForce

				namespace CParticleFunctionRenderer {
					constexpr auto visibility_inputs = 0x1C0; // Name: VisibilityInputs Offset: 0x1C0
					constexpr auto b_cannot_be_refracted = 0x208; // Name: m_bCannotBeRefracted Offset: 0x208
					constexpr auto b_skip_rendering_on_mobile = 0x209; // Name: m_bSkipRenderingOnMobile Offset: 0x209
				} // namespace CParticleFunctionRenderer

				namespace C_OP_RemapNamedModelMeshGroupEndCap {
				} // namespace C_OP_RemapNamedModelMeshGroupEndCap

				namespace C_OP_SDFLighting {
					constexpr auto v_lighting_dir = 0x1C0; // Name: m_vLightingDir Offset: 0x1C0
					constexpr auto v_tint_0 = 0x1CC; // Name: m_vTint_0 Offset: 0x1CC
					constexpr auto v_tint_1 = 0x1D8; // Name: m_vTint_1 Offset: 0x1D8
				} // namespace C_OP_SDFLighting

				namespace CRandomNumberGeneratorParameters {
					constexpr auto b_distribute_evenly = 0x0; // Name: m_bDistributeEvenly Offset: 0x0
					constexpr auto n_seed = 0x4; // Name: m_nSeed Offset: 0x4
				} // namespace CRandomNumberGeneratorParameters

				namespace C_OP_PercentageBetweenTransformsVector {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto fl_input_min = 0x1C4; // Name: m_flInputMin Offset: 0x1C4
					constexpr auto fl_input_max = 0x1C8; // Name: m_flInputMax Offset: 0x1C8
					constexpr auto vec_output_min = 0x1CC; // Name: m_vecOutputMin Offset: 0x1CC
					constexpr auto vec_output_max = 0x1D8; // Name: m_vecOutputMax Offset: 0x1D8
					constexpr auto transform_start = 0x1E8; // Name: m_TransformStart Offset: 0x1E8
					constexpr auto transform_end = 0x250; // Name: m_TransformEnd Offset: 0x250
					constexpr auto n_set_method = 0x2B8; // Name: m_nSetMethod Offset: 0x2B8
					constexpr auto b_active_range = 0x2BC; // Name: m_bActiveRange Offset: 0x2BC
					constexpr auto b_radial_check = 0x2BD; // Name: m_bRadialCheck Offset: 0x2BD
				} // namespace C_OP_PercentageBetweenTransformsVector

				namespace C_OP_ConnectParentParticleToNearest {
					constexpr auto n_first_control_point = 0x1C0; // Name: m_nFirstControlPoint Offset: 0x1C0
					constexpr auto n_second_control_point = 0x1C4; // Name: m_nSecondControlPoint Offset: 0x1C4
					constexpr auto b_use_radius = 0x1C8; // Name: m_bUseRadius Offset: 0x1C8
					constexpr auto fl_radius_scale = 0x1D0; // Name: m_flRadiusScale Offset: 0x1D0
					constexpr auto fl_parent_radius_scale = 0x330; // Name: m_flParentRadiusScale Offset: 0x330
				} // namespace C_OP_ConnectParentParticleToNearest

				namespace C_INIT_CreateParticleImpulse {
					constexpr auto input_radius = 0x1C8; // Name: m_InputRadius Offset: 0x1C8
					constexpr auto input_magnitude = 0x328; // Name: m_InputMagnitude Offset: 0x328
					constexpr auto n_falloff_function = 0x488; // Name: m_nFalloffFunction Offset: 0x488
					constexpr auto input_falloff_exp = 0x490; // Name: m_InputFalloffExp Offset: 0x490
					constexpr auto n_impulse_type = 0x5F0; // Name: m_nImpulseType Offset: 0x5F0
				} // namespace C_INIT_CreateParticleImpulse

				namespace C_OP_DensityForce {
					constexpr auto fl_radius_scale = 0x1D0; // Name: m_flRadiusScale Offset: 0x1D0
					constexpr auto fl_force_scale = 0x1D4; // Name: m_flForceScale Offset: 0x1D4
					constexpr auto fl_target_density = 0x1D8; // Name: m_flTargetDensity Offset: 0x1D8
				} // namespace C_OP_DensityForce

				namespace C_OP_UpdateLightSource {
					constexpr auto v_color_tint = 0x1C0; // Name: m_vColorTint Offset: 0x1C0
					constexpr auto fl_brightness_scale = 0x1C4; // Name: m_flBrightnessScale Offset: 0x1C4
					constexpr auto fl_radius_scale = 0x1C8; // Name: m_flRadiusScale Offset: 0x1C8
					constexpr auto fl_minimum_lighting_radius = 0x1CC; // Name: m_flMinimumLightingRadius Offset: 0x1CC
					constexpr auto fl_maximum_lighting_radius = 0x1D0; // Name: m_flMaximumLightingRadius Offset: 0x1D0
					constexpr auto fl_position_damping_constant = 0x1D4; // Name: m_flPositionDampingConstant Offset: 0x1D4
				} // namespace C_OP_UpdateLightSource

				namespace C_INIT_CreateWithinBox {
					constexpr auto vec_min = 0x1C8; // Name: m_vecMin Offset: 0x1C8
					constexpr auto vec_max = 0x840; // Name: m_vecMax Offset: 0x840
					constexpr auto n_control_point_number = 0xEB8; // Name: m_nControlPointNumber Offset: 0xEB8
					constexpr auto b_local_space = 0xEBC; // Name: m_bLocalSpace Offset: 0xEBC
					constexpr auto randomness_parameters = 0xEC0; // Name: m_randomnessParameters Offset: 0xEC0
				} // namespace C_INIT_CreateWithinBox

				namespace C_OP_SetControlPointToCPVelocity {
					constexpr auto n_cpinput = 0x1C8; // Name: m_nCPInput Offset: 0x1C8
					constexpr auto n_cpoutput_vel = 0x1CC; // Name: m_nCPOutputVel Offset: 0x1CC
					constexpr auto b_normalize = 0x1D0; // Name: m_bNormalize Offset: 0x1D0
					constexpr auto n_cpoutput_mag = 0x1D4; // Name: m_nCPOutputMag Offset: 0x1D4
					constexpr auto n_cpfield = 0x1D8; // Name: m_nCPField Offset: 0x1D8
					constexpr auto vec_comparison_velocity = 0x1E0; // Name: m_vecComparisonVelocity Offset: 0x1E0
				} // namespace C_OP_SetControlPointToCPVelocity

				namespace C_OP_ChooseRandomChildrenInGroup {
					constexpr auto n_child_group_id = 0x1C8; // Name: m_nChildGroupID Offset: 0x1C8
					constexpr auto fl_number_of_children = 0x1D0; // Name: m_flNumberOfChildren Offset: 0x1D0
				} // namespace C_OP_ChooseRandomChildrenInGroup

				namespace C_OP_ControlpointLight {
					constexpr auto fl_scale = 0x1C0; // Name: m_flScale Offset: 0x1C0
					constexpr auto n_control_point1 = 0x650; // Name: m_nControlPoint1 Offset: 0x650
					constexpr auto n_control_point2 = 0x654; // Name: m_nControlPoint2 Offset: 0x654
					constexpr auto n_control_point3 = 0x658; // Name: m_nControlPoint3 Offset: 0x658
					constexpr auto n_control_point4 = 0x65C; // Name: m_nControlPoint4 Offset: 0x65C
					constexpr auto vec_cpoffset1 = 0x660; // Name: m_vecCPOffset1 Offset: 0x660
					constexpr auto vec_cpoffset2 = 0x66C; // Name: m_vecCPOffset2 Offset: 0x66C
					constexpr auto vec_cpoffset3 = 0x678; // Name: m_vecCPOffset3 Offset: 0x678
					constexpr auto vec_cpoffset4 = 0x684; // Name: m_vecCPOffset4 Offset: 0x684
					constexpr auto light_fifty_dist1 = 0x690; // Name: m_LightFiftyDist1 Offset: 0x690
					constexpr auto light_zero_dist1 = 0x694; // Name: m_LightZeroDist1 Offset: 0x694
					constexpr auto light_fifty_dist2 = 0x698; // Name: m_LightFiftyDist2 Offset: 0x698
					constexpr auto light_zero_dist2 = 0x69C; // Name: m_LightZeroDist2 Offset: 0x69C
					constexpr auto light_fifty_dist3 = 0x6A0; // Name: m_LightFiftyDist3 Offset: 0x6A0
					constexpr auto light_zero_dist3 = 0x6A4; // Name: m_LightZeroDist3 Offset: 0x6A4
					constexpr auto light_fifty_dist4 = 0x6A8; // Name: m_LightFiftyDist4 Offset: 0x6A8
					constexpr auto light_zero_dist4 = 0x6AC; // Name: m_LightZeroDist4 Offset: 0x6AC
					constexpr auto light_color1 = 0x6B0; // Name: m_LightColor1 Offset: 0x6B0
					constexpr auto light_color2 = 0x6B4; // Name: m_LightColor2 Offset: 0x6B4
					constexpr auto light_color3 = 0x6B8; // Name: m_LightColor3 Offset: 0x6B8
					constexpr auto light_color4 = 0x6BC; // Name: m_LightColor4 Offset: 0x6BC
					constexpr auto b_light_type1 = 0x6C0; // Name: m_bLightType1 Offset: 0x6C0
					constexpr auto b_light_type2 = 0x6C1; // Name: m_bLightType2 Offset: 0x6C1
					constexpr auto b_light_type3 = 0x6C2; // Name: m_bLightType3 Offset: 0x6C2
					constexpr auto b_light_type4 = 0x6C3; // Name: m_bLightType4 Offset: 0x6C3
					constexpr auto b_light_dynamic1 = 0x6C4; // Name: m_bLightDynamic1 Offset: 0x6C4
					constexpr auto b_light_dynamic2 = 0x6C5; // Name: m_bLightDynamic2 Offset: 0x6C5
					constexpr auto b_light_dynamic3 = 0x6C6; // Name: m_bLightDynamic3 Offset: 0x6C6
					constexpr auto b_light_dynamic4 = 0x6C7; // Name: m_bLightDynamic4 Offset: 0x6C7
					constexpr auto b_use_normal = 0x6C8; // Name: m_bUseNormal Offset: 0x6C8
					constexpr auto b_use_hlambert = 0x6C9; // Name: m_bUseHLambert Offset: 0x6C9
					constexpr auto b_clamp_lower_range = 0x6CE; // Name: m_bClampLowerRange Offset: 0x6CE
					constexpr auto b_clamp_upper_range = 0x6CF; // Name: m_bClampUpperRange Offset: 0x6CF
				} // namespace C_OP_ControlpointLight

				namespace C_OP_VectorFieldSnapshot {
					constexpr auto n_control_point_number = 0x1C0; // Name: m_nControlPointNumber Offset: 0x1C0
					constexpr auto n_attribute_to_write = 0x1C4; // Name: m_nAttributeToWrite Offset: 0x1C4
					constexpr auto n_local_space_cp = 0x1C8; // Name: m_nLocalSpaceCP Offset: 0x1C8
					constexpr auto fl_interpolation = 0x1D0; // Name: m_flInterpolation Offset: 0x1D0
					constexpr auto vec_scale = 0x330; // Name: m_vecScale Offset: 0x330
					constexpr auto fl_boundary_dampening = 0x9A8; // Name: m_flBoundaryDampening Offset: 0x9A8
					constexpr auto b_set_velocity = 0x9AC; // Name: m_bSetVelocity Offset: 0x9AC
					constexpr auto b_lock_to_surface = 0x9AD; // Name: m_bLockToSurface Offset: 0x9AD
					constexpr auto fl_grid_spacing = 0x9B0; // Name: m_flGridSpacing Offset: 0x9B0
				} // namespace C_OP_VectorFieldSnapshot

				namespace C_INIT_PositionPlaceOnGround {
					constexpr auto fl_offset = 0x1C8; // Name: m_flOffset Offset: 0x1C8
					constexpr auto fl_max_trace_length = 0x328; // Name: m_flMaxTraceLength Offset: 0x328
					constexpr auto collision_group_name = 0x488; // Name: m_CollisionGroupName Offset: 0x488
					constexpr auto n_trace_set = 0x508; // Name: m_nTraceSet Offset: 0x508
					constexpr auto n_trace_miss_behavior = 0x518; // Name: m_nTraceMissBehavior Offset: 0x518
					constexpr auto b_include_water = 0x51C; // Name: m_bIncludeWater Offset: 0x51C
					constexpr auto b_set_normal = 0x51D; // Name: m_bSetNormal Offset: 0x51D
					constexpr auto b_set_pxyzonly = 0x51E; // Name: m_bSetPXYZOnly Offset: 0x51E
					constexpr auto b_trace_along_normal = 0x51F; // Name: m_bTraceAlongNormal Offset: 0x51F
					constexpr auto b_offseton_col_only = 0x520; // Name: m_bOffsetonColOnly Offset: 0x520
					constexpr auto fl_offset_by_radius_factor = 0x524; // Name: m_flOffsetByRadiusFactor Offset: 0x524
					constexpr auto n_preserve_offset_cp = 0x528; // Name: m_nPreserveOffsetCP Offset: 0x528
					constexpr auto n_ignore_cp = 0x52C; // Name: m_nIgnoreCP Offset: 0x52C
				} // namespace C_INIT_PositionPlaceOnGround

				namespace C_OP_ClampScalar {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto fl_output_min = 0x1C8; // Name: m_flOutputMin Offset: 0x1C8
					constexpr auto fl_output_max = 0x328; // Name: m_flOutputMax Offset: 0x328
				} // namespace C_OP_ClampScalar

				namespace C_INIT_RandomScalar {
					constexpr auto fl_min = 0x1C8; // Name: m_flMin Offset: 0x1C8
					constexpr auto fl_max = 0x1CC; // Name: m_flMax Offset: 0x1CC
					constexpr auto fl_exponent = 0x1D0; // Name: m_flExponent Offset: 0x1D0
					constexpr auto n_field_output = 0x1D4; // Name: m_nFieldOutput Offset: 0x1D4
				} // namespace C_INIT_RandomScalar

				namespace ParticleControlPointConfiguration_t {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
					constexpr auto drivers = 0x8; // Name: m_drivers Offset: 0x8
					constexpr auto preview_state = 0x20; // Name: m_previewState Offset: 0x20
				} // namespace ParticleControlPointConfiguration_t

				namespace C_OP_RenderPostProcessing {
					constexpr auto fl_post_process_strength = 0x210; // Name: m_flPostProcessStrength Offset: 0x210
					constexpr auto h_post_texture = 0x370; // Name: m_hPostTexture Offset: 0x370
					constexpr auto n_priority = 0x378; // Name: m_nPriority Offset: 0x378
				} // namespace C_OP_RenderPostProcessing

				namespace C_OP_WorldTraceConstraint {
					constexpr auto n_cp = 0x1C0; // Name: m_nCP Offset: 0x1C0
					constexpr auto vec_cp_offset = 0x1C4; // Name: m_vecCpOffset Offset: 0x1C4
					constexpr auto n_collision_mode = 0x1D0; // Name: m_nCollisionMode Offset: 0x1D0
					constexpr auto n_collision_mode_min = 0x1D4; // Name: m_nCollisionModeMin Offset: 0x1D4
					constexpr auto n_trace_set = 0x1D8; // Name: m_nTraceSet Offset: 0x1D8
					constexpr auto collision_group_name = 0x1DC; // Name: m_CollisionGroupName Offset: 0x1DC
					constexpr auto b_world_only = 0x25C; // Name: m_bWorldOnly Offset: 0x25C
					constexpr auto b_brush_only = 0x25D; // Name: m_bBrushOnly Offset: 0x25D
					constexpr auto b_include_water = 0x25E; // Name: m_bIncludeWater Offset: 0x25E
					constexpr auto n_ignore_cp = 0x260; // Name: m_nIgnoreCP Offset: 0x260
					constexpr auto fl_cp_movement_tolerance = 0x264; // Name: m_flCpMovementTolerance Offset: 0x264
					constexpr auto fl_retest_rate = 0x268; // Name: m_flRetestRate Offset: 0x268
					constexpr auto fl_trace_tolerance = 0x26C; // Name: m_flTraceTolerance Offset: 0x26C
					constexpr auto fl_collision_confirmation_speed = 0x270; // Name: m_flCollisionConfirmationSpeed Offset: 0x270
					constexpr auto n_max_traces_per_frame = 0x274; // Name: m_nMaxTracesPerFrame Offset: 0x274
					constexpr auto fl_radius_scale = 0x278; // Name: m_flRadiusScale Offset: 0x278
					constexpr auto fl_bounce_amount = 0x3D8; // Name: m_flBounceAmount Offset: 0x3D8
					constexpr auto fl_slide_amount = 0x538; // Name: m_flSlideAmount Offset: 0x538
					constexpr auto fl_random_dir_scale = 0x698; // Name: m_flRandomDirScale Offset: 0x698
					constexpr auto b_decay_bounce = 0x7F8; // Name: m_bDecayBounce Offset: 0x7F8
					constexpr auto b_killon_contact = 0x7F9; // Name: m_bKillonContact Offset: 0x7F9
					constexpr auto fl_min_speed = 0x7FC; // Name: m_flMinSpeed Offset: 0x7FC
					constexpr auto b_set_normal = 0x800; // Name: m_bSetNormal Offset: 0x800
					constexpr auto n_stick_on_collision_field = 0x804; // Name: m_nStickOnCollisionField Offset: 0x804
					constexpr auto fl_stop_speed = 0x808; // Name: m_flStopSpeed Offset: 0x808
					constexpr auto n_entity_stick_data_field = 0x968; // Name: m_nEntityStickDataField Offset: 0x968
					constexpr auto n_entity_stick_normal_field = 0x96C; // Name: m_nEntityStickNormalField Offset: 0x96C
				} // namespace C_OP_WorldTraceConstraint

				namespace C_INIT_AgeNoise {
					constexpr auto b_abs_val = 0x1C8; // Name: m_bAbsVal Offset: 0x1C8
					constexpr auto b_abs_val_inv = 0x1C9; // Name: m_bAbsValInv Offset: 0x1C9
					constexpr auto fl_offset = 0x1CC; // Name: m_flOffset Offset: 0x1CC
					constexpr auto fl_age_min = 0x1D0; // Name: m_flAgeMin Offset: 0x1D0
					constexpr auto fl_age_max = 0x1D4; // Name: m_flAgeMax Offset: 0x1D4
					constexpr auto fl_noise_scale = 0x1D8; // Name: m_flNoiseScale Offset: 0x1D8
					constexpr auto fl_noise_scale_loc = 0x1DC; // Name: m_flNoiseScaleLoc Offset: 0x1DC
					constexpr auto vec_offset_loc = 0x1E0; // Name: m_vecOffsetLoc Offset: 0x1E0
				} // namespace C_INIT_AgeNoise

				namespace C_OP_RenderBlobs {
					constexpr auto cube_width = 0x210; // Name: m_cubeWidth Offset: 0x210
					constexpr auto cutoff_radius = 0x370; // Name: m_cutoffRadius Offset: 0x370
					constexpr auto render_radius = 0x4D0; // Name: m_renderRadius Offset: 0x4D0
					constexpr auto n_vertex_count_kb = 0x630; // Name: m_nVertexCountKb Offset: 0x630
					constexpr auto n_index_count_kb = 0x634; // Name: m_nIndexCountKb Offset: 0x634
					constexpr auto n_scale_cp = 0x638; // Name: m_nScaleCP Offset: 0x638
					constexpr auto material_vars = 0x640; // Name: m_MaterialVars Offset: 0x640
					constexpr auto h_material = 0x670; // Name: m_hMaterial Offset: 0x670
				} // namespace C_OP_RenderBlobs

				namespace C_OP_FadeOut {
					constexpr auto fl_fade_out_time_min = 0x1C0; // Name: m_flFadeOutTimeMin Offset: 0x1C0
					constexpr auto fl_fade_out_time_max = 0x1C4; // Name: m_flFadeOutTimeMax Offset: 0x1C4
					constexpr auto fl_fade_out_time_exp = 0x1C8; // Name: m_flFadeOutTimeExp Offset: 0x1C8
					constexpr auto fl_fade_bias = 0x1CC; // Name: m_flFadeBias Offset: 0x1CC
					constexpr auto b_proportional = 0x200; // Name: m_bProportional Offset: 0x200
					constexpr auto b_ease_in_and_out = 0x201; // Name: m_bEaseInAndOut Offset: 0x201
				} // namespace C_OP_FadeOut

				namespace C_INIT_RandomSequence {
					constexpr auto n_sequence_min = 0x1C8; // Name: m_nSequenceMin Offset: 0x1C8
					constexpr auto n_sequence_max = 0x1CC; // Name: m_nSequenceMax Offset: 0x1CC
					constexpr auto b_shuffle = 0x1D0; // Name: m_bShuffle Offset: 0x1D0
					constexpr auto b_linear = 0x1D1; // Name: m_bLinear Offset: 0x1D1
					constexpr auto weighted_list = 0x1D8; // Name: m_WeightedList Offset: 0x1D8
				} // namespace C_INIT_RandomSequence

				namespace C_OP_RampScalarSplineSimple {
					constexpr auto rate = 0x1C0; // Name: m_Rate Offset: 0x1C0
					constexpr auto fl_start_time = 0x1C4; // Name: m_flStartTime Offset: 0x1C4
					constexpr auto fl_end_time = 0x1C8; // Name: m_flEndTime Offset: 0x1C8
					constexpr auto n_field = 0x1F0; // Name: m_nField Offset: 0x1F0
					constexpr auto b_ease_out = 0x1F4; // Name: m_bEaseOut Offset: 0x1F4
				} // namespace C_OP_RampScalarSplineSimple

				namespace C_INIT_DistanceCull {
					constexpr auto n_control_point = 0x1C8; // Name: m_nControlPoint Offset: 0x1C8
					constexpr auto fl_distance = 0x1D0; // Name: m_flDistance Offset: 0x1D0
					constexpr auto b_cull_inside = 0x330; // Name: m_bCullInside Offset: 0x330
				} // namespace C_INIT_DistanceCull

				namespace C_OP_CollideWithParentParticles {
					constexpr auto fl_parent_radius_scale = 0x1C0; // Name: m_flParentRadiusScale Offset: 0x1C0
					constexpr auto fl_radius_scale = 0x320; // Name: m_flRadiusScale Offset: 0x320
				} // namespace C_OP_CollideWithParentParticles

				namespace C_INIT_InitFromVectorFieldSnapshot {
					constexpr auto n_control_point_number = 0x1C8; // Name: m_nControlPointNumber Offset: 0x1C8
					constexpr auto n_local_space_cp = 0x1CC; // Name: m_nLocalSpaceCP Offset: 0x1CC
					constexpr auto n_weight_update_cp = 0x1D0; // Name: m_nWeightUpdateCP Offset: 0x1D0
					constexpr auto b_use_vertical_velocity = 0x1D4; // Name: m_bUseVerticalVelocity Offset: 0x1D4
					constexpr auto vec_scale = 0x1D8; // Name: m_vecScale Offset: 0x1D8
				} // namespace C_INIT_InitFromVectorFieldSnapshot

				namespace C_INIT_AddVectorToVector {
					constexpr auto vec_scale = 0x1C8; // Name: m_vecScale Offset: 0x1C8
					constexpr auto n_field_output = 0x1D4; // Name: m_nFieldOutput Offset: 0x1D4
					constexpr auto n_field_input = 0x1D8; // Name: m_nFieldInput Offset: 0x1D8
					constexpr auto v_offset_min = 0x1DC; // Name: m_vOffsetMin Offset: 0x1DC
					constexpr auto v_offset_max = 0x1E8; // Name: m_vOffsetMax Offset: 0x1E8
					constexpr auto randomness_parameters = 0x1F4; // Name: m_randomnessParameters Offset: 0x1F4
				} // namespace C_INIT_AddVectorToVector

				namespace C_INIT_RemapInitialVisibilityScalar {
					constexpr auto n_field_output = 0x1CC; // Name: m_nFieldOutput Offset: 0x1CC
					constexpr auto fl_input_min = 0x1D0; // Name: m_flInputMin Offset: 0x1D0
					constexpr auto fl_input_max = 0x1D4; // Name: m_flInputMax Offset: 0x1D4
					constexpr auto fl_output_min = 0x1D8; // Name: m_flOutputMin Offset: 0x1D8
					constexpr auto fl_output_max = 0x1DC; // Name: m_flOutputMax Offset: 0x1DC
				} // namespace C_INIT_RemapInitialVisibilityScalar

				namespace C_OP_RemapTransformOrientationToYaw {
					constexpr auto transform_input = 0x1C0; // Name: m_TransformInput Offset: 0x1C0
					constexpr auto n_field_output = 0x228; // Name: m_nFieldOutput Offset: 0x228
					constexpr auto fl_rot_offset = 0x22C; // Name: m_flRotOffset Offset: 0x22C
					constexpr auto fl_spin_strength = 0x230; // Name: m_flSpinStrength Offset: 0x230
				} // namespace C_OP_RemapTransformOrientationToYaw

				namespace C_OP_RenderStatusEffect {
					constexpr auto p_texture_color_warp = 0x210; // Name: m_pTextureColorWarp Offset: 0x210
					constexpr auto p_texture_detail2 = 0x218; // Name: m_pTextureDetail2 Offset: 0x218
					constexpr auto p_texture_diffuse_warp = 0x220; // Name: m_pTextureDiffuseWarp Offset: 0x220
					constexpr auto p_texture_fresnel_color_warp = 0x228; // Name: m_pTextureFresnelColorWarp Offset: 0x228
					constexpr auto p_texture_fresnel_warp = 0x230; // Name: m_pTextureFresnelWarp Offset: 0x230
					constexpr auto p_texture_specular_warp = 0x238; // Name: m_pTextureSpecularWarp Offset: 0x238
					constexpr auto p_texture_env_map = 0x240; // Name: m_pTextureEnvMap Offset: 0x240
				} // namespace C_OP_RenderStatusEffect

				namespace C_OP_RandomForce {
					constexpr auto min_force = 0x1D0; // Name: m_MinForce Offset: 0x1D0
					constexpr auto max_force = 0x1DC; // Name: m_MaxForce Offset: 0x1DC
				} // namespace C_OP_RandomForce

				namespace ParticlePreviewState_t {
					constexpr auto preview_model = 0x0; // Name: m_previewModel Offset: 0x0
					constexpr auto n_mod_specific_data = 0x8; // Name: m_nModSpecificData Offset: 0x8
					constexpr auto ground_type = 0xC; // Name: m_groundType Offset: 0xC
					constexpr auto sequence_name = 0x10; // Name: m_sequenceName Offset: 0x10
					constexpr auto n_fire_particle_on_sequence_frame = 0x18; // Name: m_nFireParticleOnSequenceFrame Offset: 0x18
					constexpr auto hitbox_set_name = 0x20; // Name: m_hitboxSetName Offset: 0x20
					constexpr auto material_group_name = 0x28; // Name: m_materialGroupName Offset: 0x28
					constexpr auto vec_body_groups = 0x30; // Name: m_vecBodyGroups Offset: 0x30
					constexpr auto fl_playback_speed = 0x48; // Name: m_flPlaybackSpeed Offset: 0x48
					constexpr auto fl_particle_simulation_rate = 0x4C; // Name: m_flParticleSimulationRate Offset: 0x4C
					constexpr auto b_should_draw_hitboxes = 0x50; // Name: m_bShouldDrawHitboxes Offset: 0x50
					constexpr auto b_should_draw_attachments = 0x51; // Name: m_bShouldDrawAttachments Offset: 0x51
					constexpr auto b_should_draw_attachment_names = 0x52; // Name: m_bShouldDrawAttachmentNames Offset: 0x52
					constexpr auto b_should_draw_control_point_axes = 0x53; // Name: m_bShouldDrawControlPointAxes Offset: 0x53
					constexpr auto b_animation_non_looping = 0x54; // Name: m_bAnimationNonLooping Offset: 0x54
					constexpr auto vec_preview_gravity = 0x58; // Name: m_vecPreviewGravity Offset: 0x58
				} // namespace ParticlePreviewState_t

				namespace C_OP_RenderModels {
					constexpr auto b_only_render_in_effects_bloom_pass = 0x210; // Name: m_bOnlyRenderInEffectsBloomPass Offset: 0x210
					constexpr auto b_only_render_in_effects_water_pass = 0x211; // Name: m_bOnlyRenderInEffectsWaterPass Offset: 0x211
					constexpr auto b_use_mixed_resolution_rendering = 0x212; // Name: m_bUseMixedResolutionRendering Offset: 0x212
					constexpr auto b_only_render_in_effecs_game_overlay = 0x213; // Name: m_bOnlyRenderInEffecsGameOverlay Offset: 0x213
					constexpr auto model_list = 0x218; // Name: m_ModelList Offset: 0x218
					constexpr auto n_body_group_field = 0x230; // Name: m_nBodyGroupField Offset: 0x230
					constexpr auto n_sub_model_field = 0x234; // Name: m_nSubModelField Offset: 0x234
					constexpr auto b_ignore_normal = 0x238; // Name: m_bIgnoreNormal Offset: 0x238
					constexpr auto b_orient_z = 0x239; // Name: m_bOrientZ Offset: 0x239
					constexpr auto b_center_offset = 0x23A; // Name: m_bCenterOffset Offset: 0x23A
					constexpr auto vec_local_offset = 0x240; // Name: m_vecLocalOffset Offset: 0x240
					constexpr auto vec_local_rotation = 0x8B8; // Name: m_vecLocalRotation Offset: 0x8B8
					constexpr auto b_ignore_radius = 0xF30; // Name: m_bIgnoreRadius Offset: 0xF30
					constexpr auto n_model_scale_cp = 0xF34; // Name: m_nModelScaleCP Offset: 0xF34
					constexpr auto vec_component_scale = 0xF38; // Name: m_vecComponentScale Offset: 0xF38
					constexpr auto b_local_scale = 0x15B0; // Name: m_bLocalScale Offset: 0x15B0
					constexpr auto n_size_cull_bloat = 0x15B4; // Name: m_nSizeCullBloat Offset: 0x15B4
					constexpr auto b_animated = 0x15B8; // Name: m_bAnimated Offset: 0x15B8
					constexpr auto fl_animation_rate = 0x15C0; // Name: m_flAnimationRate Offset: 0x15C0
					constexpr auto b_scale_animation_rate = 0x1720; // Name: m_bScaleAnimationRate Offset: 0x1720
					constexpr auto b_force_looping_animation = 0x1721; // Name: m_bForceLoopingAnimation Offset: 0x1721
					constexpr auto b_reset_anim_on_stop = 0x1722; // Name: m_bResetAnimOnStop Offset: 0x1722
					constexpr auto b_manual_anim_frame = 0x1723; // Name: m_bManualAnimFrame Offset: 0x1723
					constexpr auto n_animation_scale_field = 0x1724; // Name: m_nAnimationScaleField Offset: 0x1724
					constexpr auto n_animation_field = 0x1728; // Name: m_nAnimationField Offset: 0x1728
					constexpr auto n_manual_frame_field = 0x172C; // Name: m_nManualFrameField Offset: 0x172C
					constexpr auto activity_name = 0x1730; // Name: m_ActivityName Offset: 0x1730
					constexpr auto sequence_name = 0x1830; // Name: m_SequenceName Offset: 0x1830
					constexpr auto b_enable_cloth_simulation = 0x1930; // Name: m_bEnableClothSimulation Offset: 0x1930
					constexpr auto cloth_effect_name = 0x1931; // Name: m_ClothEffectName Offset: 0x1931
					constexpr auto h_override_material = 0x1978; // Name: m_hOverrideMaterial Offset: 0x1978
					constexpr auto b_override_translucent_materials = 0x1980; // Name: m_bOverrideTranslucentMaterials Offset: 0x1980
					constexpr auto n_skin = 0x1988; // Name: m_nSkin Offset: 0x1988
					constexpr auto material_vars = 0x1AE8; // Name: m_MaterialVars Offset: 0x1AE8
					constexpr auto fl_manual_model_selection = 0x1B00; // Name: m_flManualModelSelection Offset: 0x1B00
					constexpr auto model_input = 0x1C60; // Name: m_modelInput Offset: 0x1C60
					constexpr auto n_lod = 0x1CC0; // Name: m_nLOD Offset: 0x1CC0
					constexpr auto econ_slot_name = 0x1CC4; // Name: m_EconSlotName Offset: 0x1CC4
					constexpr auto b_original_model = 0x1DC4; // Name: m_bOriginalModel Offset: 0x1DC4
					constexpr auto b_suppress_tint = 0x1DC5; // Name: m_bSuppressTint Offset: 0x1DC5
					constexpr auto n_sub_model_field_type = 0x1DC8; // Name: m_nSubModelFieldType Offset: 0x1DC8
					constexpr auto b_disable_shadows = 0x1DCC; // Name: m_bDisableShadows Offset: 0x1DCC
					constexpr auto b_disable_depth_prepass = 0x1DCD; // Name: m_bDisableDepthPrepass Offset: 0x1DCD
					constexpr auto b_accepts_decals = 0x1DCE; // Name: m_bAcceptsDecals Offset: 0x1DCE
					constexpr auto b_force_draw_interleved_with_siblings = 0x1DCF; // Name: m_bForceDrawInterlevedWithSiblings Offset: 0x1DCF
					constexpr auto b_do_not_draw_in_particle_pass = 0x1DD0; // Name: m_bDoNotDrawInParticlePass Offset: 0x1DD0
					constexpr auto b_allow_approximate_transforms = 0x1DD1; // Name: m_bAllowApproximateTransforms Offset: 0x1DD1
					constexpr auto sz_render_attribute = 0x1DD2; // Name: m_szRenderAttribute Offset: 0x1DD2
					constexpr auto fl_radius_scale = 0x1ED8; // Name: m_flRadiusScale Offset: 0x1ED8
					constexpr auto fl_alpha_scale = 0x2038; // Name: m_flAlphaScale Offset: 0x2038
					constexpr auto fl_roll_scale = 0x2198; // Name: m_flRollScale Offset: 0x2198
					constexpr auto n_alpha2_field = 0x22F8; // Name: m_nAlpha2Field Offset: 0x22F8
					constexpr auto vec_color_scale = 0x2300; // Name: m_vecColorScale Offset: 0x2300
					constexpr auto n_color_blend_type = 0x2978; // Name: m_nColorBlendType Offset: 0x2978
				} // namespace C_OP_RenderModels

				namespace C_OP_ModelCull {
					constexpr auto n_control_point_number = 0x1C0; // Name: m_nControlPointNumber Offset: 0x1C0
					constexpr auto b_bound_box = 0x1C4; // Name: m_bBoundBox Offset: 0x1C4
					constexpr auto b_cull_outside = 0x1C5; // Name: m_bCullOutside Offset: 0x1C5
					constexpr auto b_use_bones = 0x1C6; // Name: m_bUseBones Offset: 0x1C6
					constexpr auto hitbox_set_name = 0x1C7; // Name: m_HitboxSetName Offset: 0x1C7
				} // namespace C_OP_ModelCull

				namespace C_OP_SetFloat {
					constexpr auto input_value = 0x1C0; // Name: m_InputValue Offset: 0x1C0
					constexpr auto n_output_field = 0x320; // Name: m_nOutputField Offset: 0x320
					constexpr auto n_set_method = 0x324; // Name: m_nSetMethod Offset: 0x324
					constexpr auto lerp = 0x328; // Name: m_Lerp Offset: 0x328
				} // namespace C_OP_SetFloat

				namespace C_INIT_RemapTransformToVector {
					constexpr auto n_field_output = 0x1C8; // Name: m_nFieldOutput Offset: 0x1C8
					constexpr auto v_input_min = 0x1CC; // Name: m_vInputMin Offset: 0x1CC
					constexpr auto v_input_max = 0x1D8; // Name: m_vInputMax Offset: 0x1D8
					constexpr auto v_output_min = 0x1E4; // Name: m_vOutputMin Offset: 0x1E4
					constexpr auto v_output_max = 0x1F0; // Name: m_vOutputMax Offset: 0x1F0
					constexpr auto transform_input = 0x200; // Name: m_TransformInput Offset: 0x200
					constexpr auto local_space_transform = 0x268; // Name: m_LocalSpaceTransform Offset: 0x268
					constexpr auto fl_start_time = 0x2D0; // Name: m_flStartTime Offset: 0x2D0
					constexpr auto fl_end_time = 0x2D4; // Name: m_flEndTime Offset: 0x2D4
					constexpr auto n_set_method = 0x2D8; // Name: m_nSetMethod Offset: 0x2D8
					constexpr auto b_offset = 0x2DC; // Name: m_bOffset Offset: 0x2DC
					constexpr auto b_accelerate = 0x2DD; // Name: m_bAccelerate Offset: 0x2DD
					constexpr auto fl_remap_bias = 0x2E0; // Name: m_flRemapBias Offset: 0x2E0
				} // namespace C_INIT_RemapTransformToVector

				namespace C_OP_CalculateVectorAttribute {
					constexpr auto v_start_value = 0x1C0; // Name: m_vStartValue Offset: 0x1C0
					constexpr auto n_field_input1 = 0x1CC; // Name: m_nFieldInput1 Offset: 0x1CC
					constexpr auto fl_input_scale1 = 0x1D0; // Name: m_flInputScale1 Offset: 0x1D0
					constexpr auto n_field_input2 = 0x1D4; // Name: m_nFieldInput2 Offset: 0x1D4
					constexpr auto fl_input_scale2 = 0x1D8; // Name: m_flInputScale2 Offset: 0x1D8
					constexpr auto n_control_point_input1 = 0x1DC; // Name: m_nControlPointInput1 Offset: 0x1DC
					constexpr auto fl_control_point_scale1 = 0x1F0; // Name: m_flControlPointScale1 Offset: 0x1F0
					constexpr auto n_control_point_input2 = 0x1F4; // Name: m_nControlPointInput2 Offset: 0x1F4
					constexpr auto fl_control_point_scale2 = 0x208; // Name: m_flControlPointScale2 Offset: 0x208
					constexpr auto n_field_output = 0x20C; // Name: m_nFieldOutput Offset: 0x20C
					constexpr auto v_final_output_scale = 0x210; // Name: m_vFinalOutputScale Offset: 0x210
				} // namespace C_OP_CalculateVectorAttribute

				namespace C_OP_RemapVectortoCP {
					constexpr auto n_out_control_point_number = 0x1C0; // Name: m_nOutControlPointNumber Offset: 0x1C0
					constexpr auto n_field_input = 0x1C4; // Name: m_nFieldInput Offset: 0x1C4
					constexpr auto n_particle_number = 0x1C8; // Name: m_nParticleNumber Offset: 0x1C8
				} // namespace C_OP_RemapVectortoCP

				namespace C_OP_SetFromCPSnapshot {
					constexpr auto n_control_point_number = 0x1C0; // Name: m_nControlPointNumber Offset: 0x1C0
					constexpr auto n_attribute_to_read = 0x1C4; // Name: m_nAttributeToRead Offset: 0x1C4
					constexpr auto n_attribute_to_write = 0x1C8; // Name: m_nAttributeToWrite Offset: 0x1C8
					constexpr auto n_local_space_cp = 0x1CC; // Name: m_nLocalSpaceCP Offset: 0x1CC
					constexpr auto b_random = 0x1D0; // Name: m_bRandom Offset: 0x1D0
					constexpr auto b_reverse = 0x1D1; // Name: m_bReverse Offset: 0x1D1
					constexpr auto n_random_seed = 0x1D4; // Name: m_nRandomSeed Offset: 0x1D4
					constexpr auto n_snap_shot_start_point = 0x1D8; // Name: m_nSnapShotStartPoint Offset: 0x1D8
					constexpr auto n_snap_shot_increment = 0x338; // Name: m_nSnapShotIncrement Offset: 0x338
					constexpr auto fl_interpolation = 0x498; // Name: m_flInterpolation Offset: 0x498
					constexpr auto b_sub_sample = 0x5F8; // Name: m_bSubSample Offset: 0x5F8
					constexpr auto b_prev = 0x5F9; // Name: m_bPrev Offset: 0x5F9
				} // namespace C_OP_SetFromCPSnapshot

				namespace C_OP_MovementRotateParticleAroundAxis {
					constexpr auto vec_rot_axis = 0x1C0; // Name: m_vecRotAxis Offset: 0x1C0
					constexpr auto fl_rot_rate = 0x838; // Name: m_flRotRate Offset: 0x838
					constexpr auto transform_input = 0x998; // Name: m_TransformInput Offset: 0x998
					constexpr auto b_local_space = 0xA00; // Name: m_bLocalSpace Offset: 0xA00
				} // namespace C_OP_MovementRotateParticleAroundAxis

				namespace C_OP_DistanceBetweenCPsToCP {
					constexpr auto n_start_cp = 0x1C8; // Name: m_nStartCP Offset: 0x1C8
					constexpr auto n_end_cp = 0x1CC; // Name: m_nEndCP Offset: 0x1CC
					constexpr auto n_output_cp = 0x1D0; // Name: m_nOutputCP Offset: 0x1D0
					constexpr auto n_output_cpfield = 0x1D4; // Name: m_nOutputCPField Offset: 0x1D4
					constexpr auto b_set_once = 0x1D8; // Name: m_bSetOnce Offset: 0x1D8
					constexpr auto fl_input_min = 0x1DC; // Name: m_flInputMin Offset: 0x1DC
					constexpr auto fl_input_max = 0x1E0; // Name: m_flInputMax Offset: 0x1E0
					constexpr auto fl_output_min = 0x1E4; // Name: m_flOutputMin Offset: 0x1E4
					constexpr auto fl_output_max = 0x1E8; // Name: m_flOutputMax Offset: 0x1E8
					constexpr auto fl_max_trace_length = 0x1EC; // Name: m_flMaxTraceLength Offset: 0x1EC
					constexpr auto fl_losscale = 0x1F0; // Name: m_flLOSScale Offset: 0x1F0
					constexpr auto b_los = 0x1F4; // Name: m_bLOS Offset: 0x1F4
					constexpr auto collision_group_name = 0x1F5; // Name: m_CollisionGroupName Offset: 0x1F5
					constexpr auto n_trace_set = 0x278; // Name: m_nTraceSet Offset: 0x278
					constexpr auto n_set_parent = 0x27C; // Name: m_nSetParent Offset: 0x27C
				} // namespace C_OP_DistanceBetweenCPsToCP

				namespace C_OP_ConstrainDistanceToPath {
					constexpr auto f_min_distance = 0x1C0; // Name: m_fMinDistance Offset: 0x1C0
					constexpr auto fl_max_distance0 = 0x1C4; // Name: m_flMaxDistance0 Offset: 0x1C4
					constexpr auto fl_max_distance_mid = 0x1C8; // Name: m_flMaxDistanceMid Offset: 0x1C8
					constexpr auto fl_max_distance1 = 0x1CC; // Name: m_flMaxDistance1 Offset: 0x1CC
					constexpr auto path_parameters = 0x1D0; // Name: m_PathParameters Offset: 0x1D0
					constexpr auto fl_travel_time = 0x210; // Name: m_flTravelTime Offset: 0x210
					constexpr auto n_field_scale = 0x214; // Name: m_nFieldScale Offset: 0x214
					constexpr auto n_manual_tfield = 0x218; // Name: m_nManualTField Offset: 0x218
				} // namespace C_OP_ConstrainDistanceToPath

				namespace C_OP_DistanceCull {
					constexpr auto n_control_point = 0x1C0; // Name: m_nControlPoint Offset: 0x1C0
					constexpr auto vec_point_offset = 0x1C4; // Name: m_vecPointOffset Offset: 0x1C4
					constexpr auto fl_distance = 0x1D0; // Name: m_flDistance Offset: 0x1D0
					constexpr auto b_cull_inside = 0x1D4; // Name: m_bCullInside Offset: 0x1D4
				} // namespace C_OP_DistanceCull

				namespace C_OP_RotateVector {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto vec_rot_axis_min = 0x1C4; // Name: m_vecRotAxisMin Offset: 0x1C4
					constexpr auto vec_rot_axis_max = 0x1D0; // Name: m_vecRotAxisMax Offset: 0x1D0
					constexpr auto fl_rot_rate_min = 0x1DC; // Name: m_flRotRateMin Offset: 0x1DC
					constexpr auto fl_rot_rate_max = 0x1E0; // Name: m_flRotRateMax Offset: 0x1E0
					constexpr auto b_normalize = 0x1E4; // Name: m_bNormalize Offset: 0x1E4
					constexpr auto fl_scale = 0x1E8; // Name: m_flScale Offset: 0x1E8
				} // namespace C_OP_RotateVector

				namespace C_INIT_CreateAlongPath {
					constexpr auto f_max_distance = 0x1C8; // Name: m_fMaxDistance Offset: 0x1C8
					constexpr auto path_params = 0x1D0; // Name: m_PathParams Offset: 0x1D0
					constexpr auto b_use_random_cps = 0x210; // Name: m_bUseRandomCPs Offset: 0x210
					constexpr auto v_end_offset = 0x214; // Name: m_vEndOffset Offset: 0x214
					constexpr auto b_save_offset = 0x220; // Name: m_bSaveOffset Offset: 0x220
				} // namespace C_INIT_CreateAlongPath

				namespace C_OP_SetControlPointsToModelParticles {
					constexpr auto hitbox_set_name = 0x1C0; // Name: m_HitboxSetName Offset: 0x1C0
					constexpr auto attachment_name = 0x240; // Name: m_AttachmentName Offset: 0x240
					constexpr auto n_first_control_point = 0x2C0; // Name: m_nFirstControlPoint Offset: 0x2C0
					constexpr auto n_num_control_points = 0x2C4; // Name: m_nNumControlPoints Offset: 0x2C4
					constexpr auto n_first_source_point = 0x2C8; // Name: m_nFirstSourcePoint Offset: 0x2C8
					constexpr auto b_skin = 0x2CC; // Name: m_bSkin Offset: 0x2CC
					constexpr auto b_attachment = 0x2CD; // Name: m_bAttachment Offset: 0x2CD
				} // namespace C_OP_SetControlPointsToModelParticles

				namespace C_INIT_RemapNamedModelSequenceToScalar {
				} // namespace C_INIT_RemapNamedModelSequenceToScalar

				namespace C_OP_RenderLights {
					constexpr auto fl_animation_rate = 0x218; // Name: m_flAnimationRate Offset: 0x218
					constexpr auto n_animation_type = 0x21C; // Name: m_nAnimationType Offset: 0x21C
					constexpr auto b_animate_in_fps = 0x220; // Name: m_bAnimateInFPS Offset: 0x220
					constexpr auto fl_min_size = 0x224; // Name: m_flMinSize Offset: 0x224
					constexpr auto fl_max_size = 0x228; // Name: m_flMaxSize Offset: 0x228
					constexpr auto fl_start_fade_size = 0x22C; // Name: m_flStartFadeSize Offset: 0x22C
					constexpr auto fl_end_fade_size = 0x230; // Name: m_flEndFadeSize Offset: 0x230
				} // namespace C_OP_RenderLights

				namespace C_OP_DecayClampCount {
					constexpr auto n_count = 0x1C0; // Name: m_nCount Offset: 0x1C0
				} // namespace C_OP_DecayClampCount

				namespace C_INIT_ColorLitPerParticle {
					constexpr auto color_min = 0x1E0; // Name: m_ColorMin Offset: 0x1E0
					constexpr auto color_max = 0x1E4; // Name: m_ColorMax Offset: 0x1E4
					constexpr auto tint_min = 0x1E8; // Name: m_TintMin Offset: 0x1E8
					constexpr auto tint_max = 0x1EC; // Name: m_TintMax Offset: 0x1EC
					constexpr auto fl_tint_perc = 0x1F0; // Name: m_flTintPerc Offset: 0x1F0
					constexpr auto n_tint_blend_mode = 0x1F4; // Name: m_nTintBlendMode Offset: 0x1F4
					constexpr auto fl_light_amplification = 0x1F8; // Name: m_flLightAmplification Offset: 0x1F8
				} // namespace C_INIT_ColorLitPerParticle

				namespace C_OP_RenderPoints {
					constexpr auto h_material = 0x210; // Name: m_hMaterial Offset: 0x210
				} // namespace C_OP_RenderPoints

				namespace C_INIT_CreateOnGrid {
					constexpr auto n_xcount = 0x1C8; // Name: m_nXCount Offset: 0x1C8
					constexpr auto n_ycount = 0x328; // Name: m_nYCount Offset: 0x328
					constexpr auto n_zcount = 0x488; // Name: m_nZCount Offset: 0x488
					constexpr auto n_xspacing = 0x5E8; // Name: m_nXSpacing Offset: 0x5E8
					constexpr auto n_yspacing = 0x748; // Name: m_nYSpacing Offset: 0x748
					constexpr auto n_zspacing = 0x8A8; // Name: m_nZSpacing Offset: 0x8A8
					constexpr auto n_control_point_number = 0xA08; // Name: m_nControlPointNumber Offset: 0xA08
					constexpr auto b_local_space = 0xA0C; // Name: m_bLocalSpace Offset: 0xA0C
					constexpr auto b_center = 0xA0D; // Name: m_bCenter Offset: 0xA0D
					constexpr auto b_hollow = 0xA0E; // Name: m_bHollow Offset: 0xA0E
				} // namespace C_INIT_CreateOnGrid

				namespace C_OP_RampCPLinearRandom {
					constexpr auto n_out_control_point_number = 0x1C8; // Name: m_nOutControlPointNumber Offset: 0x1C8
					constexpr auto vec_rate_min = 0x1CC; // Name: m_vecRateMin Offset: 0x1CC
					constexpr auto vec_rate_max = 0x1D8; // Name: m_vecRateMax Offset: 0x1D8
				} // namespace C_OP_RampCPLinearRandom

				namespace C_OP_RenderCables {
					constexpr auto fl_radius_scale = 0x210; // Name: m_flRadiusScale Offset: 0x210
					constexpr auto fl_alpha_scale = 0x370; // Name: m_flAlphaScale Offset: 0x370
					constexpr auto vec_color_scale = 0x4D0; // Name: m_vecColorScale Offset: 0x4D0
					constexpr auto n_color_blend_type = 0xB48; // Name: m_nColorBlendType Offset: 0xB48
					constexpr auto h_material = 0xB50; // Name: m_hMaterial Offset: 0xB50
					constexpr auto n_texture_repetition_mode = 0xB58; // Name: m_nTextureRepetitionMode Offset: 0xB58
					constexpr auto fl_texture_repeats_per_segment = 0xB60; // Name: m_flTextureRepeatsPerSegment Offset: 0xB60
					constexpr auto fl_texture_repeats_circumference = 0xCC0; // Name: m_flTextureRepeatsCircumference Offset: 0xCC0
					constexpr auto fl_color_map_offset_v = 0xE20; // Name: m_flColorMapOffsetV Offset: 0xE20
					constexpr auto fl_color_map_offset_u = 0xF80; // Name: m_flColorMapOffsetU Offset: 0xF80
					constexpr auto fl_normal_map_offset_v = 0x10E0; // Name: m_flNormalMapOffsetV Offset: 0x10E0
					constexpr auto fl_normal_map_offset_u = 0x1240; // Name: m_flNormalMapOffsetU Offset: 0x1240
					constexpr auto b_draw_cable_caps = 0x13A0; // Name: m_bDrawCableCaps Offset: 0x13A0
					constexpr auto fl_cap_roundness = 0x13A4; // Name: m_flCapRoundness Offset: 0x13A4
					constexpr auto fl_cap_offset_amount = 0x13A8; // Name: m_flCapOffsetAmount Offset: 0x13A8
					constexpr auto fl_tess_scale = 0x13AC; // Name: m_flTessScale Offset: 0x13AC
					constexpr auto n_min_tesselation = 0x13B0; // Name: m_nMinTesselation Offset: 0x13B0
					constexpr auto n_max_tesselation = 0x13B4; // Name: m_nMaxTesselation Offset: 0x13B4
					constexpr auto n_roundness = 0x13B8; // Name: m_nRoundness Offset: 0x13B8
					constexpr auto lighting_transform = 0x13C0; // Name: m_LightingTransform Offset: 0x13C0
					constexpr auto material_float_vars = 0x1428; // Name: m_MaterialFloatVars Offset: 0x1428
					constexpr auto material_vec_vars = 0x1458; // Name: m_MaterialVecVars Offset: 0x1458
				} // namespace C_OP_RenderCables

				namespace C_OP_VelocityMatchingForce {
					constexpr auto fl_dir_scale = 0x1C0; // Name: m_flDirScale Offset: 0x1C0
					constexpr auto fl_spd_scale = 0x1C4; // Name: m_flSpdScale Offset: 0x1C4
					constexpr auto fl_neighbor_distance = 0x1C8; // Name: m_flNeighborDistance Offset: 0x1C8
					constexpr auto fl_facing_strength = 0x1CC; // Name: m_flFacingStrength Offset: 0x1CC
					constexpr auto b_use_aabb = 0x1D0; // Name: m_bUseAABB Offset: 0x1D0
					constexpr auto n_cpbroadcast = 0x1D4; // Name: m_nCPBroadcast Offset: 0x1D4
				} // namespace C_OP_VelocityMatchingForce

				namespace C_OP_IntraParticleForce {
					constexpr auto fl_attraction_min_distance = 0x1D0; // Name: m_flAttractionMinDistance Offset: 0x1D0
					constexpr auto fl_attraction_max_distance = 0x1D4; // Name: m_flAttractionMaxDistance Offset: 0x1D4
					constexpr auto fl_attraction_max_strength = 0x1D8; // Name: m_flAttractionMaxStrength Offset: 0x1D8
					constexpr auto fl_repulsion_min_distance = 0x1DC; // Name: m_flRepulsionMinDistance Offset: 0x1DC
					constexpr auto fl_repulsion_max_distance = 0x1E0; // Name: m_flRepulsionMaxDistance Offset: 0x1E0
					constexpr auto fl_repulsion_max_strength = 0x1E4; // Name: m_flRepulsionMaxStrength Offset: 0x1E4
					constexpr auto b_use_aabb = 0x1E8; // Name: m_bUseAABB Offset: 0x1E8
					constexpr auto b_thread_it = 0x1E9; // Name: m_bThreadIt Offset: 0x1E9
				} // namespace C_OP_IntraParticleForce

				namespace C_OP_WorldCollideConstraint {
				} // namespace C_OP_WorldCollideConstraint

				namespace C_INIT_RandomAlphaWindowThreshold {
					constexpr auto fl_min = 0x1C8; // Name: m_flMin Offset: 0x1C8
					constexpr auto fl_max = 0x1CC; // Name: m_flMax Offset: 0x1CC
					constexpr auto fl_exponent = 0x1D0; // Name: m_flExponent Offset: 0x1D0
				} // namespace C_INIT_RandomAlphaWindowThreshold

				namespace C_INIT_CreateOnModelAtHeight {
					constexpr auto b_use_bones = 0x1C8; // Name: m_bUseBones Offset: 0x1C8
					constexpr auto b_force_z = 0x1C9; // Name: m_bForceZ Offset: 0x1C9
					constexpr auto n_control_point_number = 0x1CC; // Name: m_nControlPointNumber Offset: 0x1CC
					constexpr auto n_height_cp = 0x1D0; // Name: m_nHeightCP Offset: 0x1D0
					constexpr auto b_use_water_height = 0x1D4; // Name: m_bUseWaterHeight Offset: 0x1D4
					constexpr auto fl_desired_height = 0x1D8; // Name: m_flDesiredHeight Offset: 0x1D8
					constexpr auto vec_hit_box_scale = 0x338; // Name: m_vecHitBoxScale Offset: 0x338
					constexpr auto vec_direction_bias = 0x9B0; // Name: m_vecDirectionBias Offset: 0x9B0
					constexpr auto n_bias_type = 0x1028; // Name: m_nBiasType Offset: 0x1028
					constexpr auto b_local_coords = 0x102C; // Name: m_bLocalCoords Offset: 0x102C
					constexpr auto b_prefer_moving_boxes = 0x102D; // Name: m_bPreferMovingBoxes Offset: 0x102D
					constexpr auto hitbox_set_name = 0x102E; // Name: m_HitboxSetName Offset: 0x102E
					constexpr auto fl_hitbox_velocity_scale = 0x10B0; // Name: m_flHitboxVelocityScale Offset: 0x10B0
					constexpr auto fl_max_bone_velocity = 0x1210; // Name: m_flMaxBoneVelocity Offset: 0x1210
				} // namespace C_INIT_CreateOnModelAtHeight

				namespace C_INIT_CreateSequentialPathV2 {
					constexpr auto f_max_distance = 0x1C8; // Name: m_fMaxDistance Offset: 0x1C8
					constexpr auto fl_num_to_assign = 0x328; // Name: m_flNumToAssign Offset: 0x328
					constexpr auto b_loop = 0x488; // Name: m_bLoop Offset: 0x488
					constexpr auto b_cppairs = 0x489; // Name: m_bCPPairs Offset: 0x489
					constexpr auto b_save_offset = 0x48A; // Name: m_bSaveOffset Offset: 0x48A
					constexpr auto path_params = 0x490; // Name: m_PathParams Offset: 0x490
				} // namespace C_INIT_CreateSequentialPathV2

				namespace VecInputMaterialVariable_t {
					constexpr auto str_variable = 0x0; // Name: m_strVariable Offset: 0x0
					constexpr auto vec_input = 0x8; // Name: m_vecInput Offset: 0x8
				} // namespace VecInputMaterialVariable_t

				namespace C_INIT_RemapInitialDirectionToTransformToVector {
					constexpr auto transform_input = 0x1C8; // Name: m_TransformInput Offset: 0x1C8
					constexpr auto n_field_output = 0x230; // Name: m_nFieldOutput Offset: 0x230
					constexpr auto fl_scale = 0x234; // Name: m_flScale Offset: 0x234
					constexpr auto fl_offset_rot = 0x238; // Name: m_flOffsetRot Offset: 0x238
					constexpr auto vec_offset_axis = 0x23C; // Name: m_vecOffsetAxis Offset: 0x23C
					constexpr auto b_normalize = 0x248; // Name: m_bNormalize Offset: 0x248
				} // namespace C_INIT_RemapInitialDirectionToTransformToVector

				namespace C_OP_LockToSavedSequentialPathV2 {
					constexpr auto fl_fade_start = 0x1C0; // Name: m_flFadeStart Offset: 0x1C0
					constexpr auto fl_fade_end = 0x1C4; // Name: m_flFadeEnd Offset: 0x1C4
					constexpr auto b_cppairs = 0x1C8; // Name: m_bCPPairs Offset: 0x1C8
					constexpr auto path_params = 0x1D0; // Name: m_PathParams Offset: 0x1D0
				} // namespace C_OP_LockToSavedSequentialPathV2

				namespace C_OP_NormalLock {
					constexpr auto n_control_point_number = 0x1C0; // Name: m_nControlPointNumber Offset: 0x1C0
				} // namespace C_OP_NormalLock

				namespace C_INIT_RemapTransformOrientationToRotations {
					constexpr auto transform_input = 0x1C8; // Name: m_TransformInput Offset: 0x1C8
					constexpr auto vec_rotation = 0x230; // Name: m_vecRotation Offset: 0x230
					constexpr auto b_use_quat = 0x23C; // Name: m_bUseQuat Offset: 0x23C
					constexpr auto b_write_normal = 0x23D; // Name: m_bWriteNormal Offset: 0x23D
				} // namespace C_INIT_RemapTransformOrientationToRotations

				namespace C_OP_Cull {
					constexpr auto fl_cull_perc = 0x1C0; // Name: m_flCullPerc Offset: 0x1C0
					constexpr auto fl_cull_start = 0x1C4; // Name: m_flCullStart Offset: 0x1C4
					constexpr auto fl_cull_end = 0x1C8; // Name: m_flCullEnd Offset: 0x1C8
					constexpr auto fl_cull_exp = 0x1CC; // Name: m_flCullExp Offset: 0x1CC
				} // namespace C_OP_Cull

				namespace C_INIT_RandomYawFlip {
					constexpr auto fl_percent = 0x1C8; // Name: m_flPercent Offset: 0x1C8
				} // namespace C_INIT_RandomYawFlip

				namespace C_OP_RemapSDFGradientToVectorAttribute {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
				} // namespace C_OP_RemapSDFGradientToVectorAttribute

				namespace C_INIT_CreateWithinSphereTransform {
					constexpr auto f_radius_min = 0x1C8; // Name: m_fRadiusMin Offset: 0x1C8
					constexpr auto f_radius_max = 0x328; // Name: m_fRadiusMax Offset: 0x328
					constexpr auto vec_distance_bias = 0x488; // Name: m_vecDistanceBias Offset: 0x488
					constexpr auto vec_distance_bias_abs = 0xB00; // Name: m_vecDistanceBiasAbs Offset: 0xB00
					constexpr auto transform_input = 0xB10; // Name: m_TransformInput Offset: 0xB10
					constexpr auto f_speed_min = 0xB78; // Name: m_fSpeedMin Offset: 0xB78
					constexpr auto f_speed_max = 0xCD8; // Name: m_fSpeedMax Offset: 0xCD8
					constexpr auto f_speed_rand_exp = 0xE38; // Name: m_fSpeedRandExp Offset: 0xE38
					constexpr auto b_local_coords = 0xE3C; // Name: m_bLocalCoords Offset: 0xE3C
					constexpr auto fl_end_cpgrowth_time = 0xE40; // Name: m_flEndCPGrowthTime Offset: 0xE40
					constexpr auto local_coordinate_system_speed_min = 0xE48; // Name: m_LocalCoordinateSystemSpeedMin Offset: 0xE48
					constexpr auto local_coordinate_system_speed_max = 0x14C0; // Name: m_LocalCoordinateSystemSpeedMax Offset: 0x14C0
					constexpr auto n_field_output = 0x1B38; // Name: m_nFieldOutput Offset: 0x1B38
					constexpr auto n_field_velocity = 0x1B3C; // Name: m_nFieldVelocity Offset: 0x1B3C
				} // namespace C_INIT_CreateWithinSphereTransform

				namespace SequenceWeightedList_t {
					constexpr auto n_sequence = 0x0; // Name: m_nSequence Offset: 0x0
					constexpr auto fl_relative_weight = 0x4; // Name: m_flRelativeWeight Offset: 0x4
				} // namespace SequenceWeightedList_t

				namespace C_OP_RenderText {
					constexpr auto outline_color = 0x210; // Name: m_OutlineColor Offset: 0x210
					constexpr auto default_text = 0x218; // Name: m_DefaultText Offset: 0x218
				} // namespace C_OP_RenderText

				namespace C_OP_LerpToInitialPosition {
					constexpr auto n_control_point_number = 0x1C0; // Name: m_nControlPointNumber Offset: 0x1C0
					constexpr auto fl_interpolation = 0x1C8; // Name: m_flInterpolation Offset: 0x1C8
					constexpr auto n_cache_field = 0x328; // Name: m_nCacheField Offset: 0x328
					constexpr auto fl_scale = 0x330; // Name: m_flScale Offset: 0x330
					constexpr auto vec_scale = 0x490; // Name: m_vecScale Offset: 0x490
				} // namespace C_OP_LerpToInitialPosition

				namespace C_OP_DistanceBetweenVecs {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto vec_point1 = 0x1C8; // Name: m_vecPoint1 Offset: 0x1C8
					constexpr auto vec_point2 = 0x840; // Name: m_vecPoint2 Offset: 0x840
					constexpr auto fl_input_min = 0xEB8; // Name: m_flInputMin Offset: 0xEB8
					constexpr auto fl_input_max = 0x1018; // Name: m_flInputMax Offset: 0x1018
					constexpr auto fl_output_min = 0x1178; // Name: m_flOutputMin Offset: 0x1178
					constexpr auto fl_output_max = 0x12D8; // Name: m_flOutputMax Offset: 0x12D8
					constexpr auto n_set_method = 0x1438; // Name: m_nSetMethod Offset: 0x1438
					constexpr auto b_delta_time = 0x143C; // Name: m_bDeltaTime Offset: 0x143C
				} // namespace C_OP_DistanceBetweenVecs

				namespace C_INIT_RandomRotation {
				} // namespace C_INIT_RandomRotation

				namespace C_OP_DampenToCP {
					constexpr auto n_control_point_number = 0x1C0; // Name: m_nControlPointNumber Offset: 0x1C0
					constexpr auto fl_range = 0x1C4; // Name: m_flRange Offset: 0x1C4
					constexpr auto fl_scale = 0x1C8; // Name: m_flScale Offset: 0x1C8
				} // namespace C_OP_DampenToCP

				namespace C_INIT_InitialVelocityFromHitbox {
					constexpr auto fl_velocity_min = 0x1C8; // Name: m_flVelocityMin Offset: 0x1C8
					constexpr auto fl_velocity_max = 0x1CC; // Name: m_flVelocityMax Offset: 0x1CC
					constexpr auto n_control_point_number = 0x1D0; // Name: m_nControlPointNumber Offset: 0x1D0
					constexpr auto hitbox_set_name = 0x1D4; // Name: m_HitboxSetName Offset: 0x1D4
					constexpr auto b_use_bones = 0x254; // Name: m_bUseBones Offset: 0x254
				} // namespace C_INIT_InitialVelocityFromHitbox

				namespace CParticleFunctionInitializer {
					constexpr auto n_associated_emitter_index = 0x1C0; // Name: m_nAssociatedEmitterIndex Offset: 0x1C0
				} // namespace CParticleFunctionInitializer

				namespace C_OP_LerpEndCapVector {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto vec_output = 0x1C4; // Name: m_vecOutput Offset: 0x1C4
					constexpr auto fl_lerp_time = 0x1D0; // Name: m_flLerpTime Offset: 0x1D0
				} // namespace C_OP_LerpEndCapVector

				namespace C_OP_VelocityDecay {
					constexpr auto fl_min_velocity = 0x1C0; // Name: m_flMinVelocity Offset: 0x1C0
				} // namespace C_OP_VelocityDecay

				namespace C_OP_RenderScreenShake {
					constexpr auto fl_duration_scale = 0x210; // Name: m_flDurationScale Offset: 0x210
					constexpr auto fl_radius_scale = 0x214; // Name: m_flRadiusScale Offset: 0x214
					constexpr auto fl_frequency_scale = 0x218; // Name: m_flFrequencyScale Offset: 0x218
					constexpr auto fl_amplitude_scale = 0x21C; // Name: m_flAmplitudeScale Offset: 0x21C
					constexpr auto n_radius_field = 0x220; // Name: m_nRadiusField Offset: 0x220
					constexpr auto n_duration_field = 0x224; // Name: m_nDurationField Offset: 0x224
					constexpr auto n_frequency_field = 0x228; // Name: m_nFrequencyField Offset: 0x228
					constexpr auto n_amplitude_field = 0x22C; // Name: m_nAmplitudeField Offset: 0x22C
					constexpr auto n_filter_cp = 0x230; // Name: m_nFilterCP Offset: 0x230
				} // namespace C_OP_RenderScreenShake

				namespace C_OP_RopeSpringConstraint {
					constexpr auto fl_rest_length = 0x1C0; // Name: m_flRestLength Offset: 0x1C0
					constexpr auto fl_min_distance = 0x320; // Name: m_flMinDistance Offset: 0x320
					constexpr auto fl_max_distance = 0x480; // Name: m_flMaxDistance Offset: 0x480
					constexpr auto fl_adjustment_scale = 0x5E0; // Name: m_flAdjustmentScale Offset: 0x5E0
					constexpr auto fl_initial_resting_length = 0x5E8; // Name: m_flInitialRestingLength Offset: 0x5E8
				} // namespace C_OP_RopeSpringConstraint

				namespace C_OP_SetCPOrientationToPointAtCP {
					constexpr auto n_input_cp = 0x1C8; // Name: m_nInputCP Offset: 0x1C8
					constexpr auto n_output_cp = 0x1CC; // Name: m_nOutputCP Offset: 0x1CC
					constexpr auto fl_interpolation = 0x1D0; // Name: m_flInterpolation Offset: 0x1D0
					constexpr auto b2_dorientation = 0x330; // Name: m_b2DOrientation Offset: 0x330
					constexpr auto b_avoid_singularity = 0x331; // Name: m_bAvoidSingularity Offset: 0x331
					constexpr auto b_point_away = 0x332; // Name: m_bPointAway Offset: 0x332
				} // namespace C_OP_SetCPOrientationToPointAtCP

				namespace C_OP_LockToPointList {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto point_list = 0x1C8; // Name: m_pointList Offset: 0x1C8
					constexpr auto b_place_along_path = 0x1E0; // Name: m_bPlaceAlongPath Offset: 0x1E0
					constexpr auto b_closed_loop = 0x1E1; // Name: m_bClosedLoop Offset: 0x1E1
					constexpr auto n_num_points_along_path = 0x1E4; // Name: m_nNumPointsAlongPath Offset: 0x1E4
				} // namespace C_OP_LockToPointList

				namespace C_OP_RenderTreeShake {
					constexpr auto fl_peak_strength = 0x210; // Name: m_flPeakStrength Offset: 0x210
					constexpr auto n_peak_strength_field_override = 0x214; // Name: m_nPeakStrengthFieldOverride Offset: 0x214
					constexpr auto fl_radius = 0x218; // Name: m_flRadius Offset: 0x218
					constexpr auto n_radius_field_override = 0x21C; // Name: m_nRadiusFieldOverride Offset: 0x21C
					constexpr auto fl_shake_duration = 0x220; // Name: m_flShakeDuration Offset: 0x220
					constexpr auto fl_transition_time = 0x224; // Name: m_flTransitionTime Offset: 0x224
					constexpr auto fl_twist_amount = 0x228; // Name: m_flTwistAmount Offset: 0x228
					constexpr auto fl_radial_amount = 0x22C; // Name: m_flRadialAmount Offset: 0x22C
					constexpr auto fl_control_point_orientation_amount = 0x230; // Name: m_flControlPointOrientationAmount Offset: 0x230
					constexpr auto n_control_point_for_linear_direction = 0x234; // Name: m_nControlPointForLinearDirection Offset: 0x234
				} // namespace C_OP_RenderTreeShake

				namespace C_OP_MovementPlaceOnGround {
					constexpr auto fl_offset = 0x1C0; // Name: m_flOffset Offset: 0x1C0
					constexpr auto fl_max_trace_length = 0x320; // Name: m_flMaxTraceLength Offset: 0x320
					constexpr auto fl_tolerance = 0x324; // Name: m_flTolerance Offset: 0x324
					constexpr auto fl_trace_offset = 0x328; // Name: m_flTraceOffset Offset: 0x328
					constexpr auto fl_lerp_rate = 0x32C; // Name: m_flLerpRate Offset: 0x32C
					constexpr auto collision_group_name = 0x330; // Name: m_CollisionGroupName Offset: 0x330
					constexpr auto n_trace_set = 0x3B0; // Name: m_nTraceSet Offset: 0x3B0
					constexpr auto n_ref_cp1 = 0x3B4; // Name: m_nRefCP1 Offset: 0x3B4
					constexpr auto n_ref_cp2 = 0x3B8; // Name: m_nRefCP2 Offset: 0x3B8
					constexpr auto n_lerp_cp = 0x3BC; // Name: m_nLerpCP Offset: 0x3BC
					constexpr auto n_trace_miss_behavior = 0x3C8; // Name: m_nTraceMissBehavior Offset: 0x3C8
					constexpr auto b_include_shot_hull = 0x3CC; // Name: m_bIncludeShotHull Offset: 0x3CC
					constexpr auto b_include_water = 0x3CD; // Name: m_bIncludeWater Offset: 0x3CD
					constexpr auto b_set_normal = 0x3D0; // Name: m_bSetNormal Offset: 0x3D0
					constexpr auto b_scale_offset = 0x3D1; // Name: m_bScaleOffset Offset: 0x3D1
					constexpr auto n_preserve_offset_cp = 0x3D4; // Name: m_nPreserveOffsetCP Offset: 0x3D4
					constexpr auto n_ignore_cp = 0x3D8; // Name: m_nIgnoreCP Offset: 0x3D8
				} // namespace C_OP_MovementPlaceOnGround

				namespace C_OP_SetCPOrientationToDirection {
					constexpr auto n_input_control_point = 0x1C0; // Name: m_nInputControlPoint Offset: 0x1C0
					constexpr auto n_output_control_point = 0x1C4; // Name: m_nOutputControlPoint Offset: 0x1C4
				} // namespace C_OP_SetCPOrientationToDirection

				namespace C_OP_RemapCrossProductOfTwoVectorsToVector {
					constexpr auto input_vec1 = 0x1C0; // Name: m_InputVec1 Offset: 0x1C0
					constexpr auto input_vec2 = 0x838; // Name: m_InputVec2 Offset: 0x838
					constexpr auto n_field_output = 0xEB0; // Name: m_nFieldOutput Offset: 0xEB0
					constexpr auto b_normalize = 0xEB4; // Name: m_bNormalize Offset: 0xEB4
				} // namespace C_OP_RemapCrossProductOfTwoVectorsToVector

				namespace C_INIT_RandomRotationSpeed {
				} // namespace C_INIT_RandomRotationSpeed

				namespace C_INIT_InitFloat {
					constexpr auto input_value = 0x1C8; // Name: m_InputValue Offset: 0x1C8
					constexpr auto n_output_field = 0x328; // Name: m_nOutputField Offset: 0x328
					constexpr auto n_set_method = 0x32C; // Name: m_nSetMethod Offset: 0x32C
					constexpr auto input_strength = 0x330; // Name: m_InputStrength Offset: 0x330
				} // namespace C_INIT_InitFloat

				namespace C_OP_InheritFromParentParticlesV2 {
					constexpr auto fl_scale = 0x1C0; // Name: m_flScale Offset: 0x1C0
					constexpr auto n_field_output = 0x1C4; // Name: m_nFieldOutput Offset: 0x1C4
					constexpr auto n_increment = 0x1C8; // Name: m_nIncrement Offset: 0x1C8
					constexpr auto b_random_distribution = 0x1CC; // Name: m_bRandomDistribution Offset: 0x1CC
					constexpr auto n_missing_parent_behavior = 0x1D0; // Name: m_nMissingParentBehavior Offset: 0x1D0
				} // namespace C_OP_InheritFromParentParticlesV2

				namespace C_INIT_RandomSecondSequence {
					constexpr auto n_sequence_min = 0x1C8; // Name: m_nSequenceMin Offset: 0x1C8
					constexpr auto n_sequence_max = 0x1CC; // Name: m_nSequenceMax Offset: 0x1CC
				} // namespace C_INIT_RandomSecondSequence

				namespace C_OP_SetFloatCollection {
					constexpr auto input_value = 0x1C0; // Name: m_InputValue Offset: 0x1C0
					constexpr auto n_output_field = 0x320; // Name: m_nOutputField Offset: 0x320
					constexpr auto n_set_method = 0x324; // Name: m_nSetMethod Offset: 0x324
					constexpr auto lerp = 0x328; // Name: m_Lerp Offset: 0x328
				} // namespace C_OP_SetFloatCollection

				namespace PointDefinition_t {
					constexpr auto n_control_point = 0x0; // Name: m_nControlPoint Offset: 0x0
					constexpr auto b_local_coords = 0x4; // Name: m_bLocalCoords Offset: 0x4
					constexpr auto v_offset = 0x8; // Name: m_vOffset Offset: 0x8
				} // namespace PointDefinition_t

				namespace C_INIT_ChaoticAttractor {
					constexpr auto fl_aparm = 0x1C8; // Name: m_flAParm Offset: 0x1C8
					constexpr auto fl_bparm = 0x1CC; // Name: m_flBParm Offset: 0x1CC
					constexpr auto fl_cparm = 0x1D0; // Name: m_flCParm Offset: 0x1D0
					constexpr auto fl_dparm = 0x1D4; // Name: m_flDParm Offset: 0x1D4
					constexpr auto fl_scale = 0x1D8; // Name: m_flScale Offset: 0x1D8
					constexpr auto fl_speed_min = 0x1DC; // Name: m_flSpeedMin Offset: 0x1DC
					constexpr auto fl_speed_max = 0x1E0; // Name: m_flSpeedMax Offset: 0x1E0
					constexpr auto n_base_cp = 0x1E4; // Name: m_nBaseCP Offset: 0x1E4
					constexpr auto b_uniform_speed = 0x1E8; // Name: m_bUniformSpeed Offset: 0x1E8
				} // namespace C_INIT_ChaoticAttractor

				namespace C_OP_SetControlPointPositionToRandomActiveCP {
					constexpr auto n_cp1 = 0x1C8; // Name: m_nCP1 Offset: 0x1C8
					constexpr auto n_head_location_min = 0x1CC; // Name: m_nHeadLocationMin Offset: 0x1CC
					constexpr auto n_head_location_max = 0x1D0; // Name: m_nHeadLocationMax Offset: 0x1D0
					constexpr auto fl_reset_rate = 0x1D8; // Name: m_flResetRate Offset: 0x1D8
				} // namespace C_OP_SetControlPointPositionToRandomActiveCP

				namespace C_OP_Diffusion {
					constexpr auto fl_radius_scale = 0x1C0; // Name: m_flRadiusScale Offset: 0x1C0
					constexpr auto n_field_output = 0x1C4; // Name: m_nFieldOutput Offset: 0x1C4
					constexpr auto n_voxel_grid_resolution = 0x1C8; // Name: m_nVoxelGridResolution Offset: 0x1C8
				} // namespace C_OP_Diffusion

				namespace C_OP_SetControlPointFieldToWater {
					constexpr auto n_source_cp = 0x1C8; // Name: m_nSourceCP Offset: 0x1C8
					constexpr auto n_dest_cp = 0x1CC; // Name: m_nDestCP Offset: 0x1CC
					constexpr auto n_cpfield = 0x1D0; // Name: m_nCPField Offset: 0x1D0
				} // namespace C_OP_SetControlPointFieldToWater

				namespace C_OP_RemapVectorComponentToScalar {
					constexpr auto n_field_input = 0x1C0; // Name: m_nFieldInput Offset: 0x1C0
					constexpr auto n_field_output = 0x1C4; // Name: m_nFieldOutput Offset: 0x1C4
					constexpr auto n_component = 0x1C8; // Name: m_nComponent Offset: 0x1C8
				} // namespace C_OP_RemapVectorComponentToScalar

				namespace CGeneralRandomRotation {
					constexpr auto n_field_output = 0x1C8; // Name: m_nFieldOutput Offset: 0x1C8
					constexpr auto fl_degrees = 0x1CC; // Name: m_flDegrees Offset: 0x1CC
					constexpr auto fl_degrees_min = 0x1D0; // Name: m_flDegreesMin Offset: 0x1D0
					constexpr auto fl_degrees_max = 0x1D4; // Name: m_flDegreesMax Offset: 0x1D4
					constexpr auto fl_rotation_rand_exponent = 0x1D8; // Name: m_flRotationRandExponent Offset: 0x1D8
					constexpr auto b_randomly_flip_direction = 0x1DC; // Name: m_bRandomlyFlipDirection Offset: 0x1DC
				} // namespace CGeneralRandomRotation

				namespace C_OP_LockToBone {
					constexpr auto model_input = 0x1C0; // Name: m_modelInput Offset: 0x1C0
					constexpr auto transform_input = 0x220; // Name: m_transformInput Offset: 0x220
					constexpr auto fl_life_time_fade_start = 0x288; // Name: m_flLifeTimeFadeStart Offset: 0x288
					constexpr auto fl_life_time_fade_end = 0x28C; // Name: m_flLifeTimeFadeEnd Offset: 0x28C
					constexpr auto fl_jump_threshold = 0x290; // Name: m_flJumpThreshold Offset: 0x290
					constexpr auto fl_prev_pos_scale = 0x294; // Name: m_flPrevPosScale Offset: 0x294
					constexpr auto hitbox_set_name = 0x298; // Name: m_HitboxSetName Offset: 0x298
					constexpr auto b_rigid = 0x318; // Name: m_bRigid Offset: 0x318
					constexpr auto b_use_bones = 0x319; // Name: m_bUseBones Offset: 0x319
					constexpr auto n_field_output = 0x31C; // Name: m_nFieldOutput Offset: 0x31C
					constexpr auto n_field_output_prev = 0x320; // Name: m_nFieldOutputPrev Offset: 0x320
					constexpr auto n_rotation_set_type = 0x324; // Name: m_nRotationSetType Offset: 0x324
					constexpr auto b_rigid_rotation_lock = 0x328; // Name: m_bRigidRotationLock Offset: 0x328
					constexpr auto vec_rotation = 0x330; // Name: m_vecRotation Offset: 0x330
					constexpr auto fl_rot_lerp = 0x9A8; // Name: m_flRotLerp Offset: 0x9A8
				} // namespace C_OP_LockToBone

				namespace C_OP_RenderClientPhysicsImpulse {
					constexpr auto fl_radius = 0x210; // Name: m_flRadius Offset: 0x210
					constexpr auto fl_magnitude = 0x370; // Name: m_flMagnitude Offset: 0x370
					constexpr auto n_sim_id_filter = 0x4D0; // Name: m_nSimIdFilter Offset: 0x4D0
				} // namespace C_OP_RenderClientPhysicsImpulse

				namespace C_OP_RemapNamedModelBodyPartOnceTimed {
				} // namespace C_OP_RemapNamedModelBodyPartOnceTimed

				namespace C_INIT_RemapInitialTransformDirectionToRotation {
					constexpr auto transform_input = 0x1C8; // Name: m_TransformInput Offset: 0x1C8
					constexpr auto n_field_output = 0x230; // Name: m_nFieldOutput Offset: 0x230
					constexpr auto fl_offset_rot = 0x234; // Name: m_flOffsetRot Offset: 0x234
					constexpr auto n_component = 0x238; // Name: m_nComponent Offset: 0x238
				} // namespace C_INIT_RemapInitialTransformDirectionToRotation

				namespace C_OP_MovementMaintainOffset {
					constexpr auto vec_offset = 0x1C0; // Name: m_vecOffset Offset: 0x1C0
					constexpr auto n_cp = 0x1CC; // Name: m_nCP Offset: 0x1CC
					constexpr auto b_radius_scale = 0x1D0; // Name: m_bRadiusScale Offset: 0x1D0
				} // namespace C_OP_MovementMaintainOffset

				namespace C_INIT_CreateFromParentParticles {
					constexpr auto fl_velocity_scale = 0x1C8; // Name: m_flVelocityScale Offset: 0x1C8
					constexpr auto fl_increment = 0x1CC; // Name: m_flIncrement Offset: 0x1CC
					constexpr auto b_random_distribution = 0x1D0; // Name: m_bRandomDistribution Offset: 0x1D0
					constexpr auto n_random_seed = 0x1D4; // Name: m_nRandomSeed Offset: 0x1D4
					constexpr auto b_sub_frame = 0x1D8; // Name: m_bSubFrame Offset: 0x1D8
				} // namespace C_INIT_CreateFromParentParticles

				namespace C_INIT_RandomNamedModelBodyPart {
				} // namespace C_INIT_RandomNamedModelBodyPart

				namespace C_OP_RenderOmni2Light {
					constexpr auto n_light_type = 0x210; // Name: m_nLightType Offset: 0x210
					constexpr auto v_color_blend = 0x218; // Name: m_vColorBlend Offset: 0x218
					constexpr auto n_color_blend_type = 0x890; // Name: m_nColorBlendType Offset: 0x890
					constexpr auto n_brightness_unit = 0x894; // Name: m_nBrightnessUnit Offset: 0x894
					constexpr auto fl_brightness_lumens = 0x898; // Name: m_flBrightnessLumens Offset: 0x898
					constexpr auto fl_brightness_candelas = 0x9F8; // Name: m_flBrightnessCandelas Offset: 0x9F8
					constexpr auto b_cast_shadows = 0xB58; // Name: m_bCastShadows Offset: 0xB58
					constexpr auto b_fog = 0xB59; // Name: m_bFog Offset: 0xB59
					constexpr auto fl_fog_scale = 0xB60; // Name: m_flFogScale Offset: 0xB60
					constexpr auto fl_luminaire_radius = 0xCC0; // Name: m_flLuminaireRadius Offset: 0xCC0
					constexpr auto fl_skirt = 0xE20; // Name: m_flSkirt Offset: 0xE20
					constexpr auto fl_range = 0xF80; // Name: m_flRange Offset: 0xF80
					constexpr auto fl_inner_cone_angle = 0x10E0; // Name: m_flInnerConeAngle Offset: 0x10E0
					constexpr auto fl_outer_cone_angle = 0x1240; // Name: m_flOuterConeAngle Offset: 0x1240
					constexpr auto h_light_cookie = 0x13A0; // Name: m_hLightCookie Offset: 0x13A0
					constexpr auto b_spherical_cookie = 0x13A8; // Name: m_bSphericalCookie Offset: 0x13A8
				} // namespace C_OP_RenderOmni2Light

				namespace C_INIT_InheritVelocity {
					constexpr auto n_control_point_number = 0x1C8; // Name: m_nControlPointNumber Offset: 0x1C8
					constexpr auto fl_velocity_scale = 0x1CC; // Name: m_flVelocityScale Offset: 0x1CC
				} // namespace C_INIT_InheritVelocity

				namespace C_INIT_RemapParticleCountToNamedModelBodyPartScalar {
				} // namespace C_INIT_RemapParticleCountToNamedModelBodyPartScalar

				namespace C_OP_LagCompensation {
					constexpr auto n_desired_velocity_cp = 0x1C0; // Name: m_nDesiredVelocityCP Offset: 0x1C0
					constexpr auto n_latency_cp = 0x1C4; // Name: m_nLatencyCP Offset: 0x1C4
					constexpr auto n_latency_cpfield = 0x1C8; // Name: m_nLatencyCPField Offset: 0x1C8
					constexpr auto n_desired_velocity_cpfield = 0x1CC; // Name: m_nDesiredVelocityCPField Offset: 0x1CC
				} // namespace C_OP_LagCompensation

				namespace C_OP_CollideWithSelf {
					constexpr auto fl_radius_scale = 0x1C0; // Name: m_flRadiusScale Offset: 0x1C0
					constexpr auto fl_minimum_speed = 0x320; // Name: m_flMinimumSpeed Offset: 0x320
				} // namespace C_OP_CollideWithSelf

				namespace C_OP_ColorAdjustHSL {
					constexpr auto fl_hue_adjust = 0x1C0; // Name: m_flHueAdjust Offset: 0x1C0
					constexpr auto fl_saturation_adjust = 0x320; // Name: m_flSaturationAdjust Offset: 0x320
					constexpr auto fl_lightness_adjust = 0x480; // Name: m_flLightnessAdjust Offset: 0x480
				} // namespace C_OP_ColorAdjustHSL

				namespace C_OP_PerParticleForce {
					constexpr auto fl_force_scale = 0x1D0; // Name: m_flForceScale Offset: 0x1D0
					constexpr auto v_force = 0x330; // Name: m_vForce Offset: 0x330
					constexpr auto n_cp = 0x9A8; // Name: m_nCP Offset: 0x9A8
				} // namespace C_OP_PerParticleForce

				namespace CParticleMassCalculationParameters {
					constexpr auto n_mass_mode = 0x0; // Name: m_nMassMode Offset: 0x0
					constexpr auto fl_radius = 0x8; // Name: m_flRadius Offset: 0x8
					constexpr auto fl_nominal_radius = 0x168; // Name: m_flNominalRadius Offset: 0x168
					constexpr auto fl_scale = 0x2C8; // Name: m_flScale Offset: 0x2C8
				} // namespace CParticleMassCalculationParameters

				namespace C_OP_AlphaDecay {
					constexpr auto fl_min_alpha = 0x1C0; // Name: m_flMinAlpha Offset: 0x1C0
				} // namespace C_OP_AlphaDecay

				namespace C_OP_RemapDensityGradientToVectorAttribute {
					constexpr auto fl_radius_scale = 0x1C0; // Name: m_flRadiusScale Offset: 0x1C0
					constexpr auto n_field_output = 0x1C4; // Name: m_nFieldOutput Offset: 0x1C4
				} // namespace C_OP_RemapDensityGradientToVectorAttribute

				namespace C_INIT_InitVec {
					constexpr auto input_value = 0x1C8; // Name: m_InputValue Offset: 0x1C8
					constexpr auto n_output_field = 0x840; // Name: m_nOutputField Offset: 0x840
					constexpr auto n_set_method = 0x844; // Name: m_nSetMethod Offset: 0x844
					constexpr auto b_normalized_output = 0x848; // Name: m_bNormalizedOutput Offset: 0x848
					constexpr auto b_write_previous_position = 0x849; // Name: m_bWritePreviousPosition Offset: 0x849
				} // namespace C_INIT_InitVec

				namespace C_OP_MovementMoveAlongSkinnedCPSnapshot {
					constexpr auto n_control_point_number = 0x1C0; // Name: m_nControlPointNumber Offset: 0x1C0
					constexpr auto n_snapshot_control_point_number = 0x1C4; // Name: m_nSnapshotControlPointNumber Offset: 0x1C4
					constexpr auto b_set_normal = 0x1C8; // Name: m_bSetNormal Offset: 0x1C8
					constexpr auto b_set_radius = 0x1C9; // Name: m_bSetRadius Offset: 0x1C9
					constexpr auto fl_interpolation = 0x1D0; // Name: m_flInterpolation Offset: 0x1D0
					constexpr auto fl_tvalue = 0x330; // Name: m_flTValue Offset: 0x330
				} // namespace C_OP_MovementMoveAlongSkinnedCPSnapshot

				namespace C_OP_LerpScalar {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto fl_output = 0x1C8; // Name: m_flOutput Offset: 0x1C8
					constexpr auto fl_start_time = 0x328; // Name: m_flStartTime Offset: 0x328
					constexpr auto fl_end_time = 0x32C; // Name: m_flEndTime Offset: 0x32C
				} // namespace C_OP_LerpScalar

				namespace C_OP_CycleScalar {
					constexpr auto n_dest_field = 0x1C0; // Name: m_nDestField Offset: 0x1C0
					constexpr auto fl_start_value = 0x1C4; // Name: m_flStartValue Offset: 0x1C4
					constexpr auto fl_end_value = 0x1C8; // Name: m_flEndValue Offset: 0x1C8
					constexpr auto fl_cycle_time = 0x1CC; // Name: m_flCycleTime Offset: 0x1CC
					constexpr auto b_do_not_repeat_cycle = 0x1D0; // Name: m_bDoNotRepeatCycle Offset: 0x1D0
					constexpr auto b_synchronize_particles = 0x1D1; // Name: m_bSynchronizeParticles Offset: 0x1D1
					constexpr auto n_cpscale = 0x1D4; // Name: m_nCPScale Offset: 0x1D4
					constexpr auto n_cpfield_min = 0x1D8; // Name: m_nCPFieldMin Offset: 0x1D8
					constexpr auto n_cpfield_max = 0x1DC; // Name: m_nCPFieldMax Offset: 0x1DC
					constexpr auto n_set_method = 0x1E0; // Name: m_nSetMethod Offset: 0x1E0
				} // namespace C_OP_CycleScalar

				namespace C_OP_SetControlPointToHMD {
					constexpr auto n_cp1 = 0x1C8; // Name: m_nCP1 Offset: 0x1C8
					constexpr auto vec_cp1_pos = 0x1CC; // Name: m_vecCP1Pos Offset: 0x1CC
					constexpr auto b_orient_to_hmd = 0x1D8; // Name: m_bOrientToHMD Offset: 0x1D8
				} // namespace C_OP_SetControlPointToHMD

				namespace C_OP_SetControlPointFieldFromVectorExpression {
					constexpr auto n_expression = 0x1C8; // Name: m_nExpression Offset: 0x1C8
					constexpr auto vec_input1 = 0x1D0; // Name: m_vecInput1 Offset: 0x1D0
					constexpr auto vec_input2 = 0x848; // Name: m_vecInput2 Offset: 0x848
					constexpr auto fl_output_remap = 0xEC0; // Name: m_flOutputRemap Offset: 0xEC0
					constexpr auto n_output_cp = 0x1020; // Name: m_nOutputCP Offset: 0x1020
					constexpr auto n_out_vector_field = 0x1024; // Name: m_nOutVectorField Offset: 0x1024
				} // namespace C_OP_SetControlPointFieldFromVectorExpression

				namespace C_OP_PercentageBetweenTransforms {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto fl_input_min = 0x1C4; // Name: m_flInputMin Offset: 0x1C4
					constexpr auto fl_input_max = 0x1C8; // Name: m_flInputMax Offset: 0x1C8
					constexpr auto fl_output_min = 0x1CC; // Name: m_flOutputMin Offset: 0x1CC
					constexpr auto fl_output_max = 0x1D0; // Name: m_flOutputMax Offset: 0x1D0
					constexpr auto transform_start = 0x1D8; // Name: m_TransformStart Offset: 0x1D8
					constexpr auto transform_end = 0x240; // Name: m_TransformEnd Offset: 0x240
					constexpr auto n_set_method = 0x2A8; // Name: m_nSetMethod Offset: 0x2A8
					constexpr auto b_active_range = 0x2AC; // Name: m_bActiveRange Offset: 0x2AC
					constexpr auto b_radial_check = 0x2AD; // Name: m_bRadialCheck Offset: 0x2AD
				} // namespace C_OP_PercentageBetweenTransforms

				namespace C_INIT_SequenceFromCP {
					constexpr auto b_kill_unused = 0x1C8; // Name: m_bKillUnused Offset: 0x1C8
					constexpr auto b_radius_scale = 0x1C9; // Name: m_bRadiusScale Offset: 0x1C9
					constexpr auto n_cp = 0x1CC; // Name: m_nCP Offset: 0x1CC
					constexpr auto vec_offset = 0x1D0; // Name: m_vecOffset Offset: 0x1D0
				} // namespace C_INIT_SequenceFromCP

				namespace C_OP_RemapNamedModelSequenceEndCap {
				} // namespace C_OP_RemapNamedModelSequenceEndCap

				namespace C_INIT_CreateInEpitrochoid {
					constexpr auto n_component1 = 0x1C8; // Name: m_nComponent1 Offset: 0x1C8
					constexpr auto n_component2 = 0x1CC; // Name: m_nComponent2 Offset: 0x1CC
					constexpr auto transform_input = 0x1D0; // Name: m_TransformInput Offset: 0x1D0
					constexpr auto fl_particle_density = 0x238; // Name: m_flParticleDensity Offset: 0x238
					constexpr auto fl_offset = 0x398; // Name: m_flOffset Offset: 0x398
					constexpr auto fl_radius1 = 0x4F8; // Name: m_flRadius1 Offset: 0x4F8
					constexpr auto fl_radius2 = 0x658; // Name: m_flRadius2 Offset: 0x658
					constexpr auto b_use_count = 0x7B8; // Name: m_bUseCount Offset: 0x7B8
					constexpr auto b_use_local_coords = 0x7B9; // Name: m_bUseLocalCoords Offset: 0x7B9
					constexpr auto b_offset_existing_pos = 0x7BA; // Name: m_bOffsetExistingPos Offset: 0x7BA
				} // namespace C_INIT_CreateInEpitrochoid

				namespace C_INIT_InitFromCPSnapshot {
					constexpr auto n_control_point_number = 0x1C8; // Name: m_nControlPointNumber Offset: 0x1C8
					constexpr auto n_attribute_to_read = 0x1CC; // Name: m_nAttributeToRead Offset: 0x1CC
					constexpr auto n_attribute_to_write = 0x1D0; // Name: m_nAttributeToWrite Offset: 0x1D0
					constexpr auto n_local_space_cp = 0x1D4; // Name: m_nLocalSpaceCP Offset: 0x1D4
					constexpr auto b_random = 0x1D8; // Name: m_bRandom Offset: 0x1D8
					constexpr auto b_reverse = 0x1D9; // Name: m_bReverse Offset: 0x1D9
					constexpr auto n_snap_shot_increment = 0x1E0; // Name: m_nSnapShotIncrement Offset: 0x1E0
					constexpr auto n_manual_snapshot_index = 0x340; // Name: m_nManualSnapshotIndex Offset: 0x340
					constexpr auto n_random_seed = 0x4A0; // Name: m_nRandomSeed Offset: 0x4A0
					constexpr auto b_local_space_angles = 0x4A4; // Name: m_bLocalSpaceAngles Offset: 0x4A4
				} // namespace C_INIT_InitFromCPSnapshot

				namespace C_OP_SetControlPointToWaterSurface {
					constexpr auto n_source_cp = 0x1C8; // Name: m_nSourceCP Offset: 0x1C8
					constexpr auto n_dest_cp = 0x1CC; // Name: m_nDestCP Offset: 0x1CC
					constexpr auto n_flow_cp = 0x1D0; // Name: m_nFlowCP Offset: 0x1D0
					constexpr auto n_active_cp = 0x1D4; // Name: m_nActiveCP Offset: 0x1D4
					constexpr auto n_active_cpfield = 0x1D8; // Name: m_nActiveCPField Offset: 0x1D8
					constexpr auto fl_retest_rate = 0x1E0; // Name: m_flRetestRate Offset: 0x1E0
					constexpr auto b_adaptive_threshold = 0x340; // Name: m_bAdaptiveThreshold Offset: 0x340
				} // namespace C_OP_SetControlPointToWaterSurface

				namespace C_INIT_PositionWarpScalar {
					constexpr auto vec_warp_min = 0x1C8; // Name: m_vecWarpMin Offset: 0x1C8
					constexpr auto vec_warp_max = 0x1D4; // Name: m_vecWarpMax Offset: 0x1D4
					constexpr auto input_value = 0x1E0; // Name: m_InputValue Offset: 0x1E0
					constexpr auto fl_prev_pos_scale = 0x340; // Name: m_flPrevPosScale Offset: 0x340
					constexpr auto n_scale_control_point_number = 0x344; // Name: m_nScaleControlPointNumber Offset: 0x344
					constexpr auto n_control_point_number = 0x348; // Name: m_nControlPointNumber Offset: 0x348
				} // namespace C_INIT_PositionWarpScalar

				namespace C_INIT_PositionOffset {
					constexpr auto offset_min = 0x1C8; // Name: m_OffsetMin Offset: 0x1C8
					constexpr auto offset_max = 0x840; // Name: m_OffsetMax Offset: 0x840
					constexpr auto transform_input = 0xEB8; // Name: m_TransformInput Offset: 0xEB8
					constexpr auto b_local_coords = 0xF20; // Name: m_bLocalCoords Offset: 0xF20
					constexpr auto b_proportional = 0xF21; // Name: m_bProportional Offset: 0xF21
					constexpr auto randomness_parameters = 0xF24; // Name: m_randomnessParameters Offset: 0xF24
				} // namespace C_INIT_PositionOffset

				namespace C_INIT_NormalAlignToCP {
					constexpr auto transform_input = 0x1C8; // Name: m_transformInput Offset: 0x1C8
					constexpr auto n_control_point_axis = 0x230; // Name: m_nControlPointAxis Offset: 0x230
				} // namespace C_INIT_NormalAlignToCP

				namespace C_INIT_CreateFromCPs {
					constexpr auto n_increment = 0x1C8; // Name: m_nIncrement Offset: 0x1C8
					constexpr auto n_min_cp = 0x1CC; // Name: m_nMinCP Offset: 0x1CC
					constexpr auto n_max_cp = 0x1D0; // Name: m_nMaxCP Offset: 0x1D0
					constexpr auto n_dynamic_cpcount = 0x1D8; // Name: m_nDynamicCPCount Offset: 0x1D8
				} // namespace C_INIT_CreateFromCPs

				namespace C_OP_ShapeMatchingConstraint {
					constexpr auto fl_shape_restoration_time = 0x1C0; // Name: m_flShapeRestorationTime Offset: 0x1C0
				} // namespace C_OP_ShapeMatchingConstraint

				namespace C_OP_SetChildControlPoints {
					constexpr auto n_child_group_id = 0x1C0; // Name: m_nChildGroupID Offset: 0x1C0
					constexpr auto n_first_control_point = 0x1C4; // Name: m_nFirstControlPoint Offset: 0x1C4
					constexpr auto n_num_control_points = 0x1C8; // Name: m_nNumControlPoints Offset: 0x1C8
					constexpr auto n_first_source_point = 0x1D0; // Name: m_nFirstSourcePoint Offset: 0x1D0
					constexpr auto b_reverse = 0x330; // Name: m_bReverse Offset: 0x330
					constexpr auto b_set_orientation = 0x331; // Name: m_bSetOrientation Offset: 0x331
				} // namespace C_OP_SetChildControlPoints

				namespace C_OP_RemapDirectionToCPToVector {
					constexpr auto n_cp = 0x1C0; // Name: m_nCP Offset: 0x1C0
					constexpr auto n_field_output = 0x1C4; // Name: m_nFieldOutput Offset: 0x1C4
					constexpr auto fl_scale = 0x1C8; // Name: m_flScale Offset: 0x1C8
					constexpr auto fl_offset_rot = 0x1CC; // Name: m_flOffsetRot Offset: 0x1CC
					constexpr auto vec_offset_axis = 0x1D0; // Name: m_vecOffsetAxis Offset: 0x1D0
					constexpr auto b_normalize = 0x1DC; // Name: m_bNormalize Offset: 0x1DC
					constexpr auto n_field_strength = 0x1E0; // Name: m_nFieldStrength Offset: 0x1E0
				} // namespace C_OP_RemapDirectionToCPToVector

				namespace CReplicationParameters {
					constexpr auto n_replication_mode = 0x0; // Name: m_nReplicationMode Offset: 0x0
					constexpr auto b_scale_child_particle_radii = 0x4; // Name: m_bScaleChildParticleRadii Offset: 0x4
					constexpr auto fl_min_random_radius_scale = 0x8; // Name: m_flMinRandomRadiusScale Offset: 0x8
					constexpr auto fl_max_random_radius_scale = 0x168; // Name: m_flMaxRandomRadiusScale Offset: 0x168
					constexpr auto v_min_random_displacement = 0x2C8; // Name: m_vMinRandomDisplacement Offset: 0x2C8
					constexpr auto v_max_random_displacement = 0x940; // Name: m_vMaxRandomDisplacement Offset: 0x940
					constexpr auto fl_modelling_scale = 0xFB8; // Name: m_flModellingScale Offset: 0xFB8
				} // namespace CReplicationParameters

				namespace C_OP_RtEnvCull {
					constexpr auto vec_test_dir = 0x1C0; // Name: m_vecTestDir Offset: 0x1C0
					constexpr auto vec_test_normal = 0x1CC; // Name: m_vecTestNormal Offset: 0x1CC
					constexpr auto b_cull_on_miss = 0x1D8; // Name: m_bCullOnMiss Offset: 0x1D8
					constexpr auto b_stick_instead_of_cull = 0x1D9; // Name: m_bStickInsteadOfCull Offset: 0x1D9
					constexpr auto rt_env_name = 0x1DA; // Name: m_RtEnvName Offset: 0x1DA
					constexpr auto n_rtenv_cp = 0x25C; // Name: m_nRTEnvCP Offset: 0x25C
					constexpr auto n_component = 0x260; // Name: m_nComponent Offset: 0x260
				} // namespace C_OP_RtEnvCull

				namespace C_OP_ConstrainDistanceToUserSpecifiedPath {
					constexpr auto f_min_distance = 0x1C0; // Name: m_fMinDistance Offset: 0x1C0
					constexpr auto fl_max_distance = 0x1C4; // Name: m_flMaxDistance Offset: 0x1C4
					constexpr auto fl_time_scale = 0x1C8; // Name: m_flTimeScale Offset: 0x1C8
					constexpr auto b_looped_path = 0x1CC; // Name: m_bLoopedPath Offset: 0x1CC
					constexpr auto point_list = 0x1D0; // Name: m_pointList Offset: 0x1D0
				} // namespace C_OP_ConstrainDistanceToUserSpecifiedPath

				namespace C_INIT_RandomNamedModelMeshGroup {
				} // namespace C_INIT_RandomNamedModelMeshGroup

				namespace C_INIT_CreateOnModel {
					constexpr auto model_input = 0x1C8; // Name: m_modelInput Offset: 0x1C8
					constexpr auto transform_input = 0x228; // Name: m_transformInput Offset: 0x228
					constexpr auto n_force_in_model = 0x290; // Name: m_nForceInModel Offset: 0x290
					constexpr auto b_scale_to_volume = 0x294; // Name: m_bScaleToVolume Offset: 0x294
					constexpr auto b_even_distribution = 0x295; // Name: m_bEvenDistribution Offset: 0x295
					constexpr auto n_desired_hitbox = 0x298; // Name: m_nDesiredHitbox Offset: 0x298
					constexpr auto n_hitbox_value_from_control_point_index = 0x3F8; // Name: m_nHitboxValueFromControlPointIndex Offset: 0x3F8
					constexpr auto vec_hit_box_scale = 0x400; // Name: m_vecHitBoxScale Offset: 0x400
					constexpr auto fl_bone_velocity = 0xA78; // Name: m_flBoneVelocity Offset: 0xA78
					constexpr auto fl_max_bone_velocity = 0xA7C; // Name: m_flMaxBoneVelocity Offset: 0xA7C
					constexpr auto vec_direction_bias = 0xA80; // Name: m_vecDirectionBias Offset: 0xA80
					constexpr auto hitbox_set_name = 0x10F8; // Name: m_HitboxSetName Offset: 0x10F8
					constexpr auto b_local_coords = 0x1178; // Name: m_bLocalCoords Offset: 0x1178
					constexpr auto b_use_bones = 0x1179; // Name: m_bUseBones Offset: 0x1179
					constexpr auto b_use_mesh = 0x117A; // Name: m_bUseMesh Offset: 0x117A
					constexpr auto fl_shell_size = 0x1180; // Name: m_flShellSize Offset: 0x1180
				} // namespace C_INIT_CreateOnModel

				namespace C_OP_RenderProjected {
					constexpr auto b_project_character = 0x210; // Name: m_bProjectCharacter Offset: 0x210
					constexpr auto b_project_world = 0x211; // Name: m_bProjectWorld Offset: 0x211
					constexpr auto b_project_water = 0x212; // Name: m_bProjectWater Offset: 0x212
					constexpr auto b_flip_horizontal = 0x213; // Name: m_bFlipHorizontal Offset: 0x213
					constexpr auto b_enable_projected_depth_controls = 0x214; // Name: m_bEnableProjectedDepthControls Offset: 0x214
					constexpr auto fl_min_projection_depth = 0x218; // Name: m_flMinProjectionDepth Offset: 0x218
					constexpr auto fl_max_projection_depth = 0x21C; // Name: m_flMaxProjectionDepth Offset: 0x21C
					constexpr auto vec_projected_materials = 0x220; // Name: m_vecProjectedMaterials Offset: 0x220
					constexpr auto fl_material_selection = 0x238; // Name: m_flMaterialSelection Offset: 0x238
					constexpr auto fl_animation_time_scale = 0x398; // Name: m_flAnimationTimeScale Offset: 0x398
					constexpr auto b_orient_to_normal = 0x39C; // Name: m_bOrientToNormal Offset: 0x39C
					constexpr auto material_vars = 0x3A0; // Name: m_MaterialVars Offset: 0x3A0
					constexpr auto fl_radius_scale = 0x3B8; // Name: m_flRadiusScale Offset: 0x3B8
					constexpr auto fl_alpha_scale = 0x518; // Name: m_flAlphaScale Offset: 0x518
					constexpr auto fl_roll_scale = 0x678; // Name: m_flRollScale Offset: 0x678
					constexpr auto n_alpha2_field = 0x7D8; // Name: m_nAlpha2Field Offset: 0x7D8
					constexpr auto vec_color_scale = 0x7E0; // Name: m_vecColorScale Offset: 0x7E0
					constexpr auto n_color_blend_type = 0xE58; // Name: m_nColorBlendType Offset: 0xE58
				} // namespace C_OP_RenderProjected

				namespace C_OP_SetAttributeToScalarExpression {
					constexpr auto n_expression = 0x1C0; // Name: m_nExpression Offset: 0x1C0
					constexpr auto fl_input1 = 0x1C8; // Name: m_flInput1 Offset: 0x1C8
					constexpr auto fl_input2 = 0x328; // Name: m_flInput2 Offset: 0x328
					constexpr auto fl_output_remap = 0x488; // Name: m_flOutputRemap Offset: 0x488
					constexpr auto n_output_field = 0x5E8; // Name: m_nOutputField Offset: 0x5E8
					constexpr auto n_set_method = 0x5EC; // Name: m_nSetMethod Offset: 0x5EC
				} // namespace C_OP_SetAttributeToScalarExpression

				namespace C_OP_MaxVelocity {
					constexpr auto fl_max_velocity = 0x1C0; // Name: m_flMaxVelocity Offset: 0x1C0
					constexpr auto fl_min_velocity = 0x1C4; // Name: m_flMinVelocity Offset: 0x1C4
					constexpr auto n_override_cp = 0x1C8; // Name: m_nOverrideCP Offset: 0x1C8
					constexpr auto n_override_cpfield = 0x1CC; // Name: m_nOverrideCPField Offset: 0x1CC
				} // namespace C_OP_MaxVelocity

				namespace C_OP_RenderMaterialProxy {
					constexpr auto n_material_control_point = 0x210; // Name: m_nMaterialControlPoint Offset: 0x210
					constexpr auto n_proxy_type = 0x214; // Name: m_nProxyType Offset: 0x214
					constexpr auto material_vars = 0x218; // Name: m_MaterialVars Offset: 0x218
					constexpr auto h_override_material = 0x230; // Name: m_hOverrideMaterial Offset: 0x230
					constexpr auto fl_material_override_enabled = 0x238; // Name: m_flMaterialOverrideEnabled Offset: 0x238
					constexpr auto vec_color_scale = 0x398; // Name: m_vecColorScale Offset: 0x398
					constexpr auto fl_alpha = 0xA10; // Name: m_flAlpha Offset: 0xA10
					constexpr auto n_color_blend_type = 0xB70; // Name: m_nColorBlendType Offset: 0xB70
				} // namespace C_OP_RenderMaterialProxy

				namespace C_INIT_VelocityFromNormal {
					constexpr auto f_speed_min = 0x1C8; // Name: m_fSpeedMin Offset: 0x1C8
					constexpr auto f_speed_max = 0x1CC; // Name: m_fSpeedMax Offset: 0x1CC
					constexpr auto b_ignore_dt = 0x1D0; // Name: m_bIgnoreDt Offset: 0x1D0
				} // namespace C_INIT_VelocityFromNormal

				namespace C_OP_MaintainEmitter {
					constexpr auto n_particles_to_maintain = 0x1C8; // Name: m_nParticlesToMaintain Offset: 0x1C8
					constexpr auto fl_start_time = 0x328; // Name: m_flStartTime Offset: 0x328
					constexpr auto fl_emission_duration = 0x330; // Name: m_flEmissionDuration Offset: 0x330
					constexpr auto fl_emission_rate = 0x490; // Name: m_flEmissionRate Offset: 0x490
					constexpr auto n_snapshot_control_point = 0x494; // Name: m_nSnapshotControlPoint Offset: 0x494
					constexpr auto b_emit_instantaneously = 0x498; // Name: m_bEmitInstantaneously Offset: 0x498
					constexpr auto b_final_emit_on_stop = 0x499; // Name: m_bFinalEmitOnStop Offset: 0x499
					constexpr auto fl_scale = 0x4A0; // Name: m_flScale Offset: 0x4A0
				} // namespace C_OP_MaintainEmitter

				namespace C_INIT_PositionOffsetToCP {
					constexpr auto n_control_point_number_start = 0x1C8; // Name: m_nControlPointNumberStart Offset: 0x1C8
					constexpr auto n_control_point_number_end = 0x1CC; // Name: m_nControlPointNumberEnd Offset: 0x1CC
					constexpr auto b_local_coords = 0x1D0; // Name: m_bLocalCoords Offset: 0x1D0
				} // namespace C_INIT_PositionOffsetToCP

				namespace C_OP_FadeAndKill {
					constexpr auto fl_start_fade_in_time = 0x1C0; // Name: m_flStartFadeInTime Offset: 0x1C0
					constexpr auto fl_end_fade_in_time = 0x1C4; // Name: m_flEndFadeInTime Offset: 0x1C4
					constexpr auto fl_start_fade_out_time = 0x1C8; // Name: m_flStartFadeOutTime Offset: 0x1C8
					constexpr auto fl_end_fade_out_time = 0x1CC; // Name: m_flEndFadeOutTime Offset: 0x1CC
					constexpr auto fl_start_alpha = 0x1D0; // Name: m_flStartAlpha Offset: 0x1D0
					constexpr auto fl_end_alpha = 0x1D4; // Name: m_flEndAlpha Offset: 0x1D4
					constexpr auto b_force_preserve_particle_order = 0x1D8; // Name: m_bForcePreserveParticleOrder Offset: 0x1D8
				} // namespace C_OP_FadeAndKill

				namespace C_OP_MaintainSequentialPath {
					constexpr auto f_max_distance = 0x1C0; // Name: m_fMaxDistance Offset: 0x1C0
					constexpr auto fl_num_to_assign = 0x1C4; // Name: m_flNumToAssign Offset: 0x1C4
					constexpr auto fl_cohesion_strength = 0x1C8; // Name: m_flCohesionStrength Offset: 0x1C8
					constexpr auto fl_tolerance = 0x1CC; // Name: m_flTolerance Offset: 0x1CC
					constexpr auto b_loop = 0x1D0; // Name: m_bLoop Offset: 0x1D0
					constexpr auto b_use_particle_count = 0x1D1; // Name: m_bUseParticleCount Offset: 0x1D1
					constexpr auto path_params = 0x1E0; // Name: m_PathParams Offset: 0x1E0
				} // namespace C_OP_MaintainSequentialPath

				namespace C_OP_RemapNamedModelBodyPartEndCap {
				} // namespace C_OP_RemapNamedModelBodyPartEndCap

				namespace C_OP_StopAfterCPDuration {
					constexpr auto fl_duration = 0x1C8; // Name: m_flDuration Offset: 0x1C8
					constexpr auto b_destroy_immediately = 0x328; // Name: m_bDestroyImmediately Offset: 0x328
					constexpr auto b_play_end_cap = 0x329; // Name: m_bPlayEndCap Offset: 0x329
				} // namespace C_OP_StopAfterCPDuration

				namespace CGeneralSpin {
					constexpr auto n_spin_rate_degrees = 0x1C0; // Name: m_nSpinRateDegrees Offset: 0x1C0
					constexpr auto n_spin_rate_min_degrees = 0x1C4; // Name: m_nSpinRateMinDegrees Offset: 0x1C4
					constexpr auto f_spin_rate_stop_time = 0x1CC; // Name: m_fSpinRateStopTime Offset: 0x1CC
				} // namespace CGeneralSpin

				namespace C_OP_ClampVector {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto vec_output_min = 0x1C8; // Name: m_vecOutputMin Offset: 0x1C8
					constexpr auto vec_output_max = 0x840; // Name: m_vecOutputMax Offset: 0x840
				} // namespace C_OP_ClampVector

				namespace C_OP_RenderStatusEffectCitadel {
					constexpr auto p_texture_color_warp = 0x210; // Name: m_pTextureColorWarp Offset: 0x210
					constexpr auto p_texture_normal = 0x218; // Name: m_pTextureNormal Offset: 0x218
					constexpr auto p_texture_metalness = 0x220; // Name: m_pTextureMetalness Offset: 0x220
					constexpr auto p_texture_roughness = 0x228; // Name: m_pTextureRoughness Offset: 0x228
					constexpr auto p_texture_self_illum = 0x230; // Name: m_pTextureSelfIllum Offset: 0x230
					constexpr auto p_texture_detail = 0x238; // Name: m_pTextureDetail Offset: 0x238
				} // namespace C_OP_RenderStatusEffectCitadel

				namespace C_INIT_RemapCPtoScalar {
					constexpr auto n_cpinput = 0x1C8; // Name: m_nCPInput Offset: 0x1C8
					constexpr auto n_field_output = 0x1CC; // Name: m_nFieldOutput Offset: 0x1CC
					constexpr auto n_field = 0x1D0; // Name: m_nField Offset: 0x1D0
					constexpr auto fl_input_min = 0x1D4; // Name: m_flInputMin Offset: 0x1D4
					constexpr auto fl_input_max = 0x1D8; // Name: m_flInputMax Offset: 0x1D8
					constexpr auto fl_output_min = 0x1DC; // Name: m_flOutputMin Offset: 0x1DC
					constexpr auto fl_output_max = 0x1E0; // Name: m_flOutputMax Offset: 0x1E0
					constexpr auto fl_start_time = 0x1E4; // Name: m_flStartTime Offset: 0x1E4
					constexpr auto fl_end_time = 0x1E8; // Name: m_flEndTime Offset: 0x1E8
					constexpr auto n_set_method = 0x1EC; // Name: m_nSetMethod Offset: 0x1EC
					constexpr auto fl_remap_bias = 0x1F0; // Name: m_flRemapBias Offset: 0x1F0
				} // namespace C_INIT_RemapCPtoScalar

				namespace IParticleSystemDefinition {
				} // namespace IParticleSystemDefinition

				namespace C_OP_WindForce {
					constexpr auto v_force = 0x1D0; // Name: m_vForce Offset: 0x1D0
				} // namespace C_OP_WindForce

				namespace C_OP_SetVariable {
					constexpr auto variable_reference = 0x1C8; // Name: m_variableReference Offset: 0x1C8
					constexpr auto transform_input = 0x208; // Name: m_transformInput Offset: 0x208
					constexpr auto position_offset = 0x270; // Name: m_positionOffset Offset: 0x270
					constexpr auto rotation_offset = 0x27C; // Name: m_rotationOffset Offset: 0x27C
					constexpr auto vec_input = 0x288; // Name: m_vecInput Offset: 0x288
					constexpr auto float_input = 0x900; // Name: m_floatInput Offset: 0x900
				} // namespace C_OP_SetVariable

				namespace C_OP_RenderStandardLight {
					constexpr auto n_light_type = 0x210; // Name: m_nLightType Offset: 0x210
					constexpr auto vec_color_scale = 0x218; // Name: m_vecColorScale Offset: 0x218
					constexpr auto n_color_blend_type = 0x890; // Name: m_nColorBlendType Offset: 0x890
					constexpr auto fl_intensity = 0x898; // Name: m_flIntensity Offset: 0x898
					constexpr auto b_cast_shadows = 0x9F8; // Name: m_bCastShadows Offset: 0x9F8
					constexpr auto fl_theta = 0xA00; // Name: m_flTheta Offset: 0xA00
					constexpr auto fl_phi = 0xB60; // Name: m_flPhi Offset: 0xB60
					constexpr auto fl_radius_multiplier = 0xCC0; // Name: m_flRadiusMultiplier Offset: 0xCC0
					constexpr auto n_attenuation_style = 0xE20; // Name: m_nAttenuationStyle Offset: 0xE20
					constexpr auto fl_falloff_linearity = 0xE28; // Name: m_flFalloffLinearity Offset: 0xE28
					constexpr auto fl_fifty_percent_falloff = 0xF88; // Name: m_flFiftyPercentFalloff Offset: 0xF88
					constexpr auto fl_zero_percent_falloff = 0x10E8; // Name: m_flZeroPercentFalloff Offset: 0x10E8
					constexpr auto b_render_diffuse = 0x1248; // Name: m_bRenderDiffuse Offset: 0x1248
					constexpr auto b_render_specular = 0x1249; // Name: m_bRenderSpecular Offset: 0x1249
					constexpr auto light_cookie = 0x1250; // Name: m_lightCookie Offset: 0x1250
					constexpr auto n_priority = 0x1258; // Name: m_nPriority Offset: 0x1258
					constexpr auto n_fog_lighting_mode = 0x125C; // Name: m_nFogLightingMode Offset: 0x125C
					constexpr auto fl_fog_contribution = 0x1260; // Name: m_flFogContribution Offset: 0x1260
					constexpr auto n_capsule_light_behavior = 0x13C0; // Name: m_nCapsuleLightBehavior Offset: 0x13C0
					constexpr auto fl_capsule_length = 0x13C4; // Name: m_flCapsuleLength Offset: 0x13C4
					constexpr auto b_reverse_order = 0x13C8; // Name: m_bReverseOrder Offset: 0x13C8
					constexpr auto b_closed_loop = 0x13C9; // Name: m_bClosedLoop Offset: 0x13C9
					constexpr auto n_prev_pnt_source = 0x13CC; // Name: m_nPrevPntSource Offset: 0x13CC
					constexpr auto fl_max_length = 0x13D0; // Name: m_flMaxLength Offset: 0x13D0
					constexpr auto fl_min_length = 0x13D4; // Name: m_flMinLength Offset: 0x13D4
					constexpr auto b_ignore_dt = 0x13D8; // Name: m_bIgnoreDT Offset: 0x13D8
					constexpr auto fl_constrain_radius_to_length_ratio = 0x13DC; // Name: m_flConstrainRadiusToLengthRatio Offset: 0x13DC
					constexpr auto fl_length_scale = 0x13E0; // Name: m_flLengthScale Offset: 0x13E0
					constexpr auto fl_length_fade_in_time = 0x13E4; // Name: m_flLengthFadeInTime Offset: 0x13E4
				} // namespace C_OP_RenderStandardLight

				namespace C_OP_DistanceToTransform {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto fl_input_min = 0x1C8; // Name: m_flInputMin Offset: 0x1C8
					constexpr auto fl_input_max = 0x328; // Name: m_flInputMax Offset: 0x328
					constexpr auto fl_output_min = 0x488; // Name: m_flOutputMin Offset: 0x488
					constexpr auto fl_output_max = 0x5E8; // Name: m_flOutputMax Offset: 0x5E8
					constexpr auto transform_start = 0x748; // Name: m_TransformStart Offset: 0x748
					constexpr auto b_los = 0x7B0; // Name: m_bLOS Offset: 0x7B0
					constexpr auto collision_group_name = 0x7B1; // Name: m_CollisionGroupName Offset: 0x7B1
					constexpr auto n_trace_set = 0x834; // Name: m_nTraceSet Offset: 0x834
					constexpr auto fl_max_trace_length = 0x838; // Name: m_flMaxTraceLength Offset: 0x838
					constexpr auto fl_losscale = 0x83C; // Name: m_flLOSScale Offset: 0x83C
					constexpr auto n_set_method = 0x840; // Name: m_nSetMethod Offset: 0x840
					constexpr auto b_active_range = 0x844; // Name: m_bActiveRange Offset: 0x844
					constexpr auto b_additive = 0x845; // Name: m_bAdditive Offset: 0x845
					constexpr auto vec_component_scale = 0x848; // Name: m_vecComponentScale Offset: 0x848
				} // namespace C_OP_DistanceToTransform

				namespace C_OP_RemapControlPointOrientationToRotation {
					constexpr auto n_cp = 0x1C0; // Name: m_nCP Offset: 0x1C0
					constexpr auto n_field_output = 0x1C4; // Name: m_nFieldOutput Offset: 0x1C4
					constexpr auto fl_offset_rot = 0x1C8; // Name: m_flOffsetRot Offset: 0x1C8
					constexpr auto n_component = 0x1CC; // Name: m_nComponent Offset: 0x1CC
				} // namespace C_OP_RemapControlPointOrientationToRotation

				namespace C_OP_SetControlPointToCenter {
					constexpr auto n_cp1 = 0x1C8; // Name: m_nCP1 Offset: 0x1C8
					constexpr auto vec_cp1_pos = 0x1CC; // Name: m_vecCP1Pos Offset: 0x1CC
					constexpr auto b_use_avg_particle_pos = 0x1D8; // Name: m_bUseAvgParticlePos Offset: 0x1D8
					constexpr auto n_set_parent = 0x1DC; // Name: m_nSetParent Offset: 0x1DC
				} // namespace C_OP_SetControlPointToCenter

				namespace C_OP_RemapDotProductToScalar {
					constexpr auto n_input_cp1 = 0x1C0; // Name: m_nInputCP1 Offset: 0x1C0
					constexpr auto n_input_cp2 = 0x1C4; // Name: m_nInputCP2 Offset: 0x1C4
					constexpr auto n_field_output = 0x1C8; // Name: m_nFieldOutput Offset: 0x1C8
					constexpr auto fl_input_min = 0x1CC; // Name: m_flInputMin Offset: 0x1CC
					constexpr auto fl_input_max = 0x1D0; // Name: m_flInputMax Offset: 0x1D0
					constexpr auto fl_output_min = 0x1D4; // Name: m_flOutputMin Offset: 0x1D4
					constexpr auto fl_output_max = 0x1D8; // Name: m_flOutputMax Offset: 0x1D8
					constexpr auto b_use_particle_velocity = 0x1DC; // Name: m_bUseParticleVelocity Offset: 0x1DC
					constexpr auto n_set_method = 0x1E0; // Name: m_nSetMethod Offset: 0x1E0
					constexpr auto b_active_range = 0x1E4; // Name: m_bActiveRange Offset: 0x1E4
					constexpr auto b_use_particle_normal = 0x1E5; // Name: m_bUseParticleNormal Offset: 0x1E5
				} // namespace C_OP_RemapDotProductToScalar

				namespace C_OP_RemapCPtoCP {
					constexpr auto n_input_control_point = 0x1C8; // Name: m_nInputControlPoint Offset: 0x1C8
					constexpr auto n_output_control_point = 0x1CC; // Name: m_nOutputControlPoint Offset: 0x1CC
					constexpr auto n_input_field = 0x1D0; // Name: m_nInputField Offset: 0x1D0
					constexpr auto n_output_field = 0x1D4; // Name: m_nOutputField Offset: 0x1D4
					constexpr auto fl_input_min = 0x1D8; // Name: m_flInputMin Offset: 0x1D8
					constexpr auto fl_input_max = 0x1DC; // Name: m_flInputMax Offset: 0x1DC
					constexpr auto fl_output_min = 0x1E0; // Name: m_flOutputMin Offset: 0x1E0
					constexpr auto fl_output_max = 0x1E4; // Name: m_flOutputMax Offset: 0x1E4
					constexpr auto b_derivative = 0x1E8; // Name: m_bDerivative Offset: 0x1E8
					constexpr auto fl_interp_rate = 0x1EC; // Name: m_flInterpRate Offset: 0x1EC
				} // namespace C_OP_RemapCPtoCP

				namespace C_OP_SnapshotSkinToBones {
					constexpr auto b_transform_normals = 0x1C0; // Name: m_bTransformNormals Offset: 0x1C0
					constexpr auto b_transform_radii = 0x1C1; // Name: m_bTransformRadii Offset: 0x1C1
					constexpr auto n_control_point_number = 0x1C4; // Name: m_nControlPointNumber Offset: 0x1C4
					constexpr auto fl_life_time_fade_start = 0x1C8; // Name: m_flLifeTimeFadeStart Offset: 0x1C8
					constexpr auto fl_life_time_fade_end = 0x1CC; // Name: m_flLifeTimeFadeEnd Offset: 0x1CC
					constexpr auto fl_jump_threshold = 0x1D0; // Name: m_flJumpThreshold Offset: 0x1D0
					constexpr auto fl_prev_pos_scale = 0x1D4; // Name: m_flPrevPosScale Offset: 0x1D4
				} // namespace C_OP_SnapshotSkinToBones

				namespace C_OP_SetControlPointRotation {
					constexpr auto vec_rot_axis = 0x1C8; // Name: m_vecRotAxis Offset: 0x1C8
					constexpr auto fl_rot_rate = 0x840; // Name: m_flRotRate Offset: 0x840
					constexpr auto n_cp = 0x9A0; // Name: m_nCP Offset: 0x9A0
					constexpr auto n_local_cp = 0x9A4; // Name: m_nLocalCP Offset: 0x9A4
				} // namespace C_OP_SetControlPointRotation

				namespace C_OP_CurlNoiseForce {
					constexpr auto n_noise_type = 0x1D0; // Name: m_nNoiseType Offset: 0x1D0
					constexpr auto vec_noise_freq = 0x1D8; // Name: m_vecNoiseFreq Offset: 0x1D8
					constexpr auto vec_noise_scale = 0x850; // Name: m_vecNoiseScale Offset: 0x850
					constexpr auto vec_offset = 0xEC8; // Name: m_vecOffset Offset: 0xEC8
					constexpr auto vec_offset_rate = 0x1540; // Name: m_vecOffsetRate Offset: 0x1540
					constexpr auto fl_worley_seed = 0x1BB8; // Name: m_flWorleySeed Offset: 0x1BB8
					constexpr auto fl_worley_jitter = 0x1D18; // Name: m_flWorleyJitter Offset: 0x1D18
				} // namespace C_OP_CurlNoiseForce

				namespace C_OP_SetSimulationRate {
					constexpr auto fl_simulation_scale = 0x1C8; // Name: m_flSimulationScale Offset: 0x1C8
				} // namespace C_OP_SetSimulationRate

				namespace C_INIT_RadiusFromCPObject {
					constexpr auto n_control_point = 0x1C8; // Name: m_nControlPoint Offset: 0x1C8
				} // namespace C_INIT_RadiusFromCPObject

				namespace C_OP_RemapNamedModelElementEndCap {
					constexpr auto h_model = 0x1C0; // Name: m_hModel Offset: 0x1C0
					constexpr auto in_names = 0x1C8; // Name: m_inNames Offset: 0x1C8
					constexpr auto out_names = 0x1E0; // Name: m_outNames Offset: 0x1E0
					constexpr auto fallback_names = 0x1F8; // Name: m_fallbackNames Offset: 0x1F8
					constexpr auto b_model_from_renderer = 0x210; // Name: m_bModelFromRenderer Offset: 0x210
					constexpr auto n_field_input = 0x214; // Name: m_nFieldInput Offset: 0x214
					constexpr auto n_field_output = 0x218; // Name: m_nFieldOutput Offset: 0x218
				} // namespace C_OP_RemapNamedModelElementEndCap

				namespace C_OP_MoveToHitbox {
					constexpr auto model_input = 0x1C0; // Name: m_modelInput Offset: 0x1C0
					constexpr auto transform_input = 0x220; // Name: m_transformInput Offset: 0x220
					constexpr auto fl_life_time_lerp_start = 0x28C; // Name: m_flLifeTimeLerpStart Offset: 0x28C
					constexpr auto fl_life_time_lerp_end = 0x290; // Name: m_flLifeTimeLerpEnd Offset: 0x290
					constexpr auto fl_prev_pos_scale = 0x294; // Name: m_flPrevPosScale Offset: 0x294
					constexpr auto hitbox_set_name = 0x298; // Name: m_HitboxSetName Offset: 0x298
					constexpr auto b_use_bones = 0x318; // Name: m_bUseBones Offset: 0x318
					constexpr auto n_lerp_type = 0x31C; // Name: m_nLerpType Offset: 0x31C
					constexpr auto fl_interpolation = 0x320; // Name: m_flInterpolation Offset: 0x320
				} // namespace C_OP_MoveToHitbox

				namespace C_OP_FadeIn {
					constexpr auto fl_fade_in_time_min = 0x1C0; // Name: m_flFadeInTimeMin Offset: 0x1C0
					constexpr auto fl_fade_in_time_max = 0x1C4; // Name: m_flFadeInTimeMax Offset: 0x1C4
					constexpr auto fl_fade_in_time_exp = 0x1C8; // Name: m_flFadeInTimeExp Offset: 0x1C8
					constexpr auto b_proportional = 0x1CC; // Name: m_bProportional Offset: 0x1CC
				} // namespace C_OP_FadeIn

				namespace C_OP_RemapBoundingVolumetoCP {
					constexpr auto n_out_control_point_number = 0x1C8; // Name: m_nOutControlPointNumber Offset: 0x1C8
					constexpr auto fl_input_min = 0x1CC; // Name: m_flInputMin Offset: 0x1CC
					constexpr auto fl_input_max = 0x1D0; // Name: m_flInputMax Offset: 0x1D0
					constexpr auto fl_output_min = 0x1D4; // Name: m_flOutputMin Offset: 0x1D4
					constexpr auto fl_output_max = 0x1D8; // Name: m_flOutputMax Offset: 0x1D8
				} // namespace C_OP_RemapBoundingVolumetoCP

				namespace C_OP_HSVShiftToCP {
					constexpr auto n_color_cp = 0x1C8; // Name: m_nColorCP Offset: 0x1C8
					constexpr auto n_color_gem_enable_cp = 0x1CC; // Name: m_nColorGemEnableCP Offset: 0x1CC
					constexpr auto n_output_cp = 0x1D0; // Name: m_nOutputCP Offset: 0x1D0
					constexpr auto default_hsvcolor = 0x1D4; // Name: m_DefaultHSVColor Offset: 0x1D4
				} // namespace C_OP_HSVShiftToCP

				namespace C_INIT_RemapNamedModelMeshGroupToScalar {
				} // namespace C_INIT_RemapNamedModelMeshGroupToScalar

				namespace C_INIT_GlobalScale {
					constexpr auto fl_scale = 0x1C8; // Name: m_flScale Offset: 0x1C8
					constexpr auto n_scale_control_point_number = 0x1CC; // Name: m_nScaleControlPointNumber Offset: 0x1CC
					constexpr auto n_control_point_number = 0x1D0; // Name: m_nControlPointNumber Offset: 0x1D0
					constexpr auto b_scale_radius = 0x1D4; // Name: m_bScaleRadius Offset: 0x1D4
					constexpr auto b_scale_position = 0x1D5; // Name: m_bScalePosition Offset: 0x1D5
					constexpr auto b_scale_velocity = 0x1D6; // Name: m_bScaleVelocity Offset: 0x1D6
				} // namespace C_INIT_GlobalScale

				namespace C_OP_LerpVector {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto vec_output = 0x1C4; // Name: m_vecOutput Offset: 0x1C4
					constexpr auto fl_start_time = 0x1D0; // Name: m_flStartTime Offset: 0x1D0
					constexpr auto fl_end_time = 0x1D4; // Name: m_flEndTime Offset: 0x1D4
					constexpr auto n_set_method = 0x1D8; // Name: m_nSetMethod Offset: 0x1D8
				} // namespace C_OP_LerpVector

				namespace C_OP_TimeVaryingForce {
					constexpr auto fl_start_lerp_time = 0x1D0; // Name: m_flStartLerpTime Offset: 0x1D0
					constexpr auto starting_force = 0x1D4; // Name: m_StartingForce Offset: 0x1D4
					constexpr auto fl_end_lerp_time = 0x1E0; // Name: m_flEndLerpTime Offset: 0x1E0
					constexpr auto ending_force = 0x1E4; // Name: m_EndingForce Offset: 0x1E4
				} // namespace C_OP_TimeVaryingForce

				namespace C_OP_RadiusDecay {
					constexpr auto fl_min_radius = 0x1C0; // Name: m_flMinRadius Offset: 0x1C0
				} // namespace C_OP_RadiusDecay

				namespace C_INIT_RemapNamedModelBodyPartToScalar {
				} // namespace C_INIT_RemapNamedModelBodyPartToScalar

				namespace C_INIT_RemapScalarToVector {
					constexpr auto n_field_input = 0x1C8; // Name: m_nFieldInput Offset: 0x1C8
					constexpr auto n_field_output = 0x1CC; // Name: m_nFieldOutput Offset: 0x1CC
					constexpr auto fl_input_min = 0x1D0; // Name: m_flInputMin Offset: 0x1D0
					constexpr auto fl_input_max = 0x1D4; // Name: m_flInputMax Offset: 0x1D4
					constexpr auto vec_output_min = 0x1D8; // Name: m_vecOutputMin Offset: 0x1D8
					constexpr auto vec_output_max = 0x1E4; // Name: m_vecOutputMax Offset: 0x1E4
					constexpr auto fl_start_time = 0x1F0; // Name: m_flStartTime Offset: 0x1F0
					constexpr auto fl_end_time = 0x1F4; // Name: m_flEndTime Offset: 0x1F4
					constexpr auto n_set_method = 0x1F8; // Name: m_nSetMethod Offset: 0x1F8
					constexpr auto n_control_point_number = 0x1FC; // Name: m_nControlPointNumber Offset: 0x1FC
					constexpr auto b_local_coords = 0x200; // Name: m_bLocalCoords Offset: 0x200
					constexpr auto fl_remap_bias = 0x204; // Name: m_flRemapBias Offset: 0x204
				} // namespace C_INIT_RemapScalarToVector

				namespace C_OP_SelectivelyEnableChildren {
					constexpr auto n_child_group_id = 0x1C8; // Name: m_nChildGroupID Offset: 0x1C8
					constexpr auto n_first_child = 0x328; // Name: m_nFirstChild Offset: 0x328
					constexpr auto n_num_children_to_enable = 0x488; // Name: m_nNumChildrenToEnable Offset: 0x488
					constexpr auto b_play_endcap_on_stop = 0x5E8; // Name: m_bPlayEndcapOnStop Offset: 0x5E8
					constexpr auto b_destroy_immediately = 0x5E9; // Name: m_bDestroyImmediately Offset: 0x5E9
				} // namespace C_OP_SelectivelyEnableChildren

				namespace C_INIT_InitialSequenceFromModel {
					constexpr auto n_control_point_number = 0x1C8; // Name: m_nControlPointNumber Offset: 0x1C8
					constexpr auto n_field_output = 0x1CC; // Name: m_nFieldOutput Offset: 0x1CC
					constexpr auto n_field_output_anim = 0x1D0; // Name: m_nFieldOutputAnim Offset: 0x1D0
					constexpr auto fl_input_min = 0x1D4; // Name: m_flInputMin Offset: 0x1D4
					constexpr auto fl_input_max = 0x1D8; // Name: m_flInputMax Offset: 0x1D8
					constexpr auto fl_output_min = 0x1DC; // Name: m_flOutputMin Offset: 0x1DC
					constexpr auto fl_output_max = 0x1E0; // Name: m_flOutputMax Offset: 0x1E0
					constexpr auto n_set_method = 0x1E4; // Name: m_nSetMethod Offset: 0x1E4
				} // namespace C_INIT_InitialSequenceFromModel

				namespace C_OP_NoiseEmitter {
					constexpr auto fl_emission_duration = 0x1C8; // Name: m_flEmissionDuration Offset: 0x1C8
					constexpr auto fl_start_time = 0x1CC; // Name: m_flStartTime Offset: 0x1CC
					constexpr auto fl_emission_scale = 0x1D0; // Name: m_flEmissionScale Offset: 0x1D0
					constexpr auto n_scale_control_point = 0x1D4; // Name: m_nScaleControlPoint Offset: 0x1D4
					constexpr auto n_scale_control_point_field = 0x1D8; // Name: m_nScaleControlPointField Offset: 0x1D8
					constexpr auto n_world_noise_point = 0x1DC; // Name: m_nWorldNoisePoint Offset: 0x1DC
					constexpr auto b_abs_val = 0x1E0; // Name: m_bAbsVal Offset: 0x1E0
					constexpr auto b_abs_val_inv = 0x1E1; // Name: m_bAbsValInv Offset: 0x1E1
					constexpr auto fl_offset = 0x1E4; // Name: m_flOffset Offset: 0x1E4
					constexpr auto fl_output_min = 0x1E8; // Name: m_flOutputMin Offset: 0x1E8
					constexpr auto fl_output_max = 0x1EC; // Name: m_flOutputMax Offset: 0x1EC
					constexpr auto fl_noise_scale = 0x1F0; // Name: m_flNoiseScale Offset: 0x1F0
					constexpr auto fl_world_noise_scale = 0x1F4; // Name: m_flWorldNoiseScale Offset: 0x1F4
					constexpr auto vec_offset_loc = 0x1F8; // Name: m_vecOffsetLoc Offset: 0x1F8
					constexpr auto fl_world_time_scale = 0x204; // Name: m_flWorldTimeScale Offset: 0x204
				} // namespace C_OP_NoiseEmitter

				namespace ModelReference_t {
					constexpr auto model = 0x0; // Name: m_model Offset: 0x0
					constexpr auto fl_relative_probability_of_spawn = 0x8; // Name: m_flRelativeProbabilityOfSpawn Offset: 0x8
				} // namespace ModelReference_t

				namespace C_OP_PlanarConstraint {
					constexpr auto point_on_plane = 0x1C0; // Name: m_PointOnPlane Offset: 0x1C0
					constexpr auto plane_normal = 0x1CC; // Name: m_PlaneNormal Offset: 0x1CC
					constexpr auto n_control_point_number = 0x1D8; // Name: m_nControlPointNumber Offset: 0x1D8
					constexpr auto b_global_origin = 0x1DC; // Name: m_bGlobalOrigin Offset: 0x1DC
					constexpr auto b_global_normal = 0x1DD; // Name: m_bGlobalNormal Offset: 0x1DD
					constexpr auto fl_radius_scale = 0x1E0; // Name: m_flRadiusScale Offset: 0x1E0
					constexpr auto fl_maximum_distance_to_cp = 0x340; // Name: m_flMaximumDistanceToCP Offset: 0x340
					constexpr auto b_use_old_code = 0x4A0; // Name: m_bUseOldCode Offset: 0x4A0
				} // namespace C_OP_PlanarConstraint

				namespace C_OP_LockPoints {
					constexpr auto n_min_col = 0x1C0; // Name: m_nMinCol Offset: 0x1C0
					constexpr auto n_max_col = 0x1C4; // Name: m_nMaxCol Offset: 0x1C4
					constexpr auto n_min_row = 0x1C8; // Name: m_nMinRow Offset: 0x1C8
					constexpr auto n_max_row = 0x1CC; // Name: m_nMaxRow Offset: 0x1CC
					constexpr auto n_control_point = 0x1D0; // Name: m_nControlPoint Offset: 0x1D0
					constexpr auto fl_blend_value = 0x1D4; // Name: m_flBlendValue Offset: 0x1D4
				} // namespace C_OP_LockPoints

				namespace C_INIT_CreateSpiralSphere {
					constexpr auto n_control_point_number = 0x1C8; // Name: m_nControlPointNumber Offset: 0x1C8
					constexpr auto n_override_cp = 0x1CC; // Name: m_nOverrideCP Offset: 0x1CC
					constexpr auto n_density = 0x1D0; // Name: m_nDensity Offset: 0x1D0
					constexpr auto fl_initial_radius = 0x1D4; // Name: m_flInitialRadius Offset: 0x1D4
					constexpr auto fl_initial_speed_min = 0x1D8; // Name: m_flInitialSpeedMin Offset: 0x1D8
					constexpr auto fl_initial_speed_max = 0x1DC; // Name: m_flInitialSpeedMax Offset: 0x1DC
					constexpr auto b_use_particle_count = 0x1E0; // Name: m_bUseParticleCount Offset: 0x1E0
				} // namespace C_INIT_CreateSpiralSphere

				namespace C_OP_CPVelocityForce {
					constexpr auto n_control_point_number = 0x1D0; // Name: m_nControlPointNumber Offset: 0x1D0
					constexpr auto fl_scale = 0x1D8; // Name: m_flScale Offset: 0x1D8
				} // namespace C_OP_CPVelocityForce

				namespace C_INIT_PointList {
					constexpr auto n_field_output = 0x1C8; // Name: m_nFieldOutput Offset: 0x1C8
					constexpr auto point_list = 0x1D0; // Name: m_pointList Offset: 0x1D0
					constexpr auto b_place_along_path = 0x1E8; // Name: m_bPlaceAlongPath Offset: 0x1E8
					constexpr auto b_closed_loop = 0x1E9; // Name: m_bClosedLoop Offset: 0x1E9
					constexpr auto n_num_points_along_path = 0x1EC; // Name: m_nNumPointsAlongPath Offset: 0x1EC
				} // namespace C_INIT_PointList

				namespace C_OP_LerpToOtherAttribute {
					constexpr auto fl_interpolation = 0x1C0; // Name: m_flInterpolation Offset: 0x1C0
					constexpr auto n_field_input_from = 0x320; // Name: m_nFieldInputFrom Offset: 0x320
					constexpr auto n_field_input = 0x324; // Name: m_nFieldInput Offset: 0x324
					constexpr auto n_field_output = 0x328; // Name: m_nFieldOutput Offset: 0x328
				} // namespace C_OP_LerpToOtherAttribute

				namespace C_INIT_RandomColor {
					constexpr auto color_min = 0x1E4; // Name: m_ColorMin Offset: 0x1E4
					constexpr auto color_max = 0x1E8; // Name: m_ColorMax Offset: 0x1E8
					constexpr auto tint_min = 0x1EC; // Name: m_TintMin Offset: 0x1EC
					constexpr auto tint_max = 0x1F0; // Name: m_TintMax Offset: 0x1F0
					constexpr auto fl_tint_perc = 0x1F4; // Name: m_flTintPerc Offset: 0x1F4
					constexpr auto fl_update_threshold = 0x1F8; // Name: m_flUpdateThreshold Offset: 0x1F8
					constexpr auto n_tint_cp = 0x1FC; // Name: m_nTintCP Offset: 0x1FC
					constexpr auto n_field_output = 0x200; // Name: m_nFieldOutput Offset: 0x200
					constexpr auto n_tint_blend_mode = 0x204; // Name: m_nTintBlendMode Offset: 0x204
					constexpr auto fl_light_amplification = 0x208; // Name: m_flLightAmplification Offset: 0x208
				} // namespace C_INIT_RandomColor

				namespace C_OP_RampScalarLinearSimple {
					constexpr auto rate = 0x1C0; // Name: m_Rate Offset: 0x1C0
					constexpr auto fl_start_time = 0x1C4; // Name: m_flStartTime Offset: 0x1C4
					constexpr auto fl_end_time = 0x1C8; // Name: m_flEndTime Offset: 0x1C8
					constexpr auto n_field = 0x1F0; // Name: m_nField Offset: 0x1F0
				} // namespace C_OP_RampScalarLinearSimple

				namespace C_OP_MovementRigidAttachToCP {
					constexpr auto n_control_point_number = 0x1C0; // Name: m_nControlPointNumber Offset: 0x1C0
					constexpr auto n_scale_control_point = 0x1C4; // Name: m_nScaleControlPoint Offset: 0x1C4
					constexpr auto n_scale_cpfield = 0x1C8; // Name: m_nScaleCPField Offset: 0x1C8
					constexpr auto n_field_input = 0x1CC; // Name: m_nFieldInput Offset: 0x1CC
					constexpr auto n_field_output = 0x1D0; // Name: m_nFieldOutput Offset: 0x1D0
					constexpr auto b_offset_local = 0x1D4; // Name: m_bOffsetLocal Offset: 0x1D4
				} // namespace C_OP_MovementRigidAttachToCP

				namespace C_OP_RenderFlattenGrass {
					constexpr auto fl_flatten_strength = 0x210; // Name: m_flFlattenStrength Offset: 0x210
					constexpr auto n_strength_field_override = 0x214; // Name: m_nStrengthFieldOverride Offset: 0x214
					constexpr auto fl_radius_scale = 0x218; // Name: m_flRadiusScale Offset: 0x218
				} // namespace C_OP_RenderFlattenGrass

				namespace C_OP_RenderLightBeam {
					constexpr auto v_color_blend = 0x210; // Name: m_vColorBlend Offset: 0x210
					constexpr auto n_color_blend_type = 0x888; // Name: m_nColorBlendType Offset: 0x888
					constexpr auto fl_brightness_lumens_per_meter = 0x890; // Name: m_flBrightnessLumensPerMeter Offset: 0x890
					constexpr auto b_cast_shadows = 0x9F0; // Name: m_bCastShadows Offset: 0x9F0
					constexpr auto fl_skirt = 0x9F8; // Name: m_flSkirt Offset: 0x9F8
					constexpr auto fl_range = 0xB58; // Name: m_flRange Offset: 0xB58
					constexpr auto fl_thickness = 0xCB8; // Name: m_flThickness Offset: 0xCB8
				} // namespace C_OP_RenderLightBeam

				namespace C_OP_ForceBasedOnDistanceToPlane {
					constexpr auto fl_min_dist = 0x1D0; // Name: m_flMinDist Offset: 0x1D0
					constexpr auto vec_force_at_min_dist = 0x1D4; // Name: m_vecForceAtMinDist Offset: 0x1D4
					constexpr auto fl_max_dist = 0x1E0; // Name: m_flMaxDist Offset: 0x1E0
					constexpr auto vec_force_at_max_dist = 0x1E4; // Name: m_vecForceAtMaxDist Offset: 0x1E4
					constexpr auto vec_plane_normal = 0x1F0; // Name: m_vecPlaneNormal Offset: 0x1F0
					constexpr auto n_control_point_number = 0x1FC; // Name: m_nControlPointNumber Offset: 0x1FC
					constexpr auto fl_exponent = 0x200; // Name: m_flExponent Offset: 0x200
				} // namespace C_OP_ForceBasedOnDistanceToPlane

				namespace C_INIT_SetRigidAttachment {
					constexpr auto n_control_point_number = 0x1C8; // Name: m_nControlPointNumber Offset: 0x1C8
					constexpr auto n_field_input = 0x1CC; // Name: m_nFieldInput Offset: 0x1CC
					constexpr auto n_field_output = 0x1D0; // Name: m_nFieldOutput Offset: 0x1D0
					constexpr auto b_local_space = 0x1D4; // Name: m_bLocalSpace Offset: 0x1D4
				} // namespace C_INIT_SetRigidAttachment

				namespace MaterialVariable_t {
					constexpr auto str_variable = 0x0; // Name: m_strVariable Offset: 0x0
					constexpr auto n_variable_field = 0x8; // Name: m_nVariableField Offset: 0x8
					constexpr auto fl_scale = 0xC; // Name: m_flScale Offset: 0xC
				} // namespace MaterialVariable_t

				namespace CParticleFunctionConstraint {
				} // namespace CParticleFunctionConstraint

				namespace IParticleCollection {
				} // namespace IParticleCollection

				namespace C_OP_RemapSpeed {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto fl_input_min = 0x1C4; // Name: m_flInputMin Offset: 0x1C4
					constexpr auto fl_input_max = 0x1C8; // Name: m_flInputMax Offset: 0x1C8
					constexpr auto fl_output_min = 0x1CC; // Name: m_flOutputMin Offset: 0x1CC
					constexpr auto fl_output_max = 0x1D0; // Name: m_flOutputMax Offset: 0x1D0
					constexpr auto n_set_method = 0x1D4; // Name: m_nSetMethod Offset: 0x1D4
					constexpr auto b_ignore_delta = 0x1D8; // Name: m_bIgnoreDelta Offset: 0x1D8
				} // namespace C_OP_RemapSpeed

				namespace C_OP_SetControlPointOrientationToCPVelocity {
					constexpr auto n_cpinput = 0x1C8; // Name: m_nCPInput Offset: 0x1C8
					constexpr auto n_cpoutput = 0x1CC; // Name: m_nCPOutput Offset: 0x1CC
				} // namespace C_OP_SetControlPointOrientationToCPVelocity

				namespace C_OP_ForceControlPointStub {
					constexpr auto control_point = 0x1C8; // Name: m_ControlPoint Offset: 0x1C8
				} // namespace C_OP_ForceControlPointStub

				namespace C_OP_VectorNoise {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto vec_output_min = 0x1C4; // Name: m_vecOutputMin Offset: 0x1C4
					constexpr auto vec_output_max = 0x1D0; // Name: m_vecOutputMax Offset: 0x1D0
					constexpr auto fl4_noise_scale = 0x1DC; // Name: m_fl4NoiseScale Offset: 0x1DC
					constexpr auto b_additive = 0x1E0; // Name: m_bAdditive Offset: 0x1E0
					constexpr auto b_offset = 0x1E1; // Name: m_bOffset Offset: 0x1E1
					constexpr auto fl_noise_animation_time_scale = 0x1E4; // Name: m_flNoiseAnimationTimeScale Offset: 0x1E4
				} // namespace C_OP_VectorNoise

				namespace C_OP_RemapParticleCountToScalar {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto n_input_min = 0x1C8; // Name: m_nInputMin Offset: 0x1C8
					constexpr auto n_input_max = 0x328; // Name: m_nInputMax Offset: 0x328
					constexpr auto fl_output_min = 0x488; // Name: m_flOutputMin Offset: 0x488
					constexpr auto fl_output_max = 0x5E8; // Name: m_flOutputMax Offset: 0x5E8
					constexpr auto b_active_range = 0x748; // Name: m_bActiveRange Offset: 0x748
					constexpr auto n_set_method = 0x74C; // Name: m_nSetMethod Offset: 0x74C
				} // namespace C_OP_RemapParticleCountToScalar

				namespace C_INIT_QuantizeFloat {
					constexpr auto input_value = 0x1C8; // Name: m_InputValue Offset: 0x1C8
					constexpr auto n_output_field = 0x328; // Name: m_nOutputField Offset: 0x328
				} // namespace C_INIT_QuantizeFloat

				namespace C_OP_ParentVortices {
					constexpr auto fl_force_scale = 0x1D0; // Name: m_flForceScale Offset: 0x1D0
					constexpr auto vec_twist_axis = 0x1D4; // Name: m_vecTwistAxis Offset: 0x1D4
					constexpr auto b_flip_based_on_yaw = 0x1E0; // Name: m_bFlipBasedOnYaw Offset: 0x1E0
				} // namespace C_OP_ParentVortices

				namespace C_INIT_ModelCull {
					constexpr auto n_control_point_number = 0x1C8; // Name: m_nControlPointNumber Offset: 0x1C8
					constexpr auto b_bound_box = 0x1CC; // Name: m_bBoundBox Offset: 0x1CC
					constexpr auto b_cull_outside = 0x1CD; // Name: m_bCullOutside Offset: 0x1CD
					constexpr auto b_use_bones = 0x1CE; // Name: m_bUseBones Offset: 0x1CE
					constexpr auto hitbox_set_name = 0x1CF; // Name: m_HitboxSetName Offset: 0x1CF
				} // namespace C_INIT_ModelCull

				namespace PointDefinitionWithTimeValues_t {
					constexpr auto fl_time_duration = 0x14; // Name: m_flTimeDuration Offset: 0x14
				} // namespace PointDefinitionWithTimeValues_t

				namespace RenderProjectedMaterial_t {
					constexpr auto h_material = 0x0; // Name: m_hMaterial Offset: 0x0
				} // namespace RenderProjectedMaterial_t

				namespace C_OP_RenderSprites {
					constexpr auto n_sequence_override = 0x2AA8; // Name: m_nSequenceOverride Offset: 0x2AA8
					constexpr auto n_orientation_type = 0x2C08; // Name: m_nOrientationType Offset: 0x2C08
					constexpr auto n_orientation_control_point = 0x2C0C; // Name: m_nOrientationControlPoint Offset: 0x2C0C
					constexpr auto b_use_yaw_with_normal_aligned = 0x2C10; // Name: m_bUseYawWithNormalAligned Offset: 0x2C10
					constexpr auto fl_min_size = 0x2C18; // Name: m_flMinSize Offset: 0x2C18
					constexpr auto fl_max_size = 0x2D78; // Name: m_flMaxSize Offset: 0x2D78
					constexpr auto fl_alpha_adjust_with_size_adjust = 0x2ED8; // Name: m_flAlphaAdjustWithSizeAdjust Offset: 0x2ED8
					constexpr auto fl_start_fade_size = 0x3038; // Name: m_flStartFadeSize Offset: 0x3038
					constexpr auto fl_end_fade_size = 0x3198; // Name: m_flEndFadeSize Offset: 0x3198
					constexpr auto fl_start_fade_dot = 0x32F8; // Name: m_flStartFadeDot Offset: 0x32F8
					constexpr auto fl_end_fade_dot = 0x32FC; // Name: m_flEndFadeDot Offset: 0x32FC
					constexpr auto b_distance_alpha = 0x3300; // Name: m_bDistanceAlpha Offset: 0x3300
					constexpr auto b_soft_edges = 0x3301; // Name: m_bSoftEdges Offset: 0x3301
					constexpr auto fl_edge_softness_start = 0x3304; // Name: m_flEdgeSoftnessStart Offset: 0x3304
					constexpr auto fl_edge_softness_end = 0x3308; // Name: m_flEdgeSoftnessEnd Offset: 0x3308
					constexpr auto b_outline = 0x330C; // Name: m_bOutline Offset: 0x330C
					constexpr auto outline_color = 0x330D; // Name: m_OutlineColor Offset: 0x330D
					constexpr auto n_outline_alpha = 0x3314; // Name: m_nOutlineAlpha Offset: 0x3314
					constexpr auto fl_outline_start0 = 0x3318; // Name: m_flOutlineStart0 Offset: 0x3318
					constexpr auto fl_outline_start1 = 0x331C; // Name: m_flOutlineStart1 Offset: 0x331C
					constexpr auto fl_outline_end0 = 0x3320; // Name: m_flOutlineEnd0 Offset: 0x3320
					constexpr auto fl_outline_end1 = 0x3324; // Name: m_flOutlineEnd1 Offset: 0x3324
					constexpr auto n_lighting_mode = 0x3328; // Name: m_nLightingMode Offset: 0x3328
					constexpr auto fl_lighting_tessellation = 0x3330; // Name: m_flLightingTessellation Offset: 0x3330
					constexpr auto fl_lighting_directionality = 0x3490; // Name: m_flLightingDirectionality Offset: 0x3490
					constexpr auto b_particle_shadows = 0x35F0; // Name: m_bParticleShadows Offset: 0x35F0
					constexpr auto fl_shadow_density = 0x35F4; // Name: m_flShadowDensity Offset: 0x35F4
					constexpr auto replication_parameters = 0x35F8; // Name: m_replicationParameters Offset: 0x35F8
				} // namespace C_OP_RenderSprites

				namespace C_OP_PercentageBetweenTransformLerpCPs {
					constexpr auto n_field_output = 0x1C0; // Name: m_nFieldOutput Offset: 0x1C0
					constexpr auto fl_input_min = 0x1C4; // Name: m_flInputMin Offset: 0x1C4
					constexpr auto fl_input_max = 0x1C8; // Name: m_flInputMax Offset: 0x1C8
					constexpr auto transform_start = 0x1D0; // Name: m_TransformStart Offset: 0x1D0
					constexpr auto transform_end = 0x238; // Name: m_TransformEnd Offset: 0x238
					constexpr auto n_output_start_cp = 0x2A0; // Name: m_nOutputStartCP Offset: 0x2A0
					constexpr auto n_output_start_field = 0x2A4; // Name: m_nOutputStartField Offset: 0x2A4
					constexpr auto n_output_end_cp = 0x2A8; // Name: m_nOutputEndCP Offset: 0x2A8
					constexpr auto n_output_end_field = 0x2AC; // Name: m_nOutputEndField Offset: 0x2AC
					constexpr auto n_set_method = 0x2B0; // Name: m_nSetMethod Offset: 0x2B0
					constexpr auto b_active_range = 0x2B4; // Name: m_bActiveRange Offset: 0x2B4
					constexpr auto b_radial_check = 0x2B5; // Name: m_bRadialCheck Offset: 0x2B5
				} // namespace C_OP_PercentageBetweenTransformLerpCPs

				namespace FloatInputMaterialVariable_t {
					constexpr auto str_variable = 0x0; // Name: m_strVariable Offset: 0x0
					constexpr auto fl_input = 0x8; // Name: m_flInput Offset: 0x8
				} // namespace FloatInputMaterialVariable_t

				namespace C_OP_RampScalarLinear {
					constexpr auto rate_min = 0x1C0; // Name: m_RateMin Offset: 0x1C0
					constexpr auto rate_max = 0x1C4; // Name: m_RateMax Offset: 0x1C4
					constexpr auto fl_start_time_min = 0x1C8; // Name: m_flStartTime_min Offset: 0x1C8
					constexpr auto fl_start_time_max = 0x1CC; // Name: m_flStartTime_max Offset: 0x1CC
					constexpr auto fl_end_time_min = 0x1D0; // Name: m_flEndTime_min Offset: 0x1D0
					constexpr auto fl_end_time_max = 0x1D4; // Name: m_flEndTime_max Offset: 0x1D4
					constexpr auto n_field = 0x200; // Name: m_nField Offset: 0x200
					constexpr auto b_proportional_op = 0x204; // Name: m_bProportionalOp Offset: 0x204
				} // namespace C_OP_RampScalarLinear

				namespace C_INIT_InitVecCollection {
					constexpr auto input_value = 0x1C8; // Name: m_InputValue Offset: 0x1C8
					constexpr auto n_output_field = 0x840; // Name: m_nOutputField Offset: 0x840
				} // namespace C_INIT_InitVecCollection

				namespace C_OP_CPOffsetToPercentageBetweenCPs {
					constexpr auto fl_input_min = 0x1C0; // Name: m_flInputMin Offset: 0x1C0
					constexpr auto fl_input_max = 0x1C4; // Name: m_flInputMax Offset: 0x1C4
					constexpr auto fl_input_bias = 0x1C8; // Name: m_flInputBias Offset: 0x1C8
					constexpr auto n_start_cp = 0x1CC; // Name: m_nStartCP Offset: 0x1CC
					constexpr auto n_end_cp = 0x1D0; // Name: m_nEndCP Offset: 0x1D0
					constexpr auto n_offset_cp = 0x1D4; // Name: m_nOffsetCP Offset: 0x1D4
					constexpr auto n_ouput_cp = 0x1D8; // Name: m_nOuputCP Offset: 0x1D8
					constexpr auto n_input_cp = 0x1DC; // Name: m_nInputCP Offset: 0x1DC
					constexpr auto b_radial_check = 0x1E0; // Name: m_bRadialCheck Offset: 0x1E0
					constexpr auto b_scale_offset = 0x1E1; // Name: m_bScaleOffset Offset: 0x1E1
					constexpr auto vec_offset = 0x1E4; // Name: m_vecOffset Offset: 0x1E4
				} // namespace C_OP_CPOffsetToPercentageBetweenCPs
			}

			namespace particleslib
			{

				namespace CParticleCollectionFloatInput {
				} // namespace CParticleCollectionFloatInput

				namespace CParticleBindingRealPulse {
				} // namespace CParticleBindingRealPulse

				namespace CParticleCollectionBindingInstance {
				} // namespace CParticleCollectionBindingInstance

				namespace ParticleNamedValueConfiguration_t {
					constexpr auto config_name = 0x0; // Name: m_ConfigName Offset: 0x0
					constexpr auto config_value = 0x8; // Name: m_ConfigValue Offset: 0x8
					constexpr auto i_attach_type = 0x18; // Name: m_iAttachType Offset: 0x18
					constexpr auto bound_entity_path = 0x20; // Name: m_BoundEntityPath Offset: 0x20
					constexpr auto str_entity_scope = 0x28; // Name: m_strEntityScope Offset: 0x28
					constexpr auto str_attachment_name = 0x30; // Name: m_strAttachmentName Offset: 0x30
				} // namespace ParticleNamedValueConfiguration_t

				namespace CParticleProperty {
				} // namespace CParticleProperty

				namespace CParticleModelInput {
					constexpr auto n_type = 0x10; // Name: m_nType Offset: 0x10
					constexpr auto named_value = 0x18; // Name: m_NamedValue Offset: 0x18
					constexpr auto n_control_point = 0x58; // Name: m_nControlPoint Offset: 0x58
				} // namespace CParticleModelInput

				namespace CParticleInput {
				} // namespace CParticleInput

				namespace CParticleVariableRef {
					constexpr auto variable_name = 0x0; // Name: m_variableName Offset: 0x0
					constexpr auto variable_type = 0x38; // Name: m_variableType Offset: 0x38
				} // namespace CParticleVariableRef

				namespace CParticleVecInput {
					constexpr auto n_type = 0x10; // Name: m_nType Offset: 0x10
					constexpr auto v_literal_value = 0x14; // Name: m_vLiteralValue Offset: 0x14
					constexpr auto literal_color = 0x20; // Name: m_LiteralColor Offset: 0x20
					constexpr auto named_value = 0x28; // Name: m_NamedValue Offset: 0x28
					constexpr auto b_follow_named_value = 0x68; // Name: m_bFollowNamedValue Offset: 0x68
					constexpr auto n_vector_attribute = 0x6C; // Name: m_nVectorAttribute Offset: 0x6C
					constexpr auto v_vector_attribute_scale = 0x70; // Name: m_vVectorAttributeScale Offset: 0x70
					constexpr auto n_control_point = 0x7C; // Name: m_nControlPoint Offset: 0x7C
					constexpr auto n_delta_control_point = 0x80; // Name: m_nDeltaControlPoint Offset: 0x80
					constexpr auto v_cpvalue_scale = 0x84; // Name: m_vCPValueScale Offset: 0x84
					constexpr auto v_cprelative_position = 0x90; // Name: m_vCPRelativePosition Offset: 0x90
					constexpr auto v_cprelative_dir = 0x9C; // Name: m_vCPRelativeDir Offset: 0x9C
					constexpr auto float_component_x = 0xA8; // Name: m_FloatComponentX Offset: 0xA8
					constexpr auto float_component_y = 0x208; // Name: m_FloatComponentY Offset: 0x208
					constexpr auto float_component_z = 0x368; // Name: m_FloatComponentZ Offset: 0x368
					constexpr auto float_interp = 0x4C8; // Name: m_FloatInterp Offset: 0x4C8
					constexpr auto fl_interp_input0 = 0x628; // Name: m_flInterpInput0 Offset: 0x628
					constexpr auto fl_interp_input1 = 0x62C; // Name: m_flInterpInput1 Offset: 0x62C
					constexpr auto v_interp_output0 = 0x630; // Name: m_vInterpOutput0 Offset: 0x630
					constexpr auto v_interp_output1 = 0x63C; // Name: m_vInterpOutput1 Offset: 0x63C
					constexpr auto gradient = 0x648; // Name: m_Gradient Offset: 0x648
					constexpr auto v_random_min = 0x660; // Name: m_vRandomMin Offset: 0x660
					constexpr auto v_random_max = 0x66C; // Name: m_vRandomMax Offset: 0x66C
				} // namespace CParticleVecInput

				namespace CPerParticleVecInput {
				} // namespace CPerParticleVecInput

				namespace CNewParticleEffect {
					constexpr auto p_next = 0x10; // Name: m_pNext Offset: 0x10
					constexpr auto p_prev = 0x18; // Name: m_pPrev Offset: 0x18
					constexpr auto p_particles = 0x20; // Name: m_pParticles Offset: 0x20
					constexpr auto p_debug_name = 0x28; // Name: m_pDebugName Offset: 0x28
					constexpr auto b_dont_remove = 0x0; // Name: m_bDontRemove Offset: 0x0
					constexpr auto b_remove = 0x0; // Name: m_bRemove Offset: 0x0
					constexpr auto b_needs_bbox_update = 0x0; // Name: m_bNeedsBBoxUpdate Offset: 0x0
					constexpr auto b_is_first_frame = 0x0; // Name: m_bIsFirstFrame Offset: 0x0
					constexpr auto b_auto_update_bbox = 0x0; // Name: m_bAutoUpdateBBox Offset: 0x0
					constexpr auto b_allocated = 0x0; // Name: m_bAllocated Offset: 0x0
					constexpr auto b_simulate = 0x0; // Name: m_bSimulate Offset: 0x0
					constexpr auto b_should_perform_cull_check = 0x0; // Name: m_bShouldPerformCullCheck Offset: 0x0
					constexpr auto b_force_no_draw = 0x0; // Name: m_bForceNoDraw Offset: 0x0
					constexpr auto b_should_save = 0x0; // Name: m_bShouldSave Offset: 0x0
					constexpr auto b_disable_aggregation = 0x0; // Name: m_bDisableAggregation Offset: 0x0
					constexpr auto b_should_simulate_during_game_paused = 0x0; // Name: m_bShouldSimulateDuringGamePaused Offset: 0x0
					constexpr auto b_should_check_fo_w = 0x0; // Name: m_bShouldCheckFoW Offset: 0x0
					constexpr auto v_sort_origin = 0x40; // Name: m_vSortOrigin Offset: 0x40
					constexpr auto fl_scale = 0x4C; // Name: m_flScale Offset: 0x4C
					constexpr auto h_owner = 0x50; // Name: m_hOwner Offset: 0x50
					constexpr auto p_owning_particle_property = 0x58; // Name: m_pOwningParticleProperty Offset: 0x58
					constexpr auto fl_freeze_transition_start = 0x70; // Name: m_flFreezeTransitionStart Offset: 0x70
					constexpr auto fl_freeze_transition_duration = 0x74; // Name: m_flFreezeTransitionDuration Offset: 0x74
					constexpr auto fl_freeze_transition_override = 0x78; // Name: m_flFreezeTransitionOverride Offset: 0x78
					constexpr auto b_freeze_transition_active = 0x7C; // Name: m_bFreezeTransitionActive Offset: 0x7C
					constexpr auto b_freeze_target_state = 0x7D; // Name: m_bFreezeTargetState Offset: 0x7D
					constexpr auto b_can_freeze = 0x7E; // Name: m_bCanFreeze Offset: 0x7E
					constexpr auto last_min = 0x80; // Name: m_LastMin Offset: 0x80
					constexpr auto last_max = 0x8C; // Name: m_LastMax Offset: 0x8C
					constexpr auto n_split_screen_user = 0x98; // Name: m_nSplitScreenUser Offset: 0x98
					constexpr auto vec_aggregation_center = 0x9C; // Name: m_vecAggregationCenter Offset: 0x9C
					constexpr auto ref_count = 0xC0; // Name: m_RefCount Offset: 0xC0
				} // namespace CNewParticleEffect

				namespace ParticleNamedValueSource_t {
					constexpr auto name = 0x0; // Name: m_Name Offset: 0x0
					constexpr auto is_public = 0x8; // Name: m_IsPublic Offset: 0x8
					constexpr auto value_type = 0xC; // Name: m_ValueType Offset: 0xC
					constexpr auto default_config = 0x10; // Name: m_DefaultConfig Offset: 0x10
					constexpr auto named_configs = 0x48; // Name: m_NamedConfigs Offset: 0x48
				} // namespace ParticleNamedValueSource_t

				namespace CParticleCollectionVecInput {
				} // namespace CParticleCollectionVecInput

				namespace CParticleRemapFloatInput {
				} // namespace CParticleRemapFloatInput

				namespace CParticleTransformInput {
					constexpr auto n_type = 0x10; // Name: m_nType Offset: 0x10
					constexpr auto named_value = 0x18; // Name: m_NamedValue Offset: 0x18
					constexpr auto b_follow_named_value = 0x58; // Name: m_bFollowNamedValue Offset: 0x58
					constexpr auto b_supports_disabled = 0x59; // Name: m_bSupportsDisabled Offset: 0x59
					constexpr auto b_use_orientation = 0x5A; // Name: m_bUseOrientation Offset: 0x5A
					constexpr auto n_control_point = 0x5C; // Name: m_nControlPoint Offset: 0x5C
					constexpr auto n_control_point_range_max = 0x60; // Name: m_nControlPointRangeMax Offset: 0x60
					constexpr auto fl_end_cpgrowth_time = 0x64; // Name: m_flEndCPGrowthTime Offset: 0x64
				} // namespace CParticleTransformInput

				namespace IParticleEffect {
				} // namespace IParticleEffect

				namespace PARTICLE_EHANDLE__ {
					constexpr auto unused = 0x0; // Name: unused Offset: 0x0
				} // namespace PARTICLE_EHANDLE__

				namespace CPerParticleFloatInput {
				} // namespace CPerParticleFloatInput

				namespace CParticleCollectionRendererFloatInput {
				} // namespace CParticleCollectionRendererFloatInput

				namespace PARTICLE_WORLD_HANDLE__ {
					constexpr auto unused = 0x0; // Name: unused Offset: 0x0
				} // namespace PARTICLE_WORLD_HANDLE__

				namespace CParticleFloatInput {
					constexpr auto n_type = 0x10; // Name: m_nType Offset: 0x10
					constexpr auto n_map_type = 0x14; // Name: m_nMapType Offset: 0x14
					constexpr auto fl_literal_value = 0x18; // Name: m_flLiteralValue Offset: 0x18
					constexpr auto named_value = 0x20; // Name: m_NamedValue Offset: 0x20
					constexpr auto n_control_point = 0x60; // Name: m_nControlPoint Offset: 0x60
					constexpr auto n_scalar_attribute = 0x64; // Name: m_nScalarAttribute Offset: 0x64
					constexpr auto n_vector_attribute = 0x68; // Name: m_nVectorAttribute Offset: 0x68
					constexpr auto n_vector_component = 0x6C; // Name: m_nVectorComponent Offset: 0x6C
					constexpr auto fl_random_min = 0x70; // Name: m_flRandomMin Offset: 0x70
					constexpr auto fl_random_max = 0x74; // Name: m_flRandomMax Offset: 0x74
					constexpr auto b_has_random_sign_flip = 0x78; // Name: m_bHasRandomSignFlip Offset: 0x78
					constexpr auto n_random_seed = 0x7C; // Name: m_nRandomSeed Offset: 0x7C
					constexpr auto n_random_mode = 0x80; // Name: m_nRandomMode Offset: 0x80
					constexpr auto fl_lod0 = 0x88; // Name: m_flLOD0 Offset: 0x88
					constexpr auto fl_lod1 = 0x8C; // Name: m_flLOD1 Offset: 0x8C
					constexpr auto fl_lod2 = 0x90; // Name: m_flLOD2 Offset: 0x90
					constexpr auto fl_lod3 = 0x94; // Name: m_flLOD3 Offset: 0x94
					constexpr auto n_noise_input_vector_attribute = 0x98; // Name: m_nNoiseInputVectorAttribute Offset: 0x98
					constexpr auto fl_noise_output_min = 0x9C; // Name: m_flNoiseOutputMin Offset: 0x9C
					constexpr auto fl_noise_output_max = 0xA0; // Name: m_flNoiseOutputMax Offset: 0xA0
					constexpr auto fl_noise_scale = 0xA4; // Name: m_flNoiseScale Offset: 0xA4
					constexpr auto vec_noise_offset_rate = 0xA8; // Name: m_vecNoiseOffsetRate Offset: 0xA8
					constexpr auto fl_noise_offset = 0xB4; // Name: m_flNoiseOffset Offset: 0xB4
					constexpr auto n_noise_octaves = 0xB8; // Name: m_nNoiseOctaves Offset: 0xB8
					constexpr auto n_noise_turbulence = 0xBC; // Name: m_nNoiseTurbulence Offset: 0xBC
					constexpr auto n_noise_type = 0xC0; // Name: m_nNoiseType Offset: 0xC0
					constexpr auto n_noise_modifier = 0xC4; // Name: m_nNoiseModifier Offset: 0xC4
					constexpr auto fl_noise_turbulence_scale = 0xC8; // Name: m_flNoiseTurbulenceScale Offset: 0xC8
					constexpr auto fl_noise_turbulence_mix = 0xCC; // Name: m_flNoiseTurbulenceMix Offset: 0xCC
					constexpr auto fl_noise_img_preview_scale = 0xD0; // Name: m_flNoiseImgPreviewScale Offset: 0xD0
					constexpr auto b_noise_img_preview_live = 0xD4; // Name: m_bNoiseImgPreviewLive Offset: 0xD4
					constexpr auto fl_no_camera_fallback = 0xE0; // Name: m_flNoCameraFallback Offset: 0xE0
					constexpr auto b_use_bounds_center = 0xE4; // Name: m_bUseBoundsCenter Offset: 0xE4
					constexpr auto n_input_mode = 0xE8; // Name: m_nInputMode Offset: 0xE8
					constexpr auto fl_mult_factor = 0xEC; // Name: m_flMultFactor Offset: 0xEC
					constexpr auto fl_input0 = 0xF0; // Name: m_flInput0 Offset: 0xF0
					constexpr auto fl_input1 = 0xF4; // Name: m_flInput1 Offset: 0xF4
					constexpr auto fl_output0 = 0xF8; // Name: m_flOutput0 Offset: 0xF8
					constexpr auto fl_output1 = 0xFC; // Name: m_flOutput1 Offset: 0xFC
					constexpr auto fl_notched_range_min = 0x100; // Name: m_flNotchedRangeMin Offset: 0x100
					constexpr auto fl_notched_range_max = 0x104; // Name: m_flNotchedRangeMax Offset: 0x104
					constexpr auto fl_notched_output_outside = 0x108; // Name: m_flNotchedOutputOutside Offset: 0x108
					constexpr auto fl_notched_output_inside = 0x10C; // Name: m_flNotchedOutputInside Offset: 0x10C
					constexpr auto n_round_type = 0x110; // Name: m_nRoundType Offset: 0x110
					constexpr auto n_bias_type = 0x114; // Name: m_nBiasType Offset: 0x114
					constexpr auto fl_bias_parameter = 0x118; // Name: m_flBiasParameter Offset: 0x118
					constexpr auto curve = 0x120; // Name: m_Curve Offset: 0x120
				} // namespace CParticleFloatInput

				namespace CParticleCollectionRendererVecInput {
				} // namespace CParticleCollectionRendererVecInput
			}

			namespace pulse_system
			{

				namespace CPulseTestFuncs_LibraryA {
				} // namespace CPulseTestFuncs_LibraryA

				namespace CPulseCell_WaitForCursorsWithTagBase_CursorState_t {
					constexpr auto tag_name = 0x0; // Name: m_TagName Offset: 0x0
				} // namespace CPulseCell_WaitForCursorsWithTagBase_CursorState_t

				namespace CPulseCell_WaitForCursorsWithTagBase {
					constexpr auto n_cursors_allowed_to_wait = 0x48; // Name: m_nCursorsAllowedToWait Offset: 0x48
					constexpr auto wait_complete = 0x50; // Name: m_WaitComplete Offset: 0x50
				} // namespace CPulseCell_WaitForCursorsWithTagBase

				namespace CPulseCell_CursorQueue {
					constexpr auto n_cursors_allowed_to_run_parallel = 0x80; // Name: m_nCursorsAllowedToRunParallel Offset: 0x80
				} // namespace CPulseCell_CursorQueue

				namespace CPulseCell_WaitForCursorsWithTag {
					constexpr auto b_tag_self_when_complete = 0x80; // Name: m_bTagSelfWhenComplete Offset: 0x80
					constexpr auto n_desired_kill_priority = 0x84; // Name: m_nDesiredKillPriority Offset: 0x84
				} // namespace CPulseCell_WaitForCursorsWithTag

				namespace CPulseCursorFuncs {
				} // namespace CPulseCursorFuncs
			}

			namespace resourcesystem
			{

				namespace InfoForResourceTypeIMaterial2 {
				} // namespace InfoForResourceTypeIMaterial2

				namespace InfoForResourceTypeCAnimData {
				} // namespace InfoForResourceTypeCAnimData

				namespace InfoForResourceTypeIParticleSystemDefinition {
				} // namespace InfoForResourceTypeIParticleSystemDefinition

				namespace InfoForResourceTypeCPanoramaLayout {
				} // namespace InfoForResourceTypeCPanoramaLayout

				namespace InfoForResourceTypeCDotaItemDefinitionResource {
				} // namespace InfoForResourceTypeCDotaItemDefinitionResource

				namespace InfoForResourceTypeCAnimationGroup {
				} // namespace InfoForResourceTypeCAnimationGroup

				namespace InfoForResourceTypeIAnimGraphModelBinding {
				} // namespace InfoForResourceTypeIAnimGraphModelBinding

				namespace InfoForResourceTypeCPostProcessingResource {
				} // namespace InfoForResourceTypeCPostProcessingResource

				namespace InfoForResourceTypeCModel {
				} // namespace InfoForResourceTypeCModel

				namespace InfoForResourceTypeCNmGraphDefinition {
				} // namespace InfoForResourceTypeCNmGraphDefinition

				namespace InfoForResourceTypeCDOTAPatchNotesList {
				} // namespace InfoForResourceTypeCDOTAPatchNotesList

				namespace InfoForResourceTypeCRenderMesh {
				} // namespace InfoForResourceTypeCRenderMesh

				namespace InfoForResourceTypeCNmClip {
				} // namespace InfoForResourceTypeCNmClip

				namespace InfoForResourceTypeCEntityLump {
				} // namespace InfoForResourceTypeCEntityLump

				namespace InfoForResourceTypeCNmSkeleton {
				} // namespace InfoForResourceTypeCNmSkeleton

				namespace TestResource_t {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
				} // namespace TestResource_t

				namespace InfoForResourceTypeCSequenceGroupData {
				} // namespace InfoForResourceTypeCSequenceGroupData

				namespace InfoForResourceTypeCTextureBase {
				} // namespace InfoForResourceTypeCTextureBase

				namespace InfoForResourceTypeCPhysAggregateData {
				} // namespace InfoForResourceTypeCPhysAggregateData

				namespace InfoForResourceTypeCChoreoSceneFileData {
				} // namespace InfoForResourceTypeCChoreoSceneFileData

				namespace InfoForResourceTypeProceduralTestResource_t {
				} // namespace InfoForResourceTypeProceduralTestResource_t

				namespace InfoForResourceTypeIPulseGraphDef {
				} // namespace InfoForResourceTypeIPulseGraphDef

				namespace InfoForResourceTypeCJavaScriptResource {
				} // namespace InfoForResourceTypeCJavaScriptResource

				namespace InfoForResourceTypeIParticleSnapshot {
				} // namespace InfoForResourceTypeIParticleSnapshot

				namespace InfoForResourceTypeCVoiceContainerBase {
				} // namespace InfoForResourceTypeCVoiceContainerBase

				namespace InfoForResourceTypeCNmIKRig {
				} // namespace InfoForResourceTypeCNmIKRig

				namespace InfoForResourceTypeCNmGraphVariation {
				} // namespace InfoForResourceTypeCNmGraphVariation

				namespace InfoForResourceTypeCResponseRulesList {
				} // namespace InfoForResourceTypeCResponseRulesList

				namespace InfoForResourceTypeIVectorGraphic {
				} // namespace InfoForResourceTypeIVectorGraphic

				namespace InfoForResourceTypeCVDataResource {
				} // namespace InfoForResourceTypeCVDataResource

				namespace InfoForResourceTypeCMorphSetData {
				} // namespace InfoForResourceTypeCMorphSetData

				namespace InfoForResourceTypeCVSoundStackScriptList {
				} // namespace InfoForResourceTypeCVSoundStackScriptList

				namespace InfoForResourceTypeCVPhysXSurfacePropertiesList {
				} // namespace InfoForResourceTypeCVPhysXSurfacePropertiesList

				namespace InfoForResourceTypeWorld_t {
				} // namespace InfoForResourceTypeWorld_t

				namespace InfoForResourceTypeManifestTestResource_t {
				} // namespace InfoForResourceTypeManifestTestResource_t

				namespace InfoForResourceTypeCGcExportableExternalData {
				} // namespace InfoForResourceTypeCGcExportableExternalData

				namespace InfoForResourceTypeCVoxelVisibility {
				} // namespace InfoForResourceTypeCVoxelVisibility

				namespace ManifestTestResource_t {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
					constexpr auto child = 0x8; // Name: m_child Offset: 0x8
				} // namespace ManifestTestResource_t

				namespace InfoForResourceTypeCTypeScriptResource {
				} // namespace InfoForResourceTypeCTypeScriptResource

				namespace InfoForResourceTypeCCSGOEconItem {
				} // namespace InfoForResourceTypeCCSGOEconItem

				namespace InfoForResourceTypeTestResource_t {
				} // namespace InfoForResourceTypeTestResource_t

				namespace InfoForResourceTypeCVSoundEventScriptList {
				} // namespace InfoForResourceTypeCVSoundEventScriptList

				namespace InfoForResourceTypeCPanoramaStyle {
				} // namespace InfoForResourceTypeCPanoramaStyle

				namespace InfoForResourceTypeCWorldNode {
				} // namespace InfoForResourceTypeCWorldNode

				namespace InfoForResourceTypeCPanoramaDynamicImages {
				} // namespace InfoForResourceTypeCPanoramaDynamicImages

				namespace InfoForResourceTypeCSmartProp {
				} // namespace InfoForResourceTypeCSmartProp

				namespace InfoForResourceTypeCCompositeMaterialKit {
				} // namespace InfoForResourceTypeCCompositeMaterialKit

				namespace InfoForResourceTypeCVMixListResource {
				} // namespace InfoForResourceTypeCVMixListResource

				namespace InfoForResourceTypeCDOTANovelsList {
				} // namespace InfoForResourceTypeCDOTANovelsList
			}

			namespace scenesystem
			{

				namespace CSSDSMsg_ViewTarget {
					constexpr auto name = 0x0; // Name: m_Name Offset: 0x0
					constexpr auto texture_id = 0x8; // Name: m_TextureId Offset: 0x8
					constexpr auto n_width = 0x10; // Name: m_nWidth Offset: 0x10
					constexpr auto n_height = 0x14; // Name: m_nHeight Offset: 0x14
					constexpr auto n_requested_width = 0x18; // Name: m_nRequestedWidth Offset: 0x18
					constexpr auto n_requested_height = 0x1C; // Name: m_nRequestedHeight Offset: 0x1C
					constexpr auto n_num_mip_levels = 0x20; // Name: m_nNumMipLevels Offset: 0x20
					constexpr auto n_depth = 0x24; // Name: m_nDepth Offset: 0x24
					constexpr auto n_multisample_num_samples = 0x28; // Name: m_nMultisampleNumSamples Offset: 0x28
					constexpr auto n_format = 0x2C; // Name: m_nFormat Offset: 0x2C
				} // namespace CSSDSMsg_ViewTarget

				namespace CSSDSMsg_LayerBase {
					constexpr auto view_id = 0x0; // Name: m_viewId Offset: 0x0
					constexpr auto view_name = 0x10; // Name: m_ViewName Offset: 0x10
					constexpr auto n_layer_index = 0x18; // Name: m_nLayerIndex Offset: 0x18
					constexpr auto n_layer_id = 0x20; // Name: m_nLayerId Offset: 0x20
					constexpr auto layer_name = 0x28; // Name: m_LayerName Offset: 0x28
					constexpr auto display_text = 0x30; // Name: m_displayText Offset: 0x30
				} // namespace CSSDSMsg_LayerBase

				namespace SceneViewId_t {
					constexpr auto n_view_id = 0x0; // Name: m_nViewId Offset: 0x0
					constexpr auto n_frame_count = 0x8; // Name: m_nFrameCount Offset: 0x8
				} // namespace SceneViewId_t

				namespace CSSDSMsg_ViewRender {
					constexpr auto view_id = 0x0; // Name: m_viewId Offset: 0x0
					constexpr auto view_name = 0x10; // Name: m_ViewName Offset: 0x10
				} // namespace CSSDSMsg_ViewRender

				namespace CSSDSEndFrameViewInfo {
					constexpr auto n_view_id = 0x0; // Name: m_nViewId Offset: 0x0
					constexpr auto view_name = 0x8; // Name: m_ViewName Offset: 0x8
				} // namespace CSSDSEndFrameViewInfo

				namespace CSSDSMsg_PostLayer {
				} // namespace CSSDSMsg_PostLayer

				namespace CSSDSMsg_PreLayer {
				} // namespace CSSDSMsg_PreLayer

				namespace CSSDSMsg_ViewTargetList {
					constexpr auto view_id = 0x0; // Name: m_viewId Offset: 0x0
					constexpr auto view_name = 0x10; // Name: m_ViewName Offset: 0x10
					constexpr auto targets = 0x18; // Name: m_Targets Offset: 0x18
				} // namespace CSSDSMsg_ViewTargetList

				namespace CSSDSMsg_EndFrame {
					constexpr auto views = 0x0; // Name: m_Views Offset: 0x0
				} // namespace CSSDSMsg_EndFrame
			}

			namespace server
			{

				namespace CFuncIllusionary {
				} // namespace CFuncIllusionary

				namespace CRuleBrushEntity {
				} // namespace CRuleBrushEntity

				namespace CHostageExpresserShim {
					constexpr auto p_expresser = 0xAC0; // Name: m_pExpresser Offset: 0xAC0
				} // namespace CHostageExpresserShim

				namespace CLogicEventListener {
					constexpr auto str_event_name = 0x4F0; // Name: m_strEventName Offset: 0x4F0
					constexpr auto b_is_enabled = 0x4F8; // Name: m_bIsEnabled Offset: 0x4F8
					constexpr auto n_team = 0x4FC; // Name: m_nTeam Offset: 0x4FC
					constexpr auto on_event_fired = 0x500; // Name: m_OnEventFired Offset: 0x500
				} // namespace CLogicEventListener

				namespace CWeaponShield {
					constexpr auto fl_bullet_damage_absorbed = 0xF90; // Name: m_flBulletDamageAbsorbed Offset: 0xF90
					constexpr auto fl_last_bullet_hit_sound_time = 0xF94; // Name: m_flLastBulletHitSoundTime Offset: 0xF94
					constexpr auto fl_display_health = 0xF98; // Name: m_flDisplayHealth Offset: 0xF98
				} // namespace CWeaponShield

				namespace CRopeKeyframeAlias_move_rope {
				} // namespace CRopeKeyframeAlias_move_rope

				namespace CTriggerSoundscape {
					constexpr auto h_soundscape = 0x960; // Name: m_hSoundscape Offset: 0x960
					constexpr auto soundscape_name = 0x968; // Name: m_SoundscapeName Offset: 0x968
					constexpr auto spectators = 0x970; // Name: m_spectators Offset: 0x970
				} // namespace CTriggerSoundscape

				namespace CEnableMotionFixup {
				} // namespace CEnableMotionFixup

				namespace ViewAngleServerChange_t {
					constexpr auto n_type = 0x30; // Name: nType Offset: 0x30
					constexpr auto q_angle = 0x34; // Name: qAngle Offset: 0x34
					constexpr auto n_index = 0x40; // Name: nIndex Offset: 0x40
				} // namespace ViewAngleServerChange_t

				namespace CRenderComponent {
					constexpr auto _m_p_chain_entity = 0x10; // Name: __m_pChainEntity Offset: 0x10
					constexpr auto b_is_rendering_with_view_models = 0x50; // Name: m_bIsRenderingWithViewModels Offset: 0x50
					constexpr auto n_splitscreen_flags = 0x54; // Name: m_nSplitscreenFlags Offset: 0x54
					constexpr auto b_enable_rendering = 0x60; // Name: m_bEnableRendering Offset: 0x60
					constexpr auto b_interpolation_ready_to_draw = 0xB0; // Name: m_bInterpolationReadyToDraw Offset: 0xB0
				} // namespace CRenderComponent

				namespace sky3dparams_t {
					constexpr auto scale = 0x8; // Name: scale Offset: 0x8
					constexpr auto origin = 0xC; // Name: origin Offset: 0xC
					constexpr auto b_clip3_dsky_box_near_to_world_far = 0x18; // Name: bClip3DSkyBoxNearToWorldFar Offset: 0x18
					constexpr auto fl_clip3_dsky_box_near_to_world_far_offset = 0x1C; // Name: flClip3DSkyBoxNearToWorldFarOffset Offset: 0x1C
					constexpr auto fog = 0x20; // Name: fog Offset: 0x20
					constexpr auto n_world_group_id = 0x88; // Name: m_nWorldGroupID Offset: 0x88
				} // namespace sky3dparams_t

				namespace CBaseGrenade {
					constexpr auto on_player_pickup = 0xA40; // Name: m_OnPlayerPickup Offset: 0xA40
					constexpr auto on_explode = 0xA68; // Name: m_OnExplode Offset: 0xA68
					constexpr auto b_has_warned_ai = 0xA90; // Name: m_bHasWarnedAI Offset: 0xA90
					constexpr auto b_is_smoke_grenade = 0xA91; // Name: m_bIsSmokeGrenade Offset: 0xA91
					constexpr auto b_is_live = 0xA92; // Name: m_bIsLive Offset: 0xA92
					constexpr auto dmg_radius = 0xA94; // Name: m_DmgRadius Offset: 0xA94
					constexpr auto fl_detonate_time = 0xA98; // Name: m_flDetonateTime Offset: 0xA98
					constexpr auto fl_warn_aitime = 0xA9C; // Name: m_flWarnAITime Offset: 0xA9C
					constexpr auto fl_damage = 0xAA0; // Name: m_flDamage Offset: 0xAA0
					constexpr auto isz_bounce_sound = 0xAA8; // Name: m_iszBounceSound Offset: 0xAA8
					constexpr auto explosion_sound = 0xAB0; // Name: m_ExplosionSound Offset: 0xAB0
					constexpr auto h_thrower = 0xABC; // Name: m_hThrower Offset: 0xABC
					constexpr auto fl_next_attack = 0xAD4; // Name: m_flNextAttack Offset: 0xAD4
					constexpr auto h_original_thrower = 0xAD8; // Name: m_hOriginalThrower Offset: 0xAD8
				} // namespace CBaseGrenade

				namespace CDynamicProp {
					constexpr auto b_create_nav_obstacle = 0xB60; // Name: m_bCreateNavObstacle Offset: 0xB60
					constexpr auto b_nav_obstacle_updates_overridden = 0xB61; // Name: m_bNavObstacleUpdatesOverridden Offset: 0xB61
					constexpr auto b_use_hitboxes_for_render_box = 0xB62; // Name: m_bUseHitboxesForRenderBox Offset: 0xB62
					constexpr auto b_use_anim_graph = 0xB63; // Name: m_bUseAnimGraph Offset: 0xB63
					constexpr auto p_output_anim_begun = 0xB68; // Name: m_pOutputAnimBegun Offset: 0xB68
					constexpr auto p_output_anim_over = 0xB90; // Name: m_pOutputAnimOver Offset: 0xB90
					constexpr auto p_output_anim_loop_cycle_over = 0xBB8; // Name: m_pOutputAnimLoopCycleOver Offset: 0xBB8
					constexpr auto on_anim_reached_start = 0xBE0; // Name: m_OnAnimReachedStart Offset: 0xBE0
					constexpr auto on_anim_reached_end = 0xC08; // Name: m_OnAnimReachedEnd Offset: 0xC08
					constexpr auto isz_idle_anim = 0xC30; // Name: m_iszIdleAnim Offset: 0xC30
					constexpr auto n_idle_anim_loop_mode = 0xC38; // Name: m_nIdleAnimLoopMode Offset: 0xC38
					constexpr auto b_randomize_cycle = 0xC3C; // Name: m_bRandomizeCycle Offset: 0xC3C
					constexpr auto b_start_disabled = 0xC3D; // Name: m_bStartDisabled Offset: 0xC3D
					constexpr auto b_fired_start_end_output = 0xC3E; // Name: m_bFiredStartEndOutput Offset: 0xC3E
					constexpr auto b_force_npc_exclude = 0xC3F; // Name: m_bForceNpcExclude Offset: 0xC3F
					constexpr auto b_create_non_solid = 0xC40; // Name: m_bCreateNonSolid Offset: 0xC40
					constexpr auto b_is_override_prop = 0xC41; // Name: m_bIsOverrideProp Offset: 0xC41
					constexpr auto i_initial_glow_state = 0xC44; // Name: m_iInitialGlowState Offset: 0xC44
					constexpr auto n_glow_range = 0xC48; // Name: m_nGlowRange Offset: 0xC48
					constexpr auto n_glow_range_min = 0xC4C; // Name: m_nGlowRangeMin Offset: 0xC4C
					constexpr auto glow_color = 0xC50; // Name: m_glowColor Offset: 0xC50
					constexpr auto n_glow_team = 0xC54; // Name: m_nGlowTeam Offset: 0xC54
				} // namespace CDynamicProp

				namespace CDecoyGrenade {
				} // namespace CDecoyGrenade

				namespace CTriggerBrush {
					constexpr auto on_start_touch = 0x790; // Name: m_OnStartTouch Offset: 0x790
					constexpr auto on_end_touch = 0x7B8; // Name: m_OnEndTouch Offset: 0x7B8
					constexpr auto on_use = 0x7E0; // Name: m_OnUse Offset: 0x7E0
					constexpr auto i_input_filter = 0x808; // Name: m_iInputFilter Offset: 0x808
					constexpr auto i_dont_message_parent = 0x80C; // Name: m_iDontMessageParent Offset: 0x80C
				} // namespace CTriggerBrush

				namespace CBuyZone {
					constexpr auto legacy_team_num = 0x960; // Name: m_LegacyTeamNum Offset: 0x960
				} // namespace CBuyZone

				namespace CCSPlayer_MovementServices {
					constexpr auto vec_ladder_normal = 0x228; // Name: m_vecLadderNormal Offset: 0x228
					constexpr auto n_ladder_surface_prop_index = 0x234; // Name: m_nLadderSurfacePropIndex Offset: 0x234
					constexpr auto fl_duck_amount = 0x238; // Name: m_flDuckAmount Offset: 0x238
					constexpr auto fl_duck_speed = 0x23C; // Name: m_flDuckSpeed Offset: 0x23C
					constexpr auto b_duck_override = 0x240; // Name: m_bDuckOverride Offset: 0x240
					constexpr auto b_desires_duck = 0x241; // Name: m_bDesiresDuck Offset: 0x241
					constexpr auto fl_duck_offset = 0x244; // Name: m_flDuckOffset Offset: 0x244
					constexpr auto n_duck_time_msecs = 0x248; // Name: m_nDuckTimeMsecs Offset: 0x248
					constexpr auto n_duck_jump_time_msecs = 0x24C; // Name: m_nDuckJumpTimeMsecs Offset: 0x24C
					constexpr auto n_jump_time_msecs = 0x250; // Name: m_nJumpTimeMsecs Offset: 0x250
					constexpr auto fl_last_duck_time = 0x254; // Name: m_flLastDuckTime Offset: 0x254
					constexpr auto vec_last_position_at_full_crouch_speed = 0x260; // Name: m_vecLastPositionAtFullCrouchSpeed Offset: 0x260
					constexpr auto duck_until_on_ground = 0x268; // Name: m_duckUntilOnGround Offset: 0x268
					constexpr auto b_has_walk_moved_since_last_jump = 0x269; // Name: m_bHasWalkMovedSinceLastJump Offset: 0x269
					constexpr auto b_in_stuck_test = 0x26A; // Name: m_bInStuckTest Offset: 0x26A
					constexpr auto fl_stuck_check_time = 0x278; // Name: m_flStuckCheckTime Offset: 0x278
					constexpr auto n_trace_count = 0x478; // Name: m_nTraceCount Offset: 0x478
					constexpr auto stuck_last = 0x47C; // Name: m_StuckLast Offset: 0x47C
					constexpr auto b_speed_cropped = 0x480; // Name: m_bSpeedCropped Offset: 0x480
					constexpr auto fl_ground_move_efficiency = 0x484; // Name: m_flGroundMoveEfficiency Offset: 0x484
					constexpr auto n_old_water_level = 0x488; // Name: m_nOldWaterLevel Offset: 0x488
					constexpr auto fl_water_entry_time = 0x48C; // Name: m_flWaterEntryTime Offset: 0x48C
					constexpr auto vec_forward = 0x490; // Name: m_vecForward Offset: 0x490
					constexpr auto vec_left = 0x49C; // Name: m_vecLeft Offset: 0x49C
					constexpr auto vec_up = 0x4A8; // Name: m_vecUp Offset: 0x4A8
					constexpr auto n_game_code_has_moved_player_after_command = 0x4B4; // Name: m_nGameCodeHasMovedPlayerAfterCommand Offset: 0x4B4
					constexpr auto b_made_footstep_noise = 0x4B8; // Name: m_bMadeFootstepNoise Offset: 0x4B8
					constexpr auto i_footsteps = 0x4BC; // Name: m_iFootsteps Offset: 0x4BC
					constexpr auto b_old_jump_pressed = 0x4C0; // Name: m_bOldJumpPressed Offset: 0x4C0
					constexpr auto fl_jump_pressed_time = 0x4C4; // Name: m_flJumpPressedTime Offset: 0x4C4
					constexpr auto f_stash_grenade_parameter_when = 0x4C8; // Name: m_fStashGrenadeParameterWhen Offset: 0x4C8
					constexpr auto n_button_down_mask_prev = 0x4D0; // Name: m_nButtonDownMaskPrev Offset: 0x4D0
					constexpr auto fl_offset_tick_complete_time = 0x4D8; // Name: m_flOffsetTickCompleteTime Offset: 0x4D8
					constexpr auto fl_offset_tick_stashed_speed = 0x4DC; // Name: m_flOffsetTickStashedSpeed Offset: 0x4DC
					constexpr auto fl_stamina = 0x4E0; // Name: m_flStamina Offset: 0x4E0
					constexpr auto fl_height_at_jump_start = 0x4E4; // Name: m_flHeightAtJumpStart Offset: 0x4E4
					constexpr auto fl_max_jump_height_this_jump = 0x4E8; // Name: m_flMaxJumpHeightThisJump Offset: 0x4E8
					constexpr auto fl_max_jump_height_last_jump = 0x4EC; // Name: m_flMaxJumpHeightLastJump Offset: 0x4EC
					constexpr auto fl_stamina_at_jump_start = 0x4F0; // Name: m_flStaminaAtJumpStart Offset: 0x4F0
					constexpr auto fl_accumulated_jump_error = 0x4F4; // Name: m_flAccumulatedJumpError Offset: 0x4F4
				} // namespace CCSPlayer_MovementServices

				namespace CSpriteOriented {
				} // namespace CSpriteOriented

				namespace CFists {
					constexpr auto b_playing_uninterruptable_act = 0xF70; // Name: m_bPlayingUninterruptableAct Offset: 0xF70
					constexpr auto n_uninterruptable_activity = 0xF74; // Name: m_nUninterruptableActivity Offset: 0xF74
					constexpr auto b_restore_prev_wep = 0xF78; // Name: m_bRestorePrevWep Offset: 0xF78
					constexpr auto h_weapon_before_previous = 0xF7C; // Name: m_hWeaponBeforePrevious Offset: 0xF7C
					constexpr auto h_weapon_previous = 0xF80; // Name: m_hWeaponPrevious Offset: 0xF80
					constexpr auto b_delayed_hard_punch_incoming = 0xF84; // Name: m_bDelayedHardPunchIncoming Offset: 0xF84
					constexpr auto b_destroy_after_taunt = 0xF85; // Name: m_bDestroyAfterTaunt Offset: 0xF85
				} // namespace CFists

				namespace CLogicCollisionPair {
					constexpr auto name_attach1 = 0x4E0; // Name: m_nameAttach1 Offset: 0x4E0
					constexpr auto name_attach2 = 0x4E8; // Name: m_nameAttach2 Offset: 0x4E8
					constexpr auto support_multiple_entities_with_same_name = 0x4F0; // Name: m_supportMultipleEntitiesWithSameName Offset: 0x4F0
					constexpr auto disabled = 0x4F1; // Name: m_disabled Offset: 0x4F1
					constexpr auto succeeded = 0x4F2; // Name: m_succeeded Offset: 0x4F2
				} // namespace CLogicCollisionPair

				namespace CEnvBeverage {
					constexpr auto can_in_dispenser = 0x4E0; // Name: m_CanInDispenser Offset: 0x4E0
					constexpr auto n_beverage_type = 0x4E4; // Name: m_nBeverageType Offset: 0x4E4
				} // namespace CEnvBeverage

				namespace CResponseQueue_CDeferredResponse {
					constexpr auto contexts = 0x8; // Name: m_contexts Offset: 0x8
					constexpr auto f_dispatch_time = 0x30; // Name: m_fDispatchTime Offset: 0x30
					constexpr auto h_issuer = 0x34; // Name: m_hIssuer Offset: 0x34
					constexpr auto response = 0x40; // Name: m_response Offset: 0x40
					constexpr auto b_response_valid = 0x228; // Name: m_bResponseValid Offset: 0x228
				} // namespace CResponseQueue_CDeferredResponse

				namespace Relationship_t {
					constexpr auto disposition = 0x0; // Name: disposition Offset: 0x0
					constexpr auto priority = 0x4; // Name: priority Offset: 0x4
				} // namespace Relationship_t

				namespace CInfoLandmark {
				} // namespace CInfoLandmark

				namespace CPrecipitationVData {
					constexpr auto sz_particle_precipitation_effect = 0x28; // Name: m_szParticlePrecipitationEffect Offset: 0x28
					constexpr auto fl_inner_distance = 0x108; // Name: m_flInnerDistance Offset: 0x108
					constexpr auto n_attach_type = 0x10C; // Name: m_nAttachType Offset: 0x10C
					constexpr auto b_batch_same_volume_type = 0x110; // Name: m_bBatchSameVolumeType Offset: 0x110
					constexpr auto n_rtenv_cp = 0x114; // Name: m_nRTEnvCP Offset: 0x114
					constexpr auto n_rtenv_cpcomponent = 0x118; // Name: m_nRTEnvCPComponent Offset: 0x118
					constexpr auto sz_modifier = 0x120; // Name: m_szModifier Offset: 0x120
				} // namespace CPrecipitationVData

				namespace CRulePointEntity {
					constexpr auto score = 0x798; // Name: m_Score Offset: 0x798
				} // namespace CRulePointEntity

				namespace CTriggerRemove {
					constexpr auto on_remove = 0x960; // Name: m_OnRemove Offset: 0x960
				} // namespace CTriggerRemove

				namespace CFogController {
					constexpr auto fog = 0x4E0; // Name: m_fog Offset: 0x4E0
					constexpr auto b_use_angles = 0x548; // Name: m_bUseAngles Offset: 0x548
					constexpr auto i_changed_variables = 0x54C; // Name: m_iChangedVariables Offset: 0x54C
				} // namespace CFogController

				namespace CBaseTrigger {
					constexpr auto b_disabled = 0x810; // Name: m_bDisabled Offset: 0x810
					constexpr auto i_filter_name = 0x818; // Name: m_iFilterName Offset: 0x818
					constexpr auto h_filter = 0x820; // Name: m_hFilter Offset: 0x820
					constexpr auto on_start_touch = 0x828; // Name: m_OnStartTouch Offset: 0x828
					constexpr auto on_start_touch_all = 0x850; // Name: m_OnStartTouchAll Offset: 0x850
					constexpr auto on_end_touch = 0x878; // Name: m_OnEndTouch Offset: 0x878
					constexpr auto on_end_touch_all = 0x8A0; // Name: m_OnEndTouchAll Offset: 0x8A0
					constexpr auto on_touching = 0x8C8; // Name: m_OnTouching Offset: 0x8C8
					constexpr auto on_touching_each_entity = 0x8F0; // Name: m_OnTouchingEachEntity Offset: 0x8F0
					constexpr auto on_not_touching = 0x918; // Name: m_OnNotTouching Offset: 0x918
					constexpr auto h_touching_entities = 0x940; // Name: m_hTouchingEntities Offset: 0x940
					constexpr auto b_client_side_predicted = 0x958; // Name: m_bClientSidePredicted Offset: 0x958
				} // namespace CBaseTrigger

				namespace CFilterName {
					constexpr auto i_filter_name = 0x538; // Name: m_iFilterName Offset: 0x538
				} // namespace CFilterName

				namespace CPathMover {
					constexpr auto vec_path_nodes = 0x4E8; // Name: m_vecPathNodes Offset: 0x4E8
					constexpr auto fl_path_length = 0x500; // Name: m_flPathLength Offset: 0x500
					constexpr auto b_closed_loop = 0x504; // Name: m_bClosedLoop Offset: 0x504
				} // namespace CPathMover

				namespace CPointTeleport {
					constexpr auto v_save_origin = 0x4E0; // Name: m_vSaveOrigin Offset: 0x4E0
					constexpr auto v_save_angles = 0x4EC; // Name: m_vSaveAngles Offset: 0x4EC
					constexpr auto b_teleport_parented_entities = 0x4F8; // Name: m_bTeleportParentedEntities Offset: 0x4F8
					constexpr auto b_teleport_use_current_angle = 0x4F9; // Name: m_bTeleportUseCurrentAngle Offset: 0x4F9
				} // namespace CPointTeleport

				namespace CLogicCompare {
					constexpr auto fl_in_value = 0x4E0; // Name: m_flInValue Offset: 0x4E0
					constexpr auto fl_compare_value = 0x4E4; // Name: m_flCompareValue Offset: 0x4E4
					constexpr auto on_less_than = 0x4E8; // Name: m_OnLessThan Offset: 0x4E8
					constexpr auto on_equal_to = 0x510; // Name: m_OnEqualTo Offset: 0x510
					constexpr auto on_not_equal_to = 0x538; // Name: m_OnNotEqualTo Offset: 0x538
					constexpr auto on_greater_than = 0x560; // Name: m_OnGreaterThan Offset: 0x560
				} // namespace CLogicCompare

				namespace CInfoInstructorHintBombTargetB {
				} // namespace CInfoInstructorHintBombTargetB

				namespace CEnvLaser {
					constexpr auto isz_laser_target = 0x830; // Name: m_iszLaserTarget Offset: 0x830
					constexpr auto p_sprite = 0x838; // Name: m_pSprite Offset: 0x838
					constexpr auto isz_sprite_name = 0x840; // Name: m_iszSpriteName Offset: 0x840
					constexpr auto fire_position = 0x848; // Name: m_firePosition Offset: 0x848
					constexpr auto fl_start_frame = 0x854; // Name: m_flStartFrame Offset: 0x854
				} // namespace CEnvLaser

				namespace CCSPointScriptExtensions_entity {
				} // namespace CCSPointScriptExtensions_entity

				namespace CProjectedDecal {
					constexpr auto n_texture = 0x4E0; // Name: m_nTexture Offset: 0x4E0
					constexpr auto fl_distance = 0x4E4; // Name: m_flDistance Offset: 0x4E4
				} // namespace CProjectedDecal

				namespace CEnvTracer {
					constexpr auto vec_end = 0x4E0; // Name: m_vecEnd Offset: 0x4E0
					constexpr auto fl_delay = 0x4EC; // Name: m_flDelay Offset: 0x4EC
				} // namespace CEnvTracer

				namespace CItemDefuserAlias_item_defuser {
				} // namespace CItemDefuserAlias_item_defuser

				namespace CHostage {
					constexpr auto on_hostage_begin_grab = 0xAD8; // Name: m_OnHostageBeginGrab Offset: 0xAD8
					constexpr auto on_first_picked_up = 0xB00; // Name: m_OnFirstPickedUp Offset: 0xB00
					constexpr auto on_dropped_not_rescued = 0xB28; // Name: m_OnDroppedNotRescued Offset: 0xB28
					constexpr auto on_rescued = 0xB50; // Name: m_OnRescued Offset: 0xB50
					constexpr auto entity_spotted_state = 0xB78; // Name: m_entitySpottedState Offset: 0xB78
					constexpr auto n_spot_rules = 0xB90; // Name: m_nSpotRules Offset: 0xB90
					constexpr auto ui_hostage_spawn_exclusion_group_mask = 0xB94; // Name: m_uiHostageSpawnExclusionGroupMask Offset: 0xB94
					constexpr auto n_hostage_spawn_random_factor = 0xB98; // Name: m_nHostageSpawnRandomFactor Offset: 0xB98
					constexpr auto b_remove = 0xB9C; // Name: m_bRemove Offset: 0xB9C
					constexpr auto vel = 0xBA0; // Name: m_vel Offset: 0xBA0
					constexpr auto is_rescued = 0xBAC; // Name: m_isRescued Offset: 0xBAC
					constexpr auto jumped_this_frame = 0xBAD; // Name: m_jumpedThisFrame Offset: 0xBAD
					constexpr auto n_hostage_state = 0xBB0; // Name: m_nHostageState Offset: 0xBB0
					constexpr auto leader = 0xBB4; // Name: m_leader Offset: 0xBB4
					constexpr auto last_leader = 0xBB8; // Name: m_lastLeader Offset: 0xBB8
					constexpr auto reuse_timer = 0xBC0; // Name: m_reuseTimer Offset: 0xBC0
					constexpr auto has_been_used = 0xBD8; // Name: m_hasBeenUsed Offset: 0xBD8
					constexpr auto accel = 0xBDC; // Name: m_accel Offset: 0xBDC
					constexpr auto is_running = 0xBE8; // Name: m_isRunning Offset: 0xBE8
					constexpr auto is_crouching = 0xBE9; // Name: m_isCrouching Offset: 0xBE9
					constexpr auto jump_timer = 0xBF0; // Name: m_jumpTimer Offset: 0xBF0
					constexpr auto is_waiting_for_leader = 0xC08; // Name: m_isWaitingForLeader Offset: 0xC08
					constexpr auto repath_timer = 0x2C18; // Name: m_repathTimer Offset: 0x2C18
					constexpr auto inhibit_door_timer = 0x2C30; // Name: m_inhibitDoorTimer Offset: 0x2C30
					constexpr auto inhibit_obstacle_avoidance_timer = 0x2CC0; // Name: m_inhibitObstacleAvoidanceTimer Offset: 0x2CC0
					constexpr auto wiggle_timer = 0x2CE0; // Name: m_wiggleTimer Offset: 0x2CE0
					constexpr auto is_adjusted = 0x2CFC; // Name: m_isAdjusted Offset: 0x2CFC
					constexpr auto b_hands_have_been_cut = 0x2CFD; // Name: m_bHandsHaveBeenCut Offset: 0x2CFD
					constexpr auto h_hostage_grabber = 0x2D00; // Name: m_hHostageGrabber Offset: 0x2D00
					constexpr auto f_last_grab_time = 0x2D04; // Name: m_fLastGrabTime Offset: 0x2D04
					constexpr auto vec_position_when_started_dropping_to_ground = 0x2D08; // Name: m_vecPositionWhenStartedDroppingToGround Offset: 0x2D08
					constexpr auto vec_grabbed_pos = 0x2D14; // Name: m_vecGrabbedPos Offset: 0x2D14
					constexpr auto fl_rescue_start_time = 0x2D20; // Name: m_flRescueStartTime Offset: 0x2D20
					constexpr auto fl_grab_success_time = 0x2D24; // Name: m_flGrabSuccessTime Offset: 0x2D24
					constexpr auto fl_drop_start_time = 0x2D28; // Name: m_flDropStartTime Offset: 0x2D28
					constexpr auto n_approach_reward_payouts = 0x2D2C; // Name: m_nApproachRewardPayouts Offset: 0x2D2C
					constexpr auto n_pickup_event_count = 0x2D30; // Name: m_nPickupEventCount Offset: 0x2D30
					constexpr auto vec_spawn_ground_pos = 0x2D34; // Name: m_vecSpawnGroundPos Offset: 0x2D34
					constexpr auto vec_hostage_reset_position = 0x2D54; // Name: m_vecHostageResetPosition Offset: 0x2D54
				} // namespace CHostage

				namespace CFuncTrackAuto {
				} // namespace CFuncTrackAuto

				namespace CPushable {
				} // namespace CPushable

				namespace CMelee {
				} // namespace CMelee

				namespace FilterHealth {
					constexpr auto b_adrenaline_active = 0x538; // Name: m_bAdrenalineActive Offset: 0x538
					constexpr auto i_health_min = 0x53C; // Name: m_iHealthMin Offset: 0x53C
					constexpr auto i_health_max = 0x540; // Name: m_iHealthMax Offset: 0x540
				} // namespace FilterHealth

				namespace CEnvEntityIgniter {
					constexpr auto fl_lifetime = 0x4E0; // Name: m_flLifetime Offset: 0x4E0
				} // namespace CEnvEntityIgniter

				namespace CTriggerTripWire {
				} // namespace CTriggerTripWire

				namespace CPlantedC4 {
					constexpr auto b_bomb_ticking = 0x9B0; // Name: m_bBombTicking Offset: 0x9B0
					constexpr auto fl_c4_blow = 0x9B4; // Name: m_flC4Blow Offset: 0x9B4
					constexpr auto n_bomb_site = 0x9B8; // Name: m_nBombSite Offset: 0x9B8
					constexpr auto n_source_soundscape_hash = 0x9BC; // Name: m_nSourceSoundscapeHash Offset: 0x9BC
					constexpr auto attribute_manager = 0x9C0; // Name: m_AttributeManager Offset: 0x9C0
					constexpr auto on_bomb_defused = 0xC88; // Name: m_OnBombDefused Offset: 0xC88
					constexpr auto on_bomb_begin_defuse = 0xCB0; // Name: m_OnBombBeginDefuse Offset: 0xCB0
					constexpr auto on_bomb_defuse_aborted = 0xCD8; // Name: m_OnBombDefuseAborted Offset: 0xCD8
					constexpr auto b_cannot_be_defused = 0xD00; // Name: m_bCannotBeDefused Offset: 0xD00
					constexpr auto entity_spotted_state = 0xD08; // Name: m_entitySpottedState Offset: 0xD08
					constexpr auto n_spot_rules = 0xD20; // Name: m_nSpotRules Offset: 0xD20
					constexpr auto b_training_placed_by_player = 0xD24; // Name: m_bTrainingPlacedByPlayer Offset: 0xD24
					constexpr auto b_has_exploded = 0xD25; // Name: m_bHasExploded Offset: 0xD25
					constexpr auto fl_timer_length = 0xD28; // Name: m_flTimerLength Offset: 0xD28
					constexpr auto b_being_defused = 0xD2C; // Name: m_bBeingDefused Offset: 0xD2C
					constexpr auto f_last_defuse_time = 0xD34; // Name: m_fLastDefuseTime Offset: 0xD34
					constexpr auto fl_defuse_length = 0xD3C; // Name: m_flDefuseLength Offset: 0xD3C
					constexpr auto fl_defuse_count_down = 0xD40; // Name: m_flDefuseCountDown Offset: 0xD40
					constexpr auto b_bomb_defused = 0xD44; // Name: m_bBombDefused Offset: 0xD44
					constexpr auto h_bomb_defuser = 0xD48; // Name: m_hBombDefuser Offset: 0xD48
					constexpr auto h_control_panel = 0xD4C; // Name: m_hControlPanel Offset: 0xD4C
					constexpr auto i_progress_bar_time = 0xD50; // Name: m_iProgressBarTime Offset: 0xD50
					constexpr auto b_voice_alert_fired = 0xD54; // Name: m_bVoiceAlertFired Offset: 0xD54
					constexpr auto b_voice_alert_played = 0xD55; // Name: m_bVoiceAlertPlayed Offset: 0xD55
					constexpr auto fl_next_bot_beep_time = 0xD5C; // Name: m_flNextBotBeepTime Offset: 0xD5C
					constexpr auto ang_catch_up_to_player_eye = 0xD64; // Name: m_angCatchUpToPlayerEye Offset: 0xD64
					constexpr auto fl_last_spin_detection_time = 0xD70; // Name: m_flLastSpinDetectionTime Offset: 0xD70
				} // namespace CPlantedC4

				namespace CBaseProp {
					constexpr auto b_model_overrode_block_los = 0x9A8; // Name: m_bModelOverrodeBlockLOS Offset: 0x9A8
					constexpr auto i_shape_type = 0x9AC; // Name: m_iShapeType Offset: 0x9AC
					constexpr auto b_conform_to_collision_bounds = 0x9B0; // Name: m_bConformToCollisionBounds Offset: 0x9B0
					constexpr auto m_preferred_catch_transform = 0x9B4; // Name: m_mPreferredCatchTransform Offset: 0x9B4
				} // namespace CBaseProp

				namespace CPointPush {
					constexpr auto b_enabled = 0x4E0; // Name: m_bEnabled Offset: 0x4E0
					constexpr auto fl_magnitude = 0x4E4; // Name: m_flMagnitude Offset: 0x4E4
					constexpr auto fl_radius = 0x4E8; // Name: m_flRadius Offset: 0x4E8
					constexpr auto fl_inner_radius = 0x4EC; // Name: m_flInnerRadius Offset: 0x4EC
					constexpr auto fl_cone_of_influence = 0x4F0; // Name: m_flConeOfInfluence Offset: 0x4F0
					constexpr auto isz_filter_name = 0x4F8; // Name: m_iszFilterName Offset: 0x4F8
					constexpr auto h_filter = 0x500; // Name: m_hFilter Offset: 0x500
				} // namespace CPointPush

				namespace CTriggerMultiple {
					constexpr auto on_trigger = 0x960; // Name: m_OnTrigger Offset: 0x960
				} // namespace CTriggerMultiple

				namespace CMarkupVolumeTagged {
					constexpr auto b_is_group = 0x7C8; // Name: m_bIsGroup Offset: 0x7C8
					constexpr auto b_group_by_prefab = 0x7C9; // Name: m_bGroupByPrefab Offset: 0x7C9
					constexpr auto b_group_by_volume = 0x7CA; // Name: m_bGroupByVolume Offset: 0x7CA
					constexpr auto b_group_other_groups = 0x7CB; // Name: m_bGroupOtherGroups Offset: 0x7CB
					constexpr auto b_is_in_group = 0x7CC; // Name: m_bIsInGroup Offset: 0x7CC
				} // namespace CMarkupVolumeTagged

				namespace CPrecipitationBlocker {
				} // namespace CPrecipitationBlocker

				namespace CFuncElectrifiedVolume {
					constexpr auto effect_name = 0x7B0; // Name: m_EffectName Offset: 0x7B0
					constexpr auto effect_interpenetrate_name = 0x7B8; // Name: m_EffectInterpenetrateName Offset: 0x7B8
					constexpr auto effect_zap_name = 0x7C0; // Name: m_EffectZapName Offset: 0x7C0
					constexpr auto isz_effect_source = 0x7C8; // Name: m_iszEffectSource Offset: 0x7C8
				} // namespace CFuncElectrifiedVolume

				namespace CPrecipitation {
				} // namespace CPrecipitation

				namespace CountdownTimer {
					constexpr auto duration = 0x8; // Name: m_duration Offset: 0x8
					constexpr auto timestamp = 0xC; // Name: m_timestamp Offset: 0xC
					constexpr auto timescale = 0x10; // Name: m_timescale Offset: 0x10
					constexpr auto n_world_group_id = 0x14; // Name: m_nWorldGroupId Offset: 0x14
				} // namespace CountdownTimer

				namespace CPhysicsPropOverride {
				} // namespace CPhysicsPropOverride

				namespace CSoundOpvarSetPointBase {
					constexpr auto b_disabled = 0x4E0; // Name: m_bDisabled Offset: 0x4E0
					constexpr auto h_source = 0x4E4; // Name: m_hSource Offset: 0x4E4
					constexpr auto isz_source_entity_name = 0x4F0; // Name: m_iszSourceEntityName Offset: 0x4F0
					constexpr auto v_last_position = 0x548; // Name: m_vLastPosition Offset: 0x548
					constexpr auto isz_stack_name = 0x558; // Name: m_iszStackName Offset: 0x558
					constexpr auto isz_operator_name = 0x560; // Name: m_iszOperatorName Offset: 0x560
					constexpr auto isz_opvar_name = 0x568; // Name: m_iszOpvarName Offset: 0x568
					constexpr auto i_opvar_index = 0x570; // Name: m_iOpvarIndex Offset: 0x570
					constexpr auto b_use_auto_compare = 0x574; // Name: m_bUseAutoCompare Offset: 0x574
				} // namespace CSoundOpvarSetPointBase

				namespace CBodyComponentSkeletonInstance {
					constexpr auto skeleton_instance = 0x50; // Name: m_skeletonInstance Offset: 0x50
				} // namespace CBodyComponentSkeletonInstance

				namespace CBaseAnimGraphController {
					constexpr auto anim_graph_networked_vars = 0x18; // Name: m_animGraphNetworkedVars Offset: 0x18
					constexpr auto b_sequence_finished = 0x220; // Name: m_bSequenceFinished Offset: 0x220
					constexpr auto fl_sound_sync_time = 0x224; // Name: m_flSoundSyncTime Offset: 0x224
					constexpr auto n_active_ikchain_mask = 0x228; // Name: m_nActiveIKChainMask Offset: 0x228
					constexpr auto h_sequence = 0x22C; // Name: m_hSequence Offset: 0x22C
					constexpr auto fl_seq_start_time = 0x230; // Name: m_flSeqStartTime Offset: 0x230
					constexpr auto fl_seq_fixed_cycle = 0x234; // Name: m_flSeqFixedCycle Offset: 0x234
					constexpr auto n_anim_loop_mode = 0x238; // Name: m_nAnimLoopMode Offset: 0x238
					constexpr auto fl_playback_rate = 0x23C; // Name: m_flPlaybackRate Offset: 0x23C
					constexpr auto n_notify_state = 0x248; // Name: m_nNotifyState Offset: 0x248
					constexpr auto b_networked_animation_inputs_changed = 0x24A; // Name: m_bNetworkedAnimationInputsChanged Offset: 0x24A
					constexpr auto b_networked_sequence_changed = 0x24B; // Name: m_bNetworkedSequenceChanged Offset: 0x24B
					constexpr auto b_last_update_skipped = 0x24C; // Name: m_bLastUpdateSkipped Offset: 0x24C
					constexpr auto fl_prev_anim_update_time = 0x250; // Name: m_flPrevAnimUpdateTime Offset: 0x250
				} // namespace CBaseAnimGraphController

				namespace CEnvWindShared_WindAveEvent_t {
					constexpr auto fl_start_wind_speed = 0x0; // Name: m_flStartWindSpeed Offset: 0x0
					constexpr auto fl_ave_wind_speed = 0x4; // Name: m_flAveWindSpeed Offset: 0x4
				} // namespace CEnvWindShared_WindAveEvent_t

				namespace CBtNodeCondition {
					constexpr auto b_negated = 0x58; // Name: m_bNegated Offset: 0x58
				} // namespace CBtNodeCondition

				namespace CTriggerPush {
					constexpr auto ang_push_entity_space = 0x960; // Name: m_angPushEntitySpace Offset: 0x960
					constexpr auto vec_push_dir_entity_space = 0x96C; // Name: m_vecPushDirEntitySpace Offset: 0x96C
					constexpr auto b_trigger_on_start_touch = 0x978; // Name: m_bTriggerOnStartTouch Offset: 0x978
					constexpr auto b_use_path_simple = 0x979; // Name: m_bUsePathSimple Offset: 0x979
					constexpr auto isz_path_simple_name = 0x980; // Name: m_iszPathSimpleName Offset: 0x980
					constexpr auto path_simple = 0x988; // Name: m_PathSimple Offset: 0x988
					constexpr auto spline_push_type = 0x990; // Name: m_splinePushType Offset: 0x990
				} // namespace CTriggerPush

				namespace CCSGO_TeamSelectCounterTerroristPosition {
				} // namespace CCSGO_TeamSelectCounterTerroristPosition

				namespace CCSGO_WingmanIntroCounterTerroristPosition {
				} // namespace CCSGO_WingmanIntroCounterTerroristPosition

				namespace CScriptTriggerHurt {
					constexpr auto v_extent = 0xA00; // Name: m_vExtent Offset: 0xA00
				} // namespace CScriptTriggerHurt

				namespace CTriggerProximity {
					constexpr auto h_measure_target = 0x960; // Name: m_hMeasureTarget Offset: 0x960
					constexpr auto isz_measure_target = 0x968; // Name: m_iszMeasureTarget Offset: 0x968
					constexpr auto f_radius = 0x970; // Name: m_fRadius Offset: 0x970
					constexpr auto n_touchers = 0x974; // Name: m_nTouchers Offset: 0x974
					constexpr auto nearest_entity_distance = 0x978; // Name: m_NearestEntityDistance Offset: 0x978
				} // namespace CTriggerProximity

				namespace CEnvFireSensor {
					constexpr auto b_enabled = 0x4E0; // Name: m_bEnabled Offset: 0x4E0
					constexpr auto b_heat_at_level = 0x4E1; // Name: m_bHeatAtLevel Offset: 0x4E1
					constexpr auto radius = 0x4E4; // Name: m_radius Offset: 0x4E4
					constexpr auto target_level = 0x4E8; // Name: m_targetLevel Offset: 0x4E8
					constexpr auto target_time = 0x4EC; // Name: m_targetTime Offset: 0x4EC
					constexpr auto level_time = 0x4F0; // Name: m_levelTime Offset: 0x4F0
					constexpr auto on_heat_level_start = 0x4F8; // Name: m_OnHeatLevelStart Offset: 0x4F8
					constexpr auto on_heat_level_end = 0x520; // Name: m_OnHeatLevelEnd Offset: 0x520
				} // namespace CEnvFireSensor

				namespace PredictedDamageTag_t {
					constexpr auto n_tag_tick = 0x30; // Name: nTagTick Offset: 0x30
					constexpr auto fl_flinch_mod_small = 0x34; // Name: flFlinchModSmall Offset: 0x34
					constexpr auto fl_flinch_mod_large = 0x38; // Name: flFlinchModLarge Offset: 0x38
					constexpr auto fl_friendly_fire_damage_reduction_ratio = 0x3C; // Name: flFriendlyFireDamageReductionRatio Offset: 0x3C
				} // namespace PredictedDamageTag_t

				namespace CRopeKeyframe {
					constexpr auto rope_flags = 0x798; // Name: m_RopeFlags Offset: 0x798
					constexpr auto i_next_link_name = 0x7A0; // Name: m_iNextLinkName Offset: 0x7A0
					constexpr auto slack = 0x7A8; // Name: m_Slack Offset: 0x7A8
					constexpr auto width = 0x7AC; // Name: m_Width Offset: 0x7AC
					constexpr auto texture_scale = 0x7B0; // Name: m_TextureScale Offset: 0x7B0
					constexpr auto n_segments = 0x7B4; // Name: m_nSegments Offset: 0x7B4
					constexpr auto b_constrain_between_endpoints = 0x7B5; // Name: m_bConstrainBetweenEndpoints Offset: 0x7B5
					constexpr auto str_rope_material_model = 0x7B8; // Name: m_strRopeMaterialModel Offset: 0x7B8
					constexpr auto i_rope_material_model_index = 0x7C0; // Name: m_iRopeMaterialModelIndex Offset: 0x7C0
					constexpr auto subdiv = 0x7C8; // Name: m_Subdiv Offset: 0x7C8
					constexpr auto n_change_count = 0x7C9; // Name: m_nChangeCount Offset: 0x7C9
					constexpr auto rope_length = 0x7CA; // Name: m_RopeLength Offset: 0x7CA
					constexpr auto f_locked_points = 0x7CC; // Name: m_fLockedPoints Offset: 0x7CC
					constexpr auto b_created_from_map_file = 0x7CD; // Name: m_bCreatedFromMapFile Offset: 0x7CD
					constexpr auto fl_scroll_speed = 0x7D0; // Name: m_flScrollSpeed Offset: 0x7D0
					constexpr auto b_start_point_valid = 0x7D4; // Name: m_bStartPointValid Offset: 0x7D4
					constexpr auto b_end_point_valid = 0x7D5; // Name: m_bEndPointValid Offset: 0x7D5
					constexpr auto h_start_point = 0x7D8; // Name: m_hStartPoint Offset: 0x7D8
					constexpr auto h_end_point = 0x7DC; // Name: m_hEndPoint Offset: 0x7DC
					constexpr auto i_start_attachment = 0x7E0; // Name: m_iStartAttachment Offset: 0x7E0
					constexpr auto i_end_attachment = 0x7E1; // Name: m_iEndAttachment Offset: 0x7E1
				} // namespace CRopeKeyframe

				namespace CFuncLadder {
					constexpr auto vec_ladder_dir = 0x790; // Name: m_vecLadderDir Offset: 0x790
					constexpr auto dismounts = 0x7A0; // Name: m_Dismounts Offset: 0x7A0
					constexpr auto vec_local_top = 0x7B8; // Name: m_vecLocalTop Offset: 0x7B8
					constexpr auto vec_player_mount_position_top = 0x7C4; // Name: m_vecPlayerMountPositionTop Offset: 0x7C4
					constexpr auto vec_player_mount_position_bottom = 0x7D0; // Name: m_vecPlayerMountPositionBottom Offset: 0x7D0
					constexpr auto fl_auto_ride_speed = 0x7DC; // Name: m_flAutoRideSpeed Offset: 0x7DC
					constexpr auto b_disabled = 0x7E0; // Name: m_bDisabled Offset: 0x7E0
					constexpr auto b_fake_ladder = 0x7E1; // Name: m_bFakeLadder Offset: 0x7E1
					constexpr auto b_has_slack = 0x7E2; // Name: m_bHasSlack Offset: 0x7E2
					constexpr auto surface_prop_name = 0x7E8; // Name: m_surfacePropName Offset: 0x7E8
					constexpr auto on_player_got_on_ladder = 0x7F0; // Name: m_OnPlayerGotOnLadder Offset: 0x7F0
					constexpr auto on_player_got_off_ladder = 0x818; // Name: m_OnPlayerGotOffLadder Offset: 0x818
				} // namespace CFuncLadder

				namespace CBaseDMStart {
					constexpr auto master = 0x4E0; // Name: m_Master Offset: 0x4E0
				} // namespace CBaseDMStart

				namespace CSoundOpvarSetEntity {
					constexpr auto isz_stack_name = 0x4E8; // Name: m_iszStackName Offset: 0x4E8
					constexpr auto isz_operator_name = 0x4F0; // Name: m_iszOperatorName Offset: 0x4F0
					constexpr auto isz_opvar_name = 0x4F8; // Name: m_iszOpvarName Offset: 0x4F8
					constexpr auto n_opvar_type = 0x500; // Name: m_nOpvarType Offset: 0x500
					constexpr auto n_opvar_index = 0x504; // Name: m_nOpvarIndex Offset: 0x504
					constexpr auto fl_opvar_value = 0x508; // Name: m_flOpvarValue Offset: 0x508
					constexpr auto opvar_value_string = 0x510; // Name: m_OpvarValueString Offset: 0x510
					constexpr auto b_set_on_spawn = 0x518; // Name: m_bSetOnSpawn Offset: 0x518
				} // namespace CSoundOpvarSetEntity

				namespace CScriptTriggerPush {
					constexpr auto v_extent = 0x998; // Name: m_vExtent Offset: 0x998
				} // namespace CScriptTriggerPush

				namespace CPlayerPing {
					constexpr auto h_player = 0x4E8; // Name: m_hPlayer Offset: 0x4E8
					constexpr auto h_pinged_entity = 0x4EC; // Name: m_hPingedEntity Offset: 0x4EC
					constexpr auto i_type = 0x4F0; // Name: m_iType Offset: 0x4F0
					constexpr auto b_urgent = 0x4F4; // Name: m_bUrgent Offset: 0x4F4
					constexpr auto sz_place_name = 0x4F5; // Name: m_szPlaceName Offset: 0x4F5
				} // namespace CPlayerPing

				namespace CCSGameRulesProxy {
					constexpr auto p_game_rules = 0x4E0; // Name: m_pGameRules Offset: 0x4E0
				} // namespace CCSGameRulesProxy

				namespace CEnvBeam {
					constexpr auto active = 0x830; // Name: m_active Offset: 0x830
					constexpr auto sprite_texture = 0x838; // Name: m_spriteTexture Offset: 0x838
					constexpr auto isz_start_entity = 0x840; // Name: m_iszStartEntity Offset: 0x840
					constexpr auto isz_end_entity = 0x848; // Name: m_iszEndEntity Offset: 0x848
					constexpr auto life = 0x850; // Name: m_life Offset: 0x850
					constexpr auto bolt_width = 0x854; // Name: m_boltWidth Offset: 0x854
					constexpr auto noise_amplitude = 0x858; // Name: m_noiseAmplitude Offset: 0x858
					constexpr auto speed = 0x85C; // Name: m_speed Offset: 0x85C
					constexpr auto restrike = 0x860; // Name: m_restrike Offset: 0x860
					constexpr auto isz_sprite_name = 0x868; // Name: m_iszSpriteName Offset: 0x868
					constexpr auto frame_start = 0x870; // Name: m_frameStart Offset: 0x870
					constexpr auto v_end_point_world = 0x874; // Name: m_vEndPointWorld Offset: 0x874
					constexpr auto v_end_point_relative = 0x880; // Name: m_vEndPointRelative Offset: 0x880
					constexpr auto radius = 0x88C; // Name: m_radius Offset: 0x88C
					constexpr auto touch_type = 0x890; // Name: m_TouchType Offset: 0x890
					constexpr auto i_filter_name = 0x898; // Name: m_iFilterName Offset: 0x898
					constexpr auto h_filter = 0x8A0; // Name: m_hFilter Offset: 0x8A0
					constexpr auto isz_decal = 0x8A8; // Name: m_iszDecal Offset: 0x8A8
					constexpr auto on_touched_by_entity = 0x8B0; // Name: m_OnTouchedByEntity Offset: 0x8B0
				} // namespace CEnvBeam

				namespace CLogicPlayerProxy {
					constexpr auto h_player = 0x4E0; // Name: m_hPlayer Offset: 0x4E0
					constexpr auto player_has_ammo = 0x4E8; // Name: m_PlayerHasAmmo Offset: 0x4E8
					constexpr auto player_has_no_ammo = 0x510; // Name: m_PlayerHasNoAmmo Offset: 0x510
					constexpr auto player_died = 0x538; // Name: m_PlayerDied Offset: 0x538
					constexpr auto requested_player_health = 0x560; // Name: m_RequestedPlayerHealth Offset: 0x560
				} // namespace CLogicPlayerProxy

				namespace CBaseFlexAlias_funCBaseFlex {
				} // namespace CBaseFlexAlias_funCBaseFlex

				namespace CTriggerBuoyancy {
					constexpr auto buoyancy_helper = 0x960; // Name: m_BuoyancyHelper Offset: 0x960
					constexpr auto fl_fluid_density = 0x9E0; // Name: m_flFluidDensity Offset: 0x9E0
				} // namespace CTriggerBuoyancy

				namespace CCSWeaponBaseVData {
					constexpr auto weapon_type = 0x348; // Name: m_WeaponType Offset: 0x348
					constexpr auto weapon_category = 0x34C; // Name: m_WeaponCategory Offset: 0x34C
					constexpr auto sz_view_model = 0x350; // Name: m_szViewModel Offset: 0x350
					constexpr auto sz_player_model = 0x430; // Name: m_szPlayerModel Offset: 0x430
					constexpr auto sz_world_dropped_model = 0x510; // Name: m_szWorldDroppedModel Offset: 0x510
					constexpr auto sz_aimsight_lens_mask_model = 0x5F0; // Name: m_szAimsightLensMaskModel Offset: 0x5F0
					constexpr auto sz_magazine_model = 0x6D0; // Name: m_szMagazineModel Offset: 0x6D0
					constexpr auto sz_heat_effect = 0x7B0; // Name: m_szHeatEffect Offset: 0x7B0
					constexpr auto sz_eject_brass_effect = 0x890; // Name: m_szEjectBrassEffect Offset: 0x890
					constexpr auto sz_muzzle_flash_particle_alt = 0x970; // Name: m_szMuzzleFlashParticleAlt Offset: 0x970
					constexpr auto sz_muzzle_flash_third_person_particle = 0xA50; // Name: m_szMuzzleFlashThirdPersonParticle Offset: 0xA50
					constexpr auto sz_muzzle_flash_third_person_particle_alt = 0xB30; // Name: m_szMuzzleFlashThirdPersonParticleAlt Offset: 0xB30
					constexpr auto sz_tracer_particle = 0xC10; // Name: m_szTracerParticle Offset: 0xC10
					constexpr auto gear_slot = 0xCF0; // Name: m_GearSlot Offset: 0xCF0
					constexpr auto gear_slot_position = 0xCF4; // Name: m_GearSlotPosition Offset: 0xCF4
					constexpr auto default_loadout_slot = 0xCF8; // Name: m_DefaultLoadoutSlot Offset: 0xCF8
					constexpr auto s_wrong_team_msg = 0xD00; // Name: m_sWrongTeamMsg Offset: 0xD00
					constexpr auto n_price = 0xD08; // Name: m_nPrice Offset: 0xD08
					constexpr auto n_kill_award = 0xD0C; // Name: m_nKillAward Offset: 0xD0C
					constexpr auto n_primary_reserve_ammo_max = 0xD10; // Name: m_nPrimaryReserveAmmoMax Offset: 0xD10
					constexpr auto n_secondary_reserve_ammo_max = 0xD14; // Name: m_nSecondaryReserveAmmoMax Offset: 0xD14
					constexpr auto b_melee_weapon = 0xD18; // Name: m_bMeleeWeapon Offset: 0xD18
					constexpr auto b_has_burst_mode = 0xD19; // Name: m_bHasBurstMode Offset: 0xD19
					constexpr auto b_is_revolver = 0xD1A; // Name: m_bIsRevolver Offset: 0xD1A
					constexpr auto b_cannot_shoot_underwater = 0xD1B; // Name: m_bCannotShootUnderwater Offset: 0xD1B
					constexpr auto sz_name = 0xD20; // Name: m_szName Offset: 0xD20
					constexpr auto sz_anim_extension = 0xD28; // Name: m_szAnimExtension Offset: 0xD28
					constexpr auto e_silencer_type = 0xD30; // Name: m_eSilencerType Offset: 0xD30
					constexpr auto n_crosshair_min_distance = 0xD34; // Name: m_nCrosshairMinDistance Offset: 0xD34
					constexpr auto n_crosshair_delta_distance = 0xD38; // Name: m_nCrosshairDeltaDistance Offset: 0xD38
					constexpr auto b_is_full_auto = 0xD3C; // Name: m_bIsFullAuto Offset: 0xD3C
					constexpr auto n_num_bullets = 0xD40; // Name: m_nNumBullets Offset: 0xD40
					constexpr auto fl_cycle_time = 0xD44; // Name: m_flCycleTime Offset: 0xD44
					constexpr auto fl_max_speed = 0xD4C; // Name: m_flMaxSpeed Offset: 0xD4C
					constexpr auto fl_spread = 0xD54; // Name: m_flSpread Offset: 0xD54
					constexpr auto fl_inaccuracy_crouch = 0xD5C; // Name: m_flInaccuracyCrouch Offset: 0xD5C
					constexpr auto fl_inaccuracy_stand = 0xD64; // Name: m_flInaccuracyStand Offset: 0xD64
					constexpr auto fl_inaccuracy_jump = 0xD6C; // Name: m_flInaccuracyJump Offset: 0xD6C
					constexpr auto fl_inaccuracy_land = 0xD74; // Name: m_flInaccuracyLand Offset: 0xD74
					constexpr auto fl_inaccuracy_ladder = 0xD7C; // Name: m_flInaccuracyLadder Offset: 0xD7C
					constexpr auto fl_inaccuracy_fire = 0xD84; // Name: m_flInaccuracyFire Offset: 0xD84
					constexpr auto fl_inaccuracy_move = 0xD8C; // Name: m_flInaccuracyMove Offset: 0xD8C
					constexpr auto fl_recoil_angle = 0xD94; // Name: m_flRecoilAngle Offset: 0xD94
					constexpr auto fl_recoil_angle_variance = 0xD9C; // Name: m_flRecoilAngleVariance Offset: 0xD9C
					constexpr auto fl_recoil_magnitude = 0xDA4; // Name: m_flRecoilMagnitude Offset: 0xDA4
					constexpr auto fl_recoil_magnitude_variance = 0xDAC; // Name: m_flRecoilMagnitudeVariance Offset: 0xDAC
					constexpr auto n_tracer_frequency = 0xDB4; // Name: m_nTracerFrequency Offset: 0xDB4
					constexpr auto fl_inaccuracy_jump_initial = 0xDBC; // Name: m_flInaccuracyJumpInitial Offset: 0xDBC
					constexpr auto fl_inaccuracy_jump_apex = 0xDC0; // Name: m_flInaccuracyJumpApex Offset: 0xDC0
					constexpr auto fl_inaccuracy_reload = 0xDC4; // Name: m_flInaccuracyReload Offset: 0xDC4
					constexpr auto n_recoil_seed = 0xDC8; // Name: m_nRecoilSeed Offset: 0xDC8
					constexpr auto n_spread_seed = 0xDCC; // Name: m_nSpreadSeed Offset: 0xDCC
					constexpr auto fl_time_to_idle_after_fire = 0xDD0; // Name: m_flTimeToIdleAfterFire Offset: 0xDD0
					constexpr auto fl_idle_interval = 0xDD4; // Name: m_flIdleInterval Offset: 0xDD4
					constexpr auto fl_attack_movespeed_factor = 0xDD8; // Name: m_flAttackMovespeedFactor Offset: 0xDD8
					constexpr auto fl_heat_per_shot = 0xDDC; // Name: m_flHeatPerShot Offset: 0xDDC
					constexpr auto fl_inaccuracy_pitch_shift = 0xDE0; // Name: m_flInaccuracyPitchShift Offset: 0xDE0
					constexpr auto fl_inaccuracy_alt_sound_threshold = 0xDE4; // Name: m_flInaccuracyAltSoundThreshold Offset: 0xDE4
					constexpr auto fl_bot_audible_range = 0xDE8; // Name: m_flBotAudibleRange Offset: 0xDE8
					constexpr auto sz_use_radio_subtitle = 0xDF0; // Name: m_szUseRadioSubtitle Offset: 0xDF0
					constexpr auto b_unzooms_after_shot = 0xDF8; // Name: m_bUnzoomsAfterShot Offset: 0xDF8
					constexpr auto b_hide_view_model_when_zoomed = 0xDF9; // Name: m_bHideViewModelWhenZoomed Offset: 0xDF9
					constexpr auto n_zoom_levels = 0xDFC; // Name: m_nZoomLevels Offset: 0xDFC
					constexpr auto n_zoom_fov1 = 0xE00; // Name: m_nZoomFOV1 Offset: 0xE00
					constexpr auto n_zoom_fov2 = 0xE04; // Name: m_nZoomFOV2 Offset: 0xE04
					constexpr auto fl_zoom_time0 = 0xE08; // Name: m_flZoomTime0 Offset: 0xE08
					constexpr auto fl_zoom_time1 = 0xE0C; // Name: m_flZoomTime1 Offset: 0xE0C
					constexpr auto fl_zoom_time2 = 0xE10; // Name: m_flZoomTime2 Offset: 0xE10
					constexpr auto fl_iron_sight_pull_up_speed = 0xE14; // Name: m_flIronSightPullUpSpeed Offset: 0xE14
					constexpr auto fl_iron_sight_put_down_speed = 0xE18; // Name: m_flIronSightPutDownSpeed Offset: 0xE18
					constexpr auto fl_iron_sight_fov = 0xE1C; // Name: m_flIronSightFOV Offset: 0xE1C
					constexpr auto fl_iron_sight_pivot_forward = 0xE20; // Name: m_flIronSightPivotForward Offset: 0xE20
					constexpr auto fl_iron_sight_looseness = 0xE24; // Name: m_flIronSightLooseness Offset: 0xE24
					constexpr auto ang_pivot_angle = 0xE28; // Name: m_angPivotAngle Offset: 0xE28
					constexpr auto vec_iron_sight_eye_pos = 0xE34; // Name: m_vecIronSightEyePos Offset: 0xE34
					constexpr auto n_damage = 0xE40; // Name: m_nDamage Offset: 0xE40
					constexpr auto fl_headshot_multiplier = 0xE44; // Name: m_flHeadshotMultiplier Offset: 0xE44
					constexpr auto fl_armor_ratio = 0xE48; // Name: m_flArmorRatio Offset: 0xE48
					constexpr auto fl_penetration = 0xE4C; // Name: m_flPenetration Offset: 0xE4C
					constexpr auto fl_range = 0xE50; // Name: m_flRange Offset: 0xE50
					constexpr auto fl_range_modifier = 0xE54; // Name: m_flRangeModifier Offset: 0xE54
					constexpr auto fl_flinch_velocity_modifier_large = 0xE58; // Name: m_flFlinchVelocityModifierLarge Offset: 0xE58
					constexpr auto fl_flinch_velocity_modifier_small = 0xE5C; // Name: m_flFlinchVelocityModifierSmall Offset: 0xE5C
					constexpr auto fl_recovery_time_crouch = 0xE60; // Name: m_flRecoveryTimeCrouch Offset: 0xE60
					constexpr auto fl_recovery_time_stand = 0xE64; // Name: m_flRecoveryTimeStand Offset: 0xE64
					constexpr auto fl_recovery_time_crouch_final = 0xE68; // Name: m_flRecoveryTimeCrouchFinal Offset: 0xE68
					constexpr auto fl_recovery_time_stand_final = 0xE6C; // Name: m_flRecoveryTimeStandFinal Offset: 0xE6C
					constexpr auto n_recovery_transition_start_bullet = 0xE70; // Name: m_nRecoveryTransitionStartBullet Offset: 0xE70
					constexpr auto n_recovery_transition_end_bullet = 0xE74; // Name: m_nRecoveryTransitionEndBullet Offset: 0xE74
					constexpr auto fl_throw_velocity = 0xE78; // Name: m_flThrowVelocity Offset: 0xE78
					constexpr auto v_smoke_color = 0xE7C; // Name: m_vSmokeColor Offset: 0xE7C
					constexpr auto sz_anim_class = 0xE88; // Name: m_szAnimClass Offset: 0xE88
				} // namespace CCSWeaponBaseVData

				namespace CTonemapTrigger {
					constexpr auto tonemap_controller_name = 0x960; // Name: m_tonemapControllerName Offset: 0x960
					constexpr auto h_tonemap_controller = 0x968; // Name: m_hTonemapController Offset: 0x968
				} // namespace CTonemapTrigger

				namespace CEconItemAttribute {
					constexpr auto i_attribute_definition_index = 0x30; // Name: m_iAttributeDefinitionIndex Offset: 0x30
					constexpr auto fl_value = 0x34; // Name: m_flValue Offset: 0x34
					constexpr auto fl_initial_value = 0x38; // Name: m_flInitialValue Offset: 0x38
					constexpr auto n_refundable_currency = 0x3C; // Name: m_nRefundableCurrency Offset: 0x3C
					constexpr auto b_set_bonus = 0x40; // Name: m_bSetBonus Offset: 0x40
				} // namespace CEconItemAttribute

				namespace CItem_Healthshot {
				} // namespace CItem_Healthshot

				namespace CEnvCubemapBox {
				} // namespace CEnvCubemapBox

				namespace CFogTrigger {
					constexpr auto fog = 0x960; // Name: m_fog Offset: 0x960
				} // namespace CFogTrigger

				namespace CWeaponFiveSeven {
				} // namespace CWeaponFiveSeven

				namespace CWeaponSSG08 {
				} // namespace CWeaponSSG08

				namespace CPointBroadcastClientCommand {
				} // namespace CPointBroadcastClientCommand

				namespace CCSPointScriptExtensions_weapon_cs_base {
				} // namespace CCSPointScriptExtensions_weapon_cs_base

				namespace CWeaponMP7 {
				} // namespace CWeaponMP7

				namespace CTriggerHostageReset {
				} // namespace CTriggerHostageReset

				namespace CInfoTeleportDestination {
				} // namespace CInfoTeleportDestination

				namespace CBodyComponent {
					constexpr auto p_scene_node = 0x8; // Name: m_pSceneNode Offset: 0x8
					constexpr auto _m_p_chain_entity = 0x20; // Name: __m_pChainEntity Offset: 0x20
				} // namespace CBodyComponent

				namespace CBtNodeConditionInactive {
					constexpr auto fl_round_start_threshold_seconds = 0x78; // Name: m_flRoundStartThresholdSeconds Offset: 0x78
					constexpr auto fl_sensor_inactivity_threshold_seconds = 0x7C; // Name: m_flSensorInactivityThresholdSeconds Offset: 0x7C
					constexpr auto sensor_inactivity_timer = 0x80; // Name: m_SensorInactivityTimer Offset: 0x80
				} // namespace CBtNodeConditionInactive

				namespace CWeaponSawedoff {
				} // namespace CWeaponSawedoff

				namespace CEnvSoundscapeTriggerable {
				} // namespace CEnvSoundscapeTriggerable

				namespace CBaseAnimGraph {
					constexpr auto b_initially_populate_interp_history = 0x808; // Name: m_bInitiallyPopulateInterpHistory Offset: 0x808
					constexpr auto p_choreo_services = 0x810; // Name: m_pChoreoServices Offset: 0x810
					constexpr auto b_anim_graph_update_enabled = 0x818; // Name: m_bAnimGraphUpdateEnabled Offset: 0x818
					constexpr auto fl_max_slope_distance = 0x81C; // Name: m_flMaxSlopeDistance Offset: 0x81C
					constexpr auto v_last_slope_check_pos = 0x820; // Name: m_vLastSlopeCheckPos Offset: 0x820
					constexpr auto b_animation_update_scheduled = 0x82C; // Name: m_bAnimationUpdateScheduled Offset: 0x82C
					constexpr auto vec_force = 0x830; // Name: m_vecForce Offset: 0x830
					constexpr auto n_force_bone = 0x83C; // Name: m_nForceBone Offset: 0x83C
					constexpr auto ragdoll_pose = 0x850; // Name: m_RagdollPose Offset: 0x850
					constexpr auto b_ragdoll_client_side = 0x878; // Name: m_bRagdollClientSide Offset: 0x878
					constexpr auto n_last_destructible_part_destroyed_animgraph_set_tick = 0x9A0; // Name: m_nLastDestructiblePartDestroyedAnimgraphSetTick Offset: 0x9A0
				} // namespace CBaseAnimGraph

				namespace CDecoyProjectile {
					constexpr auto n_decoy_shot_tick = 0xB58; // Name: m_nDecoyShotTick Offset: 0xB58
					constexpr auto shots_remaining = 0xB5C; // Name: m_shotsRemaining Offset: 0xB5C
					constexpr auto f_expire_time = 0xB60; // Name: m_fExpireTime Offset: 0xB60
					constexpr auto decoy_weapon_def_index = 0xB70; // Name: m_decoyWeaponDefIndex Offset: 0xB70
				} // namespace CDecoyProjectile

				namespace CBasePlatTrain {
					constexpr auto noise_moving = 0x810; // Name: m_NoiseMoving Offset: 0x810
					constexpr auto noise_arrived = 0x818; // Name: m_NoiseArrived Offset: 0x818
					constexpr auto volume = 0x828; // Name: m_volume Offset: 0x828
					constexpr auto fl_twidth = 0x82C; // Name: m_flTWidth Offset: 0x82C
					constexpr auto fl_tlength = 0x830; // Name: m_flTLength Offset: 0x830
				} // namespace CBasePlatTrain

				namespace CMoverPathNode {
					constexpr auto v_in_tangent_local = 0x4E0; // Name: m_vInTangentLocal Offset: 0x4E0
					constexpr auto v_out_tangent_local = 0x4EC; // Name: m_vOutTangentLocal Offset: 0x4EC
					constexpr auto sz_parent_path_unique_id = 0x4F8; // Name: m_szParentPathUniqueID Offset: 0x4F8
					constexpr auto on_pass_through = 0x500; // Name: m_OnPassThrough Offset: 0x500
					constexpr auto on_pass_through_forward = 0x528; // Name: m_OnPassThroughForward Offset: 0x528
					constexpr auto on_pass_through_reverse = 0x550; // Name: m_OnPassThroughReverse Offset: 0x550
					constexpr auto h_mover = 0x578; // Name: m_hMover Offset: 0x578
				} // namespace CMoverPathNode

				namespace CCitadelSoundOpvarSetOBB {
					constexpr auto isz_stack_name = 0x4E0; // Name: m_iszStackName Offset: 0x4E0
					constexpr auto isz_operator_name = 0x4E8; // Name: m_iszOperatorName Offset: 0x4E8
					constexpr auto isz_opvar_name = 0x4F0; // Name: m_iszOpvarName Offset: 0x4F0
					constexpr auto v_distance_inner_mins = 0x4F8; // Name: m_vDistanceInnerMins Offset: 0x4F8
					constexpr auto v_distance_inner_maxs = 0x504; // Name: m_vDistanceInnerMaxs Offset: 0x504
					constexpr auto v_distance_outer_mins = 0x510; // Name: m_vDistanceOuterMins Offset: 0x510
					constexpr auto v_distance_outer_maxs = 0x51C; // Name: m_vDistanceOuterMaxs Offset: 0x51C
					constexpr auto n_aabbdirection = 0x528; // Name: m_nAABBDirection Offset: 0x528
				} // namespace CCitadelSoundOpvarSetOBB

				namespace CHandleTest {
					constexpr auto handle = 0x4E0; // Name: m_Handle Offset: 0x4E0
					constexpr auto b_send_handle = 0x4E4; // Name: m_bSendHandle Offset: 0x4E4
				} // namespace CHandleTest

				namespace CPlayerSprayDecal {
					constexpr auto n_unique_id = 0x790; // Name: m_nUniqueID Offset: 0x790
					constexpr auto un_account_id = 0x794; // Name: m_unAccountID Offset: 0x794
					constexpr auto un_trace_id = 0x798; // Name: m_unTraceID Offset: 0x798
					constexpr auto rt_gc_time = 0x79C; // Name: m_rtGcTime Offset: 0x79C
					constexpr auto vec_end_pos = 0x7A0; // Name: m_vecEndPos Offset: 0x7A0
					constexpr auto vec_start = 0x7AC; // Name: m_vecStart Offset: 0x7AC
					constexpr auto vec_left = 0x7B8; // Name: m_vecLeft Offset: 0x7B8
					constexpr auto vec_normal = 0x7C4; // Name: m_vecNormal Offset: 0x7C4
					constexpr auto n_player = 0x7D0; // Name: m_nPlayer Offset: 0x7D0
					constexpr auto n_entity = 0x7D4; // Name: m_nEntity Offset: 0x7D4
					constexpr auto n_hitbox = 0x7D8; // Name: m_nHitbox Offset: 0x7D8
					constexpr auto fl_creation_time = 0x7DC; // Name: m_flCreationTime Offset: 0x7DC
					constexpr auto n_tint_id = 0x7E0; // Name: m_nTintID Offset: 0x7E0
					constexpr auto n_version = 0x7E4; // Name: m_nVersion Offset: 0x7E4
					constexpr auto ub_signature = 0x7E5; // Name: m_ubSignature Offset: 0x7E5
				} // namespace CPlayerSprayDecal

				namespace CCSGO_WingmanIntroTerroristPosition {
				} // namespace CCSGO_WingmanIntroTerroristPosition

				namespace CSensorGrenade {
				} // namespace CSensorGrenade

				namespace EntitySpottedState_t {
					constexpr auto b_spotted = 0x8; // Name: m_bSpotted Offset: 0x8
					constexpr auto b_spotted_by_mask = 0xC; // Name: m_bSpottedByMask Offset: 0xC
				} // namespace EntitySpottedState_t

				namespace CBtActionAim {
					constexpr auto sz_sensor_input_key = 0x68; // Name: m_szSensorInputKey Offset: 0x68
					constexpr auto sz_aim_ready_key = 0x80; // Name: m_szAimReadyKey Offset: 0x80
					constexpr auto fl_zoom_cooldown_timestamp = 0x88; // Name: m_flZoomCooldownTimestamp Offset: 0x88
					constexpr auto b_done_aiming = 0x8C; // Name: m_bDoneAiming Offset: 0x8C
					constexpr auto fl_lerp_start_time = 0x90; // Name: m_flLerpStartTime Offset: 0x90
					constexpr auto fl_next_look_target_lerp_time = 0x94; // Name: m_flNextLookTargetLerpTime Offset: 0x94
					constexpr auto fl_penalty_reduction_ratio = 0x98; // Name: m_flPenaltyReductionRatio Offset: 0x98
					constexpr auto next_look_target = 0x9C; // Name: m_NextLookTarget Offset: 0x9C
					constexpr auto aim_timer = 0xA8; // Name: m_AimTimer Offset: 0xA8
					constexpr auto sniper_hold_timer = 0xC0; // Name: m_SniperHoldTimer Offset: 0xC0
					constexpr auto focus_interval_timer = 0xD8; // Name: m_FocusIntervalTimer Offset: 0xD8
					constexpr auto b_acquired = 0xF0; // Name: m_bAcquired Offset: 0xF0
				} // namespace CBtActionAim

				namespace CPhysTorque {
					constexpr auto axis = 0x540; // Name: m_axis Offset: 0x540
				} // namespace CPhysTorque

				namespace CPlayer_ViewModelServices {
				} // namespace CPlayer_ViewModelServices

				namespace CItemHeavyAssaultSuit {
				} // namespace CItemHeavyAssaultSuit

				namespace CPlayer_CameraServices {
					constexpr auto vec_cs_view_punch_angle = 0x40; // Name: m_vecCsViewPunchAngle Offset: 0x40
					constexpr auto n_cs_view_punch_angle_tick = 0x4C; // Name: m_nCsViewPunchAngleTick Offset: 0x4C
					constexpr auto fl_cs_view_punch_angle_tick_ratio = 0x50; // Name: m_flCsViewPunchAngleTickRatio Offset: 0x50
					constexpr auto player_fog = 0x58; // Name: m_PlayerFog Offset: 0x58
					constexpr auto h_color_correction_ctrl = 0x98; // Name: m_hColorCorrectionCtrl Offset: 0x98
					constexpr auto h_view_entity = 0x9C; // Name: m_hViewEntity Offset: 0x9C
					constexpr auto h_tonemap_controller = 0xA0; // Name: m_hTonemapController Offset: 0xA0
					constexpr auto audio = 0xA8; // Name: m_audio Offset: 0xA8
					constexpr auto post_processing_volumes = 0x120; // Name: m_PostProcessingVolumes Offset: 0x120
					constexpr auto fl_old_player_z = 0x138; // Name: m_flOldPlayerZ Offset: 0x138
					constexpr auto fl_old_player_view_offset_z = 0x13C; // Name: m_flOldPlayerViewOffsetZ Offset: 0x13C
					constexpr auto h_trigger_soundscape_list = 0x158; // Name: m_hTriggerSoundscapeList Offset: 0x158
				} // namespace CPlayer_CameraServices

				namespace CCSGO_TeamIntroCharacterPosition {
				} // namespace CCSGO_TeamIntroCharacterPosition

				namespace CCSObserver_MovementServices {
				} // namespace CCSObserver_MovementServices

				namespace CPointClientUIDialog {
					constexpr auto h_activator = 0x940; // Name: m_hActivator Offset: 0x940
					constexpr auto b_start_enabled = 0x944; // Name: m_bStartEnabled Offset: 0x944
				} // namespace CPointClientUIDialog

				namespace CGameSceneNodeHandle {
					constexpr auto h_owner = 0x8; // Name: m_hOwner Offset: 0x8
					constexpr auto name = 0xC; // Name: m_name Offset: 0xC
				} // namespace CGameSceneNodeHandle

				namespace CNavVolumeMarkupVolume {
				} // namespace CNavVolumeMarkupVolume

				namespace CWeaponMP9 {
				} // namespace CWeaponMP9

				namespace CPhysicsEntitySolver {
					constexpr auto h_moving_entity = 0x4E8; // Name: m_hMovingEntity Offset: 0x4E8
					constexpr auto h_physics_blocker = 0x4EC; // Name: m_hPhysicsBlocker Offset: 0x4EC
					constexpr auto separation_duration = 0x4F0; // Name: m_separationDuration Offset: 0x4F0
					constexpr auto cancel_time = 0x4F4; // Name: m_cancelTime Offset: 0x4F4
				} // namespace CPhysicsEntitySolver

				namespace CCSServerPointScriptEntity {
				} // namespace CCSServerPointScriptEntity

				namespace CEnvWindShared {
					constexpr auto fl_start_time = 0x8; // Name: m_flStartTime Offset: 0x8
					constexpr auto i_wind_seed = 0xC; // Name: m_iWindSeed Offset: 0xC
					constexpr auto i_min_wind = 0x10; // Name: m_iMinWind Offset: 0x10
					constexpr auto i_max_wind = 0x12; // Name: m_iMaxWind Offset: 0x12
					constexpr auto wind_radius = 0x14; // Name: m_windRadius Offset: 0x14
					constexpr auto i_min_gust = 0x18; // Name: m_iMinGust Offset: 0x18
					constexpr auto i_max_gust = 0x1A; // Name: m_iMaxGust Offset: 0x1A
					constexpr auto fl_min_gust_delay = 0x1C; // Name: m_flMinGustDelay Offset: 0x1C
					constexpr auto fl_max_gust_delay = 0x20; // Name: m_flMaxGustDelay Offset: 0x20
					constexpr auto fl_gust_duration = 0x24; // Name: m_flGustDuration Offset: 0x24
					constexpr auto i_gust_dir_change = 0x28; // Name: m_iGustDirChange Offset: 0x28
					constexpr auto location = 0x2C; // Name: m_location Offset: 0x2C
					constexpr auto isz_gust_sound = 0x38; // Name: m_iszGustSound Offset: 0x38
					constexpr auto i_wind_dir = 0x3C; // Name: m_iWindDir Offset: 0x3C
					constexpr auto fl_wind_speed = 0x40; // Name: m_flWindSpeed Offset: 0x40
					constexpr auto current_wind_vector = 0x44; // Name: m_currentWindVector Offset: 0x44
					constexpr auto current_sway_vector = 0x50; // Name: m_CurrentSwayVector Offset: 0x50
					constexpr auto prev_sway_vector = 0x5C; // Name: m_PrevSwayVector Offset: 0x5C
					constexpr auto i_initial_wind_dir = 0x68; // Name: m_iInitialWindDir Offset: 0x68
					constexpr auto fl_initial_wind_speed = 0x6C; // Name: m_flInitialWindSpeed Offset: 0x6C
					constexpr auto on_gust_start = 0x70; // Name: m_OnGustStart Offset: 0x70
					constexpr auto on_gust_end = 0x98; // Name: m_OnGustEnd Offset: 0x98
					constexpr auto fl_variation_time = 0xC0; // Name: m_flVariationTime Offset: 0xC0
					constexpr auto fl_sway_time = 0xC4; // Name: m_flSwayTime Offset: 0xC4
					constexpr auto fl_sim_time = 0xC8; // Name: m_flSimTime Offset: 0xC8
					constexpr auto fl_switch_time = 0xCC; // Name: m_flSwitchTime Offset: 0xCC
					constexpr auto fl_ave_wind_speed = 0xD0; // Name: m_flAveWindSpeed Offset: 0xD0
					constexpr auto b_gusting = 0xD4; // Name: m_bGusting Offset: 0xD4
					constexpr auto fl_wind_angle_variation = 0xD8; // Name: m_flWindAngleVariation Offset: 0xD8
					constexpr auto fl_wind_speed_variation = 0xDC; // Name: m_flWindSpeedVariation Offset: 0xDC
					constexpr auto h_ent_owner = 0xE0; // Name: m_hEntOwner Offset: 0xE0
				} // namespace CEnvWindShared

				namespace CSkeletonInstance {
					constexpr auto model_state = 0x170; // Name: m_modelState Offset: 0x170
					constexpr auto b_is_animation_enabled = 0x3A0; // Name: m_bIsAnimationEnabled Offset: 0x3A0
					constexpr auto b_use_parent_render_bounds = 0x3A1; // Name: m_bUseParentRenderBounds Offset: 0x3A1
					constexpr auto b_disable_solid_collisions_for_hierarchy = 0x3A2; // Name: m_bDisableSolidCollisionsForHierarchy Offset: 0x3A2
					constexpr auto b_dirty_motion_type = 0x0; // Name: m_bDirtyMotionType Offset: 0x0
					constexpr auto b_is_generating_latched_parent_space_state = 0x0; // Name: m_bIsGeneratingLatchedParentSpaceState Offset: 0x0
					constexpr auto material_group = 0x3A4; // Name: m_materialGroup Offset: 0x3A4
					constexpr auto n_hitbox_set = 0x3A8; // Name: m_nHitboxSet Offset: 0x3A8
				} // namespace CSkeletonInstance

				namespace CLightGlow {
					constexpr auto n_horizontal_size = 0x790; // Name: m_nHorizontalSize Offset: 0x790
					constexpr auto n_vertical_size = 0x794; // Name: m_nVerticalSize Offset: 0x794
					constexpr auto n_min_dist = 0x798; // Name: m_nMinDist Offset: 0x798
					constexpr auto n_max_dist = 0x79C; // Name: m_nMaxDist Offset: 0x79C
					constexpr auto n_outer_max_dist = 0x7A0; // Name: m_nOuterMaxDist Offset: 0x7A0
					constexpr auto fl_glow_proxy_size = 0x7A4; // Name: m_flGlowProxySize Offset: 0x7A4
					constexpr auto fl_hdrcolor_scale = 0x7A8; // Name: m_flHDRColorScale Offset: 0x7A8
				} // namespace CLightGlow

				namespace CSPerRoundStats_t {
					constexpr auto i_kills = 0x30; // Name: m_iKills Offset: 0x30
					constexpr auto i_deaths = 0x34; // Name: m_iDeaths Offset: 0x34
					constexpr auto i_assists = 0x38; // Name: m_iAssists Offset: 0x38
					constexpr auto i_damage = 0x3C; // Name: m_iDamage Offset: 0x3C
					constexpr auto i_equipment_value = 0x40; // Name: m_iEquipmentValue Offset: 0x40
					constexpr auto i_money_saved = 0x44; // Name: m_iMoneySaved Offset: 0x44
					constexpr auto i_kill_reward = 0x48; // Name: m_iKillReward Offset: 0x48
					constexpr auto i_live_time = 0x4C; // Name: m_iLiveTime Offset: 0x4C
					constexpr auto i_head_shot_kills = 0x50; // Name: m_iHeadShotKills Offset: 0x50
					constexpr auto i_objective = 0x54; // Name: m_iObjective Offset: 0x54
					constexpr auto i_cash_earned = 0x58; // Name: m_iCashEarned Offset: 0x58
					constexpr auto i_utility_damage = 0x5C; // Name: m_iUtilityDamage Offset: 0x5C
					constexpr auto i_enemies_flashed = 0x60; // Name: m_iEnemiesFlashed Offset: 0x60
				} // namespace CSPerRoundStats_t

				namespace CBasePlayerController {
					constexpr auto n_in_buttons_which_are_toggles = 0x4E8; // Name: m_nInButtonsWhichAreToggles Offset: 0x4E8
					constexpr auto n_tick_base = 0x4F0; // Name: m_nTickBase Offset: 0x4F0
					constexpr auto h_pawn = 0x520; // Name: m_hPawn Offset: 0x520
					constexpr auto b_known_team_mismatch = 0x524; // Name: m_bKnownTeamMismatch Offset: 0x524
					constexpr auto n_split_screen_slot = 0x528; // Name: m_nSplitScreenSlot Offset: 0x528
					constexpr auto h_split_owner = 0x52C; // Name: m_hSplitOwner Offset: 0x52C
					constexpr auto h_split_screen_players = 0x530; // Name: m_hSplitScreenPlayers Offset: 0x530
					constexpr auto b_is_hltv = 0x548; // Name: m_bIsHLTV Offset: 0x548
					constexpr auto i_connected = 0x54C; // Name: m_iConnected Offset: 0x54C
					constexpr auto isz_player_name = 0x550; // Name: m_iszPlayerName Offset: 0x550
					constexpr auto sz_network_idstring = 0x5D0; // Name: m_szNetworkIDString Offset: 0x5D0
					constexpr auto f_lerp_time = 0x5D8; // Name: m_fLerpTime Offset: 0x5D8
					constexpr auto b_lag_compensation = 0x5DC; // Name: m_bLagCompensation Offset: 0x5DC
					constexpr auto b_predict = 0x5DD; // Name: m_bPredict Offset: 0x5DD
					constexpr auto b_auto_kick_disabled = 0x5DE; // Name: m_bAutoKickDisabled Offset: 0x5DE
					constexpr auto b_is_low_violence = 0x5DF; // Name: m_bIsLowViolence Offset: 0x5DF
					constexpr auto b_game_paused = 0x5E0; // Name: m_bGamePaused Offset: 0x5E0
					constexpr auto i_ignore_global_chat = 0x720; // Name: m_iIgnoreGlobalChat Offset: 0x720
					constexpr auto fl_last_player_talk_time = 0x724; // Name: m_flLastPlayerTalkTime Offset: 0x724
					constexpr auto fl_last_entity_steady_state = 0x728; // Name: m_flLastEntitySteadyState Offset: 0x728
					constexpr auto n_available_entity_steady_state = 0x72C; // Name: m_nAvailableEntitySteadyState Offset: 0x72C
					constexpr auto b_has_any_steady_state_ents = 0x730; // Name: m_bHasAnySteadyStateEnts Offset: 0x730
					constexpr auto steam_id = 0x740; // Name: m_steamID Offset: 0x740
					constexpr auto i_desired_fov = 0x748; // Name: m_iDesiredFOV Offset: 0x748
				} // namespace CBasePlayerController

				namespace CBaseDoor {
					constexpr auto ang_move_entity_space = 0x820; // Name: m_angMoveEntitySpace Offset: 0x820
					constexpr auto vec_move_dir_parent_space = 0x82C; // Name: m_vecMoveDirParentSpace Offset: 0x82C
					constexpr auto ls = 0x838; // Name: m_ls Offset: 0x838
					constexpr auto b_force_closed = 0x858; // Name: m_bForceClosed Offset: 0x858
					constexpr auto b_door_group = 0x859; // Name: m_bDoorGroup Offset: 0x859
					constexpr auto b_locked = 0x85A; // Name: m_bLocked Offset: 0x85A
					constexpr auto b_ignore_debris = 0x85B; // Name: m_bIgnoreDebris Offset: 0x85B
					constexpr auto e_spawn_position = 0x85C; // Name: m_eSpawnPosition Offset: 0x85C
					constexpr auto fl_block_damage = 0x860; // Name: m_flBlockDamage Offset: 0x860
					constexpr auto noise_moving = 0x868; // Name: m_NoiseMoving Offset: 0x868
					constexpr auto noise_arrived = 0x870; // Name: m_NoiseArrived Offset: 0x870
					constexpr auto noise_moving_closed = 0x878; // Name: m_NoiseMovingClosed Offset: 0x878
					constexpr auto noise_arrived_closed = 0x880; // Name: m_NoiseArrivedClosed Offset: 0x880
					constexpr auto chain_target = 0x888; // Name: m_ChainTarget Offset: 0x888
					constexpr auto on_blocked_closing = 0x890; // Name: m_OnBlockedClosing Offset: 0x890
					constexpr auto on_blocked_opening = 0x8B8; // Name: m_OnBlockedOpening Offset: 0x8B8
					constexpr auto on_unblocked_closing = 0x8E0; // Name: m_OnUnblockedClosing Offset: 0x8E0
					constexpr auto on_unblocked_opening = 0x908; // Name: m_OnUnblockedOpening Offset: 0x908
					constexpr auto on_fully_closed = 0x930; // Name: m_OnFullyClosed Offset: 0x930
					constexpr auto on_fully_open = 0x958; // Name: m_OnFullyOpen Offset: 0x958
					constexpr auto on_close = 0x980; // Name: m_OnClose Offset: 0x980
					constexpr auto on_open = 0x9A8; // Name: m_OnOpen Offset: 0x9A8
					constexpr auto on_locked_use = 0x9D0; // Name: m_OnLockedUse Offset: 0x9D0
					constexpr auto b_loop_move_sound = 0x9F8; // Name: m_bLoopMoveSound Offset: 0x9F8
					constexpr auto b_create_nav_obstacle = 0xA10; // Name: m_bCreateNavObstacle Offset: 0xA10
					constexpr auto is_chaining = 0xA11; // Name: m_isChaining Offset: 0xA11
					constexpr auto b_is_usable = 0xA12; // Name: m_bIsUsable Offset: 0xA12
				} // namespace CBaseDoor

				namespace CBodyComponentBaseAnimGraph {
					constexpr auto animation_controller = 0x490; // Name: m_animationController Offset: 0x490
				} // namespace CBodyComponentBaseAnimGraph

				namespace CBodyComponentPoint {
					constexpr auto scene_node = 0x50; // Name: m_sceneNode Offset: 0x50
				} // namespace CBodyComponentPoint

				namespace CSceneEntityAlias_logic_choreographed_scene {
				} // namespace CSceneEntityAlias_logic_choreographed_scene

				namespace CDynamicPropAlias_cable_dynamic {
				} // namespace CDynamicPropAlias_cable_dynamic

				namespace CPointGamestatsCounter {
					constexpr auto str_statistic_name = 0x4E0; // Name: m_strStatisticName Offset: 0x4E0
					constexpr auto b_disabled = 0x4E8; // Name: m_bDisabled Offset: 0x4E8
				} // namespace CPointGamestatsCounter

				namespace CEnvShake {
					constexpr auto limit_to_entity = 0x4E0; // Name: m_limitToEntity Offset: 0x4E0
					constexpr auto amplitude = 0x4E8; // Name: m_Amplitude Offset: 0x4E8
					constexpr auto frequency = 0x4EC; // Name: m_Frequency Offset: 0x4EC
					constexpr auto duration = 0x4F0; // Name: m_Duration Offset: 0x4F0
					constexpr auto radius = 0x4F4; // Name: m_Radius Offset: 0x4F4
					constexpr auto stop_time = 0x4F8; // Name: m_stopTime Offset: 0x4F8
					constexpr auto next_shake = 0x4FC; // Name: m_nextShake Offset: 0x4FC
					constexpr auto current_amp = 0x500; // Name: m_currentAmp Offset: 0x500
					constexpr auto max_force = 0x504; // Name: m_maxForce Offset: 0x504
					constexpr auto shake_callback = 0x518; // Name: m_shakeCallback Offset: 0x518
				} // namespace CEnvShake

				namespace CBaseMoveBehavior {
					constexpr auto i_position_interpolator = 0x540; // Name: m_iPositionInterpolator Offset: 0x540
					constexpr auto i_rotation_interpolator = 0x544; // Name: m_iRotationInterpolator Offset: 0x544
					constexpr auto fl_anim_start_time = 0x548; // Name: m_flAnimStartTime Offset: 0x548
					constexpr auto fl_anim_end_time = 0x54C; // Name: m_flAnimEndTime Offset: 0x54C
					constexpr auto fl_average_speed_across_frame = 0x550; // Name: m_flAverageSpeedAcrossFrame Offset: 0x550
					constexpr auto p_current_key_frame = 0x558; // Name: m_pCurrentKeyFrame Offset: 0x558
					constexpr auto p_target_key_frame = 0x560; // Name: m_pTargetKeyFrame Offset: 0x560
					constexpr auto p_pre_key_frame = 0x568; // Name: m_pPreKeyFrame Offset: 0x568
					constexpr auto p_post_key_frame = 0x570; // Name: m_pPostKeyFrame Offset: 0x570
					constexpr auto fl_time_into_frame = 0x578; // Name: m_flTimeIntoFrame Offset: 0x578
					constexpr auto i_direction = 0x57C; // Name: m_iDirection Offset: 0x57C
				} // namespace CBaseMoveBehavior

				namespace CTablet {
				} // namespace CTablet

				namespace CFuncMoverAPI {
				} // namespace CFuncMoverAPI

				namespace CFuncNavObstruction {
					constexpr auto b_disabled = 0x798; // Name: m_bDisabled Offset: 0x798
				} // namespace CFuncNavObstruction

				namespace CEnvTilt {
					constexpr auto duration = 0x4E0; // Name: m_Duration Offset: 0x4E0
					constexpr auto radius = 0x4E4; // Name: m_Radius Offset: 0x4E4
					constexpr auto tilt_time = 0x4E8; // Name: m_TiltTime Offset: 0x4E8
					constexpr auto stop_time = 0x4EC; // Name: m_stopTime Offset: 0x4EC
				} // namespace CEnvTilt

				namespace CBaseCSGrenade {
					constexpr auto b_redraw = 0xF70; // Name: m_bRedraw Offset: 0xF70
					constexpr auto b_is_held_by_player = 0xF71; // Name: m_bIsHeldByPlayer Offset: 0xF71
					constexpr auto b_pin_pulled = 0xF72; // Name: m_bPinPulled Offset: 0xF72
					constexpr auto b_jump_throw = 0xF73; // Name: m_bJumpThrow Offset: 0xF73
					constexpr auto b_throw_animating = 0xF74; // Name: m_bThrowAnimating Offset: 0xF74
					constexpr auto f_throw_time = 0xF78; // Name: m_fThrowTime Offset: 0xF78
					constexpr auto fl_throw_strength = 0xF7C; // Name: m_flThrowStrength Offset: 0xF7C
					constexpr auto fl_throw_strength_approach = 0xF80; // Name: m_flThrowStrengthApproach Offset: 0xF80
					constexpr auto f_drop_time = 0xF84; // Name: m_fDropTime Offset: 0xF84
					constexpr auto f_pin_pull_time = 0xF88; // Name: m_fPinPullTime Offset: 0xF88
					constexpr auto b_just_pulled_pin = 0xF8C; // Name: m_bJustPulledPin Offset: 0xF8C
					constexpr auto n_next_hold_tick = 0xF90; // Name: m_nNextHoldTick Offset: 0xF90
					constexpr auto fl_next_hold_frac = 0xF94; // Name: m_flNextHoldFrac Offset: 0xF94
					constexpr auto h_switch_to_weapon_after_throw = 0xF98; // Name: m_hSwitchToWeaponAfterThrow Offset: 0xF98
				} // namespace CBaseCSGrenade

				namespace CItemGenericTriggerHelper {
					constexpr auto h_parent_item = 0x790; // Name: m_hParentItem Offset: 0x790
				} // namespace CItemGenericTriggerHelper

				namespace CPointChildModifier {
					constexpr auto b_orphan_instead_of_deleting_children_on_remove = 0x4E0; // Name: m_bOrphanInsteadOfDeletingChildrenOnRemove Offset: 0x4E0
				} // namespace CPointChildModifier

				namespace CBaseButton {
					constexpr auto ang_move_entity_space = 0x810; // Name: m_angMoveEntitySpace Offset: 0x810
					constexpr auto f_stay_pushed = 0x81C; // Name: m_fStayPushed Offset: 0x81C
					constexpr auto f_rotating = 0x81D; // Name: m_fRotating Offset: 0x81D
					constexpr auto ls = 0x820; // Name: m_ls Offset: 0x820
					constexpr auto s_use_sound = 0x840; // Name: m_sUseSound Offset: 0x840
					constexpr auto s_locked_sound = 0x848; // Name: m_sLockedSound Offset: 0x848
					constexpr auto s_unlocked_sound = 0x850; // Name: m_sUnlockedSound Offset: 0x850
					constexpr auto s_override_anticipation_name = 0x858; // Name: m_sOverrideAnticipationName Offset: 0x858
					constexpr auto b_locked = 0x860; // Name: m_bLocked Offset: 0x860
					constexpr auto b_disabled = 0x861; // Name: m_bDisabled Offset: 0x861
					constexpr auto fl_use_locked_time = 0x864; // Name: m_flUseLockedTime Offset: 0x864
					constexpr auto b_solid_bsp = 0x868; // Name: m_bSolidBsp Offset: 0x868
					constexpr auto on_damaged = 0x870; // Name: m_OnDamaged Offset: 0x870
					constexpr auto on_pressed = 0x898; // Name: m_OnPressed Offset: 0x898
					constexpr auto on_use_locked = 0x8C0; // Name: m_OnUseLocked Offset: 0x8C0
					constexpr auto on_in = 0x8E8; // Name: m_OnIn Offset: 0x8E8
					constexpr auto on_out = 0x910; // Name: m_OnOut Offset: 0x910
					constexpr auto n_state = 0x938; // Name: m_nState Offset: 0x938
					constexpr auto h_constraint = 0x93C; // Name: m_hConstraint Offset: 0x93C
					constexpr auto h_constraint_parent = 0x940; // Name: m_hConstraintParent Offset: 0x940
					constexpr auto b_force_npc_exclude = 0x944; // Name: m_bForceNpcExclude Offset: 0x944
					constexpr auto s_glow_entity = 0x948; // Name: m_sGlowEntity Offset: 0x948
					constexpr auto glow_entity = 0x950; // Name: m_glowEntity Offset: 0x950
					constexpr auto usable = 0x954; // Name: m_usable Offset: 0x954
					constexpr auto sz_display_text = 0x958; // Name: m_szDisplayText Offset: 0x958
				} // namespace CBaseButton

				namespace CLogicBranchList {
					constexpr auto n_logic_branch_names = 0x4E0; // Name: m_nLogicBranchNames Offset: 0x4E0
					constexpr auto logic_branch_list = 0x560; // Name: m_LogicBranchList Offset: 0x560
					constexpr auto e_last_state = 0x578; // Name: m_eLastState Offset: 0x578
					constexpr auto on_all_true = 0x580; // Name: m_OnAllTrue Offset: 0x580
					constexpr auto on_all_false = 0x5A8; // Name: m_OnAllFalse Offset: 0x5A8
					constexpr auto on_mixed = 0x5D0; // Name: m_OnMixed Offset: 0x5D0
				} // namespace CLogicBranchList

				namespace CCSPlace {
					constexpr auto name = 0x798; // Name: m_name Offset: 0x798
				} // namespace CCSPlace

				namespace fogplayerparams_t {
					constexpr auto h_ctrl = 0x8; // Name: m_hCtrl Offset: 0x8
					constexpr auto fl_transition_time = 0xC; // Name: m_flTransitionTime Offset: 0xC
					constexpr auto old_color = 0x10; // Name: m_OldColor Offset: 0x10
					constexpr auto fl_old_start = 0x14; // Name: m_flOldStart Offset: 0x14
					constexpr auto fl_old_end = 0x18; // Name: m_flOldEnd Offset: 0x18
					constexpr auto fl_old_max_density = 0x1C; // Name: m_flOldMaxDensity Offset: 0x1C
					constexpr auto fl_old_hdrcolor_scale = 0x20; // Name: m_flOldHDRColorScale Offset: 0x20
					constexpr auto fl_old_far_z = 0x24; // Name: m_flOldFarZ Offset: 0x24
					constexpr auto new_color = 0x28; // Name: m_NewColor Offset: 0x28
					constexpr auto fl_new_start = 0x2C; // Name: m_flNewStart Offset: 0x2C
					constexpr auto fl_new_end = 0x30; // Name: m_flNewEnd Offset: 0x30
					constexpr auto fl_new_max_density = 0x34; // Name: m_flNewMaxDensity Offset: 0x34
					constexpr auto fl_new_hdrcolor_scale = 0x38; // Name: m_flNewHDRColorScale Offset: 0x38
					constexpr auto fl_new_far_z = 0x3C; // Name: m_flNewFarZ Offset: 0x3C
				} // namespace fogplayerparams_t

				namespace CCSPlayer_CameraServices {
				} // namespace CCSPlayer_CameraServices

				namespace CRevertSaved {
					constexpr auto load_time = 0x790; // Name: m_loadTime Offset: 0x790
					constexpr auto duration = 0x794; // Name: m_Duration Offset: 0x794
					constexpr auto hold_time = 0x798; // Name: m_HoldTime Offset: 0x798
				} // namespace CRevertSaved

				namespace CMultiLightProxy {
					constexpr auto isz_light_name_filter = 0x4E0; // Name: m_iszLightNameFilter Offset: 0x4E0
					constexpr auto isz_light_class_filter = 0x4E8; // Name: m_iszLightClassFilter Offset: 0x4E8
					constexpr auto fl_light_radius_filter = 0x4F0; // Name: m_flLightRadiusFilter Offset: 0x4F0
					constexpr auto fl_brightness_delta = 0x4F4; // Name: m_flBrightnessDelta Offset: 0x4F4
					constexpr auto b_perform_screen_fade = 0x4F8; // Name: m_bPerformScreenFade Offset: 0x4F8
					constexpr auto fl_target_brightness_multiplier = 0x4FC; // Name: m_flTargetBrightnessMultiplier Offset: 0x4FC
					constexpr auto fl_current_brightness_multiplier = 0x500; // Name: m_flCurrentBrightnessMultiplier Offset: 0x500
					constexpr auto vec_lights = 0x508; // Name: m_vecLights Offset: 0x508
				} // namespace CMultiLightProxy

				namespace CEffectData {
					constexpr auto v_origin = 0x8; // Name: m_vOrigin Offset: 0x8
					constexpr auto v_start = 0x14; // Name: m_vStart Offset: 0x14
					constexpr auto v_normal = 0x20; // Name: m_vNormal Offset: 0x20
					constexpr auto v_angles = 0x2C; // Name: m_vAngles Offset: 0x2C
					constexpr auto h_entity = 0x38; // Name: m_hEntity Offset: 0x38
					constexpr auto h_other_entity = 0x3C; // Name: m_hOtherEntity Offset: 0x3C
					constexpr auto fl_scale = 0x40; // Name: m_flScale Offset: 0x40
					constexpr auto fl_magnitude = 0x44; // Name: m_flMagnitude Offset: 0x44
					constexpr auto fl_radius = 0x48; // Name: m_flRadius Offset: 0x48
					constexpr auto n_surface_prop = 0x4C; // Name: m_nSurfaceProp Offset: 0x4C
					constexpr auto n_effect_index = 0x50; // Name: m_nEffectIndex Offset: 0x50
					constexpr auto n_damage_type = 0x58; // Name: m_nDamageType Offset: 0x58
					constexpr auto n_penetrate = 0x5C; // Name: m_nPenetrate Offset: 0x5C
					constexpr auto n_material = 0x5E; // Name: m_nMaterial Offset: 0x5E
					constexpr auto n_hit_box = 0x60; // Name: m_nHitBox Offset: 0x60
					constexpr auto n_color = 0x62; // Name: m_nColor Offset: 0x62
					constexpr auto f_flags = 0x63; // Name: m_fFlags Offset: 0x63
					constexpr auto n_attachment_index = 0x64; // Name: m_nAttachmentIndex Offset: 0x64
					constexpr auto n_attachment_name = 0x68; // Name: m_nAttachmentName Offset: 0x68
					constexpr auto i_effect_name = 0x6C; // Name: m_iEffectName Offset: 0x6C
					constexpr auto n_explosion_type = 0x6E; // Name: m_nExplosionType Offset: 0x6E
				} // namespace CEffectData

				namespace IntervalTimer {
					constexpr auto timestamp = 0x8; // Name: m_timestamp Offset: 0x8
					constexpr auto n_world_group_id = 0xC; // Name: m_nWorldGroupId Offset: 0xC
				} // namespace IntervalTimer

				namespace AutoRoomDoorwayPairs_t {
					constexpr auto v_p1 = 0x0; // Name: vP1 Offset: 0x0
					constexpr auto v_p2 = 0xC; // Name: vP2 Offset: 0xC
				} // namespace AutoRoomDoorwayPairs_t

				namespace CEntityBlocker {
				} // namespace CEntityBlocker

				namespace CItemDogtags {
					constexpr auto owning_player = 0xA80; // Name: m_OwningPlayer Offset: 0xA80
					constexpr auto killing_player = 0xA84; // Name: m_KillingPlayer Offset: 0xA84
				} // namespace CItemDogtags

				namespace CBasePlayerControllerAPI {
				} // namespace CBasePlayerControllerAPI

				namespace CLogicCase {
					constexpr auto n_case = 0x4E0; // Name: m_nCase Offset: 0x4E0
					constexpr auto n_shuffle_cases = 0x5E0; // Name: m_nShuffleCases Offset: 0x5E0
					constexpr auto n_last_shuffle_case = 0x5E4; // Name: m_nLastShuffleCase Offset: 0x5E4
					constexpr auto uch_shuffle_case_map = 0x5E8; // Name: m_uchShuffleCaseMap Offset: 0x5E8
					constexpr auto on_case = 0x608; // Name: m_OnCase Offset: 0x608
					constexpr auto on_default = 0xB08; // Name: m_OnDefault Offset: 0xB08
				} // namespace CLogicCase

				namespace CItemDefuser {
					constexpr auto entity_spotted_state = 0xA80; // Name: m_entitySpottedState Offset: 0xA80
					constexpr auto n_spot_rules = 0xA98; // Name: m_nSpotRules Offset: 0xA98
				} // namespace CItemDefuser

				namespace CPulseGraphComponentPointServer {
				} // namespace CPulseGraphComponentPointServer

				namespace CSmokeGrenadeProjectile {
					constexpr auto n_smoke_effect_tick_begin = 0xB68; // Name: m_nSmokeEffectTickBegin Offset: 0xB68
					constexpr auto b_did_smoke_effect = 0xB6C; // Name: m_bDidSmokeEffect Offset: 0xB6C
					constexpr auto n_random_seed = 0xB70; // Name: m_nRandomSeed Offset: 0xB70
					constexpr auto v_smoke_color = 0xB74; // Name: m_vSmokeColor Offset: 0xB74
					constexpr auto v_smoke_detonation_pos = 0xB80; // Name: m_vSmokeDetonationPos Offset: 0xB80
					constexpr auto voxel_frame_data = 0xB90; // Name: m_VoxelFrameData Offset: 0xB90
					constexpr auto n_voxel_frame_data_size = 0xBA8; // Name: m_nVoxelFrameDataSize Offset: 0xBA8
					constexpr auto n_voxel_update = 0xBAC; // Name: m_nVoxelUpdate Offset: 0xBAC
					constexpr auto fl_last_bounce = 0xBB0; // Name: m_flLastBounce Offset: 0xBB0
					constexpr auto fllast_simulation_time = 0xBB4; // Name: m_fllastSimulationTime Offset: 0xBB4
					constexpr auto b_explode_from_inferno = 0x2E38; // Name: m_bExplodeFromInferno Offset: 0x2E38
				} // namespace CSmokeGrenadeProjectile

				namespace CRagdollPropAlias_physics_prop_ragdoll {
				} // namespace CRagdollPropAlias_physics_prop_ragdoll

				namespace CFireCrackerBlast {
				} // namespace CFireCrackerBlast

				namespace CLightEntity {
					constexpr auto clight_component = 0x790; // Name: m_CLightComponent Offset: 0x790
				} // namespace CLightEntity

				namespace CCredits {
					constexpr auto on_credits_done = 0x4E0; // Name: m_OnCreditsDone Offset: 0x4E0
					constexpr auto b_rolled_outro_credits = 0x508; // Name: m_bRolledOutroCredits Offset: 0x508
					constexpr auto fl_logo_length = 0x50C; // Name: m_flLogoLength Offset: 0x50C
				} // namespace CCredits

				namespace CSoundEventEntity {
					constexpr auto b_start_on_spawn = 0x4E0; // Name: m_bStartOnSpawn Offset: 0x4E0
					constexpr auto b_to_local_player = 0x4E1; // Name: m_bToLocalPlayer Offset: 0x4E1
					constexpr auto b_stop_on_new = 0x4E2; // Name: m_bStopOnNew Offset: 0x4E2
					constexpr auto b_save_restore = 0x4E3; // Name: m_bSaveRestore Offset: 0x4E3
					constexpr auto b_saved_is_playing = 0x4E4; // Name: m_bSavedIsPlaying Offset: 0x4E4
					constexpr auto fl_saved_elapsed_time = 0x4E8; // Name: m_flSavedElapsedTime Offset: 0x4E8
					constexpr auto isz_source_entity_name = 0x4F0; // Name: m_iszSourceEntityName Offset: 0x4F0
					constexpr auto isz_attachment_name = 0x4F8; // Name: m_iszAttachmentName Offset: 0x4F8
					constexpr auto on_guidchanged = 0x500; // Name: m_onGUIDChanged Offset: 0x500
					constexpr auto on_sound_finished = 0x528; // Name: m_onSoundFinished Offset: 0x528
					constexpr auto fl_client_cull_radius = 0x550; // Name: m_flClientCullRadius Offset: 0x550
					constexpr auto isz_sound_name = 0x580; // Name: m_iszSoundName Offset: 0x580
					constexpr auto h_source = 0x590; // Name: m_hSource Offset: 0x590
					constexpr auto n_entity_index_selection = 0x594; // Name: m_nEntityIndexSelection Offset: 0x594
				} // namespace CSoundEventEntity

				namespace CSharedGapTypeQueryRegistration {
				} // namespace CSharedGapTypeQueryRegistration

				namespace CMarkupVolumeTagged_NavGame {
					constexpr auto b_flood_fill_attribute = 0x7E8; // Name: m_bFloodFillAttribute Offset: 0x7E8
				} // namespace CMarkupVolumeTagged_NavGame

				namespace CCSPlayer_ViewModelServices {
					constexpr auto h_view_model = 0x40; // Name: m_hViewModel Offset: 0x40
				} // namespace CCSPlayer_ViewModelServices

				namespace CWeaponBaseItem {
					constexpr auto sequence_complete_timer = 0xF70; // Name: m_SequenceCompleteTimer Offset: 0xF70
					constexpr auto b_redraw = 0xF88; // Name: m_bRedraw Offset: 0xF88
				} // namespace CWeaponBaseItem

				namespace CInfoParticleTarget {
				} // namespace CInfoParticleTarget

				namespace CCSGameModeRules_ArmsRace {
					constexpr auto weapon_sequence = 0x30; // Name: m_WeaponSequence Offset: 0x30
				} // namespace CCSGameModeRules_ArmsRace

				namespace CPulseGraphComponentBase {
					constexpr auto h_owner = 0x8; // Name: m_hOwner Offset: 0x8
					constexpr auto b_activated = 0xC; // Name: m_bActivated Offset: 0xC
					constexpr auto s_name_fixup_static_prefix = 0x10; // Name: m_sNameFixupStaticPrefix Offset: 0x10
					constexpr auto s_name_fixup_parent = 0x18; // Name: m_sNameFixupParent Offset: 0x18
					constexpr auto s_name_fixup_local = 0x20; // Name: m_sNameFixupLocal Offset: 0x20
					constexpr auto s_procedural_world_name_for_relays = 0x28; // Name: m_sProceduralWorldNameForRelays Offset: 0x28
				} // namespace CPulseGraphComponentBase

				namespace CEnvVolumetricFogController {
					constexpr auto fl_scattering = 0x4E0; // Name: m_flScattering Offset: 0x4E0
					constexpr auto fl_anisotropy = 0x4E4; // Name: m_flAnisotropy Offset: 0x4E4
					constexpr auto fl_fade_speed = 0x4E8; // Name: m_flFadeSpeed Offset: 0x4E8
					constexpr auto fl_draw_distance = 0x4EC; // Name: m_flDrawDistance Offset: 0x4EC
					constexpr auto fl_fade_in_start = 0x4F0; // Name: m_flFadeInStart Offset: 0x4F0
					constexpr auto fl_fade_in_end = 0x4F4; // Name: m_flFadeInEnd Offset: 0x4F4
					constexpr auto fl_indirect_strength = 0x4F8; // Name: m_flIndirectStrength Offset: 0x4F8
					constexpr auto n_volume_depth = 0x4FC; // Name: m_nVolumeDepth Offset: 0x4FC
					constexpr auto f_first_volume_slice_thickness = 0x500; // Name: m_fFirstVolumeSliceThickness Offset: 0x500
					constexpr auto n_indirect_texture_dim_x = 0x504; // Name: m_nIndirectTextureDimX Offset: 0x504
					constexpr auto n_indirect_texture_dim_y = 0x508; // Name: m_nIndirectTextureDimY Offset: 0x508
					constexpr auto n_indirect_texture_dim_z = 0x50C; // Name: m_nIndirectTextureDimZ Offset: 0x50C
					constexpr auto v_box_mins = 0x510; // Name: m_vBoxMins Offset: 0x510
					constexpr auto v_box_maxs = 0x51C; // Name: m_vBoxMaxs Offset: 0x51C
					constexpr auto b_active = 0x528; // Name: m_bActive Offset: 0x528
					constexpr auto fl_start_aniso_time = 0x52C; // Name: m_flStartAnisoTime Offset: 0x52C
					constexpr auto fl_start_scatter_time = 0x530; // Name: m_flStartScatterTime Offset: 0x530
					constexpr auto fl_start_draw_distance_time = 0x534; // Name: m_flStartDrawDistanceTime Offset: 0x534
					constexpr auto fl_start_anisotropy = 0x538; // Name: m_flStartAnisotropy Offset: 0x538
					constexpr auto fl_start_scattering = 0x53C; // Name: m_flStartScattering Offset: 0x53C
					constexpr auto fl_start_draw_distance = 0x540; // Name: m_flStartDrawDistance Offset: 0x540
					constexpr auto fl_default_anisotropy = 0x544; // Name: m_flDefaultAnisotropy Offset: 0x544
					constexpr auto fl_default_scattering = 0x548; // Name: m_flDefaultScattering Offset: 0x548
					constexpr auto fl_default_draw_distance = 0x54C; // Name: m_flDefaultDrawDistance Offset: 0x54C
					constexpr auto b_start_disabled = 0x550; // Name: m_bStartDisabled Offset: 0x550
					constexpr auto b_enable_indirect = 0x551; // Name: m_bEnableIndirect Offset: 0x551
					constexpr auto b_indirect_use_lpvs = 0x552; // Name: m_bIndirectUseLPVs Offset: 0x552
					constexpr auto b_is_master = 0x553; // Name: m_bIsMaster Offset: 0x553
					constexpr auto h_fog_indirect_texture = 0x558; // Name: m_hFogIndirectTexture Offset: 0x558
					constexpr auto n_force_refresh_count = 0x560; // Name: m_nForceRefreshCount Offset: 0x560
					constexpr auto f_noise_speed = 0x564; // Name: m_fNoiseSpeed Offset: 0x564
					constexpr auto f_noise_strength = 0x568; // Name: m_fNoiseStrength Offset: 0x568
					constexpr auto v_noise_scale = 0x56C; // Name: m_vNoiseScale Offset: 0x56C
					constexpr auto b_first_time = 0x578; // Name: m_bFirstTime Offset: 0x578
				} // namespace CEnvVolumetricFogController

				namespace CAttributeContainer {
					constexpr auto item = 0x50; // Name: m_Item Offset: 0x50
				} // namespace CAttributeContainer

				namespace CScriptTriggerOnce {
					constexpr auto v_extent = 0x988; // Name: m_vExtent Offset: 0x988
				} // namespace CScriptTriggerOnce

				namespace CPlayer_MovementServices_Humanoid {
					constexpr auto fl_step_sound_time = 0x1D8; // Name: m_flStepSoundTime Offset: 0x1D8
					constexpr auto fl_fall_velocity = 0x1DC; // Name: m_flFallVelocity Offset: 0x1DC
					constexpr auto b_in_crouch = 0x1E0; // Name: m_bInCrouch Offset: 0x1E0
					constexpr auto n_crouch_state = 0x1E4; // Name: m_nCrouchState Offset: 0x1E4
					constexpr auto fl_crouch_transition_start_time = 0x1E8; // Name: m_flCrouchTransitionStartTime Offset: 0x1E8
					constexpr auto b_ducked = 0x1EC; // Name: m_bDucked Offset: 0x1EC
					constexpr auto b_ducking = 0x1ED; // Name: m_bDucking Offset: 0x1ED
					constexpr auto b_in_duck_jump = 0x1EE; // Name: m_bInDuckJump Offset: 0x1EE
					constexpr auto ground_normal = 0x1F0; // Name: m_groundNormal Offset: 0x1F0
					constexpr auto fl_surface_friction = 0x1FC; // Name: m_flSurfaceFriction Offset: 0x1FC
					constexpr auto surface_props = 0x200; // Name: m_surfaceProps Offset: 0x200
					constexpr auto n_stepside = 0x210; // Name: m_nStepside Offset: 0x210
					constexpr auto i_target_volume = 0x214; // Name: m_iTargetVolume Offset: 0x214
					constexpr auto vec_smoothed_velocity = 0x218; // Name: m_vecSmoothedVelocity Offset: 0x218
				} // namespace CPlayer_MovementServices_Humanoid

				namespace CPhysicsPropRespawnable {
					constexpr auto v_original_spawn_origin = 0xD00; // Name: m_vOriginalSpawnOrigin Offset: 0xD00
					constexpr auto v_original_spawn_angles = 0xD0C; // Name: m_vOriginalSpawnAngles Offset: 0xD0C
					constexpr auto v_original_mins = 0xD18; // Name: m_vOriginalMins Offset: 0xD18
					constexpr auto v_original_maxs = 0xD24; // Name: m_vOriginalMaxs Offset: 0xD24
					constexpr auto fl_respawn_duration = 0xD30; // Name: m_flRespawnDuration Offset: 0xD30
				} // namespace CPhysicsPropRespawnable

				namespace CCSGameModeRules_Noop {
				} // namespace CCSGameModeRules_Noop

				namespace CEnvSoundscapeProxyAlias_snd_soundscape_proxy {
				} // namespace CEnvSoundscapeProxyAlias_snd_soundscape_proxy

				namespace CPhysBallSocket {
					constexpr auto fl_joint_friction = 0x558; // Name: m_flJointFriction Offset: 0x558
					constexpr auto b_enable_swing_limit = 0x55C; // Name: m_bEnableSwingLimit Offset: 0x55C
					constexpr auto fl_swing_limit = 0x560; // Name: m_flSwingLimit Offset: 0x560
					constexpr auto b_enable_twist_limit = 0x564; // Name: m_bEnableTwistLimit Offset: 0x564
					constexpr auto fl_min_twist_angle = 0x568; // Name: m_flMinTwistAngle Offset: 0x568
					constexpr auto fl_max_twist_angle = 0x56C; // Name: m_flMaxTwistAngle Offset: 0x56C
				} // namespace CPhysBallSocket

				namespace CPointEntity {
				} // namespace CPointEntity

				namespace CCSGameModeRules_Deathmatch {
					constexpr auto fl_dmbonus_start_time = 0x30; // Name: m_flDMBonusStartTime Offset: 0x30
					constexpr auto fl_dmbonus_time_length = 0x34; // Name: m_flDMBonusTimeLength Offset: 0x34
					constexpr auto s_dmbonus_weapon = 0x38; // Name: m_sDMBonusWeapon Offset: 0x38
				} // namespace CCSGameModeRules_Deathmatch

				namespace CKeepUpright {
					constexpr auto world_goal_axis = 0x4E8; // Name: m_worldGoalAxis Offset: 0x4E8
					constexpr auto local_test_axis = 0x4F4; // Name: m_localTestAxis Offset: 0x4F4
					constexpr auto name_attach = 0x508; // Name: m_nameAttach Offset: 0x508
					constexpr auto attached_object = 0x510; // Name: m_attachedObject Offset: 0x510
					constexpr auto angular_limit = 0x514; // Name: m_angularLimit Offset: 0x514
					constexpr auto b_active = 0x518; // Name: m_bActive Offset: 0x518
					constexpr auto b_damp_all_rotation = 0x519; // Name: m_bDampAllRotation Offset: 0x519
				} // namespace CKeepUpright

				namespace CInfoPlayerStart {
					constexpr auto b_disabled = 0x4E0; // Name: m_bDisabled Offset: 0x4E0
					constexpr auto b_is_master = 0x4E1; // Name: m_bIsMaster Offset: 0x4E1
					constexpr auto p_pawn_subclass = 0x4E8; // Name: m_pPawnSubclass Offset: 0x4E8
				} // namespace CInfoPlayerStart

				namespace CSoundOpvarSetOBBWindEntity {
					constexpr auto v_mins = 0x578; // Name: m_vMins Offset: 0x578
					constexpr auto v_maxs = 0x584; // Name: m_vMaxs Offset: 0x584
					constexpr auto v_distance_mins = 0x590; // Name: m_vDistanceMins Offset: 0x590
					constexpr auto v_distance_maxs = 0x59C; // Name: m_vDistanceMaxs Offset: 0x59C
					constexpr auto fl_wind_min = 0x5A8; // Name: m_flWindMin Offset: 0x5A8
					constexpr auto fl_wind_max = 0x5AC; // Name: m_flWindMax Offset: 0x5AC
					constexpr auto fl_wind_map_min = 0x5B0; // Name: m_flWindMapMin Offset: 0x5B0
					constexpr auto fl_wind_map_max = 0x5B4; // Name: m_flWindMapMax Offset: 0x5B4
				} // namespace CSoundOpvarSetOBBWindEntity

				namespace CRagdollPropAttached {
					constexpr auto bone_index_attached = 0xB48; // Name: m_boneIndexAttached Offset: 0xB48
					constexpr auto ragdoll_attached_object_index = 0xB4C; // Name: m_ragdollAttachedObjectIndex Offset: 0xB4C
					constexpr auto attachment_point_bone_space = 0xB50; // Name: m_attachmentPointBoneSpace Offset: 0xB50
					constexpr auto attachment_point_ragdoll_space = 0xB5C; // Name: m_attachmentPointRagdollSpace Offset: 0xB5C
					constexpr auto b_should_detach = 0xB68; // Name: m_bShouldDetach Offset: 0xB68
					constexpr auto b_should_delete_attached_activation_record = 0xB78; // Name: m_bShouldDeleteAttachedActivationRecord Offset: 0xB78
				} // namespace CRagdollPropAttached

				namespace CItemGeneric {
					constexpr auto b_has_trigger_radius = 0xA88; // Name: m_bHasTriggerRadius Offset: 0xA88
					constexpr auto b_has_pickup_radius = 0xA89; // Name: m_bHasPickupRadius Offset: 0xA89
					constexpr auto fl_pickup_radius_sqr = 0xA8C; // Name: m_flPickupRadiusSqr Offset: 0xA8C
					constexpr auto fl_trigger_radius_sqr = 0xA90; // Name: m_flTriggerRadiusSqr Offset: 0xA90
					constexpr auto fl_last_pickup_check = 0xA94; // Name: m_flLastPickupCheck Offset: 0xA94
					constexpr auto b_player_counter_listener_added = 0xA98; // Name: m_bPlayerCounterListenerAdded Offset: 0xA98
					constexpr auto b_player_in_trigger_radius = 0xA99; // Name: m_bPlayerInTriggerRadius Offset: 0xA99
					constexpr auto h_spawn_particle_effect = 0xAA0; // Name: m_hSpawnParticleEffect Offset: 0xAA0
					constexpr auto p_ambient_sound_effect = 0xAA8; // Name: m_pAmbientSoundEffect Offset: 0xAA8
					constexpr auto b_auto_start_ambient_sound = 0xAB0; // Name: m_bAutoStartAmbientSound Offset: 0xAB0
					constexpr auto p_spawn_script_function = 0xAB8; // Name: m_pSpawnScriptFunction Offset: 0xAB8
					constexpr auto h_pickup_particle_effect = 0xAC0; // Name: m_hPickupParticleEffect Offset: 0xAC0
					constexpr auto p_pickup_sound_effect = 0xAC8; // Name: m_pPickupSoundEffect Offset: 0xAC8
					constexpr auto p_pickup_script_function = 0xAD0; // Name: m_pPickupScriptFunction Offset: 0xAD0
					constexpr auto h_timeout_particle_effect = 0xAD8; // Name: m_hTimeoutParticleEffect Offset: 0xAD8
					constexpr auto p_timeout_sound_effect = 0xAE0; // Name: m_pTimeoutSoundEffect Offset: 0xAE0
					constexpr auto p_timeout_script_function = 0xAE8; // Name: m_pTimeoutScriptFunction Offset: 0xAE8
					constexpr auto p_pickup_filter_name = 0xAF0; // Name: m_pPickupFilterName Offset: 0xAF0
					constexpr auto h_pickup_filter = 0xAF8; // Name: m_hPickupFilter Offset: 0xAF8
					constexpr auto on_pickup = 0xB00; // Name: m_OnPickup Offset: 0xB00
					constexpr auto on_timeout = 0xB28; // Name: m_OnTimeout Offset: 0xB28
					constexpr auto on_trigger_start_touch = 0xB50; // Name: m_OnTriggerStartTouch Offset: 0xB50
					constexpr auto on_trigger_touch = 0xB78; // Name: m_OnTriggerTouch Offset: 0xB78
					constexpr auto on_trigger_end_touch = 0xBA0; // Name: m_OnTriggerEndTouch Offset: 0xBA0
					constexpr auto p_allow_pickup_script_function = 0xBC8; // Name: m_pAllowPickupScriptFunction Offset: 0xBC8
					constexpr auto fl_pickup_radius = 0xBD0; // Name: m_flPickupRadius Offset: 0xBD0
					constexpr auto fl_trigger_radius = 0xBD4; // Name: m_flTriggerRadius Offset: 0xBD4
					constexpr auto p_trigger_sound_effect = 0xBD8; // Name: m_pTriggerSoundEffect Offset: 0xBD8
					constexpr auto b_glow_when_in_trigger = 0xBE0; // Name: m_bGlowWhenInTrigger Offset: 0xBE0
					constexpr auto glow_color = 0xBE1; // Name: m_glowColor Offset: 0xBE1
					constexpr auto b_useable = 0xBE5; // Name: m_bUseable Offset: 0xBE5
					constexpr auto h_trigger_helper = 0xBE8; // Name: m_hTriggerHelper Offset: 0xBE8
				} // namespace CItemGeneric

				namespace CFuncTrackTrain {
					constexpr auto ppath = 0x790; // Name: m_ppath Offset: 0x790
					constexpr auto length = 0x794; // Name: m_length Offset: 0x794
					constexpr auto v_pos_prev = 0x798; // Name: m_vPosPrev Offset: 0x798
					constexpr auto ang_prev = 0x7A4; // Name: m_angPrev Offset: 0x7A4
					constexpr auto control_mins = 0x7B0; // Name: m_controlMins Offset: 0x7B0
					constexpr auto control_maxs = 0x7BC; // Name: m_controlMaxs Offset: 0x7BC
					constexpr auto last_block_pos = 0x7C8; // Name: m_lastBlockPos Offset: 0x7C8
					constexpr auto last_block_tick = 0x7D4; // Name: m_lastBlockTick Offset: 0x7D4
					constexpr auto fl_volume = 0x7D8; // Name: m_flVolume Offset: 0x7D8
					constexpr auto fl_bank = 0x7DC; // Name: m_flBank Offset: 0x7DC
					constexpr auto old_speed = 0x7E0; // Name: m_oldSpeed Offset: 0x7E0
					constexpr auto fl_block_damage = 0x7E4; // Name: m_flBlockDamage Offset: 0x7E4
					constexpr auto height = 0x7E8; // Name: m_height Offset: 0x7E8
					constexpr auto max_speed = 0x7EC; // Name: m_maxSpeed Offset: 0x7EC
					constexpr auto dir = 0x7F0; // Name: m_dir Offset: 0x7F0
					constexpr auto isz_sound_move = 0x7F8; // Name: m_iszSoundMove Offset: 0x7F8
					constexpr auto isz_sound_move_ping = 0x800; // Name: m_iszSoundMovePing Offset: 0x800
					constexpr auto isz_sound_start = 0x808; // Name: m_iszSoundStart Offset: 0x808
					constexpr auto isz_sound_stop = 0x810; // Name: m_iszSoundStop Offset: 0x810
					constexpr auto str_path_target = 0x818; // Name: m_strPathTarget Offset: 0x818
					constexpr auto fl_move_sound_min_duration = 0x820; // Name: m_flMoveSoundMinDuration Offset: 0x820
					constexpr auto fl_move_sound_max_duration = 0x824; // Name: m_flMoveSoundMaxDuration Offset: 0x824
					constexpr auto fl_next_move_sound_time = 0x828; // Name: m_flNextMoveSoundTime Offset: 0x828
					constexpr auto fl_move_sound_min_pitch = 0x82C; // Name: m_flMoveSoundMinPitch Offset: 0x82C
					constexpr auto fl_move_sound_max_pitch = 0x830; // Name: m_flMoveSoundMaxPitch Offset: 0x830
					constexpr auto e_orientation_type = 0x834; // Name: m_eOrientationType Offset: 0x834
					constexpr auto e_velocity_type = 0x838; // Name: m_eVelocityType Offset: 0x838
					constexpr auto on_start = 0x848; // Name: m_OnStart Offset: 0x848
					constexpr auto on_next = 0x870; // Name: m_OnNext Offset: 0x870
					constexpr auto on_arrived_at_destination_node = 0x898; // Name: m_OnArrivedAtDestinationNode Offset: 0x898
					constexpr auto b_manual_speed_changes = 0x8C0; // Name: m_bManualSpeedChanges Offset: 0x8C0
					constexpr auto fl_desired_speed = 0x8C4; // Name: m_flDesiredSpeed Offset: 0x8C4
					constexpr auto fl_speed_change_time = 0x8C8; // Name: m_flSpeedChangeTime Offset: 0x8C8
					constexpr auto fl_accel_speed = 0x8CC; // Name: m_flAccelSpeed Offset: 0x8CC
					constexpr auto fl_decel_speed = 0x8D0; // Name: m_flDecelSpeed Offset: 0x8D0
					constexpr auto b_accel_to_speed = 0x8D4; // Name: m_bAccelToSpeed Offset: 0x8D4
					constexpr auto fl_next_mpsound_time = 0x8D8; // Name: m_flNextMPSoundTime Offset: 0x8D8
				} // namespace CFuncTrackTrain

				namespace CLightSpotEntity {
				} // namespace CLightSpotEntity

				namespace CEnvWind {
					constexpr auto env_wind_shared = 0x4E0; // Name: m_EnvWindShared Offset: 0x4E0
				} // namespace CEnvWind

				namespace CPulseCell_Value_FindEntByClassNameWithin {
					constexpr auto entity_type = 0x48; // Name: m_EntityType Offset: 0x48
				} // namespace CPulseCell_Value_FindEntByClassNameWithin

				namespace CCSPlayer_WaterServices {
					constexpr auto next_drown_damage_time = 0x40; // Name: m_NextDrownDamageTime Offset: 0x40
					constexpr auto n_drown_dmg_rate = 0x44; // Name: m_nDrownDmgRate Offset: 0x44
					constexpr auto air_finished_time = 0x48; // Name: m_AirFinishedTime Offset: 0x48
					constexpr auto fl_water_jump_time = 0x4C; // Name: m_flWaterJumpTime Offset: 0x4C
					constexpr auto vec_water_jump_vel = 0x50; // Name: m_vecWaterJumpVel Offset: 0x50
					constexpr auto fl_swim_sound_time = 0x5C; // Name: m_flSwimSoundTime Offset: 0x5C
				} // namespace CCSPlayer_WaterServices

				namespace CSkyboxReference {
					constexpr auto world_group_id = 0x4E0; // Name: m_worldGroupId Offset: 0x4E0
					constexpr auto h_sky_camera = 0x4E4; // Name: m_hSkyCamera Offset: 0x4E4
				} // namespace CSkyboxReference

				namespace CPropDoorRotating {
					constexpr auto vec_axis = 0xEE8; // Name: m_vecAxis Offset: 0xEE8
					constexpr auto fl_distance = 0xEF4; // Name: m_flDistance Offset: 0xEF4
					constexpr auto e_spawn_position = 0xEF8; // Name: m_eSpawnPosition Offset: 0xEF8
					constexpr auto e_open_direction = 0xEFC; // Name: m_eOpenDirection Offset: 0xEFC
					constexpr auto e_current_open_direction = 0xF00; // Name: m_eCurrentOpenDirection Offset: 0xF00
					constexpr auto fl_ajar_angle = 0xF04; // Name: m_flAjarAngle Offset: 0xF04
					constexpr auto ang_rotation_ajar_deprecated = 0xF08; // Name: m_angRotationAjarDeprecated Offset: 0xF08
					constexpr auto ang_rotation_closed = 0xF14; // Name: m_angRotationClosed Offset: 0xF14
					constexpr auto ang_rotation_open_forward = 0xF20; // Name: m_angRotationOpenForward Offset: 0xF20
					constexpr auto ang_rotation_open_back = 0xF2C; // Name: m_angRotationOpenBack Offset: 0xF2C
					constexpr auto ang_goal = 0xF38; // Name: m_angGoal Offset: 0xF38
					constexpr auto vec_forward_bounds_min = 0xF44; // Name: m_vecForwardBoundsMin Offset: 0xF44
					constexpr auto vec_forward_bounds_max = 0xF50; // Name: m_vecForwardBoundsMax Offset: 0xF50
					constexpr auto vec_back_bounds_min = 0xF5C; // Name: m_vecBackBoundsMin Offset: 0xF5C
					constexpr auto vec_back_bounds_max = 0xF68; // Name: m_vecBackBoundsMax Offset: 0xF68
					constexpr auto b_ajar_door_shouldnt_always_open = 0xF74; // Name: m_bAjarDoorShouldntAlwaysOpen Offset: 0xF74
					constexpr auto h_entity_blocker = 0xF78; // Name: m_hEntityBlocker Offset: 0xF78
				} // namespace CPropDoorRotating

				namespace CBarnLight {
					constexpr auto b_enabled = 0x790; // Name: m_bEnabled Offset: 0x790
					constexpr auto n_color_mode = 0x794; // Name: m_nColorMode Offset: 0x794
					constexpr auto color = 0x798; // Name: m_Color Offset: 0x798
					constexpr auto fl_color_temperature = 0x79C; // Name: m_flColorTemperature Offset: 0x79C
					constexpr auto fl_brightness = 0x7A0; // Name: m_flBrightness Offset: 0x7A0
					constexpr auto fl_brightness_scale = 0x7A4; // Name: m_flBrightnessScale Offset: 0x7A4
					constexpr auto n_direct_light = 0x7A8; // Name: m_nDirectLight Offset: 0x7A8
					constexpr auto n_baked_shadow_index = 0x7AC; // Name: m_nBakedShadowIndex Offset: 0x7AC
					constexpr auto n_luminaire_shape = 0x7B0; // Name: m_nLuminaireShape Offset: 0x7B0
					constexpr auto fl_luminaire_size = 0x7B4; // Name: m_flLuminaireSize Offset: 0x7B4
					constexpr auto fl_luminaire_anisotropy = 0x7B8; // Name: m_flLuminaireAnisotropy Offset: 0x7B8
					constexpr auto light_style_string = 0x7C0; // Name: m_LightStyleString Offset: 0x7C0
					constexpr auto fl_light_style_start_time = 0x7C8; // Name: m_flLightStyleStartTime Offset: 0x7C8
					constexpr auto queued_light_style_strings = 0x7D0; // Name: m_QueuedLightStyleStrings Offset: 0x7D0
					constexpr auto light_style_events = 0x7E8; // Name: m_LightStyleEvents Offset: 0x7E8
					constexpr auto light_style_targets = 0x800; // Name: m_LightStyleTargets Offset: 0x800
					constexpr auto style_event = 0x818; // Name: m_StyleEvent Offset: 0x818
					constexpr auto h_light_cookie = 0x8D8; // Name: m_hLightCookie Offset: 0x8D8
					constexpr auto fl_shape = 0x8E0; // Name: m_flShape Offset: 0x8E0
					constexpr auto fl_soft_x = 0x8E4; // Name: m_flSoftX Offset: 0x8E4
					constexpr auto fl_soft_y = 0x8E8; // Name: m_flSoftY Offset: 0x8E8
					constexpr auto fl_skirt = 0x8EC; // Name: m_flSkirt Offset: 0x8EC
					constexpr auto fl_skirt_near = 0x8F0; // Name: m_flSkirtNear Offset: 0x8F0
					constexpr auto v_size_params = 0x8F4; // Name: m_vSizeParams Offset: 0x8F4
					constexpr auto fl_range = 0x900; // Name: m_flRange Offset: 0x900
					constexpr auto v_shear = 0x904; // Name: m_vShear Offset: 0x904
					constexpr auto n_bake_specular_to_cubemaps = 0x910; // Name: m_nBakeSpecularToCubemaps Offset: 0x910
					constexpr auto v_bake_specular_to_cubemaps_size = 0x914; // Name: m_vBakeSpecularToCubemapsSize Offset: 0x914
					constexpr auto n_cast_shadows = 0x920; // Name: m_nCastShadows Offset: 0x920
					constexpr auto n_shadow_map_size = 0x924; // Name: m_nShadowMapSize Offset: 0x924
					constexpr auto n_shadow_priority = 0x928; // Name: m_nShadowPriority Offset: 0x928
					constexpr auto b_contact_shadow = 0x92C; // Name: m_bContactShadow Offset: 0x92C
					constexpr auto n_bounce_light = 0x930; // Name: m_nBounceLight Offset: 0x930
					constexpr auto fl_bounce_scale = 0x934; // Name: m_flBounceScale Offset: 0x934
					constexpr auto fl_min_roughness = 0x938; // Name: m_flMinRoughness Offset: 0x938
					constexpr auto v_alternate_color = 0x93C; // Name: m_vAlternateColor Offset: 0x93C
					constexpr auto f_alternate_color_brightness = 0x948; // Name: m_fAlternateColorBrightness Offset: 0x948
					constexpr auto n_fog = 0x94C; // Name: m_nFog Offset: 0x94C
					constexpr auto fl_fog_strength = 0x950; // Name: m_flFogStrength Offset: 0x950
					constexpr auto n_fog_shadows = 0x954; // Name: m_nFogShadows Offset: 0x954
					constexpr auto fl_fog_scale = 0x958; // Name: m_flFogScale Offset: 0x958
					constexpr auto b_fog_mixed_shadows = 0x95C; // Name: m_bFogMixedShadows Offset: 0x95C
					constexpr auto fl_fade_size_start = 0x960; // Name: m_flFadeSizeStart Offset: 0x960
					constexpr auto fl_fade_size_end = 0x964; // Name: m_flFadeSizeEnd Offset: 0x964
					constexpr auto fl_shadow_fade_size_start = 0x968; // Name: m_flShadowFadeSizeStart Offset: 0x968
					constexpr auto fl_shadow_fade_size_end = 0x96C; // Name: m_flShadowFadeSizeEnd Offset: 0x96C
					constexpr auto b_precomputed_fields_valid = 0x970; // Name: m_bPrecomputedFieldsValid Offset: 0x970
					constexpr auto v_precomputed_bounds_mins = 0x974; // Name: m_vPrecomputedBoundsMins Offset: 0x974
					constexpr auto v_precomputed_bounds_maxs = 0x980; // Name: m_vPrecomputedBoundsMaxs Offset: 0x980
					constexpr auto v_precomputed_obborigin = 0x98C; // Name: m_vPrecomputedOBBOrigin Offset: 0x98C
					constexpr auto v_precomputed_obbangles = 0x998; // Name: m_vPrecomputedOBBAngles Offset: 0x998
					constexpr auto v_precomputed_obbextent = 0x9A4; // Name: m_vPrecomputedOBBExtent Offset: 0x9A4
					constexpr auto n_precomputed_sub_frusta = 0x9B0; // Name: m_nPrecomputedSubFrusta Offset: 0x9B0
					constexpr auto v_precomputed_obborigin0 = 0x9B4; // Name: m_vPrecomputedOBBOrigin0 Offset: 0x9B4
					constexpr auto v_precomputed_obbangles0 = 0x9C0; // Name: m_vPrecomputedOBBAngles0 Offset: 0x9C0
					constexpr auto v_precomputed_obbextent0 = 0x9CC; // Name: m_vPrecomputedOBBExtent0 Offset: 0x9CC
					constexpr auto v_precomputed_obborigin1 = 0x9D8; // Name: m_vPrecomputedOBBOrigin1 Offset: 0x9D8
					constexpr auto v_precomputed_obbangles1 = 0x9E4; // Name: m_vPrecomputedOBBAngles1 Offset: 0x9E4
					constexpr auto v_precomputed_obbextent1 = 0x9F0; // Name: m_vPrecomputedOBBExtent1 Offset: 0x9F0
					constexpr auto v_precomputed_obborigin2 = 0x9FC; // Name: m_vPrecomputedOBBOrigin2 Offset: 0x9FC
					constexpr auto v_precomputed_obbangles2 = 0xA08; // Name: m_vPrecomputedOBBAngles2 Offset: 0xA08
					constexpr auto v_precomputed_obbextent2 = 0xA14; // Name: m_vPrecomputedOBBExtent2 Offset: 0xA14
					constexpr auto v_precomputed_obborigin3 = 0xA20; // Name: m_vPrecomputedOBBOrigin3 Offset: 0xA20
					constexpr auto v_precomputed_obbangles3 = 0xA2C; // Name: m_vPrecomputedOBBAngles3 Offset: 0xA2C
					constexpr auto v_precomputed_obbextent3 = 0xA38; // Name: m_vPrecomputedOBBExtent3 Offset: 0xA38
					constexpr auto v_precomputed_obborigin4 = 0xA44; // Name: m_vPrecomputedOBBOrigin4 Offset: 0xA44
					constexpr auto v_precomputed_obbangles4 = 0xA50; // Name: m_vPrecomputedOBBAngles4 Offset: 0xA50
					constexpr auto v_precomputed_obbextent4 = 0xA5C; // Name: m_vPrecomputedOBBExtent4 Offset: 0xA5C
					constexpr auto v_precomputed_obborigin5 = 0xA68; // Name: m_vPrecomputedOBBOrigin5 Offset: 0xA68
					constexpr auto v_precomputed_obbangles5 = 0xA74; // Name: m_vPrecomputedOBBAngles5 Offset: 0xA74
					constexpr auto v_precomputed_obbextent5 = 0xA80; // Name: m_vPrecomputedOBBExtent5 Offset: 0xA80
					constexpr auto b_pvs_modify_entity = 0xA8C; // Name: m_bPvsModifyEntity Offset: 0xA8C
					constexpr auto vis_clusters = 0xA90; // Name: m_VisClusters Offset: 0xA90
				} // namespace CBarnLight

				namespace CEnvFunnel {
				} // namespace CEnvFunnel

				namespace CFuncTrainControls {
				} // namespace CFuncTrainControls

				namespace CInfoDeathmatchSpawn {
				} // namespace CInfoDeathmatchSpawn

				namespace CEnvViewPunch {
					constexpr auto fl_radius = 0x4E0; // Name: m_flRadius Offset: 0x4E0
					constexpr auto ang_view_punch = 0x4E4; // Name: m_angViewPunch Offset: 0x4E4
				} // namespace CEnvViewPunch

				namespace CWeaponBizon {
				} // namespace CWeaponBizon

				namespace CDEagle {
				} // namespace CDEagle

				namespace CInfoPlayerTerrorist {
				} // namespace CInfoPlayerTerrorist

				namespace CSoundEventEntityAlias_snd_event_point {
				} // namespace CSoundEventEntityAlias_snd_event_point

				namespace CPathCorner {
					constexpr auto fl_wait = 0x4E0; // Name: m_flWait Offset: 0x4E0
					constexpr auto fl_radius = 0x4E4; // Name: m_flRadius Offset: 0x4E4
					constexpr auto on_pass = 0x4E8; // Name: m_OnPass Offset: 0x4E8
				} // namespace CPathCorner

				namespace CRotDoor {
					constexpr auto b_solid_bsp = 0xA18; // Name: m_bSolidBsp Offset: 0xA18
				} // namespace CRotDoor

				namespace CParticleSystem {
					constexpr auto sz_snapshot_file_name = 0x790; // Name: m_szSnapshotFileName Offset: 0x790
					constexpr auto b_active = 0x990; // Name: m_bActive Offset: 0x990
					constexpr auto b_frozen = 0x991; // Name: m_bFrozen Offset: 0x991
					constexpr auto fl_freeze_transition_duration = 0x994; // Name: m_flFreezeTransitionDuration Offset: 0x994
					constexpr auto n_stop_type = 0x998; // Name: m_nStopType Offset: 0x998
					constexpr auto b_animate_during_gameplay_pause = 0x99C; // Name: m_bAnimateDuringGameplayPause Offset: 0x99C
					constexpr auto i_effect_index = 0x9A0; // Name: m_iEffectIndex Offset: 0x9A0
					constexpr auto fl_start_time = 0x9A8; // Name: m_flStartTime Offset: 0x9A8
					constexpr auto fl_pre_sim_time = 0x9AC; // Name: m_flPreSimTime Offset: 0x9AC
					constexpr auto v_server_control_points = 0x9B0; // Name: m_vServerControlPoints Offset: 0x9B0
					constexpr auto i_server_control_point_assignments = 0x9E0; // Name: m_iServerControlPointAssignments Offset: 0x9E0
					constexpr auto h_control_point_ents = 0x9E4; // Name: m_hControlPointEnts Offset: 0x9E4
					constexpr auto b_no_save = 0xAE4; // Name: m_bNoSave Offset: 0xAE4
					constexpr auto b_no_freeze = 0xAE5; // Name: m_bNoFreeze Offset: 0xAE5
					constexpr auto b_no_ramp = 0xAE6; // Name: m_bNoRamp Offset: 0xAE6
					constexpr auto b_start_active = 0xAE7; // Name: m_bStartActive Offset: 0xAE7
					constexpr auto isz_effect_name = 0xAE8; // Name: m_iszEffectName Offset: 0xAE8
					constexpr auto isz_control_point_names = 0xAF0; // Name: m_iszControlPointNames Offset: 0xAF0
					constexpr auto n_data_cp = 0xCF0; // Name: m_nDataCP Offset: 0xCF0
					constexpr auto vec_data_cpvalue = 0xCF4; // Name: m_vecDataCPValue Offset: 0xCF4
					constexpr auto n_tint_cp = 0xD00; // Name: m_nTintCP Offset: 0xD00
					constexpr auto clr_tint = 0xD04; // Name: m_clrTint Offset: 0xD04
				} // namespace CParticleSystem

				namespace CCSPlayerController_InventoryServices {
					constexpr auto un_music_id = 0x40; // Name: m_unMusicID Offset: 0x40
					constexpr auto rank = 0x44; // Name: m_rank Offset: 0x44
					constexpr auto n_persona_data_public_level = 0x5C; // Name: m_nPersonaDataPublicLevel Offset: 0x5C
					constexpr auto n_persona_data_public_commends_leader = 0x60; // Name: m_nPersonaDataPublicCommendsLeader Offset: 0x60
					constexpr auto n_persona_data_public_commends_teacher = 0x64; // Name: m_nPersonaDataPublicCommendsTeacher Offset: 0x64
					constexpr auto n_persona_data_public_commends_friendly = 0x68; // Name: m_nPersonaDataPublicCommendsFriendly Offset: 0x68
					constexpr auto n_persona_data_xp_trail_level = 0x6C; // Name: m_nPersonaDataXpTrailLevel Offset: 0x6C
					constexpr auto un_equipped_player_spray_ids = 0xF48; // Name: m_unEquippedPlayerSprayIDs Offset: 0xF48
					constexpr auto vec_server_authoritative_weapon_slots = 0xF50; // Name: m_vecServerAuthoritativeWeaponSlots Offset: 0xF50
				} // namespace CCSPlayerController_InventoryServices

				namespace CFuncMonitor {
					constexpr auto target_camera = 0x7B0; // Name: m_targetCamera Offset: 0x7B0
					constexpr auto n_resolution_enum = 0x7B8; // Name: m_nResolutionEnum Offset: 0x7B8
					constexpr auto b_render_shadows = 0x7BC; // Name: m_bRenderShadows Offset: 0x7BC
					constexpr auto b_use_unique_color_target = 0x7BD; // Name: m_bUseUniqueColorTarget Offset: 0x7BD
					constexpr auto brush_model_name = 0x7C0; // Name: m_brushModelName Offset: 0x7C0
					constexpr auto h_target_camera = 0x7C8; // Name: m_hTargetCamera Offset: 0x7C8
					constexpr auto b_enabled = 0x7CC; // Name: m_bEnabled Offset: 0x7CC
					constexpr auto b_draw3_dskybox = 0x7CD; // Name: m_bDraw3DSkybox Offset: 0x7CD
					constexpr auto b_start_enabled = 0x7CE; // Name: m_bStartEnabled Offset: 0x7CE
				} // namespace CFuncMonitor

				namespace CGameRules {
					constexpr auto _m_p_chain_entity = 0x8; // Name: __m_pChainEntity Offset: 0x8
					constexpr auto sz_quest_name = 0x30; // Name: m_szQuestName Offset: 0x30
					constexpr auto n_quest_phase = 0xB0; // Name: m_nQuestPhase Offset: 0xB0
					constexpr auto n_total_paused_ticks = 0xB4; // Name: m_nTotalPausedTicks Offset: 0xB4
					constexpr auto n_pause_start_tick = 0xB8; // Name: m_nPauseStartTick Offset: 0xB8
					constexpr auto b_game_paused = 0xBC; // Name: m_bGamePaused Offset: 0xBC
				} // namespace CGameRules

				namespace CHostageAlias_info_hostage_spawn {
				} // namespace CHostageAlias_info_hostage_spawn

				namespace CFuncInteractionLayerClip {
					constexpr auto b_disabled = 0x790; // Name: m_bDisabled Offset: 0x790
					constexpr auto isz_interacts_as = 0x798; // Name: m_iszInteractsAs Offset: 0x798
					constexpr auto isz_interacts_with = 0x7A0; // Name: m_iszInteractsWith Offset: 0x7A0
				} // namespace CFuncInteractionLayerClip

				namespace CMultiSource {
					constexpr auto rg_entities = 0x4E0; // Name: m_rgEntities Offset: 0x4E0
					constexpr auto rg_triggered = 0x560; // Name: m_rgTriggered Offset: 0x560
					constexpr auto on_trigger = 0x5E0; // Name: m_OnTrigger Offset: 0x5E0
					constexpr auto i_total = 0x608; // Name: m_iTotal Offset: 0x608
					constexpr auto globalstate = 0x610; // Name: m_globalstate Offset: 0x610
				} // namespace CMultiSource

				namespace CEconWearable {
					constexpr auto n_force_skin = 0xD30; // Name: m_nForceSkin Offset: 0xD30
					constexpr auto b_always_allow = 0xD34; // Name: m_bAlwaysAllow Offset: 0xD34
				} // namespace CEconWearable

				namespace CLogicNavigation {
					constexpr auto is_on = 0x4E8; // Name: m_isOn Offset: 0x4E8
					constexpr auto nav_property = 0x4EC; // Name: m_navProperty Offset: 0x4EC
				} // namespace CLogicNavigation

				namespace CEnvEntityMaker {
					constexpr auto vec_entity_mins = 0x4E0; // Name: m_vecEntityMins Offset: 0x4E0
					constexpr auto vec_entity_maxs = 0x4EC; // Name: m_vecEntityMaxs Offset: 0x4EC
					constexpr auto h_current_instance = 0x4F8; // Name: m_hCurrentInstance Offset: 0x4F8
					constexpr auto h_current_blocker = 0x4FC; // Name: m_hCurrentBlocker Offset: 0x4FC
					constexpr auto vec_blocker_origin = 0x500; // Name: m_vecBlockerOrigin Offset: 0x500
					constexpr auto ang_post_spawn_direction = 0x50C; // Name: m_angPostSpawnDirection Offset: 0x50C
					constexpr auto fl_post_spawn_direction_variance = 0x518; // Name: m_flPostSpawnDirectionVariance Offset: 0x518
					constexpr auto fl_post_spawn_speed = 0x51C; // Name: m_flPostSpawnSpeed Offset: 0x51C
					constexpr auto b_post_spawn_use_angles = 0x520; // Name: m_bPostSpawnUseAngles Offset: 0x520
					constexpr auto isz_template = 0x528; // Name: m_iszTemplate Offset: 0x528
					constexpr auto p_output_on_spawned = 0x530; // Name: m_pOutputOnSpawned Offset: 0x530
					constexpr auto p_output_on_failed_spawn = 0x558; // Name: m_pOutputOnFailedSpawn Offset: 0x558
				} // namespace CEnvEntityMaker

				namespace CBaseEntity {
					constexpr auto cbody_component = 0x38; // Name: m_CBodyComponent Offset: 0x38
					constexpr auto network_transmit_component = 0x40; // Name: m_NetworkTransmitComponent Offset: 0x40
					constexpr auto a_think_functions = 0x240; // Name: m_aThinkFunctions Offset: 0x240
					constexpr auto i_current_think_context = 0x258; // Name: m_iCurrentThinkContext Offset: 0x258
					constexpr auto n_last_think_tick = 0x25C; // Name: m_nLastThinkTick Offset: 0x25C
					constexpr auto b_disabled_context_thinks = 0x260; // Name: m_bDisabledContextThinks Offset: 0x260
					constexpr auto is_steady_state = 0x270; // Name: m_isSteadyState Offset: 0x270
					constexpr auto last_network_change = 0x278; // Name: m_lastNetworkChange Offset: 0x278
					constexpr auto response_contexts = 0x288; // Name: m_ResponseContexts Offset: 0x288
					constexpr auto isz_response_context = 0x2A0; // Name: m_iszResponseContext Offset: 0x2A0
					constexpr auto i_health = 0x2C8; // Name: m_iHealth Offset: 0x2C8
					constexpr auto i_max_health = 0x2CC; // Name: m_iMaxHealth Offset: 0x2CC
					constexpr auto life_state = 0x2D0; // Name: m_lifeState Offset: 0x2D0
					constexpr auto fl_damage_accumulator = 0x2D4; // Name: m_flDamageAccumulator Offset: 0x2D4
					constexpr auto b_takes_damage = 0x2D8; // Name: m_bTakesDamage Offset: 0x2D8
					constexpr auto n_take_damage_flags = 0x2E0; // Name: m_nTakeDamageFlags Offset: 0x2E0
					constexpr auto n_platform_type = 0x2E8; // Name: m_nPlatformType Offset: 0x2E8
					constexpr auto move_collide = 0x2EA; // Name: m_MoveCollide Offset: 0x2EA
					constexpr auto move_type = 0x2EB; // Name: m_MoveType Offset: 0x2EB
					constexpr auto n_actual_move_type = 0x2EC; // Name: m_nActualMoveType Offset: 0x2EC
					constexpr auto n_water_touch = 0x2ED; // Name: m_nWaterTouch Offset: 0x2ED
					constexpr auto n_slime_touch = 0x2EE; // Name: m_nSlimeTouch Offset: 0x2EE
					constexpr auto b_restore_in_hierarchy = 0x2EF; // Name: m_bRestoreInHierarchy Offset: 0x2EF
					constexpr auto target = 0x2F0; // Name: m_target Offset: 0x2F0
					constexpr auto h_damage_filter = 0x2F8; // Name: m_hDamageFilter Offset: 0x2F8
					constexpr auto isz_damage_filter_name = 0x300; // Name: m_iszDamageFilterName Offset: 0x300
					constexpr auto fl_move_done_time = 0x308; // Name: m_flMoveDoneTime Offset: 0x308
					constexpr auto n_subclass_id = 0x30C; // Name: m_nSubclassID Offset: 0x30C
					constexpr auto fl_anim_time = 0x318; // Name: m_flAnimTime Offset: 0x318
					constexpr auto fl_simulation_time = 0x31C; // Name: m_flSimulationTime Offset: 0x31C
					constexpr auto fl_create_time = 0x320; // Name: m_flCreateTime Offset: 0x320
					constexpr auto b_client_side_ragdoll = 0x324; // Name: m_bClientSideRagdoll Offset: 0x324
					constexpr auto ub_interpolation_frame = 0x325; // Name: m_ubInterpolationFrame Offset: 0x325
					constexpr auto v_prev_vphysics_update_pos = 0x328; // Name: m_vPrevVPhysicsUpdatePos Offset: 0x328
					constexpr auto i_team_num = 0x334; // Name: m_iTeamNum Offset: 0x334
					constexpr auto i_globalname = 0x338; // Name: m_iGlobalname Offset: 0x338
					constexpr auto i_sent_to_clients = 0x340; // Name: m_iSentToClients Offset: 0x340
					constexpr auto fl_speed = 0x344; // Name: m_flSpeed Offset: 0x344
					constexpr auto s_unique_hammer_id = 0x348; // Name: m_sUniqueHammerID Offset: 0x348
					constexpr auto spawnflags = 0x350; // Name: m_spawnflags Offset: 0x350
					constexpr auto n_next_think_tick = 0x354; // Name: m_nNextThinkTick Offset: 0x354
					constexpr auto n_simulation_tick = 0x358; // Name: m_nSimulationTick Offset: 0x358
					constexpr auto on_killed = 0x360; // Name: m_OnKilled Offset: 0x360
					constexpr auto f_flags = 0x388; // Name: m_fFlags Offset: 0x388
					constexpr auto vec_abs_velocity = 0x38C; // Name: m_vecAbsVelocity Offset: 0x38C
					constexpr auto vec_velocity = 0x398; // Name: m_vecVelocity Offset: 0x398
					constexpr auto vec_base_velocity = 0x3C8; // Name: m_vecBaseVelocity Offset: 0x3C8
					constexpr auto n_push_enum_count = 0x3D4; // Name: m_nPushEnumCount Offset: 0x3D4
					constexpr auto p_collision = 0x3D8; // Name: m_pCollision Offset: 0x3D8
					constexpr auto h_effect_entity = 0x3E0; // Name: m_hEffectEntity Offset: 0x3E0
					constexpr auto h_owner_entity = 0x3E4; // Name: m_hOwnerEntity Offset: 0x3E4
					constexpr auto f_effects = 0x3E8; // Name: m_fEffects Offset: 0x3E8
					constexpr auto h_ground_entity = 0x3EC; // Name: m_hGroundEntity Offset: 0x3EC
					constexpr auto n_ground_body_index = 0x3F0; // Name: m_nGroundBodyIndex Offset: 0x3F0
					constexpr auto fl_friction = 0x3F4; // Name: m_flFriction Offset: 0x3F4
					constexpr auto fl_elasticity = 0x3F8; // Name: m_flElasticity Offset: 0x3F8
					constexpr auto fl_gravity_scale = 0x3FC; // Name: m_flGravityScale Offset: 0x3FC
					constexpr auto fl_time_scale = 0x400; // Name: m_flTimeScale Offset: 0x400
					constexpr auto fl_water_level = 0x404; // Name: m_flWaterLevel Offset: 0x404
					constexpr auto b_animated_every_tick = 0x408; // Name: m_bAnimatedEveryTick Offset: 0x408
					constexpr auto b_disable_low_violence = 0x409; // Name: m_bDisableLowViolence Offset: 0x409
					constexpr auto n_water_type = 0x40A; // Name: m_nWaterType Offset: 0x40A
					constexpr auto i_eflags = 0x40C; // Name: m_iEFlags Offset: 0x40C
					constexpr auto on_user1 = 0x410; // Name: m_OnUser1 Offset: 0x410
					constexpr auto on_user2 = 0x438; // Name: m_OnUser2 Offset: 0x438
					constexpr auto on_user3 = 0x460; // Name: m_OnUser3 Offset: 0x460
					constexpr auto on_user4 = 0x488; // Name: m_OnUser4 Offset: 0x488
					constexpr auto i_initial_team_num = 0x4B0; // Name: m_iInitialTeamNum Offset: 0x4B0
					constexpr auto fl_nav_ignore_until_time = 0x4B4; // Name: m_flNavIgnoreUntilTime Offset: 0x4B4
					constexpr auto vec_ang_velocity = 0x4B8; // Name: m_vecAngVelocity Offset: 0x4B8
					constexpr auto b_network_quantize_origin_and_angles = 0x4C4; // Name: m_bNetworkQuantizeOriginAndAngles Offset: 0x4C4
					constexpr auto b_lag_compensate = 0x4C5; // Name: m_bLagCompensate Offset: 0x4C5
					constexpr auto fl_overridden_friction = 0x4C8; // Name: m_flOverriddenFriction Offset: 0x4C8
					constexpr auto p_blocker = 0x4CC; // Name: m_pBlocker Offset: 0x4CC
					constexpr auto fl_local_time = 0x4D0; // Name: m_flLocalTime Offset: 0x4D0
					constexpr auto fl_vphysics_update_local_time = 0x4D4; // Name: m_flVPhysicsUpdateLocalTime Offset: 0x4D4
					constexpr auto n_blood_type = 0x4D8; // Name: m_nBloodType Offset: 0x4D8
				} // namespace CBaseEntity

				namespace CFilterMultiple {
					constexpr auto n_filter_type = 0x538; // Name: m_nFilterType Offset: 0x538
					constexpr auto i_filter_name = 0x540; // Name: m_iFilterName Offset: 0x540
					constexpr auto h_filter = 0x590; // Name: m_hFilter Offset: 0x590
					constexpr auto n_filter_count = 0x5B8; // Name: m_nFilterCount Offset: 0x5B8
				} // namespace CFilterMultiple

				namespace CPlayer_UseServices {
				} // namespace CPlayer_UseServices

				namespace CPulseGraphInstance_ServerEntity {
					constexpr auto p_component = 0x100; // Name: m_pComponent Offset: 0x100
				} // namespace CPulseGraphInstance_ServerEntity

				namespace CPhysicsWire {
					constexpr auto n_density = 0x4E0; // Name: m_nDensity Offset: 0x4E0
				} // namespace CPhysicsWire

				namespace CPropDoorRotatingBreakable {
					constexpr auto b_breakable = 0xF80; // Name: m_bBreakable Offset: 0xF80
					constexpr auto is_able_to_close_area_portals = 0xF81; // Name: m_isAbleToCloseAreaPortals Offset: 0xF81
					constexpr auto current_damage_state = 0xF84; // Name: m_currentDamageState Offset: 0xF84
					constexpr auto damage_states = 0xF88; // Name: m_damageStates Offset: 0xF88
				} // namespace CPropDoorRotatingBreakable

				namespace CLightEnvironmentEntity {
				} // namespace CLightEnvironmentEntity

				namespace CBasePlayerWeapon {
					constexpr auto n_next_primary_attack_tick = 0xD30; // Name: m_nNextPrimaryAttackTick Offset: 0xD30
					constexpr auto fl_next_primary_attack_tick_ratio = 0xD34; // Name: m_flNextPrimaryAttackTickRatio Offset: 0xD34
					constexpr auto n_next_secondary_attack_tick = 0xD38; // Name: m_nNextSecondaryAttackTick Offset: 0xD38
					constexpr auto fl_next_secondary_attack_tick_ratio = 0xD3C; // Name: m_flNextSecondaryAttackTickRatio Offset: 0xD3C
					constexpr auto i_clip1 = 0xD40; // Name: m_iClip1 Offset: 0xD40
					constexpr auto i_clip2 = 0xD44; // Name: m_iClip2 Offset: 0xD44
					constexpr auto p_reserve_ammo = 0xD48; // Name: m_pReserveAmmo Offset: 0xD48
					constexpr auto on_player_use = 0xD50; // Name: m_OnPlayerUse Offset: 0xD50
				} // namespace CBasePlayerWeapon

				namespace CCSPointScriptExtensions_player_controller {
				} // namespace CCSPointScriptExtensions_player_controller

				namespace CAI_Expresser {
					constexpr auto fl_stop_talk_time = 0x38; // Name: m_flStopTalkTime Offset: 0x38
					constexpr auto fl_stop_talk_time_without_delay = 0x3C; // Name: m_flStopTalkTimeWithoutDelay Offset: 0x3C
					constexpr auto fl_blocked_talk_time = 0x40; // Name: m_flBlockedTalkTime Offset: 0x40
					constexpr auto voice_pitch = 0x44; // Name: m_voicePitch Offset: 0x44
					constexpr auto fl_last_time_accepted_speak = 0x48; // Name: m_flLastTimeAcceptedSpeak Offset: 0x48
					constexpr auto b_allow_speaking_interrupts = 0x4C; // Name: m_bAllowSpeakingInterrupts Offset: 0x4C
					constexpr auto b_consider_scene_involvement_as_speech = 0x4D; // Name: m_bConsiderSceneInvolvementAsSpeech Offset: 0x4D
					constexpr auto b_scene_entity_disabled = 0x4E; // Name: m_bSceneEntityDisabled Offset: 0x4E
					constexpr auto n_last_spoken_priority = 0x50; // Name: m_nLastSpokenPriority Offset: 0x50
					constexpr auto p_outer = 0x70; // Name: m_pOuter Offset: 0x70
				} // namespace CAI_Expresser

				namespace CFireSmoke {
					constexpr auto n_flame_model_index = 0x4F0; // Name: m_nFlameModelIndex Offset: 0x4F0
					constexpr auto n_flame_from_above_model_index = 0x4F4; // Name: m_nFlameFromAboveModelIndex Offset: 0x4F4
				} // namespace CFireSmoke

				namespace CBumpMine {
				} // namespace CBumpMine

				namespace CBasePropDoor {
					constexpr auto fl_auto_return_delay = 0xC68; // Name: m_flAutoReturnDelay Offset: 0xC68
					constexpr auto h_door_list = 0xC70; // Name: m_hDoorList Offset: 0xC70
					constexpr auto n_hardware_type = 0xC88; // Name: m_nHardwareType Offset: 0xC88
					constexpr auto b_needs_hardware = 0xC8C; // Name: m_bNeedsHardware Offset: 0xC8C
					constexpr auto e_door_state = 0xC90; // Name: m_eDoorState Offset: 0xC90
					constexpr auto b_locked = 0xC94; // Name: m_bLocked Offset: 0xC94
					constexpr auto closed_position = 0xC98; // Name: m_closedPosition Offset: 0xC98
					constexpr auto closed_angles = 0xCA4; // Name: m_closedAngles Offset: 0xCA4
					constexpr auto h_blocker = 0xCB0; // Name: m_hBlocker Offset: 0xCB0
					constexpr auto b_first_blocked = 0xCB4; // Name: m_bFirstBlocked Offset: 0xCB4
					constexpr auto ls = 0xCB8; // Name: m_ls Offset: 0xCB8
					constexpr auto b_force_closed = 0xCD8; // Name: m_bForceClosed Offset: 0xCD8
					constexpr auto vec_latch_world_position = 0xCDC; // Name: m_vecLatchWorldPosition Offset: 0xCDC
					constexpr auto h_activator = 0xCE8; // Name: m_hActivator Offset: 0xCE8
					constexpr auto sound_moving = 0xCF8; // Name: m_SoundMoving Offset: 0xCF8
					constexpr auto sound_open = 0xD00; // Name: m_SoundOpen Offset: 0xD00
					constexpr auto sound_close = 0xD08; // Name: m_SoundClose Offset: 0xD08
					constexpr auto sound_lock = 0xD10; // Name: m_SoundLock Offset: 0xD10
					constexpr auto sound_unlock = 0xD18; // Name: m_SoundUnlock Offset: 0xD18
					constexpr auto sound_latch = 0xD20; // Name: m_SoundLatch Offset: 0xD20
					constexpr auto sound_pound = 0xD28; // Name: m_SoundPound Offset: 0xD28
					constexpr auto sound_jiggle = 0xD30; // Name: m_SoundJiggle Offset: 0xD30
					constexpr auto sound_locked_anim = 0xD38; // Name: m_SoundLockedAnim Offset: 0xD38
					constexpr auto num_close_attempts = 0xD40; // Name: m_numCloseAttempts Offset: 0xD40
					constexpr auto n_physics_material = 0xD44; // Name: m_nPhysicsMaterial Offset: 0xD44
					constexpr auto slave_name = 0xD48; // Name: m_SlaveName Offset: 0xD48
					constexpr auto h_master = 0xD50; // Name: m_hMaster Offset: 0xD50
					constexpr auto on_blocked_closing = 0xD58; // Name: m_OnBlockedClosing Offset: 0xD58
					constexpr auto on_blocked_opening = 0xD80; // Name: m_OnBlockedOpening Offset: 0xD80
					constexpr auto on_unblocked_closing = 0xDA8; // Name: m_OnUnblockedClosing Offset: 0xDA8
					constexpr auto on_unblocked_opening = 0xDD0; // Name: m_OnUnblockedOpening Offset: 0xDD0
					constexpr auto on_fully_closed = 0xDF8; // Name: m_OnFullyClosed Offset: 0xDF8
					constexpr auto on_fully_open = 0xE20; // Name: m_OnFullyOpen Offset: 0xE20
					constexpr auto on_close = 0xE48; // Name: m_OnClose Offset: 0xE48
					constexpr auto on_open = 0xE70; // Name: m_OnOpen Offset: 0xE70
					constexpr auto on_locked_use = 0xE98; // Name: m_OnLockedUse Offset: 0xE98
					constexpr auto on_ajar_open = 0xEC0; // Name: m_OnAjarOpen Offset: 0xEC0
				} // namespace CBasePropDoor

				namespace CKnife {
					constexpr auto b_first_attack = 0xF70; // Name: m_bFirstAttack Offset: 0xF70
				} // namespace CKnife

				namespace CRagdollManager {
					constexpr auto i_current_max_ragdoll_count = 0x4E0; // Name: m_iCurrentMaxRagdollCount Offset: 0x4E0
					constexpr auto i_max_ragdoll_count = 0x4E4; // Name: m_iMaxRagdollCount Offset: 0x4E4
					constexpr auto b_save_important = 0x4E8; // Name: m_bSaveImportant Offset: 0x4E8
					constexpr auto b_can_take_damage = 0x4E9; // Name: m_bCanTakeDamage Offset: 0x4E9
				} // namespace CRagdollManager

				namespace CServerOnlyModelEntity {
				} // namespace CServerOnlyModelEntity

				namespace CTriggerFan {
					constexpr auto v_fan_origin = 0x960; // Name: m_vFanOrigin Offset: 0x960
					constexpr auto v_fan_end = 0x96C; // Name: m_vFanEnd Offset: 0x96C
					constexpr auto v_noise = 0x978; // Name: m_vNoise Offset: 0x978
					constexpr auto fl_force = 0x984; // Name: m_flForce Offset: 0x984
					constexpr auto fl_rope_force_scale = 0x988; // Name: m_flRopeForceScale Offset: 0x988
					constexpr auto fl_player_force = 0x98C; // Name: m_flPlayerForce Offset: 0x98C
					constexpr auto fl_ramp_time = 0x990; // Name: m_flRampTime Offset: 0x990
					constexpr auto b_falloff = 0x994; // Name: m_bFalloff Offset: 0x994
					constexpr auto b_push_player = 0x995; // Name: m_bPushPlayer Offset: 0x995
					constexpr auto b_ramp_down = 0x996; // Name: m_bRampDown Offset: 0x996
					constexpr auto b_add_noise = 0x997; // Name: m_bAddNoise Offset: 0x997
					constexpr auto ramp_timer = 0x998; // Name: m_RampTimer Offset: 0x998
				} // namespace CTriggerFan

				namespace CDamageRecord {
					constexpr auto player_damager = 0x28; // Name: m_PlayerDamager Offset: 0x28
					constexpr auto player_recipient = 0x2C; // Name: m_PlayerRecipient Offset: 0x2C
					constexpr auto h_player_controller_damager = 0x30; // Name: m_hPlayerControllerDamager Offset: 0x30
					constexpr auto h_player_controller_recipient = 0x34; // Name: m_hPlayerControllerRecipient Offset: 0x34
					constexpr auto sz_player_damager_name = 0x38; // Name: m_szPlayerDamagerName Offset: 0x38
					constexpr auto sz_player_recipient_name = 0x40; // Name: m_szPlayerRecipientName Offset: 0x40
					constexpr auto damager_xuid = 0x48; // Name: m_DamagerXuid Offset: 0x48
					constexpr auto recipient_xuid = 0x50; // Name: m_RecipientXuid Offset: 0x50
					constexpr auto i_bullets_damage = 0x58; // Name: m_iBulletsDamage Offset: 0x58
					constexpr auto i_damage = 0x5C; // Name: m_iDamage Offset: 0x5C
					constexpr auto i_actual_health_removed = 0x60; // Name: m_iActualHealthRemoved Offset: 0x60
					constexpr auto i_num_hits = 0x64; // Name: m_iNumHits Offset: 0x64
					constexpr auto i_last_bullet_update = 0x68; // Name: m_iLastBulletUpdate Offset: 0x68
					constexpr auto b_is_other_enemy = 0x6C; // Name: m_bIsOtherEnemy Offset: 0x6C
					constexpr auto kill_type = 0x6D; // Name: m_killType Offset: 0x6D
				} // namespace CDamageRecord

				namespace CIncendiaryGrenade {
				} // namespace CIncendiaryGrenade

				namespace CPathCornerCrash {
				} // namespace CPathCornerCrash

				namespace CTriggerActiveWeaponDetect {
					constexpr auto on_touched_active_weapon = 0x960; // Name: m_OnTouchedActiveWeapon Offset: 0x960
					constexpr auto isz_weapon_class_name = 0x988; // Name: m_iszWeaponClassName Offset: 0x988
				} // namespace CTriggerActiveWeaponDetect

				namespace WeaponPurchaseCount_t {
					constexpr auto n_item_def_index = 0x30; // Name: m_nItemDefIndex Offset: 0x30
					constexpr auto n_count = 0x32; // Name: m_nCount Offset: 0x32
				} // namespace WeaponPurchaseCount_t

				namespace CNavSpaceInfo {
					constexpr auto b_create_flight_space = 0x4E0; // Name: m_bCreateFlightSpace Offset: 0x4E0
				} // namespace CNavSpaceInfo

				namespace CPointTemplateAPI {
				} // namespace CPointTemplateAPI

				namespace CPointAngleSensor {
					constexpr auto b_disabled = 0x4E0; // Name: m_bDisabled Offset: 0x4E0
					constexpr auto n_look_at_name = 0x4E8; // Name: m_nLookAtName Offset: 0x4E8
					constexpr auto h_target_entity = 0x4F0; // Name: m_hTargetEntity Offset: 0x4F0
					constexpr auto h_look_at_entity = 0x4F4; // Name: m_hLookAtEntity Offset: 0x4F4
					constexpr auto fl_duration = 0x4F8; // Name: m_flDuration Offset: 0x4F8
					constexpr auto fl_dot_tolerance = 0x4FC; // Name: m_flDotTolerance Offset: 0x4FC
					constexpr auto fl_facing_time = 0x500; // Name: m_flFacingTime Offset: 0x500
					constexpr auto b_fired = 0x504; // Name: m_bFired Offset: 0x504
					constexpr auto on_facing_lookat = 0x508; // Name: m_OnFacingLookat Offset: 0x508
					constexpr auto on_not_facing_lookat = 0x530; // Name: m_OnNotFacingLookat Offset: 0x530
					constexpr auto target_dir = 0x558; // Name: m_TargetDir Offset: 0x558
					constexpr auto facing_percentage = 0x580; // Name: m_FacingPercentage Offset: 0x580
				} // namespace CPointAngleSensor

				namespace CSoundEnt {
					constexpr auto i_free_sound = 0x4E0; // Name: m_iFreeSound Offset: 0x4E0
					constexpr auto i_active_sound = 0x4E4; // Name: m_iActiveSound Offset: 0x4E4
					constexpr auto c_last_active_sounds = 0x4E8; // Name: m_cLastActiveSounds Offset: 0x4E8
					constexpr auto sound_pool = 0x4EC; // Name: m_SoundPool Offset: 0x4EC
				} // namespace CSoundEnt

				namespace CLogicAchievement {
					constexpr auto b_disabled = 0x4E0; // Name: m_bDisabled Offset: 0x4E0
					constexpr auto isz_achievement_event_id = 0x4E8; // Name: m_iszAchievementEventID Offset: 0x4E8
					constexpr auto on_fired = 0x4F0; // Name: m_OnFired Offset: 0x4F0
				} // namespace CLogicAchievement

				namespace shard_model_desc_t {
					constexpr auto n_model_id = 0x8; // Name: m_nModelID Offset: 0x8
					constexpr auto h_material_base = 0x10; // Name: m_hMaterialBase Offset: 0x10
					constexpr auto h_material_damage_overlay = 0x18; // Name: m_hMaterialDamageOverlay Offset: 0x18
					constexpr auto solid = 0x20; // Name: m_solid Offset: 0x20
					constexpr auto vec_panel_size = 0x24; // Name: m_vecPanelSize Offset: 0x24
					constexpr auto vec_stress_position_a = 0x2C; // Name: m_vecStressPositionA Offset: 0x2C
					constexpr auto vec_stress_position_b = 0x34; // Name: m_vecStressPositionB Offset: 0x34
					constexpr auto vec_panel_vertices = 0x40; // Name: m_vecPanelVertices Offset: 0x40
					constexpr auto v_initial_panel_vertices = 0x58; // Name: m_vInitialPanelVertices Offset: 0x58
					constexpr auto fl_glass_half_thickness = 0x70; // Name: m_flGlassHalfThickness Offset: 0x70
					constexpr auto b_has_parent = 0x74; // Name: m_bHasParent Offset: 0x74
					constexpr auto b_parent_frozen = 0x75; // Name: m_bParentFrozen Offset: 0x75
					constexpr auto surface_prop_string_token = 0x78; // Name: m_SurfacePropStringToken Offset: 0x78
				} // namespace shard_model_desc_t

				namespace CWeaponNOVA {
				} // namespace CWeaponNOVA

				namespace CPathSimple {
					constexpr auto path_string = 0x538; // Name: m_pathString Offset: 0x538
				} // namespace CPathSimple

				namespace CBtActionParachutePositioning {
					constexpr auto action_timer = 0x58; // Name: m_ActionTimer Offset: 0x58
				} // namespace CBtActionParachutePositioning

				namespace CCSPlayerBase_CameraServices {
					constexpr auto i_fov = 0x170; // Name: m_iFOV Offset: 0x170
					constexpr auto i_fovstart = 0x174; // Name: m_iFOVStart Offset: 0x174
					constexpr auto fl_fovtime = 0x178; // Name: m_flFOVTime Offset: 0x178
					constexpr auto fl_fovrate = 0x17C; // Name: m_flFOVRate Offset: 0x17C
					constexpr auto h_zoom_owner = 0x180; // Name: m_hZoomOwner Offset: 0x180
					constexpr auto h_trigger_fog_list = 0x188; // Name: m_hTriggerFogList Offset: 0x188
					constexpr auto h_last_fog_trigger = 0x1A0; // Name: m_hLastFogTrigger Offset: 0x1A0
				} // namespace CCSPlayerBase_CameraServices

				namespace CScriptItem {
					constexpr auto move_type_override = 0xA80; // Name: m_MoveTypeOverride Offset: 0xA80
				} // namespace CScriptItem

				namespace CInfoDynamicShadowHintBox {
					constexpr auto v_box_mins = 0x4F8; // Name: m_vBoxMins Offset: 0x4F8
					constexpr auto v_box_maxs = 0x504; // Name: m_vBoxMaxs Offset: 0x504
				} // namespace CInfoDynamicShadowHintBox

				namespace CTouchExpansionComponent {
				} // namespace CTouchExpansionComponent

				namespace CFilterLOS {
				} // namespace CFilterLOS

				namespace CBaseViewModel {
					constexpr auto vec_last_facing = 0x9B0; // Name: m_vecLastFacing Offset: 0x9B0
					constexpr auto n_view_model_index = 0x9BC; // Name: m_nViewModelIndex Offset: 0x9BC
					constexpr auto n_animation_parity = 0x9C0; // Name: m_nAnimationParity Offset: 0x9C0
					constexpr auto fl_animation_start_time = 0x9C4; // Name: m_flAnimationStartTime Offset: 0x9C4
					constexpr auto h_weapon = 0x9C8; // Name: m_hWeapon Offset: 0x9C8
					constexpr auto s_vmname = 0x9D0; // Name: m_sVMName Offset: 0x9D0
					constexpr auto s_animation_prefix = 0x9D8; // Name: m_sAnimationPrefix Offset: 0x9D8
					constexpr auto h_old_layer_sequence = 0x9E0; // Name: m_hOldLayerSequence Offset: 0x9E0
					constexpr auto old_layer = 0x9E4; // Name: m_oldLayer Offset: 0x9E4
					constexpr auto old_layer_start_time = 0x9E8; // Name: m_oldLayerStartTime Offset: 0x9E8
					constexpr auto h_control_panel = 0x9EC; // Name: m_hControlPanel Offset: 0x9EC
				} // namespace CBaseViewModel

				namespace CBaseCombatCharacter {
					constexpr auto b_force_server_ragdoll = 0xA38; // Name: m_bForceServerRagdoll Offset: 0xA38
					constexpr auto h_my_wearables = 0xA40; // Name: m_hMyWearables Offset: 0xA40
					constexpr auto impact_energy_scale = 0xA58; // Name: m_impactEnergyScale Offset: 0xA58
					constexpr auto b_apply_stress_damage = 0xA5C; // Name: m_bApplyStressDamage Offset: 0xA5C
					constexpr auto i_damage_count = 0xAA0; // Name: m_iDamageCount Offset: 0xAA0
					constexpr auto p_vec_relationships = 0xAA8; // Name: m_pVecRelationships Offset: 0xAA8
					constexpr auto str_relationships = 0xAB0; // Name: m_strRelationships Offset: 0xAB0
					constexpr auto e_hull = 0xAB8; // Name: m_eHull Offset: 0xAB8
					constexpr auto n_nav_hull_idx = 0xABC; // Name: m_nNavHullIdx Offset: 0xABC
				} // namespace CBaseCombatCharacter

				namespace CItem {
					constexpr auto on_player_touch = 0x9B0; // Name: m_OnPlayerTouch Offset: 0x9B0
					constexpr auto on_player_pickup = 0x9D8; // Name: m_OnPlayerPickup Offset: 0x9D8
					constexpr auto b_activate_when_at_rest = 0xA00; // Name: m_bActivateWhenAtRest Offset: 0xA00
					constexpr auto on_cache_interaction = 0xA08; // Name: m_OnCacheInteraction Offset: 0xA08
					constexpr auto on_glove_pulled = 0xA30; // Name: m_OnGlovePulled Offset: 0xA30
					constexpr auto v_original_spawn_origin = 0xA58; // Name: m_vOriginalSpawnOrigin Offset: 0xA58
					constexpr auto v_original_spawn_angles = 0xA64; // Name: m_vOriginalSpawnAngles Offset: 0xA64
					constexpr auto b_phys_start_asleep = 0xA70; // Name: m_bPhysStartAsleep Offset: 0xA70
				} // namespace CItem

				namespace CBaseClientUIEntity {
					constexpr auto b_enabled = 0x790; // Name: m_bEnabled Offset: 0x790
					constexpr auto dialog_xmlname = 0x798; // Name: m_DialogXMLName Offset: 0x798
					constexpr auto panel_class_name = 0x7A0; // Name: m_PanelClassName Offset: 0x7A0
					constexpr auto panel_id = 0x7A8; // Name: m_PanelID Offset: 0x7A8
					constexpr auto custom_output0 = 0x7B0; // Name: m_CustomOutput0 Offset: 0x7B0
					constexpr auto custom_output1 = 0x7D8; // Name: m_CustomOutput1 Offset: 0x7D8
					constexpr auto custom_output2 = 0x800; // Name: m_CustomOutput2 Offset: 0x800
					constexpr auto custom_output3 = 0x828; // Name: m_CustomOutput3 Offset: 0x828
					constexpr auto custom_output4 = 0x850; // Name: m_CustomOutput4 Offset: 0x850
					constexpr auto custom_output5 = 0x878; // Name: m_CustomOutput5 Offset: 0x878
					constexpr auto custom_output6 = 0x8A0; // Name: m_CustomOutput6 Offset: 0x8A0
					constexpr auto custom_output7 = 0x8C8; // Name: m_CustomOutput7 Offset: 0x8C8
					constexpr auto custom_output8 = 0x8F0; // Name: m_CustomOutput8 Offset: 0x8F0
					constexpr auto custom_output9 = 0x918; // Name: m_CustomOutput9 Offset: 0x918
				} // namespace CBaseClientUIEntity

				namespace CGameSceneNode {
					constexpr auto node_to_world = 0x10; // Name: m_nodeToWorld Offset: 0x10
					constexpr auto p_owner = 0x30; // Name: m_pOwner Offset: 0x30
					constexpr auto p_parent = 0x38; // Name: m_pParent Offset: 0x38
					constexpr auto p_child = 0x40; // Name: m_pChild Offset: 0x40
					constexpr auto p_next_sibling = 0x48; // Name: m_pNextSibling Offset: 0x48
					constexpr auto h_parent = 0x78; // Name: m_hParent Offset: 0x78
					constexpr auto vec_origin = 0x88; // Name: m_vecOrigin Offset: 0x88
					constexpr auto ang_rotation = 0xC0; // Name: m_angRotation Offset: 0xC0
					constexpr auto fl_scale = 0xCC; // Name: m_flScale Offset: 0xCC
					constexpr auto vec_abs_origin = 0xD0; // Name: m_vecAbsOrigin Offset: 0xD0
					constexpr auto ang_abs_rotation = 0xDC; // Name: m_angAbsRotation Offset: 0xDC
					constexpr auto fl_abs_scale = 0xE8; // Name: m_flAbsScale Offset: 0xE8
					constexpr auto n_parent_attachment_or_bone = 0xEC; // Name: m_nParentAttachmentOrBone Offset: 0xEC
					constexpr auto b_debug_abs_origin_changes = 0xEE; // Name: m_bDebugAbsOriginChanges Offset: 0xEE
					constexpr auto b_dormant = 0xEF; // Name: m_bDormant Offset: 0xEF
					constexpr auto b_force_parent_to_be_networked = 0xF0; // Name: m_bForceParentToBeNetworked Offset: 0xF0
					constexpr auto b_dirty_hierarchy = 0x0; // Name: m_bDirtyHierarchy Offset: 0x0
					constexpr auto b_dirty_bone_merge_info = 0x0; // Name: m_bDirtyBoneMergeInfo Offset: 0x0
					constexpr auto b_networked_position_changed = 0x0; // Name: m_bNetworkedPositionChanged Offset: 0x0
					constexpr auto b_networked_angles_changed = 0x0; // Name: m_bNetworkedAnglesChanged Offset: 0x0
					constexpr auto b_networked_scale_changed = 0x0; // Name: m_bNetworkedScaleChanged Offset: 0x0
					constexpr auto b_will_be_calling_post_data_update = 0x0; // Name: m_bWillBeCallingPostDataUpdate Offset: 0x0
					constexpr auto b_bone_merge_flex = 0x0; // Name: m_bBoneMergeFlex Offset: 0x0
					constexpr auto n_latch_abs_origin = 0x0; // Name: m_nLatchAbsOrigin Offset: 0x0
					constexpr auto b_dirty_bone_merge_bone_to_root = 0x0; // Name: m_bDirtyBoneMergeBoneToRoot Offset: 0x0
					constexpr auto n_hierarchical_depth = 0xF3; // Name: m_nHierarchicalDepth Offset: 0xF3
					constexpr auto n_hierarchy_type = 0xF4; // Name: m_nHierarchyType Offset: 0xF4
					constexpr auto n_do_not_set_anim_time_in_invalidate_physics_count = 0xF5; // Name: m_nDoNotSetAnimTimeInInvalidatePhysicsCount Offset: 0xF5
					constexpr auto name = 0xF8; // Name: m_name Offset: 0xF8
					constexpr auto hierarchy_attach_name = 0x138; // Name: m_hierarchyAttachName Offset: 0x138
					constexpr auto fl_zoffset = 0x13C; // Name: m_flZOffset Offset: 0x13C
					constexpr auto fl_client_local_scale = 0x140; // Name: m_flClientLocalScale Offset: 0x140
					constexpr auto v_render_origin = 0x144; // Name: m_vRenderOrigin Offset: 0x144
				} // namespace CGameSceneNode

				namespace CWeaponNegev {
				} // namespace CWeaponNegev

				namespace CEnvDecal {
					constexpr auto h_decal_material = 0x790; // Name: m_hDecalMaterial Offset: 0x790
					constexpr auto fl_width = 0x798; // Name: m_flWidth Offset: 0x798
					constexpr auto fl_height = 0x79C; // Name: m_flHeight Offset: 0x79C
					constexpr auto fl_depth = 0x7A0; // Name: m_flDepth Offset: 0x7A0
					constexpr auto n_render_order = 0x7A4; // Name: m_nRenderOrder Offset: 0x7A4
					constexpr auto b_project_on_world = 0x7A8; // Name: m_bProjectOnWorld Offset: 0x7A8
					constexpr auto b_project_on_characters = 0x7A9; // Name: m_bProjectOnCharacters Offset: 0x7A9
					constexpr auto b_project_on_water = 0x7AA; // Name: m_bProjectOnWater Offset: 0x7AA
					constexpr auto fl_depth_sort_bias = 0x7AC; // Name: m_flDepthSortBias Offset: 0x7AC
				} // namespace CEnvDecal

				namespace CBodyComponentBaseModelEntity {
				} // namespace CBodyComponentBaseModelEntity

				namespace CLogicAuto {
					constexpr auto on_map_spawn = 0x4E0; // Name: m_OnMapSpawn Offset: 0x4E0
					constexpr auto on_demo_map_spawn = 0x508; // Name: m_OnDemoMapSpawn Offset: 0x508
					constexpr auto on_new_game = 0x530; // Name: m_OnNewGame Offset: 0x530
					constexpr auto on_load_game = 0x558; // Name: m_OnLoadGame Offset: 0x558
					constexpr auto on_map_transition = 0x580; // Name: m_OnMapTransition Offset: 0x580
					constexpr auto on_background_map = 0x5A8; // Name: m_OnBackgroundMap Offset: 0x5A8
					constexpr auto on_multi_new_map = 0x5D0; // Name: m_OnMultiNewMap Offset: 0x5D0
					constexpr auto on_multi_new_round = 0x5F8; // Name: m_OnMultiNewRound Offset: 0x5F8
					constexpr auto on_vrenabled = 0x620; // Name: m_OnVREnabled Offset: 0x620
					constexpr auto on_vrnot_enabled = 0x648; // Name: m_OnVRNotEnabled Offset: 0x648
					constexpr auto globalstate = 0x670; // Name: m_globalstate Offset: 0x670
				} // namespace CLogicAuto

				namespace CLightDirectionalEntity {
				} // namespace CLightDirectionalEntity

				namespace CTriggerToggleSave {
				} // namespace CTriggerToggleSave

				namespace CLogicNPCCounterOBB {
				} // namespace CLogicNPCCounterOBB

				namespace CGlowProperty {
					constexpr auto f_glow_color = 0x8; // Name: m_fGlowColor Offset: 0x8
					constexpr auto i_glow_type = 0x30; // Name: m_iGlowType Offset: 0x30
					constexpr auto i_glow_team = 0x34; // Name: m_iGlowTeam Offset: 0x34
					constexpr auto n_glow_range = 0x38; // Name: m_nGlowRange Offset: 0x38
					constexpr auto n_glow_range_min = 0x3C; // Name: m_nGlowRangeMin Offset: 0x3C
					constexpr auto glow_color_override = 0x40; // Name: m_glowColorOverride Offset: 0x40
					constexpr auto b_flashing = 0x44; // Name: m_bFlashing Offset: 0x44
					constexpr auto fl_glow_time = 0x48; // Name: m_flGlowTime Offset: 0x48
					constexpr auto fl_glow_start_time = 0x4C; // Name: m_flGlowStartTime Offset: 0x4C
					constexpr auto b_eligible_for_screen_highlight = 0x50; // Name: m_bEligibleForScreenHighlight Offset: 0x50
					constexpr auto b_glowing = 0x51; // Name: m_bGlowing Offset: 0x51
				} // namespace CGlowProperty

				namespace CCSObserver_UseServices {
				} // namespace CCSObserver_UseServices

				namespace CFuncTrackChange {
					constexpr auto track_top = 0x858; // Name: m_trackTop Offset: 0x858
					constexpr auto track_bottom = 0x860; // Name: m_trackBottom Offset: 0x860
					constexpr auto train = 0x868; // Name: m_train Offset: 0x868
					constexpr auto track_top_name = 0x870; // Name: m_trackTopName Offset: 0x870
					constexpr auto track_bottom_name = 0x878; // Name: m_trackBottomName Offset: 0x878
					constexpr auto train_name = 0x880; // Name: m_trainName Offset: 0x880
					constexpr auto code = 0x888; // Name: m_code Offset: 0x888
					constexpr auto target_state = 0x88C; // Name: m_targetState Offset: 0x88C
					constexpr auto use = 0x890; // Name: m_use Offset: 0x890
				} // namespace CFuncTrackChange

				namespace CInfoVisibilityBox {
					constexpr auto n_mode = 0x4E4; // Name: m_nMode Offset: 0x4E4
					constexpr auto v_box_size = 0x4E8; // Name: m_vBoxSize Offset: 0x4E8
					constexpr auto b_enabled = 0x4F4; // Name: m_bEnabled Offset: 0x4F4
				} // namespace CInfoVisibilityBox

				namespace CGamePlayerZone {
					constexpr auto on_player_in_zone = 0x798; // Name: m_OnPlayerInZone Offset: 0x798
					constexpr auto on_player_out_zone = 0x7C0; // Name: m_OnPlayerOutZone Offset: 0x7C0
					constexpr auto players_in_count = 0x7E8; // Name: m_PlayersInCount Offset: 0x7E8
					constexpr auto players_out_count = 0x810; // Name: m_PlayersOutCount Offset: 0x810
				} // namespace CGamePlayerZone

				namespace CBaseEntityAPI {
				} // namespace CBaseEntityAPI

				namespace EntityRenderAttribute_t {
					constexpr auto id = 0x30; // Name: m_ID Offset: 0x30
					constexpr auto values = 0x34; // Name: m_Values Offset: 0x34
				} // namespace EntityRenderAttribute_t

				namespace CCSMinimapBoundary {
				} // namespace CCSMinimapBoundary

				namespace CMessageEntity {
					constexpr auto radius = 0x4E0; // Name: m_radius Offset: 0x4E0
					constexpr auto message_text = 0x4E8; // Name: m_messageText Offset: 0x4E8
					constexpr auto draw_text = 0x4F0; // Name: m_drawText Offset: 0x4F0
					constexpr auto b_developer_only = 0x4F1; // Name: m_bDeveloperOnly Offset: 0x4F1
					constexpr auto b_enabled = 0x4F2; // Name: m_bEnabled Offset: 0x4F2
				} // namespace CMessageEntity

				namespace CFuncPlatRot {
					constexpr auto end = 0x840; // Name: m_end Offset: 0x840
					constexpr auto start = 0x84C; // Name: m_start Offset: 0x84C
				} // namespace CFuncPlatRot

				namespace CCSPlayer_HostageServices {
					constexpr auto h_carried_hostage = 0x40; // Name: m_hCarriedHostage Offset: 0x40
					constexpr auto h_carried_hostage_prop = 0x44; // Name: m_hCarriedHostageProp Offset: 0x44
				} // namespace CCSPlayer_HostageServices

				namespace CSmokeGrenade {
				} // namespace CSmokeGrenade

				namespace CCSPlayer_PingServices {
					constexpr auto fl_player_ping_tokens = 0x40; // Name: m_flPlayerPingTokens Offset: 0x40
					constexpr auto h_player_ping = 0x54; // Name: m_hPlayerPing Offset: 0x54
				} // namespace CCSPlayer_PingServices

				namespace CPlayer_FlashlightServices {
				} // namespace CPlayer_FlashlightServices

				namespace CBtActionCombatPositioning {
					constexpr auto sz_sensor_input_key = 0x68; // Name: m_szSensorInputKey Offset: 0x68
					constexpr auto sz_is_attacking_key = 0x80; // Name: m_szIsAttackingKey Offset: 0x80
					constexpr auto action_timer = 0x88; // Name: m_ActionTimer Offset: 0x88
					constexpr auto b_crouching = 0xA0; // Name: m_bCrouching Offset: 0xA0
				} // namespace CBtActionCombatPositioning

				namespace CCSPlayer_BuyServices {
					constexpr auto vec_sellback_purchase_entries = 0xC8; // Name: m_vecSellbackPurchaseEntries Offset: 0xC8
				} // namespace CCSPlayer_BuyServices

				namespace CBaseFire {
					constexpr auto fl_scale = 0x4E0; // Name: m_flScale Offset: 0x4E0
					constexpr auto fl_start_scale = 0x4E4; // Name: m_flStartScale Offset: 0x4E4
					constexpr auto fl_scale_time = 0x4E8; // Name: m_flScaleTime Offset: 0x4E8
					constexpr auto n_flags = 0x4EC; // Name: m_nFlags Offset: 0x4EC
				} // namespace CBaseFire

				namespace CCSPlayer_ItemServices {
					constexpr auto b_has_defuser = 0x40; // Name: m_bHasDefuser Offset: 0x40
					constexpr auto b_has_helmet = 0x41; // Name: m_bHasHelmet Offset: 0x41
					constexpr auto b_has_heavy_armor = 0x42; // Name: m_bHasHeavyArmor Offset: 0x42
				} // namespace CCSPlayer_ItemServices

				namespace CPhysForce {
					constexpr auto name_attach = 0x4E8; // Name: m_nameAttach Offset: 0x4E8
					constexpr auto force = 0x4F0; // Name: m_force Offset: 0x4F0
					constexpr auto force_time = 0x4F4; // Name: m_forceTime Offset: 0x4F4
					constexpr auto attached_object = 0x4F8; // Name: m_attachedObject Offset: 0x4F8
					constexpr auto was_restored = 0x4FC; // Name: m_wasRestored Offset: 0x4FC
					constexpr auto integrator = 0x500; // Name: m_integrator Offset: 0x500
				} // namespace CPhysForce

				namespace CWeaponMAC10 {
				} // namespace CWeaponMAC10

				namespace CWeaponGlock {
				} // namespace CWeaponGlock

				namespace CPredictedViewModel {
				} // namespace CPredictedViewModel

				namespace CTriggerGameEvent {
					constexpr auto str_start_touch_event_name = 0x960; // Name: m_strStartTouchEventName Offset: 0x960
					constexpr auto str_end_touch_event_name = 0x968; // Name: m_strEndTouchEventName Offset: 0x968
					constexpr auto str_trigger_id = 0x970; // Name: m_strTriggerID Offset: 0x970
				} // namespace CTriggerGameEvent

				namespace CPointCameraVFOV {
					constexpr auto fl_vertical_fov = 0x540; // Name: m_flVerticalFOV Offset: 0x540
				} // namespace CPointCameraVFOV

				namespace CEnvMicrophone {
					constexpr auto b_disabled = 0x4E0; // Name: m_bDisabled Offset: 0x4E0
					constexpr auto h_measure_target = 0x4E4; // Name: m_hMeasureTarget Offset: 0x4E4
					constexpr auto n_sound_type = 0x4E8; // Name: m_nSoundType Offset: 0x4E8
					constexpr auto n_sound_flags = 0x4EA; // Name: m_nSoundFlags Offset: 0x4EA
					constexpr auto fl_sensitivity = 0x4EC; // Name: m_flSensitivity Offset: 0x4EC
					constexpr auto fl_smooth_factor = 0x4F0; // Name: m_flSmoothFactor Offset: 0x4F0
					constexpr auto fl_max_range = 0x4F4; // Name: m_flMaxRange Offset: 0x4F4
					constexpr auto isz_speaker_name = 0x4F8; // Name: m_iszSpeakerName Offset: 0x4F8
					constexpr auto h_speaker = 0x500; // Name: m_hSpeaker Offset: 0x500
					constexpr auto b_avoid_feedback = 0x504; // Name: m_bAvoidFeedback Offset: 0x504
					constexpr auto i_speaker_dsppreset = 0x508; // Name: m_iSpeakerDSPPreset Offset: 0x508
					constexpr auto isz_listen_filter = 0x510; // Name: m_iszListenFilter Offset: 0x510
					constexpr auto h_listen_filter = 0x518; // Name: m_hListenFilter Offset: 0x518
					constexpr auto sound_level = 0x520; // Name: m_SoundLevel Offset: 0x520
					constexpr auto on_routed_sound = 0x548; // Name: m_OnRoutedSound Offset: 0x548
					constexpr auto on_heard_sound = 0x570; // Name: m_OnHeardSound Offset: 0x570
					constexpr auto sz_last_sound = 0x598; // Name: m_szLastSound Offset: 0x598
					constexpr auto i_last_routed_frame = 0x698; // Name: m_iLastRoutedFrame Offset: 0x698
				} // namespace CEnvMicrophone

				namespace CLogicDistanceAutosave {
					constexpr auto isz_target_entity = 0x4E0; // Name: m_iszTargetEntity Offset: 0x4E0
					constexpr auto fl_distance_to_player = 0x4E8; // Name: m_flDistanceToPlayer Offset: 0x4E8
					constexpr auto b_force_new_level_unit = 0x4EC; // Name: m_bForceNewLevelUnit Offset: 0x4EC
					constexpr auto b_check_cough = 0x4ED; // Name: m_bCheckCough Offset: 0x4ED
					constexpr auto b_think_dangerous = 0x4EE; // Name: m_bThinkDangerous Offset: 0x4EE
					constexpr auto fl_dangerous_time = 0x4F0; // Name: m_flDangerousTime Offset: 0x4F0
				} // namespace CLogicDistanceAutosave

				namespace CInfoSpawnGroupLoadUnload {
					constexpr auto on_spawn_group_load_started = 0x4E0; // Name: m_OnSpawnGroupLoadStarted Offset: 0x4E0
					constexpr auto on_spawn_group_load_finished = 0x508; // Name: m_OnSpawnGroupLoadFinished Offset: 0x508
					constexpr auto on_spawn_group_unload_started = 0x530; // Name: m_OnSpawnGroupUnloadStarted Offset: 0x530
					constexpr auto on_spawn_group_unload_finished = 0x558; // Name: m_OnSpawnGroupUnloadFinished Offset: 0x558
					constexpr auto isz_spawn_group_name = 0x580; // Name: m_iszSpawnGroupName Offset: 0x580
					constexpr auto isz_spawn_group_filter_name = 0x588; // Name: m_iszSpawnGroupFilterName Offset: 0x588
					constexpr auto isz_landmark_name = 0x590; // Name: m_iszLandmarkName Offset: 0x590
					constexpr auto s_fixed_spawn_group_name = 0x598; // Name: m_sFixedSpawnGroupName Offset: 0x598
					constexpr auto fl_timeout_interval = 0x5A0; // Name: m_flTimeoutInterval Offset: 0x5A0
					constexpr auto b_streaming_started = 0x5A4; // Name: m_bStreamingStarted Offset: 0x5A4
					constexpr auto b_unloading_started = 0x5A5; // Name: m_bUnloadingStarted Offset: 0x5A5
				} // namespace CInfoSpawnGroupLoadUnload

				namespace CFogVolume {
					constexpr auto fog_name = 0x790; // Name: m_fogName Offset: 0x790
					constexpr auto post_process_name = 0x798; // Name: m_postProcessName Offset: 0x798
					constexpr auto color_correction_name = 0x7A0; // Name: m_colorCorrectionName Offset: 0x7A0
					constexpr auto b_disabled = 0x7B0; // Name: m_bDisabled Offset: 0x7B0
					constexpr auto b_in_fog_volumes_list = 0x7B1; // Name: m_bInFogVolumesList Offset: 0x7B1
				} // namespace CFogVolume

				namespace CInfoPlayerCounterterrorist {
				} // namespace CInfoPlayerCounterterrorist

				namespace CInfoLadderDismount {
				} // namespace CInfoLadderDismount

				namespace CFire {
					constexpr auto h_effect = 0x790; // Name: m_hEffect Offset: 0x790
					constexpr auto h_owner = 0x794; // Name: m_hOwner Offset: 0x794
					constexpr auto n_fire_type = 0x798; // Name: m_nFireType Offset: 0x798
					constexpr auto fl_fuel = 0x79C; // Name: m_flFuel Offset: 0x79C
					constexpr auto fl_damage_time = 0x7A0; // Name: m_flDamageTime Offset: 0x7A0
					constexpr auto last_damage = 0x7A4; // Name: m_lastDamage Offset: 0x7A4
					constexpr auto fl_fire_size = 0x7A8; // Name: m_flFireSize Offset: 0x7A8
					constexpr auto fl_last_nav_update_time = 0x7AC; // Name: m_flLastNavUpdateTime Offset: 0x7AC
					constexpr auto fl_heat_level = 0x7B0; // Name: m_flHeatLevel Offset: 0x7B0
					constexpr auto fl_heat_absorb = 0x7B4; // Name: m_flHeatAbsorb Offset: 0x7B4
					constexpr auto fl_damage_scale = 0x7B8; // Name: m_flDamageScale Offset: 0x7B8
					constexpr auto fl_max_heat = 0x7BC; // Name: m_flMaxHeat Offset: 0x7BC
					constexpr auto fl_last_heat_level = 0x7C0; // Name: m_flLastHeatLevel Offset: 0x7C0
					constexpr auto fl_attack_time = 0x7C4; // Name: m_flAttackTime Offset: 0x7C4
					constexpr auto b_enabled = 0x7C8; // Name: m_bEnabled Offset: 0x7C8
					constexpr auto b_start_disabled = 0x7C9; // Name: m_bStartDisabled Offset: 0x7C9
					constexpr auto b_did_activate = 0x7CA; // Name: m_bDidActivate Offset: 0x7CA
					constexpr auto on_ignited = 0x7D0; // Name: m_OnIgnited Offset: 0x7D0
					constexpr auto on_extinguished = 0x7F8; // Name: m_OnExtinguished Offset: 0x7F8
				} // namespace CFire

				namespace CCSPointScriptEntity {
				} // namespace CCSPointScriptEntity

				namespace CEnvWindShared_WindVariationEvent_t {
					constexpr auto fl_wind_angle_variation = 0x0; // Name: m_flWindAngleVariation Offset: 0x0
					constexpr auto fl_wind_speed_variation = 0x4; // Name: m_flWindSpeedVariation Offset: 0x4
				} // namespace CEnvWindShared_WindVariationEvent_t

				namespace CFuncPlat {
					constexpr auto s_noise = 0x838; // Name: m_sNoise Offset: 0x838
				} // namespace CFuncPlat

				namespace CGenericConstraint {
					constexpr auto n_linear_motion_x = 0x560; // Name: m_nLinearMotionX Offset: 0x560
					constexpr auto n_linear_motion_y = 0x564; // Name: m_nLinearMotionY Offset: 0x564
					constexpr auto n_linear_motion_z = 0x568; // Name: m_nLinearMotionZ Offset: 0x568
					constexpr auto fl_linear_frequency_x = 0x56C; // Name: m_flLinearFrequencyX Offset: 0x56C
					constexpr auto fl_linear_frequency_y = 0x570; // Name: m_flLinearFrequencyY Offset: 0x570
					constexpr auto fl_linear_frequency_z = 0x574; // Name: m_flLinearFrequencyZ Offset: 0x574
					constexpr auto fl_linear_damping_ratio_x = 0x578; // Name: m_flLinearDampingRatioX Offset: 0x578
					constexpr auto fl_linear_damping_ratio_y = 0x57C; // Name: m_flLinearDampingRatioY Offset: 0x57C
					constexpr auto fl_linear_damping_ratio_z = 0x580; // Name: m_flLinearDampingRatioZ Offset: 0x580
					constexpr auto fl_max_linear_impulse_x = 0x584; // Name: m_flMaxLinearImpulseX Offset: 0x584
					constexpr auto fl_max_linear_impulse_y = 0x588; // Name: m_flMaxLinearImpulseY Offset: 0x588
					constexpr auto fl_max_linear_impulse_z = 0x58C; // Name: m_flMaxLinearImpulseZ Offset: 0x58C
					constexpr auto fl_break_after_time_x = 0x590; // Name: m_flBreakAfterTimeX Offset: 0x590
					constexpr auto fl_break_after_time_y = 0x594; // Name: m_flBreakAfterTimeY Offset: 0x594
					constexpr auto fl_break_after_time_z = 0x598; // Name: m_flBreakAfterTimeZ Offset: 0x598
					constexpr auto fl_break_after_time_start_time_x = 0x59C; // Name: m_flBreakAfterTimeStartTimeX Offset: 0x59C
					constexpr auto fl_break_after_time_start_time_y = 0x5A0; // Name: m_flBreakAfterTimeStartTimeY Offset: 0x5A0
					constexpr auto fl_break_after_time_start_time_z = 0x5A4; // Name: m_flBreakAfterTimeStartTimeZ Offset: 0x5A4
					constexpr auto fl_break_after_time_threshold_x = 0x5A8; // Name: m_flBreakAfterTimeThresholdX Offset: 0x5A8
					constexpr auto fl_break_after_time_threshold_y = 0x5AC; // Name: m_flBreakAfterTimeThresholdY Offset: 0x5AC
					constexpr auto fl_break_after_time_threshold_z = 0x5B0; // Name: m_flBreakAfterTimeThresholdZ Offset: 0x5B0
					constexpr auto fl_notify_force_x = 0x5B4; // Name: m_flNotifyForceX Offset: 0x5B4
					constexpr auto fl_notify_force_y = 0x5B8; // Name: m_flNotifyForceY Offset: 0x5B8
					constexpr auto fl_notify_force_z = 0x5BC; // Name: m_flNotifyForceZ Offset: 0x5BC
					constexpr auto fl_notify_force_min_time_x = 0x5C0; // Name: m_flNotifyForceMinTimeX Offset: 0x5C0
					constexpr auto fl_notify_force_min_time_y = 0x5C4; // Name: m_flNotifyForceMinTimeY Offset: 0x5C4
					constexpr auto fl_notify_force_min_time_z = 0x5C8; // Name: m_flNotifyForceMinTimeZ Offset: 0x5C8
					constexpr auto fl_notify_force_last_time_x = 0x5CC; // Name: m_flNotifyForceLastTimeX Offset: 0x5CC
					constexpr auto fl_notify_force_last_time_y = 0x5D0; // Name: m_flNotifyForceLastTimeY Offset: 0x5D0
					constexpr auto fl_notify_force_last_time_z = 0x5D4; // Name: m_flNotifyForceLastTimeZ Offset: 0x5D4
					constexpr auto b_axis_notified_x = 0x5D8; // Name: m_bAxisNotifiedX Offset: 0x5D8
					constexpr auto b_axis_notified_y = 0x5D9; // Name: m_bAxisNotifiedY Offset: 0x5D9
					constexpr auto b_axis_notified_z = 0x5DA; // Name: m_bAxisNotifiedZ Offset: 0x5DA
					constexpr auto n_angular_motion_x = 0x5DC; // Name: m_nAngularMotionX Offset: 0x5DC
					constexpr auto n_angular_motion_y = 0x5E0; // Name: m_nAngularMotionY Offset: 0x5E0
					constexpr auto n_angular_motion_z = 0x5E4; // Name: m_nAngularMotionZ Offset: 0x5E4
					constexpr auto fl_angular_frequency_x = 0x5E8; // Name: m_flAngularFrequencyX Offset: 0x5E8
					constexpr auto fl_angular_frequency_y = 0x5EC; // Name: m_flAngularFrequencyY Offset: 0x5EC
					constexpr auto fl_angular_frequency_z = 0x5F0; // Name: m_flAngularFrequencyZ Offset: 0x5F0
					constexpr auto fl_angular_damping_ratio_x = 0x5F4; // Name: m_flAngularDampingRatioX Offset: 0x5F4
					constexpr auto fl_angular_damping_ratio_y = 0x5F8; // Name: m_flAngularDampingRatioY Offset: 0x5F8
					constexpr auto fl_angular_damping_ratio_z = 0x5FC; // Name: m_flAngularDampingRatioZ Offset: 0x5FC
					constexpr auto fl_max_angular_impulse_x = 0x600; // Name: m_flMaxAngularImpulseX Offset: 0x600
					constexpr auto fl_max_angular_impulse_y = 0x604; // Name: m_flMaxAngularImpulseY Offset: 0x604
					constexpr auto fl_max_angular_impulse_z = 0x608; // Name: m_flMaxAngularImpulseZ Offset: 0x608
					constexpr auto notify_force_reached_x = 0x610; // Name: m_NotifyForceReachedX Offset: 0x610
					constexpr auto notify_force_reached_y = 0x638; // Name: m_NotifyForceReachedY Offset: 0x638
					constexpr auto notify_force_reached_z = 0x660; // Name: m_NotifyForceReachedZ Offset: 0x660
				} // namespace CGenericConstraint

				namespace CEnvInstructorVRHint {
					constexpr auto isz_name = 0x4E0; // Name: m_iszName Offset: 0x4E0
					constexpr auto isz_hint_target_entity = 0x4E8; // Name: m_iszHintTargetEntity Offset: 0x4E8
					constexpr auto i_timeout = 0x4F0; // Name: m_iTimeout Offset: 0x4F0
					constexpr auto isz_caption = 0x4F8; // Name: m_iszCaption Offset: 0x4F8
					constexpr auto isz_start_sound = 0x500; // Name: m_iszStartSound Offset: 0x500
					constexpr auto i_layout_file_type = 0x508; // Name: m_iLayoutFileType Offset: 0x508
					constexpr auto isz_custom_layout_file = 0x510; // Name: m_iszCustomLayoutFile Offset: 0x510
					constexpr auto i_attach_type = 0x518; // Name: m_iAttachType Offset: 0x518
					constexpr auto fl_height_offset = 0x51C; // Name: m_flHeightOffset Offset: 0x51C
				} // namespace CEnvInstructorVRHint

				namespace CSmoothFunc {
					constexpr auto fl_smooth_amplitude = 0x8; // Name: m_flSmoothAmplitude Offset: 0x8
					constexpr auto fl_smooth_bias = 0xC; // Name: m_flSmoothBias Offset: 0xC
					constexpr auto fl_smooth_duration = 0x10; // Name: m_flSmoothDuration Offset: 0x10
					constexpr auto fl_smooth_remaining_time = 0x14; // Name: m_flSmoothRemainingTime Offset: 0x14
					constexpr auto n_smooth_dir = 0x18; // Name: m_nSmoothDir Offset: 0x18
				} // namespace CSmoothFunc

				namespace CWeaponG3SG1 {
				} // namespace CWeaponG3SG1

				namespace CSoundOpvarSetPathCornerEntity {
					constexpr auto fl_dist_min_sqr = 0x6A0; // Name: m_flDistMinSqr Offset: 0x6A0
					constexpr auto fl_dist_max_sqr = 0x6A4; // Name: m_flDistMaxSqr Offset: 0x6A4
					constexpr auto isz_path_corner_entity_name = 0x6A8; // Name: m_iszPathCornerEntityName Offset: 0x6A8
				} // namespace CSoundOpvarSetPathCornerEntity

				namespace CLogicNPCCounterAABB {
					constexpr auto v_distance_outer_mins = 0x820; // Name: m_vDistanceOuterMins Offset: 0x820
					constexpr auto v_distance_outer_maxs = 0x82C; // Name: m_vDistanceOuterMaxs Offset: 0x82C
					constexpr auto v_outer_mins = 0x838; // Name: m_vOuterMins Offset: 0x838
					constexpr auto v_outer_maxs = 0x844; // Name: m_vOuterMaxs Offset: 0x844
				} // namespace CLogicNPCCounterAABB

				namespace CFilterMassGreater {
					constexpr auto f_filter_mass = 0x538; // Name: m_fFilterMass Offset: 0x538
				} // namespace CFilterMassGreater

				namespace CInfoInstructorHintTarget {
				} // namespace CInfoInstructorHintTarget

				namespace CBreachChargeProjectile {
				} // namespace CBreachChargeProjectile

				namespace CRagdollProp {
					constexpr auto ragdoll = 0x9B0; // Name: m_ragdoll Offset: 0x9B0
					constexpr auto b_start_disabled = 0x9E8; // Name: m_bStartDisabled Offset: 0x9E8
					constexpr auto rag_pos = 0x9F0; // Name: m_ragPos Offset: 0x9F0
					constexpr auto rag_angles = 0xA08; // Name: m_ragAngles Offset: 0xA08
					constexpr auto h_ragdoll_source = 0xA20; // Name: m_hRagdollSource Offset: 0xA20
					constexpr auto last_update_tick_count = 0xA24; // Name: m_lastUpdateTickCount Offset: 0xA24
					constexpr auto all_asleep = 0xA28; // Name: m_allAsleep Offset: 0xA28
					constexpr auto b_first_collision_after_launch = 0xA29; // Name: m_bFirstCollisionAfterLaunch Offset: 0xA29
					constexpr auto h_damage_entity = 0xA2C; // Name: m_hDamageEntity Offset: 0xA2C
					constexpr auto h_killer = 0xA30; // Name: m_hKiller Offset: 0xA30
					constexpr auto h_physics_attacker = 0xA34; // Name: m_hPhysicsAttacker Offset: 0xA34
					constexpr auto fl_last_physics_influence_time = 0xA38; // Name: m_flLastPhysicsInfluenceTime Offset: 0xA38
					constexpr auto fl_fade_out_start_time = 0xA3C; // Name: m_flFadeOutStartTime Offset: 0xA3C
					constexpr auto fl_fade_time = 0xA40; // Name: m_flFadeTime Offset: 0xA40
					constexpr auto vec_last_origin = 0xA44; // Name: m_vecLastOrigin Offset: 0xA44
					constexpr auto fl_awake_time = 0xA50; // Name: m_flAwakeTime Offset: 0xA50
					constexpr auto fl_last_origin_change_time = 0xA54; // Name: m_flLastOriginChangeTime Offset: 0xA54
					constexpr auto str_origin_class_name = 0xA58; // Name: m_strOriginClassName Offset: 0xA58
					constexpr auto str_source_class_name = 0xA60; // Name: m_strSourceClassName Offset: 0xA60
					constexpr auto b_has_been_physgunned = 0xA68; // Name: m_bHasBeenPhysgunned Offset: 0xA68
					constexpr auto b_should_teleport_physics = 0xA69; // Name: m_bShouldTeleportPhysics Offset: 0xA69
					constexpr auto fl_blend_weight = 0xA6C; // Name: m_flBlendWeight Offset: 0xA6C
					constexpr auto fl_default_fade_scale = 0xA70; // Name: m_flDefaultFadeScale Offset: 0xA70
					constexpr auto ragdoll_mins = 0xA78; // Name: m_ragdollMins Offset: 0xA78
					constexpr auto ragdoll_maxs = 0xA90; // Name: m_ragdollMaxs Offset: 0xA90
					constexpr auto b_should_delete_activation_record = 0xAA8; // Name: m_bShouldDeleteActivationRecord Offset: 0xAA8
					constexpr auto b_validate_powered_ragdoll_pose = 0xB08; // Name: m_bValidatePoweredRagdollPose Offset: 0xB08
				} // namespace CRagdollProp

				namespace CPulseServerFuncs_Sounds {
				} // namespace CPulseServerFuncs_Sounds

				namespace CTriggerLerpObject {
					constexpr auto isz_lerp_target = 0x960; // Name: m_iszLerpTarget Offset: 0x960
					constexpr auto h_lerp_target = 0x968; // Name: m_hLerpTarget Offset: 0x968
					constexpr auto isz_lerp_target_attachment = 0x970; // Name: m_iszLerpTargetAttachment Offset: 0x970
					constexpr auto h_lerp_target_attachment = 0x978; // Name: m_hLerpTargetAttachment Offset: 0x978
					constexpr auto fl_lerp_duration = 0x97C; // Name: m_flLerpDuration Offset: 0x97C
					constexpr auto b_lerp_restore_move_type = 0x980; // Name: m_bLerpRestoreMoveType Offset: 0x980
					constexpr auto b_single_lerp_object = 0x981; // Name: m_bSingleLerpObject Offset: 0x981
					constexpr auto vec_lerping_objects = 0x988; // Name: m_vecLerpingObjects Offset: 0x988
					constexpr auto isz_lerp_effect = 0x9A0; // Name: m_iszLerpEffect Offset: 0x9A0
					constexpr auto isz_lerp_sound = 0x9A8; // Name: m_iszLerpSound Offset: 0x9A8
					constexpr auto b_attach_touching_object = 0x9B0; // Name: m_bAttachTouchingObject Offset: 0x9B0
					constexpr auto h_entity_to_wait_for_disconnect = 0x9B4; // Name: m_hEntityToWaitForDisconnect Offset: 0x9B4
					constexpr auto on_lerp_started = 0x9B8; // Name: m_OnLerpStarted Offset: 0x9B8
					constexpr auto on_lerp_finished = 0x9E0; // Name: m_OnLerpFinished Offset: 0x9E0
				} // namespace CTriggerLerpObject

				namespace CItemSoda {
				} // namespace CItemSoda

				namespace CMarkupVolumeTagged_Nav {
				} // namespace CMarkupVolumeTagged_Nav

				namespace CBaseToggle {
					constexpr auto toggle_state = 0x790; // Name: m_toggle_state Offset: 0x790
					constexpr auto fl_move_distance = 0x794; // Name: m_flMoveDistance Offset: 0x794
					constexpr auto fl_wait = 0x798; // Name: m_flWait Offset: 0x798
					constexpr auto fl_lip = 0x79C; // Name: m_flLip Offset: 0x79C
					constexpr auto b_always_fire_blocked_outputs = 0x7A0; // Name: m_bAlwaysFireBlockedOutputs Offset: 0x7A0
					constexpr auto vec_position1 = 0x7A4; // Name: m_vecPosition1 Offset: 0x7A4
					constexpr auto vec_position2 = 0x7B0; // Name: m_vecPosition2 Offset: 0x7B0
					constexpr auto vec_move_ang = 0x7BC; // Name: m_vecMoveAng Offset: 0x7BC
					constexpr auto vec_angle1 = 0x7C8; // Name: m_vecAngle1 Offset: 0x7C8
					constexpr auto vec_angle2 = 0x7D4; // Name: m_vecAngle2 Offset: 0x7D4
					constexpr auto fl_height = 0x7E0; // Name: m_flHeight Offset: 0x7E0
					constexpr auto h_activator = 0x7E4; // Name: m_hActivator Offset: 0x7E4
					constexpr auto vec_final_dest = 0x7E8; // Name: m_vecFinalDest Offset: 0x7E8
					constexpr auto vec_final_angle = 0x7F4; // Name: m_vecFinalAngle Offset: 0x7F4
					constexpr auto movement_type = 0x800; // Name: m_movementType Offset: 0x800
					constexpr auto s_master = 0x808; // Name: m_sMaster Offset: 0x808
				} // namespace CBaseToggle

				namespace CCSPointScriptExtensions_CCSWeaponBaseVData {
				} // namespace CCSPointScriptExtensions_CCSWeaponBaseVData

				namespace CPulseServerFuncs {
				} // namespace CPulseServerFuncs

				namespace CEnvDetailController {
					constexpr auto fl_fade_start_dist = 0x4E0; // Name: m_flFadeStartDist Offset: 0x4E0
					constexpr auto fl_fade_end_dist = 0x4E4; // Name: m_flFadeEndDist Offset: 0x4E4
				} // namespace CEnvDetailController

				namespace CEnvSky {
					constexpr auto h_sky_material = 0x790; // Name: m_hSkyMaterial Offset: 0x790
					constexpr auto h_sky_material_lighting_only = 0x798; // Name: m_hSkyMaterialLightingOnly Offset: 0x798
					constexpr auto b_start_disabled = 0x7A0; // Name: m_bStartDisabled Offset: 0x7A0
					constexpr auto v_tint_color = 0x7A1; // Name: m_vTintColor Offset: 0x7A1
					constexpr auto v_tint_color_lighting_only = 0x7A5; // Name: m_vTintColorLightingOnly Offset: 0x7A5
					constexpr auto fl_brightness_scale = 0x7AC; // Name: m_flBrightnessScale Offset: 0x7AC
					constexpr auto n_fog_type = 0x7B0; // Name: m_nFogType Offset: 0x7B0
					constexpr auto fl_fog_min_start = 0x7B4; // Name: m_flFogMinStart Offset: 0x7B4
					constexpr auto fl_fog_min_end = 0x7B8; // Name: m_flFogMinEnd Offset: 0x7B8
					constexpr auto fl_fog_max_start = 0x7BC; // Name: m_flFogMaxStart Offset: 0x7BC
					constexpr auto fl_fog_max_end = 0x7C0; // Name: m_flFogMaxEnd Offset: 0x7C0
					constexpr auto b_enabled = 0x7C4; // Name: m_bEnabled Offset: 0x7C4
				} // namespace CEnvSky

				namespace CTriggerLook {
					constexpr auto h_look_target = 0x988; // Name: m_hLookTarget Offset: 0x988
					constexpr auto fl_field_of_view = 0x98C; // Name: m_flFieldOfView Offset: 0x98C
					constexpr auto fl_look_time = 0x990; // Name: m_flLookTime Offset: 0x990
					constexpr auto fl_look_time_total = 0x994; // Name: m_flLookTimeTotal Offset: 0x994
					constexpr auto fl_look_time_last = 0x998; // Name: m_flLookTimeLast Offset: 0x998
					constexpr auto fl_timeout_duration = 0x99C; // Name: m_flTimeoutDuration Offset: 0x99C
					constexpr auto b_timeout_fired = 0x9A0; // Name: m_bTimeoutFired Offset: 0x9A0
					constexpr auto b_is_looking = 0x9A1; // Name: m_bIsLooking Offset: 0x9A1
					constexpr auto b2_dfov = 0x9A2; // Name: m_b2DFOV Offset: 0x9A2
					constexpr auto b_use_velocity = 0x9A3; // Name: m_bUseVelocity Offset: 0x9A3
					constexpr auto b_test_occlusion = 0x9A4; // Name: m_bTestOcclusion Offset: 0x9A4
					constexpr auto on_timeout = 0x9A8; // Name: m_OnTimeout Offset: 0x9A8
					constexpr auto on_start_look = 0x9D0; // Name: m_OnStartLook Offset: 0x9D0
					constexpr auto on_end_look = 0x9F8; // Name: m_OnEndLook Offset: 0x9F8
				} // namespace CTriggerLook

				namespace CFootstepControl {
					constexpr auto source = 0x960; // Name: m_source Offset: 0x960
					constexpr auto destination = 0x968; // Name: m_destination Offset: 0x968
				} // namespace CFootstepControl

				namespace CInfoSpawnGroupLandmark {
				} // namespace CInfoSpawnGroupLandmark

				namespace CMathRemap {
					constexpr auto fl_in_min = 0x4E0; // Name: m_flInMin Offset: 0x4E0
					constexpr auto fl_in_max = 0x4E4; // Name: m_flInMax Offset: 0x4E4
					constexpr auto fl_out1 = 0x4E8; // Name: m_flOut1 Offset: 0x4E8
					constexpr auto fl_out2 = 0x4EC; // Name: m_flOut2 Offset: 0x4EC
					constexpr auto fl_old_in_value = 0x4F0; // Name: m_flOldInValue Offset: 0x4F0
					constexpr auto b_enabled = 0x4F4; // Name: m_bEnabled Offset: 0x4F4
					constexpr auto out_value = 0x4F8; // Name: m_OutValue Offset: 0x4F8
					constexpr auto on_rose_above_min = 0x520; // Name: m_OnRoseAboveMin Offset: 0x520
					constexpr auto on_rose_above_max = 0x548; // Name: m_OnRoseAboveMax Offset: 0x548
					constexpr auto on_fell_below_min = 0x570; // Name: m_OnFellBelowMin Offset: 0x570
					constexpr auto on_fell_below_max = 0x598; // Name: m_OnFellBelowMax Offset: 0x598
				} // namespace CMathRemap

				namespace CInstructorEventEntity {
					constexpr auto isz_name = 0x4E0; // Name: m_iszName Offset: 0x4E0
					constexpr auto isz_hint_target_entity = 0x4E8; // Name: m_iszHintTargetEntity Offset: 0x4E8
					constexpr auto h_target_player = 0x4F0; // Name: m_hTargetPlayer Offset: 0x4F0
				} // namespace CInstructorEventEntity

				namespace CGradientFog {
					constexpr auto h_gradient_fog_texture = 0x4E0; // Name: m_hGradientFogTexture Offset: 0x4E0
					constexpr auto fl_fog_start_distance = 0x4E8; // Name: m_flFogStartDistance Offset: 0x4E8
					constexpr auto fl_fog_end_distance = 0x4EC; // Name: m_flFogEndDistance Offset: 0x4EC
					constexpr auto b_height_fog_enabled = 0x4F0; // Name: m_bHeightFogEnabled Offset: 0x4F0
					constexpr auto fl_fog_start_height = 0x4F4; // Name: m_flFogStartHeight Offset: 0x4F4
					constexpr auto fl_fog_end_height = 0x4F8; // Name: m_flFogEndHeight Offset: 0x4F8
					constexpr auto fl_far_z = 0x4FC; // Name: m_flFarZ Offset: 0x4FC
					constexpr auto fl_fog_max_opacity = 0x500; // Name: m_flFogMaxOpacity Offset: 0x500
					constexpr auto fl_fog_falloff_exponent = 0x504; // Name: m_flFogFalloffExponent Offset: 0x504
					constexpr auto fl_fog_vertical_exponent = 0x508; // Name: m_flFogVerticalExponent Offset: 0x508
					constexpr auto fog_color = 0x50C; // Name: m_fogColor Offset: 0x50C
					constexpr auto fl_fog_strength = 0x510; // Name: m_flFogStrength Offset: 0x510
					constexpr auto fl_fade_time = 0x514; // Name: m_flFadeTime Offset: 0x514
					constexpr auto b_start_disabled = 0x518; // Name: m_bStartDisabled Offset: 0x518
					constexpr auto b_is_enabled = 0x519; // Name: m_bIsEnabled Offset: 0x519
					constexpr auto b_gradient_fog_needs_textures = 0x51A; // Name: m_bGradientFogNeedsTextures Offset: 0x51A
				} // namespace CGradientFog

				namespace CTriggerVolume {
					constexpr auto i_filter_name = 0x790; // Name: m_iFilterName Offset: 0x790
					constexpr auto h_filter = 0x798; // Name: m_hFilter Offset: 0x798
				} // namespace CTriggerVolume

				namespace CEnvSoundscapeAlias_snd_soundscape {
				} // namespace CEnvSoundscapeAlias_snd_soundscape

				namespace CSoundEventOBBEntity {
					constexpr auto v_mins = 0x598; // Name: m_vMins Offset: 0x598
					constexpr auto v_maxs = 0x5A4; // Name: m_vMaxs Offset: 0x5A4
				} // namespace CSoundEventOBBEntity

				namespace CPulseCell_Step_SetAnimGraphParam {
					constexpr auto param_name = 0x48; // Name: m_ParamName Offset: 0x48
				} // namespace CPulseCell_Step_SetAnimGraphParam

				namespace CInfoInstructorHintHostageRescueZone {
				} // namespace CInfoInstructorHintHostageRescueZone

				namespace CFishPool {
					constexpr auto fish_count = 0x4F0; // Name: m_fishCount Offset: 0x4F0
					constexpr auto max_range = 0x4F4; // Name: m_maxRange Offset: 0x4F4
					constexpr auto swim_depth = 0x4F8; // Name: m_swimDepth Offset: 0x4F8
					constexpr auto water_level = 0x4FC; // Name: m_waterLevel Offset: 0x4FC
					constexpr auto is_dormant = 0x500; // Name: m_isDormant Offset: 0x500
					constexpr auto fishes = 0x508; // Name: m_fishes Offset: 0x508
					constexpr auto vis_timer = 0x520; // Name: m_visTimer Offset: 0x520
				} // namespace CFishPool

				namespace CPointClientCommand {
				} // namespace CPointClientCommand

				namespace CTriggerOnce {
				} // namespace CTriggerOnce

				namespace CFuncVPhysicsClip {
					constexpr auto b_disabled = 0x790; // Name: m_bDisabled Offset: 0x790
				} // namespace CFuncVPhysicsClip

				namespace CCSPlayer_RadioServices {
					constexpr auto fl_got_hostage_talk_timer = 0x40; // Name: m_flGotHostageTalkTimer Offset: 0x40
					constexpr auto fl_defusing_talk_timer = 0x44; // Name: m_flDefusingTalkTimer Offset: 0x44
					constexpr auto fl_c4_plant_talk_timer = 0x48; // Name: m_flC4PlantTalkTimer Offset: 0x48
					constexpr auto fl_radio_token_slots = 0x4C; // Name: m_flRadioTokenSlots Offset: 0x4C
					constexpr auto b_ignore_radio = 0x58; // Name: m_bIgnoreRadio Offset: 0x58
				} // namespace CCSPlayer_RadioServices

				namespace CInstancedSceneEntity {
					constexpr auto h_owner = 0xA40; // Name: m_hOwner Offset: 0xA40
					constexpr auto b_had_owner = 0xA44; // Name: m_bHadOwner Offset: 0xA44
					constexpr auto fl_post_speak_delay = 0xA48; // Name: m_flPostSpeakDelay Offset: 0xA48
					constexpr auto fl_pre_delay = 0xA4C; // Name: m_flPreDelay Offset: 0xA4C
					constexpr auto b_is_background = 0xA50; // Name: m_bIsBackground Offset: 0xA50
					constexpr auto b_remove_on_completion = 0xA51; // Name: m_bRemoveOnCompletion Offset: 0xA51
					constexpr auto h_target = 0xA54; // Name: m_hTarget Offset: 0xA54
				} // namespace CInstancedSceneEntity

				namespace CNullEntity {
				} // namespace CNullEntity

				namespace CEnvHudHint {
					constexpr auto isz_message = 0x4E0; // Name: m_iszMessage Offset: 0x4E0
				} // namespace CEnvHudHint

				namespace CBeam {
					constexpr auto fl_frame_rate = 0x790; // Name: m_flFrameRate Offset: 0x790
					constexpr auto fl_hdrcolor_scale = 0x794; // Name: m_flHDRColorScale Offset: 0x794
					constexpr auto fl_fire_time = 0x798; // Name: m_flFireTime Offset: 0x798
					constexpr auto fl_damage = 0x79C; // Name: m_flDamage Offset: 0x79C
					constexpr auto n_num_beam_ents = 0x7A0; // Name: m_nNumBeamEnts Offset: 0x7A0
					constexpr auto h_base_material = 0x7A8; // Name: m_hBaseMaterial Offset: 0x7A8
					constexpr auto n_halo_index = 0x7B0; // Name: m_nHaloIndex Offset: 0x7B0
					constexpr auto n_beam_type = 0x7B8; // Name: m_nBeamType Offset: 0x7B8
					constexpr auto n_beam_flags = 0x7BC; // Name: m_nBeamFlags Offset: 0x7BC
					constexpr auto h_attach_entity = 0x7C0; // Name: m_hAttachEntity Offset: 0x7C0
					constexpr auto n_attach_index = 0x7E8; // Name: m_nAttachIndex Offset: 0x7E8
					constexpr auto f_width = 0x7F4; // Name: m_fWidth Offset: 0x7F4
					constexpr auto f_end_width = 0x7F8; // Name: m_fEndWidth Offset: 0x7F8
					constexpr auto f_fade_length = 0x7FC; // Name: m_fFadeLength Offset: 0x7FC
					constexpr auto f_halo_scale = 0x800; // Name: m_fHaloScale Offset: 0x800
					constexpr auto f_amplitude = 0x804; // Name: m_fAmplitude Offset: 0x804
					constexpr auto f_start_frame = 0x808; // Name: m_fStartFrame Offset: 0x808
					constexpr auto f_speed = 0x80C; // Name: m_fSpeed Offset: 0x80C
					constexpr auto fl_frame = 0x810; // Name: m_flFrame Offset: 0x810
					constexpr auto n_clip_style = 0x814; // Name: m_nClipStyle Offset: 0x814
					constexpr auto b_turned_off = 0x818; // Name: m_bTurnedOff Offset: 0x818
					constexpr auto vec_end_pos = 0x81C; // Name: m_vecEndPos Offset: 0x81C
					constexpr auto h_end_entity = 0x828; // Name: m_hEndEntity Offset: 0x828
					constexpr auto n_dissolve_type = 0x82C; // Name: m_nDissolveType Offset: 0x82C
				} // namespace CBeam

				namespace CBasePlayerWeaponVData {
					constexpr auto sz_world_model = 0x28; // Name: m_szWorldModel Offset: 0x28
					constexpr auto s_tools_only_owner_model_name = 0x108; // Name: m_sToolsOnlyOwnerModelName Offset: 0x108
					constexpr auto b_built_right_handed = 0x1E8; // Name: m_bBuiltRightHanded Offset: 0x1E8
					constexpr auto b_allow_flipping = 0x1E9; // Name: m_bAllowFlipping Offset: 0x1E9
					constexpr auto s_muzzle_attachment = 0x1F0; // Name: m_sMuzzleAttachment Offset: 0x1F0
					constexpr auto sz_muzzle_flash_particle = 0x210; // Name: m_szMuzzleFlashParticle Offset: 0x210
					constexpr auto b_linked_cooldowns = 0x2F0; // Name: m_bLinkedCooldowns Offset: 0x2F0
					constexpr auto i_flags = 0x2F1; // Name: m_iFlags Offset: 0x2F1
					constexpr auto n_primary_ammo_type = 0x2F2; // Name: m_nPrimaryAmmoType Offset: 0x2F2
					constexpr auto n_secondary_ammo_type = 0x2F3; // Name: m_nSecondaryAmmoType Offset: 0x2F3
					constexpr auto i_max_clip1 = 0x2F4; // Name: m_iMaxClip1 Offset: 0x2F4
					constexpr auto i_max_clip2 = 0x2F8; // Name: m_iMaxClip2 Offset: 0x2F8
					constexpr auto i_default_clip1 = 0x2FC; // Name: m_iDefaultClip1 Offset: 0x2FC
					constexpr auto i_default_clip2 = 0x300; // Name: m_iDefaultClip2 Offset: 0x300
					constexpr auto b_reserve_ammo_as_clips = 0x304; // Name: m_bReserveAmmoAsClips Offset: 0x304
					constexpr auto i_weight = 0x308; // Name: m_iWeight Offset: 0x308
					constexpr auto b_auto_switch_to = 0x30C; // Name: m_bAutoSwitchTo Offset: 0x30C
					constexpr auto b_auto_switch_from = 0x30D; // Name: m_bAutoSwitchFrom Offset: 0x30D
					constexpr auto i_rumble_effect = 0x310; // Name: m_iRumbleEffect Offset: 0x310
					constexpr auto i_slot = 0x314; // Name: m_iSlot Offset: 0x314
					constexpr auto i_position = 0x318; // Name: m_iPosition Offset: 0x318
					constexpr auto a_shoot_sounds = 0x320; // Name: m_aShootSounds Offset: 0x320
				} // namespace CBasePlayerWeaponVData

				namespace CTeam {
					constexpr auto a_player_controllers = 0x4E0; // Name: m_aPlayerControllers Offset: 0x4E0
					constexpr auto a_players = 0x4F8; // Name: m_aPlayers Offset: 0x4F8
					constexpr auto i_score = 0x510; // Name: m_iScore Offset: 0x510
					constexpr auto sz_teamname = 0x514; // Name: m_szTeamname Offset: 0x514
				} // namespace CTeam

				namespace CCSObserverPawn {
				} // namespace CCSObserverPawn

				namespace CModelState {
					constexpr auto h_model = 0xA0; // Name: m_hModel Offset: 0xA0
					constexpr auto model_name = 0xA8; // Name: m_ModelName Offset: 0xA8
					constexpr auto b_client_cloth_creation_suppressed = 0xE8; // Name: m_bClientClothCreationSuppressed Offset: 0xE8
					constexpr auto mesh_group_mask = 0x198; // Name: m_MeshGroupMask Offset: 0x198
					constexpr auto n_ideal_motion_type = 0x21A; // Name: m_nIdealMotionType Offset: 0x21A
					constexpr auto n_force_lod = 0x21B; // Name: m_nForceLOD Offset: 0x21B
					constexpr auto n_cloth_update_flags = 0x21C; // Name: m_nClothUpdateFlags Offset: 0x21C
				} // namespace CModelState

				namespace CTimeline {
					constexpr auto fl_values = 0x10; // Name: m_flValues Offset: 0x10
					constexpr auto n_value_counts = 0x110; // Name: m_nValueCounts Offset: 0x110
					constexpr auto n_bucket_count = 0x210; // Name: m_nBucketCount Offset: 0x210
					constexpr auto fl_interval = 0x214; // Name: m_flInterval Offset: 0x214
					constexpr auto fl_final_value = 0x218; // Name: m_flFinalValue Offset: 0x218
					constexpr auto n_compression_type = 0x21C; // Name: m_nCompressionType Offset: 0x21C
					constexpr auto b_stopped = 0x220; // Name: m_bStopped Offset: 0x220
				} // namespace CTimeline

				namespace CWeaponSG556 {
				} // namespace CWeaponSG556

				namespace CAmbientGeneric {
					constexpr auto radius = 0x4E0; // Name: m_radius Offset: 0x4E0
					constexpr auto fl_max_radius = 0x4E4; // Name: m_flMaxRadius Offset: 0x4E4
					constexpr auto i_sound_level = 0x4E8; // Name: m_iSoundLevel Offset: 0x4E8
					constexpr auto dpv = 0x4EC; // Name: m_dpv Offset: 0x4EC
					constexpr auto f_active = 0x550; // Name: m_fActive Offset: 0x550
					constexpr auto f_looping = 0x551; // Name: m_fLooping Offset: 0x551
					constexpr auto isz_sound = 0x558; // Name: m_iszSound Offset: 0x558
					constexpr auto s_source_ent_name = 0x560; // Name: m_sSourceEntName Offset: 0x560
					constexpr auto h_sound_source = 0x568; // Name: m_hSoundSource Offset: 0x568
					constexpr auto n_sound_source_ent_index = 0x56C; // Name: m_nSoundSourceEntIndex Offset: 0x56C
				} // namespace CAmbientGeneric

				namespace CAI_ChangeHintGroup {
					constexpr auto i_search_type = 0x4E0; // Name: m_iSearchType Offset: 0x4E0
					constexpr auto str_search_name = 0x4E8; // Name: m_strSearchName Offset: 0x4E8
					constexpr auto str_new_hint_group = 0x4F0; // Name: m_strNewHintGroup Offset: 0x4F0
					constexpr auto fl_radius = 0x4F8; // Name: m_flRadius Offset: 0x4F8
				} // namespace CAI_ChangeHintGroup

				namespace CDynamicLight {
					constexpr auto actual_flags = 0x790; // Name: m_ActualFlags Offset: 0x790
					constexpr auto flags = 0x791; // Name: m_Flags Offset: 0x791
					constexpr auto light_style = 0x792; // Name: m_LightStyle Offset: 0x792
					constexpr auto on = 0x793; // Name: m_On Offset: 0x793
					constexpr auto radius = 0x794; // Name: m_Radius Offset: 0x794
					constexpr auto exponent = 0x798; // Name: m_Exponent Offset: 0x798
					constexpr auto inner_angle = 0x79C; // Name: m_InnerAngle Offset: 0x79C
					constexpr auto outer_angle = 0x7A0; // Name: m_OuterAngle Offset: 0x7A0
					constexpr auto spot_radius = 0x7A4; // Name: m_SpotRadius Offset: 0x7A4
				} // namespace CDynamicLight

				namespace CBaseIssue {
					constexpr auto sz_type_string = 0x20; // Name: m_szTypeString Offset: 0x20
					constexpr auto sz_details_string = 0x60; // Name: m_szDetailsString Offset: 0x60
					constexpr auto i_num_yes_votes = 0x164; // Name: m_iNumYesVotes Offset: 0x164
					constexpr auto i_num_no_votes = 0x168; // Name: m_iNumNoVotes Offset: 0x168
					constexpr auto i_num_potential_votes = 0x16C; // Name: m_iNumPotentialVotes Offset: 0x16C
					constexpr auto p_vote_controller = 0x170; // Name: m_pVoteController Offset: 0x170
				} // namespace CBaseIssue

				namespace CRectLight {
					constexpr auto b_show_light = 0xAB0; // Name: m_bShowLight Offset: 0xAB0
				} // namespace CRectLight

				namespace CWeaponP90 {
				} // namespace CWeaponP90

				namespace CPointServerCommand {
				} // namespace CPointServerCommand

				namespace CPointValueRemapper {
					constexpr auto b_disabled = 0x4E0; // Name: m_bDisabled Offset: 0x4E0
					constexpr auto b_update_on_client = 0x4E1; // Name: m_bUpdateOnClient Offset: 0x4E1
					constexpr auto n_input_type = 0x4E4; // Name: m_nInputType Offset: 0x4E4
					constexpr auto isz_remap_line_start_name = 0x4E8; // Name: m_iszRemapLineStartName Offset: 0x4E8
					constexpr auto isz_remap_line_end_name = 0x4F0; // Name: m_iszRemapLineEndName Offset: 0x4F0
					constexpr auto h_remap_line_start = 0x4F8; // Name: m_hRemapLineStart Offset: 0x4F8
					constexpr auto h_remap_line_end = 0x4FC; // Name: m_hRemapLineEnd Offset: 0x4FC
					constexpr auto fl_maximum_change_per_second = 0x500; // Name: m_flMaximumChangePerSecond Offset: 0x500
					constexpr auto fl_disengage_distance = 0x504; // Name: m_flDisengageDistance Offset: 0x504
					constexpr auto fl_engage_distance = 0x508; // Name: m_flEngageDistance Offset: 0x508
					constexpr auto b_requires_use_key = 0x50C; // Name: m_bRequiresUseKey Offset: 0x50C
					constexpr auto n_output_type = 0x510; // Name: m_nOutputType Offset: 0x510
					constexpr auto isz_output_entity_name = 0x518; // Name: m_iszOutputEntityName Offset: 0x518
					constexpr auto isz_output_entity2_name = 0x520; // Name: m_iszOutputEntity2Name Offset: 0x520
					constexpr auto isz_output_entity3_name = 0x528; // Name: m_iszOutputEntity3Name Offset: 0x528
					constexpr auto isz_output_entity4_name = 0x530; // Name: m_iszOutputEntity4Name Offset: 0x530
					constexpr auto h_output_entities = 0x538; // Name: m_hOutputEntities Offset: 0x538
					constexpr auto n_haptics_type = 0x550; // Name: m_nHapticsType Offset: 0x550
					constexpr auto n_momentum_type = 0x554; // Name: m_nMomentumType Offset: 0x554
					constexpr auto fl_momentum_modifier = 0x558; // Name: m_flMomentumModifier Offset: 0x558
					constexpr auto fl_snap_value = 0x55C; // Name: m_flSnapValue Offset: 0x55C
					constexpr auto fl_current_momentum = 0x560; // Name: m_flCurrentMomentum Offset: 0x560
					constexpr auto n_ratchet_type = 0x564; // Name: m_nRatchetType Offset: 0x564
					constexpr auto fl_ratchet_offset = 0x568; // Name: m_flRatchetOffset Offset: 0x568
					constexpr auto fl_input_offset = 0x56C; // Name: m_flInputOffset Offset: 0x56C
					constexpr auto b_engaged = 0x570; // Name: m_bEngaged Offset: 0x570
					constexpr auto b_first_update = 0x571; // Name: m_bFirstUpdate Offset: 0x571
					constexpr auto fl_previous_value = 0x574; // Name: m_flPreviousValue Offset: 0x574
					constexpr auto fl_previous_update_tick_time = 0x578; // Name: m_flPreviousUpdateTickTime Offset: 0x578
					constexpr auto vec_previous_test_point = 0x57C; // Name: m_vecPreviousTestPoint Offset: 0x57C
					constexpr auto h_using_player = 0x588; // Name: m_hUsingPlayer Offset: 0x588
					constexpr auto fl_custom_output_value = 0x58C; // Name: m_flCustomOutputValue Offset: 0x58C
					constexpr auto isz_sound_engage = 0x590; // Name: m_iszSoundEngage Offset: 0x590
					constexpr auto isz_sound_disengage = 0x598; // Name: m_iszSoundDisengage Offset: 0x598
					constexpr auto isz_sound_reached_value_zero = 0x5A0; // Name: m_iszSoundReachedValueZero Offset: 0x5A0
					constexpr auto isz_sound_reached_value_one = 0x5A8; // Name: m_iszSoundReachedValueOne Offset: 0x5A8
					constexpr auto isz_sound_moving_loop = 0x5B0; // Name: m_iszSoundMovingLoop Offset: 0x5B0
					constexpr auto position = 0x5C0; // Name: m_Position Offset: 0x5C0
					constexpr auto position_delta = 0x5E8; // Name: m_PositionDelta Offset: 0x5E8
					constexpr auto on_reached_value_zero = 0x610; // Name: m_OnReachedValueZero Offset: 0x610
					constexpr auto on_reached_value_one = 0x638; // Name: m_OnReachedValueOne Offset: 0x638
					constexpr auto on_reached_value_custom = 0x660; // Name: m_OnReachedValueCustom Offset: 0x660
					constexpr auto on_engage = 0x688; // Name: m_OnEngage Offset: 0x688
					constexpr auto on_disengage = 0x6B0; // Name: m_OnDisengage Offset: 0x6B0
				} // namespace CPointValueRemapper

				namespace CAttributeManager {
					constexpr auto providers = 0x8; // Name: m_Providers Offset: 0x8
					constexpr auto i_reapply_provision_parity = 0x20; // Name: m_iReapplyProvisionParity Offset: 0x20
					constexpr auto h_outer = 0x24; // Name: m_hOuter Offset: 0x24
					constexpr auto b_prevent_loopback = 0x28; // Name: m_bPreventLoopback Offset: 0x28
					constexpr auto provider_type = 0x2C; // Name: m_ProviderType Offset: 0x2C
					constexpr auto cached_results = 0x30; // Name: m_CachedResults Offset: 0x30
				} // namespace CAttributeManager

				namespace CFuncTrain {
					constexpr auto h_current_target = 0x838; // Name: m_hCurrentTarget Offset: 0x838
					constexpr auto activated = 0x83C; // Name: m_activated Offset: 0x83C
					constexpr auto h_enemy = 0x840; // Name: m_hEnemy Offset: 0x840
					constexpr auto fl_block_damage = 0x844; // Name: m_flBlockDamage Offset: 0x844
					constexpr auto fl_next_block_time = 0x848; // Name: m_flNextBlockTime Offset: 0x848
					constexpr auto isz_last_target = 0x850; // Name: m_iszLastTarget Offset: 0x850
				} // namespace CFuncTrain

				namespace CLogicalEntity {
				} // namespace CLogicalEntity

				namespace CAnimGraphNetworkedVariables {
					constexpr auto pred_net_bool_variables = 0x8; // Name: m_PredNetBoolVariables Offset: 0x8
					constexpr auto pred_net_byte_variables = 0x20; // Name: m_PredNetByteVariables Offset: 0x20
					constexpr auto pred_net_uint16_variables = 0x38; // Name: m_PredNetUInt16Variables Offset: 0x38
					constexpr auto pred_net_int_variables = 0x50; // Name: m_PredNetIntVariables Offset: 0x50
					constexpr auto pred_net_uint32_variables = 0x68; // Name: m_PredNetUInt32Variables Offset: 0x68
					constexpr auto pred_net_uint64_variables = 0x80; // Name: m_PredNetUInt64Variables Offset: 0x80
					constexpr auto pred_net_float_variables = 0x98; // Name: m_PredNetFloatVariables Offset: 0x98
					constexpr auto pred_net_vector_variables = 0xB0; // Name: m_PredNetVectorVariables Offset: 0xB0
					constexpr auto pred_net_quaternion_variables = 0xC8; // Name: m_PredNetQuaternionVariables Offset: 0xC8
					constexpr auto pred_net_global_symbol_variables = 0xE0; // Name: m_PredNetGlobalSymbolVariables Offset: 0xE0
					constexpr auto owner_only_pred_net_bool_variables = 0xF8; // Name: m_OwnerOnlyPredNetBoolVariables Offset: 0xF8
					constexpr auto owner_only_pred_net_byte_variables = 0x110; // Name: m_OwnerOnlyPredNetByteVariables Offset: 0x110
					constexpr auto owner_only_pred_net_uint16_variables = 0x128; // Name: m_OwnerOnlyPredNetUInt16Variables Offset: 0x128
					constexpr auto owner_only_pred_net_int_variables = 0x140; // Name: m_OwnerOnlyPredNetIntVariables Offset: 0x140
					constexpr auto owner_only_pred_net_uint32_variables = 0x158; // Name: m_OwnerOnlyPredNetUInt32Variables Offset: 0x158
					constexpr auto owner_only_pred_net_uint64_variables = 0x170; // Name: m_OwnerOnlyPredNetUInt64Variables Offset: 0x170
					constexpr auto owner_only_pred_net_float_variables = 0x188; // Name: m_OwnerOnlyPredNetFloatVariables Offset: 0x188
					constexpr auto owner_only_pred_net_vector_variables = 0x1A0; // Name: m_OwnerOnlyPredNetVectorVariables Offset: 0x1A0
					constexpr auto owner_only_pred_net_quaternion_variables = 0x1B8; // Name: m_OwnerOnlyPredNetQuaternionVariables Offset: 0x1B8
					constexpr auto owner_only_pred_net_global_symbol_variables = 0x1D0; // Name: m_OwnerOnlyPredNetGlobalSymbolVariables Offset: 0x1D0
					constexpr auto n_bool_variables_count = 0x1E8; // Name: m_nBoolVariablesCount Offset: 0x1E8
					constexpr auto n_owner_only_bool_variables_count = 0x1EC; // Name: m_nOwnerOnlyBoolVariablesCount Offset: 0x1EC
					constexpr auto n_random_seed_offset = 0x1F0; // Name: m_nRandomSeedOffset Offset: 0x1F0
					constexpr auto fl_last_teleport_time = 0x1F4; // Name: m_flLastTeleportTime Offset: 0x1F4
				} // namespace CAnimGraphNetworkedVariables

				namespace CEntityDissolve {
					constexpr auto fl_fade_in_start = 0x790; // Name: m_flFadeInStart Offset: 0x790
					constexpr auto fl_fade_in_length = 0x794; // Name: m_flFadeInLength Offset: 0x794
					constexpr auto fl_fade_out_model_start = 0x798; // Name: m_flFadeOutModelStart Offset: 0x798
					constexpr auto fl_fade_out_model_length = 0x79C; // Name: m_flFadeOutModelLength Offset: 0x79C
					constexpr auto fl_fade_out_start = 0x7A0; // Name: m_flFadeOutStart Offset: 0x7A0
					constexpr auto fl_fade_out_length = 0x7A4; // Name: m_flFadeOutLength Offset: 0x7A4
					constexpr auto fl_start_time = 0x7A8; // Name: m_flStartTime Offset: 0x7A8
					constexpr auto n_dissolve_type = 0x7AC; // Name: m_nDissolveType Offset: 0x7AC
					constexpr auto v_dissolver_origin = 0x7B0; // Name: m_vDissolverOrigin Offset: 0x7B0
					constexpr auto n_magnitude = 0x7BC; // Name: m_nMagnitude Offset: 0x7BC
				} // namespace CEntityDissolve

				namespace CPhysicsProp {
					constexpr auto motion_enabled = 0xB60; // Name: m_MotionEnabled Offset: 0xB60
					constexpr auto on_awakened = 0xB88; // Name: m_OnAwakened Offset: 0xB88
					constexpr auto on_awake = 0xBB0; // Name: m_OnAwake Offset: 0xBB0
					constexpr auto on_asleep = 0xBD8; // Name: m_OnAsleep Offset: 0xBD8
					constexpr auto on_player_use = 0xC00; // Name: m_OnPlayerUse Offset: 0xC00
					constexpr auto on_out_of_world = 0xC28; // Name: m_OnOutOfWorld Offset: 0xC28
					constexpr auto on_player_pickup = 0xC50; // Name: m_OnPlayerPickup Offset: 0xC50
					constexpr auto b_force_nav_ignore = 0xC78; // Name: m_bForceNavIgnore Offset: 0xC78
					constexpr auto b_no_navmesh_blocker = 0xC79; // Name: m_bNoNavmeshBlocker Offset: 0xC79
					constexpr auto b_force_npc_exclude = 0xC7A; // Name: m_bForceNpcExclude Offset: 0xC7A
					constexpr auto mass_scale = 0xC7C; // Name: m_massScale Offset: 0xC7C
					constexpr auto inertia_scale = 0xC80; // Name: m_inertiaScale Offset: 0xC80
					constexpr auto buoyancy_scale = 0xC84; // Name: m_buoyancyScale Offset: 0xC84
					constexpr auto damage_type = 0xC88; // Name: m_damageType Offset: 0xC88
					constexpr auto damage_to_enable_motion = 0xC8C; // Name: m_damageToEnableMotion Offset: 0xC8C
					constexpr auto fl_force_to_enable_motion = 0xC90; // Name: m_flForceToEnableMotion Offset: 0xC90
					constexpr auto b_thrown_by_player = 0xC94; // Name: m_bThrownByPlayer Offset: 0xC94
					constexpr auto b_dropped_by_player = 0xC95; // Name: m_bDroppedByPlayer Offset: 0xC95
					constexpr auto b_touched_by_player = 0xC96; // Name: m_bTouchedByPlayer Offset: 0xC96
					constexpr auto b_first_collision_after_launch = 0xC97; // Name: m_bFirstCollisionAfterLaunch Offset: 0xC97
					constexpr auto i_exploitable_by_player = 0xC98; // Name: m_iExploitableByPlayer Offset: 0xC98
					constexpr auto b_has_been_awakened = 0xC9C; // Name: m_bHasBeenAwakened Offset: 0xC9C
					constexpr auto b_is_override_prop = 0xC9D; // Name: m_bIsOverrideProp Offset: 0xC9D
					constexpr auto f_next_check_disable_motion_contacts_time = 0xCA0; // Name: m_fNextCheckDisableMotionContactsTime Offset: 0xCA0
					constexpr auto i_initial_glow_state = 0xCA4; // Name: m_iInitialGlowState Offset: 0xCA4
					constexpr auto n_glow_range = 0xCA8; // Name: m_nGlowRange Offset: 0xCA8
					constexpr auto n_glow_range_min = 0xCAC; // Name: m_nGlowRangeMin Offset: 0xCAC
					constexpr auto glow_color = 0xCB0; // Name: m_glowColor Offset: 0xCB0
					constexpr auto b_should_auto_convert_back_from_debris = 0xCB4; // Name: m_bShouldAutoConvertBackFromDebris Offset: 0xCB4
					constexpr auto b_mute_impact_effects = 0xCB5; // Name: m_bMuteImpactEffects Offset: 0xCB5
					constexpr auto b_accept_damage_from_held_objects = 0xCBF; // Name: m_bAcceptDamageFromHeldObjects Offset: 0xCBF
					constexpr auto b_enable_use_output = 0xCC0; // Name: m_bEnableUseOutput Offset: 0xCC0
					constexpr auto crate_type = 0xCC4; // Name: m_CrateType Offset: 0xCC4
					constexpr auto str_item_class = 0xCC8; // Name: m_strItemClass Offset: 0xCC8
					constexpr auto n_item_count = 0xCE8; // Name: m_nItemCount Offset: 0xCE8
					constexpr auto b_removable_for_ammo_balancing = 0xCF8; // Name: m_bRemovableForAmmoBalancing Offset: 0xCF8
					constexpr auto b_awake = 0xCF9; // Name: m_bAwake Offset: 0xCF9
				} // namespace CPhysicsProp

				namespace CWeaponSCAR20 {
				} // namespace CWeaponSCAR20

				namespace CPlayer_ItemServices {
				} // namespace CPlayer_ItemServices

				namespace CSceneListManager {
					constexpr auto h_list_managers = 0x4E0; // Name: m_hListManagers Offset: 0x4E0
					constexpr auto isz_scenes = 0x4F8; // Name: m_iszScenes Offset: 0x4F8
					constexpr auto h_scenes = 0x578; // Name: m_hScenes Offset: 0x578
				} // namespace CSceneListManager

				namespace CFuncWallToggle {
				} // namespace CFuncWallToggle

				namespace CSensorGrenadeProjectile {
					constexpr auto f_expire_time = 0xB50; // Name: m_fExpireTime Offset: 0xB50
					constexpr auto f_next_detect_player_sound = 0xB54; // Name: m_fNextDetectPlayerSound Offset: 0xB54
					constexpr auto h_display_grenade = 0xB58; // Name: m_hDisplayGrenade Offset: 0xB58
				} // namespace CSensorGrenadeProjectile

				namespace PhysicsRagdollPose_t {
					constexpr auto transforms = 0x8; // Name: m_Transforms Offset: 0x8
					constexpr auto h_owner = 0x20; // Name: m_hOwner Offset: 0x20
				} // namespace PhysicsRagdollPose_t

				namespace CCSGO_WingmanIntroCharacterPosition {
				} // namespace CCSGO_WingmanIntroCharacterPosition

				namespace CLogicNPCCounter {
					constexpr auto on_min_count_all = 0x4E0; // Name: m_OnMinCountAll Offset: 0x4E0
					constexpr auto on_max_count_all = 0x508; // Name: m_OnMaxCountAll Offset: 0x508
					constexpr auto on_factor_all = 0x530; // Name: m_OnFactorAll Offset: 0x530
					constexpr auto on_min_player_dist_all = 0x558; // Name: m_OnMinPlayerDistAll Offset: 0x558
					constexpr auto on_min_count_1 = 0x580; // Name: m_OnMinCount_1 Offset: 0x580
					constexpr auto on_max_count_1 = 0x5A8; // Name: m_OnMaxCount_1 Offset: 0x5A8
					constexpr auto on_factor_1 = 0x5D0; // Name: m_OnFactor_1 Offset: 0x5D0
					constexpr auto on_min_player_dist_1 = 0x5F8; // Name: m_OnMinPlayerDist_1 Offset: 0x5F8
					constexpr auto on_min_count_2 = 0x620; // Name: m_OnMinCount_2 Offset: 0x620
					constexpr auto on_max_count_2 = 0x648; // Name: m_OnMaxCount_2 Offset: 0x648
					constexpr auto on_factor_2 = 0x670; // Name: m_OnFactor_2 Offset: 0x670
					constexpr auto on_min_player_dist_2 = 0x698; // Name: m_OnMinPlayerDist_2 Offset: 0x698
					constexpr auto on_min_count_3 = 0x6C0; // Name: m_OnMinCount_3 Offset: 0x6C0
					constexpr auto on_max_count_3 = 0x6E8; // Name: m_OnMaxCount_3 Offset: 0x6E8
					constexpr auto on_factor_3 = 0x710; // Name: m_OnFactor_3 Offset: 0x710
					constexpr auto on_min_player_dist_3 = 0x738; // Name: m_OnMinPlayerDist_3 Offset: 0x738
					constexpr auto h_source = 0x760; // Name: m_hSource Offset: 0x760
					constexpr auto isz_source_entity_name = 0x768; // Name: m_iszSourceEntityName Offset: 0x768
					constexpr auto fl_distance_max = 0x770; // Name: m_flDistanceMax Offset: 0x770
					constexpr auto b_disabled = 0x774; // Name: m_bDisabled Offset: 0x774
					constexpr auto n_min_count_all = 0x778; // Name: m_nMinCountAll Offset: 0x778
					constexpr auto n_max_count_all = 0x77C; // Name: m_nMaxCountAll Offset: 0x77C
					constexpr auto n_min_factor_all = 0x780; // Name: m_nMinFactorAll Offset: 0x780
					constexpr auto n_max_factor_all = 0x784; // Name: m_nMaxFactorAll Offset: 0x784
					constexpr auto isz_npcclassname_1 = 0x790; // Name: m_iszNPCClassname_1 Offset: 0x790
					constexpr auto n_npcstate_1 = 0x798; // Name: m_nNPCState_1 Offset: 0x798
					constexpr auto b_invert_state_1 = 0x79C; // Name: m_bInvertState_1 Offset: 0x79C
					constexpr auto n_min_count_1 = 0x7A0; // Name: m_nMinCount_1 Offset: 0x7A0
					constexpr auto n_max_count_1 = 0x7A4; // Name: m_nMaxCount_1 Offset: 0x7A4
					constexpr auto n_min_factor_1 = 0x7A8; // Name: m_nMinFactor_1 Offset: 0x7A8
					constexpr auto n_max_factor_1 = 0x7AC; // Name: m_nMaxFactor_1 Offset: 0x7AC
					constexpr auto fl_default_dist_1 = 0x7B4; // Name: m_flDefaultDist_1 Offset: 0x7B4
					constexpr auto isz_npcclassname_2 = 0x7B8; // Name: m_iszNPCClassname_2 Offset: 0x7B8
					constexpr auto n_npcstate_2 = 0x7C0; // Name: m_nNPCState_2 Offset: 0x7C0
					constexpr auto b_invert_state_2 = 0x7C4; // Name: m_bInvertState_2 Offset: 0x7C4
					constexpr auto n_min_count_2 = 0x7C8; // Name: m_nMinCount_2 Offset: 0x7C8
					constexpr auto n_max_count_2 = 0x7CC; // Name: m_nMaxCount_2 Offset: 0x7CC
					constexpr auto n_min_factor_2 = 0x7D0; // Name: m_nMinFactor_2 Offset: 0x7D0
					constexpr auto n_max_factor_2 = 0x7D4; // Name: m_nMaxFactor_2 Offset: 0x7D4
					constexpr auto fl_default_dist_2 = 0x7DC; // Name: m_flDefaultDist_2 Offset: 0x7DC
					constexpr auto isz_npcclassname_3 = 0x7E0; // Name: m_iszNPCClassname_3 Offset: 0x7E0
					constexpr auto n_npcstate_3 = 0x7E8; // Name: m_nNPCState_3 Offset: 0x7E8
					constexpr auto b_invert_state_3 = 0x7EC; // Name: m_bInvertState_3 Offset: 0x7EC
					constexpr auto n_min_count_3 = 0x7F0; // Name: m_nMinCount_3 Offset: 0x7F0
					constexpr auto n_max_count_3 = 0x7F4; // Name: m_nMaxCount_3 Offset: 0x7F4
					constexpr auto n_min_factor_3 = 0x7F8; // Name: m_nMinFactor_3 Offset: 0x7F8
					constexpr auto n_max_factor_3 = 0x7FC; // Name: m_nMaxFactor_3 Offset: 0x7FC
					constexpr auto fl_default_dist_3 = 0x804; // Name: m_flDefaultDist_3 Offset: 0x804
				} // namespace CLogicNPCCounter

				namespace CSMatchStats_t {
					constexpr auto i_enemy5_ks = 0x68; // Name: m_iEnemy5Ks Offset: 0x68
					constexpr auto i_enemy4_ks = 0x6C; // Name: m_iEnemy4Ks Offset: 0x6C
					constexpr auto i_enemy3_ks = 0x70; // Name: m_iEnemy3Ks Offset: 0x70
					constexpr auto i_enemy_knife_kills = 0x74; // Name: m_iEnemyKnifeKills Offset: 0x74
					constexpr auto i_enemy_taser_kills = 0x78; // Name: m_iEnemyTaserKills Offset: 0x78
					constexpr auto i_enemy2_ks = 0x7C; // Name: m_iEnemy2Ks Offset: 0x7C
					constexpr auto i_utility__count = 0x80; // Name: m_iUtility_Count Offset: 0x80
					constexpr auto i_utility__successes = 0x84; // Name: m_iUtility_Successes Offset: 0x84
					constexpr auto i_utility__enemies = 0x88; // Name: m_iUtility_Enemies Offset: 0x88
					constexpr auto i_flash__count = 0x8C; // Name: m_iFlash_Count Offset: 0x8C
					constexpr auto i_flash__successes = 0x90; // Name: m_iFlash_Successes Offset: 0x90
					constexpr auto n_health_points_removed_total = 0x94; // Name: m_nHealthPointsRemovedTotal Offset: 0x94
					constexpr auto n_health_points_dealt_total = 0x98; // Name: m_nHealthPointsDealtTotal Offset: 0x98
					constexpr auto n_shots_fired_total = 0x9C; // Name: m_nShotsFiredTotal Offset: 0x9C
					constexpr auto n_shots_on_target_total = 0xA0; // Name: m_nShotsOnTargetTotal Offset: 0xA0
					constexpr auto i1v1_count = 0xA4; // Name: m_i1v1Count Offset: 0xA4
					constexpr auto i1v1_wins = 0xA8; // Name: m_i1v1Wins Offset: 0xA8
					constexpr auto i1v2_count = 0xAC; // Name: m_i1v2Count Offset: 0xAC
					constexpr auto i1v2_wins = 0xB0; // Name: m_i1v2Wins Offset: 0xB0
					constexpr auto i_entry_count = 0xB4; // Name: m_iEntryCount Offset: 0xB4
					constexpr auto i_entry_wins = 0xB8; // Name: m_iEntryWins Offset: 0xB8
				} // namespace CSMatchStats_t

				namespace CTriggerTeleport {
					constexpr auto i_landmark = 0x960; // Name: m_iLandmark Offset: 0x960
					constexpr auto b_use_landmark_angles = 0x968; // Name: m_bUseLandmarkAngles Offset: 0x968
					constexpr auto b_mirror_player = 0x969; // Name: m_bMirrorPlayer Offset: 0x969
					constexpr auto b_check_dest_if_clear_for_player = 0x96A; // Name: m_bCheckDestIfClearForPlayer Offset: 0x96A
				} // namespace CTriggerTeleport

				namespace CFuncLadderAlias_func_useableladder {
				} // namespace CFuncLadderAlias_func_useableladder

				namespace CScriptedSequence {
					constexpr auto isz_entry = 0x4E0; // Name: m_iszEntry Offset: 0x4E0
					constexpr auto isz_pre_idle = 0x4E8; // Name: m_iszPreIdle Offset: 0x4E8
					constexpr auto isz_play = 0x4F0; // Name: m_iszPlay Offset: 0x4F0
					constexpr auto isz_post_idle = 0x4F8; // Name: m_iszPostIdle Offset: 0x4F8
					constexpr auto isz_modifier_to_add_on_play = 0x500; // Name: m_iszModifierToAddOnPlay Offset: 0x500
					constexpr auto isz_next_script = 0x508; // Name: m_iszNextScript Offset: 0x508
					constexpr auto isz_entity = 0x510; // Name: m_iszEntity Offset: 0x510
					constexpr auto isz_sync_group = 0x518; // Name: m_iszSyncGroup Offset: 0x518
					constexpr auto n_move_to = 0x520; // Name: m_nMoveTo Offset: 0x520
					constexpr auto n_move_to_gait = 0x524; // Name: m_nMoveToGait Offset: 0x524
					constexpr auto n_held_weapon_behavior = 0x528; // Name: m_nHeldWeaponBehavior Offset: 0x528
					constexpr auto b_is_playing_pre_idle = 0x52C; // Name: m_bIsPlayingPreIdle Offset: 0x52C
					constexpr auto b_is_playing_entry = 0x52D; // Name: m_bIsPlayingEntry Offset: 0x52D
					constexpr auto b_is_playing_action = 0x52E; // Name: m_bIsPlayingAction Offset: 0x52E
					constexpr auto b_is_playing_post_idle = 0x52F; // Name: m_bIsPlayingPostIdle Offset: 0x52F
					constexpr auto b_dont_rotate_other = 0x530; // Name: m_bDontRotateOther Offset: 0x530
					constexpr auto b_is_repeatable = 0x531; // Name: m_bIsRepeatable Offset: 0x531
					constexpr auto b_should_leave_corpse = 0x532; // Name: m_bShouldLeaveCorpse Offset: 0x532
					constexpr auto b_start_on_spawn = 0x533; // Name: m_bStartOnSpawn Offset: 0x533
					constexpr auto b_disallow_interrupts = 0x534; // Name: m_bDisallowInterrupts Offset: 0x534
					constexpr auto b_can_override_npcstate = 0x535; // Name: m_bCanOverrideNPCState Offset: 0x535
					constexpr auto b_dont_teleport_at_end = 0x536; // Name: m_bDontTeleportAtEnd Offset: 0x536
					constexpr auto b_high_priority = 0x537; // Name: m_bHighPriority Offset: 0x537
					constexpr auto b_hide_debug_complaints = 0x538; // Name: m_bHideDebugComplaints Offset: 0x538
					constexpr auto b_continue_on_death = 0x539; // Name: m_bContinueOnDeath Offset: 0x539
					constexpr auto b_loop_pre_idle_sequence = 0x53A; // Name: m_bLoopPreIdleSequence Offset: 0x53A
					constexpr auto b_loop_action_sequence = 0x53B; // Name: m_bLoopActionSequence Offset: 0x53B
					constexpr auto b_loop_post_idle_sequence = 0x53C; // Name: m_bLoopPostIdleSequence Offset: 0x53C
					constexpr auto b_synch_post_idles = 0x53D; // Name: m_bSynchPostIdles Offset: 0x53D
					constexpr auto b_ignore_look_at = 0x53E; // Name: m_bIgnoreLookAt Offset: 0x53E
					constexpr auto b_ignore_gravity = 0x53F; // Name: m_bIgnoreGravity Offset: 0x53F
					constexpr auto b_disable_npccollisions = 0x540; // Name: m_bDisableNPCCollisions Offset: 0x540
					constexpr auto b_keep_animgraph_locked_post = 0x541; // Name: m_bKeepAnimgraphLockedPost Offset: 0x541
					constexpr auto b_dont_add_modifiers = 0x542; // Name: m_bDontAddModifiers Offset: 0x542
					constexpr auto fl_radius = 0x544; // Name: m_flRadius Offset: 0x544
					constexpr auto fl_repeat = 0x548; // Name: m_flRepeat Offset: 0x548
					constexpr auto fl_play_anim_fade_in_time = 0x54C; // Name: m_flPlayAnimFadeInTime Offset: 0x54C
					constexpr auto fl_move_interp_time = 0x550; // Name: m_flMoveInterpTime Offset: 0x550
					constexpr auto fl_ang_rate = 0x554; // Name: m_flAngRate Offset: 0x554
					constexpr auto b_wait_until_move_completes_to_start_animation = 0x558; // Name: m_bWaitUntilMoveCompletesToStartAnimation Offset: 0x558
					constexpr auto n_not_ready_sequence_count = 0x55C; // Name: m_nNotReadySequenceCount Offset: 0x55C
					constexpr auto start_time = 0x560; // Name: m_startTime Offset: 0x560
					constexpr auto b_wait_for_begin_sequence = 0x564; // Name: m_bWaitForBeginSequence Offset: 0x564
					constexpr auto saved_effects = 0x568; // Name: m_saved_effects Offset: 0x568
					constexpr auto saved_flags = 0x56C; // Name: m_savedFlags Offset: 0x56C
					constexpr auto saved_collision_group = 0x570; // Name: m_savedCollisionGroup Offset: 0x570
					constexpr auto b_interruptable = 0x574; // Name: m_bInterruptable Offset: 0x574
					constexpr auto sequence_started = 0x575; // Name: m_sequenceStarted Offset: 0x575
					constexpr auto b_position_relative_to_other_entity = 0x576; // Name: m_bPositionRelativeToOtherEntity Offset: 0x576
					constexpr auto h_target_ent = 0x578; // Name: m_hTargetEnt Offset: 0x578
					constexpr auto h_next_cine = 0x57C; // Name: m_hNextCine Offset: 0x57C
					constexpr auto b_thinking = 0x580; // Name: m_bThinking Offset: 0x580
					constexpr auto b_initiated_self_delete = 0x581; // Name: m_bInitiatedSelfDelete Offset: 0x581
					constexpr auto b_is_teleporting_due_to_move_to = 0x582; // Name: m_bIsTeleportingDueToMoveTo Offset: 0x582
					constexpr auto b_allow_custom_interrupt_conditions = 0x583; // Name: m_bAllowCustomInterruptConditions Offset: 0x583
					constexpr auto h_forced_target = 0x584; // Name: m_hForcedTarget Offset: 0x584
					constexpr auto b_dont_cancel_other_sequences = 0x588; // Name: m_bDontCancelOtherSequences Offset: 0x588
					constexpr auto b_force_synch = 0x589; // Name: m_bForceSynch Offset: 0x589
					constexpr auto b_prevent_update_yaw_on_finish = 0x58A; // Name: m_bPreventUpdateYawOnFinish Offset: 0x58A
					constexpr auto b_ensure_on_navmesh_on_finish = 0x58B; // Name: m_bEnsureOnNavmeshOnFinish Offset: 0x58B
					constexpr auto on_death_behavior = 0x58C; // Name: m_onDeathBehavior Offset: 0x58C
					constexpr auto conflict_response = 0x590; // Name: m_ConflictResponse Offset: 0x590
					constexpr auto on_begin_sequence = 0x598; // Name: m_OnBeginSequence Offset: 0x598
					constexpr auto on_action_start_or_loop = 0x5C0; // Name: m_OnActionStartOrLoop Offset: 0x5C0
					constexpr auto on_end_sequence = 0x5E8; // Name: m_OnEndSequence Offset: 0x5E8
					constexpr auto on_post_idle_end_sequence = 0x610; // Name: m_OnPostIdleEndSequence Offset: 0x610
					constexpr auto on_cancel_sequence = 0x638; // Name: m_OnCancelSequence Offset: 0x638
					constexpr auto on_cancel_failed_sequence = 0x660; // Name: m_OnCancelFailedSequence Offset: 0x660
					constexpr auto on_script_event = 0x688; // Name: m_OnScriptEvent Offset: 0x688
					constexpr auto mat_other_to_main = 0x7D0; // Name: m_matOtherToMain Offset: 0x7D0
					constexpr auto h_interaction_main_entity = 0x7F0; // Name: m_hInteractionMainEntity Offset: 0x7F0
					constexpr auto i_player_death_behavior = 0x7F4; // Name: m_iPlayerDeathBehavior Offset: 0x7F4
				} // namespace CScriptedSequence

				namespace CEnvParticleGlow {
					constexpr auto fl_alpha_scale = 0xD08; // Name: m_flAlphaScale Offset: 0xD08
					constexpr auto fl_radius_scale = 0xD0C; // Name: m_flRadiusScale Offset: 0xD0C
					constexpr auto fl_self_illum_scale = 0xD10; // Name: m_flSelfIllumScale Offset: 0xD10
					constexpr auto color_tint = 0xD14; // Name: m_ColorTint Offset: 0xD14
					constexpr auto h_texture_override = 0xD18; // Name: m_hTextureOverride Offset: 0xD18
				} // namespace CEnvParticleGlow

				namespace CTriggerSndSosOpvar {
					constexpr auto h_touching_players = 0x960; // Name: m_hTouchingPlayers Offset: 0x960
					constexpr auto fl_position = 0x978; // Name: m_flPosition Offset: 0x978
					constexpr auto fl_center_size = 0x984; // Name: m_flCenterSize Offset: 0x984
					constexpr auto fl_min_val = 0x988; // Name: m_flMinVal Offset: 0x988
					constexpr auto fl_max_val = 0x98C; // Name: m_flMaxVal Offset: 0x98C
					constexpr auto opvar_name = 0x990; // Name: m_opvarName Offset: 0x990
					constexpr auto stack_name = 0x998; // Name: m_stackName Offset: 0x998
					constexpr auto operator_name = 0x9A0; // Name: m_operatorName Offset: 0x9A0
					constexpr auto b_vol_is2_d = 0x9A8; // Name: m_bVolIs2D Offset: 0x9A8
					constexpr auto opvar_name_char = 0x9A9; // Name: m_opvarNameChar Offset: 0x9A9
					constexpr auto stack_name_char = 0xAA9; // Name: m_stackNameChar Offset: 0xAA9
					constexpr auto operator_name_char = 0xBA9; // Name: m_operatorNameChar Offset: 0xBA9
					constexpr auto vec_norm_pos = 0xCAC; // Name: m_VecNormPos Offset: 0xCAC
					constexpr auto fl_norm_center_size = 0xCB8; // Name: m_flNormCenterSize Offset: 0xCB8
				} // namespace CTriggerSndSosOpvar

				namespace CItemAssaultSuit {
				} // namespace CItemAssaultSuit

				namespace CPulseCell_Outflow_ListenForEntityOutput {
					constexpr auto on_fired = 0x48; // Name: m_OnFired Offset: 0x48
					constexpr auto on_canceled = 0x78; // Name: m_OnCanceled Offset: 0x78
					constexpr auto str_entity_output = 0xA8; // Name: m_strEntityOutput Offset: 0xA8
					constexpr auto str_entity_output_param = 0xB0; // Name: m_strEntityOutputParam Offset: 0xB0
					constexpr auto b_listen_until_canceled = 0xB8; // Name: m_bListenUntilCanceled Offset: 0xB8
				} // namespace CPulseCell_Outflow_ListenForEntityOutput

				namespace CTripWireFire {
				} // namespace CTripWireFire

				namespace CBaseFilter {
					constexpr auto b_negated = 0x4E0; // Name: m_bNegated Offset: 0x4E0
					constexpr auto on_pass = 0x4E8; // Name: m_OnPass Offset: 0x4E8
					constexpr auto on_fail = 0x510; // Name: m_OnFail Offset: 0x510
				} // namespace CBaseFilter

				namespace CCollisionProperty {
					constexpr auto collision_attribute = 0x10; // Name: m_collisionAttribute Offset: 0x10
					constexpr auto vec_mins = 0x40; // Name: m_vecMins Offset: 0x40
					constexpr auto vec_maxs = 0x4C; // Name: m_vecMaxs Offset: 0x4C
					constexpr auto us_solid_flags = 0x5A; // Name: m_usSolidFlags Offset: 0x5A
					constexpr auto n_solid_type = 0x5B; // Name: m_nSolidType Offset: 0x5B
					constexpr auto trigger_bloat = 0x5C; // Name: m_triggerBloat Offset: 0x5C
					constexpr auto n_surround_type = 0x5D; // Name: m_nSurroundType Offset: 0x5D
					constexpr auto collision_group = 0x5E; // Name: m_CollisionGroup Offset: 0x5E
					constexpr auto n_enable_physics = 0x5F; // Name: m_nEnablePhysics Offset: 0x5F
					constexpr auto fl_bounding_radius = 0x60; // Name: m_flBoundingRadius Offset: 0x60
					constexpr auto vec_specified_surrounding_mins = 0x64; // Name: m_vecSpecifiedSurroundingMins Offset: 0x64
					constexpr auto vec_specified_surrounding_maxs = 0x70; // Name: m_vecSpecifiedSurroundingMaxs Offset: 0x70
					constexpr auto vec_surrounding_maxs = 0x7C; // Name: m_vecSurroundingMaxs Offset: 0x7C
					constexpr auto vec_surrounding_mins = 0x88; // Name: m_vecSurroundingMins Offset: 0x88
					constexpr auto v_capsule_center1 = 0x94; // Name: m_vCapsuleCenter1 Offset: 0x94
					constexpr auto v_capsule_center2 = 0xA0; // Name: m_vCapsuleCenter2 Offset: 0xA0
					constexpr auto fl_capsule_radius = 0xAC; // Name: m_flCapsuleRadius Offset: 0xAC
				} // namespace CCollisionProperty

				namespace CRagdollConstraint {
					constexpr auto xmin = 0x558; // Name: m_xmin Offset: 0x558
					constexpr auto xmax = 0x55C; // Name: m_xmax Offset: 0x55C
					constexpr auto ymin = 0x560; // Name: m_ymin Offset: 0x560
					constexpr auto ymax = 0x564; // Name: m_ymax Offset: 0x564
					constexpr auto zmin = 0x568; // Name: m_zmin Offset: 0x568
					constexpr auto zmax = 0x56C; // Name: m_zmax Offset: 0x56C
					constexpr auto xfriction = 0x570; // Name: m_xfriction Offset: 0x570
					constexpr auto yfriction = 0x574; // Name: m_yfriction Offset: 0x574
					constexpr auto zfriction = 0x578; // Name: m_zfriction Offset: 0x578
				} // namespace CRagdollConstraint

				namespace CCSPlayer_DamageReactServices {
				} // namespace CCSPlayer_DamageReactServices

				namespace CWeaponGalilAR {
				} // namespace CWeaponGalilAR

				namespace CBreakableProp {
					constexpr auto cprop_data_component = 0x9F0; // Name: m_CPropDataComponent Offset: 0x9F0
					constexpr auto on_break = 0xA30; // Name: m_OnBreak Offset: 0xA30
					constexpr auto on_health_changed = 0xA58; // Name: m_OnHealthChanged Offset: 0xA58
					constexpr auto on_take_damage = 0xA80; // Name: m_OnTakeDamage Offset: 0xA80
					constexpr auto impact_energy_scale = 0xAA8; // Name: m_impactEnergyScale Offset: 0xAA8
					constexpr auto i_min_health_dmg = 0xAAC; // Name: m_iMinHealthDmg Offset: 0xAAC
					constexpr auto preferred_carry_angles = 0xAB0; // Name: m_preferredCarryAngles Offset: 0xAB0
					constexpr auto fl_pressure_delay = 0xABC; // Name: m_flPressureDelay Offset: 0xABC
					constexpr auto fl_def_burst_scale = 0xAC0; // Name: m_flDefBurstScale Offset: 0xAC0
					constexpr auto v_def_burst_offset = 0xAC4; // Name: m_vDefBurstOffset Offset: 0xAC4
					constexpr auto h_breaker = 0xAD0; // Name: m_hBreaker Offset: 0xAD0
					constexpr auto performance_mode = 0xAD4; // Name: m_PerformanceMode Offset: 0xAD4
					constexpr auto fl_prevent_damage_before_time = 0xAD8; // Name: m_flPreventDamageBeforeTime Offset: 0xAD8
					constexpr auto breakable_contents_type = 0xADC; // Name: m_BreakableContentsType Offset: 0xADC
					constexpr auto str_breakable_contents_prop_group_override = 0xAE0; // Name: m_strBreakableContentsPropGroupOverride Offset: 0xAE0
					constexpr auto str_breakable_contents_particle_override = 0xAE8; // Name: m_strBreakableContentsParticleOverride Offset: 0xAE8
					constexpr auto b_has_break_pieces_or_commands = 0xAF0; // Name: m_bHasBreakPiecesOrCommands Offset: 0xAF0
					constexpr auto explode_damage = 0xAF4; // Name: m_explodeDamage Offset: 0xAF4
					constexpr auto explode_radius = 0xAF8; // Name: m_explodeRadius Offset: 0xAF8
					constexpr auto explosion_delay = 0xB00; // Name: m_explosionDelay Offset: 0xB00
					constexpr auto explosion_buildup_sound = 0xB08; // Name: m_explosionBuildupSound Offset: 0xB08
					constexpr auto explosion_custom_effect = 0xB10; // Name: m_explosionCustomEffect Offset: 0xB10
					constexpr auto explosion_custom_sound = 0xB18; // Name: m_explosionCustomSound Offset: 0xB18
					constexpr auto explosion_modifier = 0xB20; // Name: m_explosionModifier Offset: 0xB20
					constexpr auto h_physics_attacker = 0xB28; // Name: m_hPhysicsAttacker Offset: 0xB28
					constexpr auto fl_last_physics_influence_time = 0xB2C; // Name: m_flLastPhysicsInfluenceTime Offset: 0xB2C
					constexpr auto b_original_block_los = 0xB30; // Name: m_bOriginalBlockLOS Offset: 0xB30
					constexpr auto fl_default_fade_scale = 0xB34; // Name: m_flDefaultFadeScale Offset: 0xB34
					constexpr auto h_last_attacker = 0xB38; // Name: m_hLastAttacker Offset: 0xB38
					constexpr auto h_flare_ent = 0xB3C; // Name: m_hFlareEnt Offset: 0xB3C
					constexpr auto b_use_punt_sound = 0xB40; // Name: m_bUsePuntSound Offset: 0xB40
					constexpr auto isz_punt_sound = 0xB48; // Name: m_iszPuntSound Offset: 0xB48
					constexpr auto no_ghost_collision = 0xB50; // Name: m_noGhostCollision Offset: 0xB50
				} // namespace CBreakableProp

				namespace CEnvProjectedTexture {
					constexpr auto h_target_entity = 0x790; // Name: m_hTargetEntity Offset: 0x790
					constexpr auto b_state = 0x794; // Name: m_bState Offset: 0x794
					constexpr auto b_always_update = 0x795; // Name: m_bAlwaysUpdate Offset: 0x795
					constexpr auto fl_light_fov = 0x798; // Name: m_flLightFOV Offset: 0x798
					constexpr auto b_enable_shadows = 0x79C; // Name: m_bEnableShadows Offset: 0x79C
					constexpr auto b_simple_projection = 0x79D; // Name: m_bSimpleProjection Offset: 0x79D
					constexpr auto b_light_only_target = 0x79E; // Name: m_bLightOnlyTarget Offset: 0x79E
					constexpr auto b_light_world = 0x79F; // Name: m_bLightWorld Offset: 0x79F
					constexpr auto b_camera_space = 0x7A0; // Name: m_bCameraSpace Offset: 0x7A0
					constexpr auto fl_brightness_scale = 0x7A4; // Name: m_flBrightnessScale Offset: 0x7A4
					constexpr auto light_color = 0x7A8; // Name: m_LightColor Offset: 0x7A8
					constexpr auto fl_intensity = 0x7AC; // Name: m_flIntensity Offset: 0x7AC
					constexpr auto fl_linear_attenuation = 0x7B0; // Name: m_flLinearAttenuation Offset: 0x7B0
					constexpr auto fl_quadratic_attenuation = 0x7B4; // Name: m_flQuadraticAttenuation Offset: 0x7B4
					constexpr auto b_volumetric = 0x7B8; // Name: m_bVolumetric Offset: 0x7B8
					constexpr auto fl_noise_strength = 0x7BC; // Name: m_flNoiseStrength Offset: 0x7BC
					constexpr auto fl_flashlight_time = 0x7C0; // Name: m_flFlashlightTime Offset: 0x7C0
					constexpr auto n_num_planes = 0x7C4; // Name: m_nNumPlanes Offset: 0x7C4
					constexpr auto fl_plane_offset = 0x7C8; // Name: m_flPlaneOffset Offset: 0x7C8
					constexpr auto fl_volumetric_intensity = 0x7CC; // Name: m_flVolumetricIntensity Offset: 0x7CC
					constexpr auto fl_color_transition_time = 0x7D0; // Name: m_flColorTransitionTime Offset: 0x7D0
					constexpr auto fl_ambient = 0x7D4; // Name: m_flAmbient Offset: 0x7D4
					constexpr auto spotlight_texture_name = 0x7D8; // Name: m_SpotlightTextureName Offset: 0x7D8
					constexpr auto n_spotlight_texture_frame = 0x9D8; // Name: m_nSpotlightTextureFrame Offset: 0x9D8
					constexpr auto n_shadow_quality = 0x9DC; // Name: m_nShadowQuality Offset: 0x9DC
					constexpr auto fl_near_z = 0x9E0; // Name: m_flNearZ Offset: 0x9E0
					constexpr auto fl_far_z = 0x9E4; // Name: m_flFarZ Offset: 0x9E4
					constexpr auto fl_projection_size = 0x9E8; // Name: m_flProjectionSize Offset: 0x9E8
					constexpr auto fl_rotation = 0x9EC; // Name: m_flRotation Offset: 0x9EC
					constexpr auto b_flip_horizontal = 0x9F0; // Name: m_bFlipHorizontal Offset: 0x9F0
				} // namespace CEnvProjectedTexture

				namespace CDynamicPropAlias_prop_dynamic_override {
				} // namespace CDynamicPropAlias_prop_dynamic_override

				namespace CSplineConstraint {
					constexpr auto v_anchor_offset_restore = 0x5A0; // Name: m_vAnchorOffsetRestore Offset: 0x5A0
				} // namespace CSplineConstraint

				namespace CFuncTimescale {
					constexpr auto fl_desired_timescale = 0x4E0; // Name: m_flDesiredTimescale Offset: 0x4E0
					constexpr auto fl_acceleration = 0x4E4; // Name: m_flAcceleration Offset: 0x4E4
					constexpr auto fl_min_blend_rate = 0x4E8; // Name: m_flMinBlendRate Offset: 0x4E8
					constexpr auto fl_blend_delta_multiplier = 0x4EC; // Name: m_flBlendDeltaMultiplier Offset: 0x4EC
					constexpr auto is_started = 0x4F0; // Name: m_isStarted Offset: 0x4F0
				} // namespace CFuncTimescale

				namespace CCSObserver_ViewModelServices {
				} // namespace CCSObserver_ViewModelServices

				namespace CDynamicPropAlias_dynamic_prop {
				} // namespace CDynamicPropAlias_dynamic_prop

				namespace CLogicScript {
				} // namespace CLogicScript

				namespace ActiveModelConfig_t {
					constexpr auto handle = 0x28; // Name: m_Handle Offset: 0x28
					constexpr auto name = 0x30; // Name: m_Name Offset: 0x30
					constexpr auto associated_entities = 0x38; // Name: m_AssociatedEntities Offset: 0x38
					constexpr auto associated_entity_names = 0x50; // Name: m_AssociatedEntityNames Offset: 0x50
				} // namespace ActiveModelConfig_t

				namespace CPhysicsPropMultiplayer {
				} // namespace CPhysicsPropMultiplayer

				namespace CFlashbang {
				} // namespace CFlashbang

				namespace CSimpleMarkupVolumeTagged {
				} // namespace CSimpleMarkupVolumeTagged

				namespace CServerOnlyEntity {
				} // namespace CServerOnlyEntity

				namespace CConstantForceController {
					constexpr auto linear = 0xC; // Name: m_linear Offset: 0xC
					constexpr auto angular = 0x18; // Name: m_angular Offset: 0x18
					constexpr auto linear_save = 0x24; // Name: m_linearSave Offset: 0x24
					constexpr auto angular_save = 0x30; // Name: m_angularSave Offset: 0x30
				} // namespace CConstantForceController

				namespace CPhysHingeAlias_phys_hinge_local {
				} // namespace CPhysHingeAlias_phys_hinge_local

				namespace CTriggerSave {
					constexpr auto b_force_new_level_unit = 0x960; // Name: m_bForceNewLevelUnit Offset: 0x960
					constexpr auto f_dangerous_timer = 0x964; // Name: m_fDangerousTimer Offset: 0x964
					constexpr auto min_hit_points = 0x968; // Name: m_minHitPoints Offset: 0x968
				} // namespace CTriggerSave

				namespace EngineCountdownTimer {
					constexpr auto duration = 0x8; // Name: m_duration Offset: 0x8
					constexpr auto timestamp = 0xC; // Name: m_timestamp Offset: 0xC
					constexpr auto timescale = 0x10; // Name: m_timescale Offset: 0x10
				} // namespace EngineCountdownTimer

				namespace CTankTargetChange {
					constexpr auto new_target = 0x4E0; // Name: m_newTarget Offset: 0x4E0
					constexpr auto new_target_name = 0x4F0; // Name: m_newTargetName Offset: 0x4F0
				} // namespace CTankTargetChange

				namespace CScriptNavBlocker {
					constexpr auto v_extent = 0x7A0; // Name: m_vExtent Offset: 0x7A0
				} // namespace CScriptNavBlocker

				namespace CFilterContext {
					constexpr auto i_filter_context = 0x538; // Name: m_iFilterContext Offset: 0x538
				} // namespace CFilterContext

				namespace CCSPlayer_BulletServices {
					constexpr auto total_hits_on_server = 0x40; // Name: m_totalHitsOnServer Offset: 0x40
				} // namespace CCSPlayer_BulletServices

				namespace CWeaponMP5SD {
				} // namespace CWeaponMP5SD

				namespace CPhysMotor {
					constexpr auto name_attach = 0x4E0; // Name: m_nameAttach Offset: 0x4E0
					constexpr auto h_attached_object = 0x4E8; // Name: m_hAttachedObject Offset: 0x4E8
					constexpr auto spin_up = 0x4EC; // Name: m_spinUp Offset: 0x4EC
					constexpr auto additional_acceleration = 0x4F0; // Name: m_additionalAcceleration Offset: 0x4F0
					constexpr auto angular_acceleration = 0x4F4; // Name: m_angularAcceleration Offset: 0x4F4
					constexpr auto last_time = 0x4F8; // Name: m_lastTime Offset: 0x4F8
					constexpr auto motor = 0x510; // Name: m_motor Offset: 0x510
				} // namespace CPhysMotor

				namespace CGameChoreoServices {
					constexpr auto h_owner = 0x8; // Name: m_hOwner Offset: 0x8
					constexpr auto h_scripted_sequence = 0xC; // Name: m_hScriptedSequence Offset: 0xC
					constexpr auto script_state = 0x10; // Name: m_scriptState Offset: 0x10
					constexpr auto choreo_state = 0x14; // Name: m_choreoState Offset: 0x14
					constexpr auto fl_time_started_state = 0x18; // Name: m_flTimeStartedState Offset: 0x18
				} // namespace CGameChoreoServices

				namespace CLogicRelay {
					constexpr auto on_trigger = 0x4E0; // Name: m_OnTrigger Offset: 0x4E0
					constexpr auto on_spawn = 0x508; // Name: m_OnSpawn Offset: 0x508
					constexpr auto b_disabled = 0x530; // Name: m_bDisabled Offset: 0x530
					constexpr auto b_wait_for_refire = 0x531; // Name: m_bWaitForRefire Offset: 0x531
					constexpr auto b_trigger_once = 0x532; // Name: m_bTriggerOnce Offset: 0x532
					constexpr auto b_fast_retrigger = 0x533; // Name: m_bFastRetrigger Offset: 0x533
					constexpr auto b_passthough_caller = 0x534; // Name: m_bPassthoughCaller Offset: 0x534
				} // namespace CLogicRelay

				namespace CAK47 {
				} // namespace CAK47

				namespace CSoundOpvarSetPointEntity {
					constexpr auto on_enter = 0x578; // Name: m_OnEnter Offset: 0x578
					constexpr auto on_exit = 0x5A0; // Name: m_OnExit Offset: 0x5A0
					constexpr auto b_auto_disable = 0x5C8; // Name: m_bAutoDisable Offset: 0x5C8
					constexpr auto fl_distance_min = 0x60C; // Name: m_flDistanceMin Offset: 0x60C
					constexpr auto fl_distance_max = 0x610; // Name: m_flDistanceMax Offset: 0x610
					constexpr auto fl_distance_map_min = 0x614; // Name: m_flDistanceMapMin Offset: 0x614
					constexpr auto fl_distance_map_max = 0x618; // Name: m_flDistanceMapMax Offset: 0x618
					constexpr auto fl_occlusion_radius = 0x61C; // Name: m_flOcclusionRadius Offset: 0x61C
					constexpr auto fl_occlusion_min = 0x620; // Name: m_flOcclusionMin Offset: 0x620
					constexpr auto fl_occlusion_max = 0x624; // Name: m_flOcclusionMax Offset: 0x624
					constexpr auto fl_val_set_on_disable = 0x628; // Name: m_flValSetOnDisable Offset: 0x628
					constexpr auto b_set_value_on_disable = 0x62C; // Name: m_bSetValueOnDisable Offset: 0x62C
					constexpr auto b_reloading = 0x62D; // Name: m_bReloading Offset: 0x62D
					constexpr auto n_simulation_mode = 0x630; // Name: m_nSimulationMode Offset: 0x630
					constexpr auto n_visibility_samples = 0x634; // Name: m_nVisibilitySamples Offset: 0x634
					constexpr auto v_dynamic_proxy_point = 0x638; // Name: m_vDynamicProxyPoint Offset: 0x638
					constexpr auto fl_dynamic_maximum_occlusion = 0x644; // Name: m_flDynamicMaximumOcclusion Offset: 0x644
					constexpr auto h_dynamic_entity = 0x648; // Name: m_hDynamicEntity Offset: 0x648
					constexpr auto isz_dynamic_entity_name = 0x650; // Name: m_iszDynamicEntityName Offset: 0x650
					constexpr auto fl_pathing_distance_norm_factor = 0x658; // Name: m_flPathingDistanceNormFactor Offset: 0x658
					constexpr auto v_pathing_source_pos = 0x65C; // Name: m_vPathingSourcePos Offset: 0x65C
					constexpr auto v_pathing_listener_pos = 0x668; // Name: m_vPathingListenerPos Offset: 0x668
					constexpr auto v_pathing_direction = 0x674; // Name: m_vPathingDirection Offset: 0x674
					constexpr auto n_pathing_source_index = 0x680; // Name: m_nPathingSourceIndex Offset: 0x680
				} // namespace CSoundOpvarSetPointEntity

				namespace CChangeLevel {
					constexpr auto s_map_name = 0x960; // Name: m_sMapName Offset: 0x960
					constexpr auto s_landmark_name = 0x968; // Name: m_sLandmarkName Offset: 0x968
					constexpr auto on_change_level = 0x970; // Name: m_OnChangeLevel Offset: 0x970
					constexpr auto b_touched = 0x998; // Name: m_bTouched Offset: 0x998
					constexpr auto b_no_touch = 0x999; // Name: m_bNoTouch Offset: 0x999
					constexpr auto b_new_chapter = 0x99A; // Name: m_bNewChapter Offset: 0x99A
					constexpr auto b_on_change_level_fired = 0x99B; // Name: m_bOnChangeLevelFired Offset: 0x99B
				} // namespace CChangeLevel

				namespace AISound_t {
					constexpr auto n_type = 0x0; // Name: nType Offset: 0x0
					constexpr auto n_flags = 0x2; // Name: nFlags Offset: 0x2
				} // namespace AISound_t

				namespace CModelPointEntity {
				} // namespace CModelPointEntity

				namespace CFuncWater {
					constexpr auto buoyancy_helper = 0x790; // Name: m_BuoyancyHelper Offset: 0x790
				} // namespace CFuncWater

				namespace CPlayer_WaterServices {
				} // namespace CPlayer_WaterServices

				namespace CCSGO_TeamIntroTerroristPosition {
				} // namespace CCSGO_TeamIntroTerroristPosition

				namespace CBtActionMoveTo {
					constexpr auto sz_destination_input_key = 0x60; // Name: m_szDestinationInputKey Offset: 0x60
					constexpr auto sz_hiding_spot_input_key = 0x68; // Name: m_szHidingSpotInputKey Offset: 0x68
					constexpr auto sz_threat_input_key = 0x70; // Name: m_szThreatInputKey Offset: 0x70
					constexpr auto vec_destination = 0x78; // Name: m_vecDestination Offset: 0x78
					constexpr auto b_auto_look_adjust = 0x84; // Name: m_bAutoLookAdjust Offset: 0x84
					constexpr auto b_compute_path = 0x85; // Name: m_bComputePath Offset: 0x85
					constexpr auto fl_damaging_areas_penalty_cost = 0x88; // Name: m_flDamagingAreasPenaltyCost Offset: 0x88
					constexpr auto check_approximate_corners_timer = 0x90; // Name: m_CheckApproximateCornersTimer Offset: 0x90
					constexpr auto check_high_priority_item = 0xA8; // Name: m_CheckHighPriorityItem Offset: 0xA8
					constexpr auto repath_timer = 0xC0; // Name: m_RepathTimer Offset: 0xC0
					constexpr auto fl_arrival_epsilon = 0xD8; // Name: m_flArrivalEpsilon Offset: 0xD8
					constexpr auto fl_additional_arrival_epsilon2_d = 0xDC; // Name: m_flAdditionalArrivalEpsilon2D Offset: 0xDC
					constexpr auto fl_hiding_spot_check_distance_threshold = 0xE0; // Name: m_flHidingSpotCheckDistanceThreshold Offset: 0xE0
					constexpr auto fl_nearest_area_distance_threshold = 0xE4; // Name: m_flNearestAreaDistanceThreshold Offset: 0xE4
				} // namespace CBtActionMoveTo

				namespace CTonemapController2 {
					constexpr auto fl_auto_exposure_min = 0x4E0; // Name: m_flAutoExposureMin Offset: 0x4E0
					constexpr auto fl_auto_exposure_max = 0x4E4; // Name: m_flAutoExposureMax Offset: 0x4E4
					constexpr auto fl_tonemap_percent_target = 0x4E8; // Name: m_flTonemapPercentTarget Offset: 0x4E8
					constexpr auto fl_tonemap_percent_bright_pixels = 0x4EC; // Name: m_flTonemapPercentBrightPixels Offset: 0x4EC
					constexpr auto fl_tonemap_min_avg_lum = 0x4F0; // Name: m_flTonemapMinAvgLum Offset: 0x4F0
					constexpr auto fl_exposure_adaptation_speed_up = 0x4F4; // Name: m_flExposureAdaptationSpeedUp Offset: 0x4F4
					constexpr auto fl_exposure_adaptation_speed_down = 0x4F8; // Name: m_flExposureAdaptationSpeedDown Offset: 0x4F8
					constexpr auto fl_tonemap_evsmoothing_range = 0x4FC; // Name: m_flTonemapEVSmoothingRange Offset: 0x4FC
				} // namespace CTonemapController2

				namespace CWeaponXM1014 {
				} // namespace CWeaponXM1014

				namespace CPlatTrigger {
					constexpr auto p_platform = 0x790; // Name: m_pPlatform Offset: 0x790
				} // namespace CPlatTrigger

				namespace CFilterClass {
					constexpr auto i_filter_class = 0x538; // Name: m_iFilterClass Offset: 0x538
				} // namespace CFilterClass

				namespace CMolotovGrenade {
				} // namespace CMolotovGrenade

				namespace CLightComponent {
					constexpr auto _m_p_chain_entity = 0x38; // Name: __m_pChainEntity Offset: 0x38
					constexpr auto color = 0x75; // Name: m_Color Offset: 0x75
					constexpr auto secondary_color = 0x79; // Name: m_SecondaryColor Offset: 0x79
					constexpr auto fl_brightness = 0x80; // Name: m_flBrightness Offset: 0x80
					constexpr auto fl_brightness_scale = 0x84; // Name: m_flBrightnessScale Offset: 0x84
					constexpr auto fl_brightness_mult = 0x88; // Name: m_flBrightnessMult Offset: 0x88
					constexpr auto fl_range = 0x8C; // Name: m_flRange Offset: 0x8C
					constexpr auto fl_falloff = 0x90; // Name: m_flFalloff Offset: 0x90
					constexpr auto fl_attenuation0 = 0x94; // Name: m_flAttenuation0 Offset: 0x94
					constexpr auto fl_attenuation1 = 0x98; // Name: m_flAttenuation1 Offset: 0x98
					constexpr auto fl_attenuation2 = 0x9C; // Name: m_flAttenuation2 Offset: 0x9C
					constexpr auto fl_theta = 0xA0; // Name: m_flTheta Offset: 0xA0
					constexpr auto fl_phi = 0xA4; // Name: m_flPhi Offset: 0xA4
					constexpr auto h_light_cookie = 0xA8; // Name: m_hLightCookie Offset: 0xA8
					constexpr auto n_cascades = 0xB0; // Name: m_nCascades Offset: 0xB0
					constexpr auto n_cast_shadows = 0xB4; // Name: m_nCastShadows Offset: 0xB4
					constexpr auto n_shadow_width = 0xB8; // Name: m_nShadowWidth Offset: 0xB8
					constexpr auto n_shadow_height = 0xBC; // Name: m_nShadowHeight Offset: 0xBC
					constexpr auto b_render_diffuse = 0xC0; // Name: m_bRenderDiffuse Offset: 0xC0
					constexpr auto n_render_specular = 0xC4; // Name: m_nRenderSpecular Offset: 0xC4
					constexpr auto b_render_transmissive = 0xC8; // Name: m_bRenderTransmissive Offset: 0xC8
					constexpr auto fl_ortho_light_width = 0xCC; // Name: m_flOrthoLightWidth Offset: 0xCC
					constexpr auto fl_ortho_light_height = 0xD0; // Name: m_flOrthoLightHeight Offset: 0xD0
					constexpr auto n_style = 0xD4; // Name: m_nStyle Offset: 0xD4
					constexpr auto pattern = 0xD8; // Name: m_Pattern Offset: 0xD8
					constexpr auto n_cascade_render_static_objects = 0xE0; // Name: m_nCascadeRenderStaticObjects Offset: 0xE0
					constexpr auto fl_shadow_cascade_cross_fade = 0xE4; // Name: m_flShadowCascadeCrossFade Offset: 0xE4
					constexpr auto fl_shadow_cascade_distance_fade = 0xE8; // Name: m_flShadowCascadeDistanceFade Offset: 0xE8
					constexpr auto fl_shadow_cascade_distance0 = 0xEC; // Name: m_flShadowCascadeDistance0 Offset: 0xEC
					constexpr auto fl_shadow_cascade_distance1 = 0xF0; // Name: m_flShadowCascadeDistance1 Offset: 0xF0
					constexpr auto fl_shadow_cascade_distance2 = 0xF4; // Name: m_flShadowCascadeDistance2 Offset: 0xF4
					constexpr auto fl_shadow_cascade_distance3 = 0xF8; // Name: m_flShadowCascadeDistance3 Offset: 0xF8
					constexpr auto n_shadow_cascade_resolution0 = 0xFC; // Name: m_nShadowCascadeResolution0 Offset: 0xFC
					constexpr auto n_shadow_cascade_resolution1 = 0x100; // Name: m_nShadowCascadeResolution1 Offset: 0x100
					constexpr auto n_shadow_cascade_resolution2 = 0x104; // Name: m_nShadowCascadeResolution2 Offset: 0x104
					constexpr auto n_shadow_cascade_resolution3 = 0x108; // Name: m_nShadowCascadeResolution3 Offset: 0x108
					constexpr auto b_uses_baked_shadowing = 0x10C; // Name: m_bUsesBakedShadowing Offset: 0x10C
					constexpr auto n_shadow_priority = 0x110; // Name: m_nShadowPriority Offset: 0x110
					constexpr auto n_baked_shadow_index = 0x114; // Name: m_nBakedShadowIndex Offset: 0x114
					constexpr auto b_render_to_cubemaps = 0x118; // Name: m_bRenderToCubemaps Offset: 0x118
					constexpr auto n_direct_light = 0x11C; // Name: m_nDirectLight Offset: 0x11C
					constexpr auto n_indirect_light = 0x120; // Name: m_nIndirectLight Offset: 0x120
					constexpr auto fl_fade_min_dist = 0x124; // Name: m_flFadeMinDist Offset: 0x124
					constexpr auto fl_fade_max_dist = 0x128; // Name: m_flFadeMaxDist Offset: 0x128
					constexpr auto fl_shadow_fade_min_dist = 0x12C; // Name: m_flShadowFadeMinDist Offset: 0x12C
					constexpr auto fl_shadow_fade_max_dist = 0x130; // Name: m_flShadowFadeMaxDist Offset: 0x130
					constexpr auto b_enabled = 0x134; // Name: m_bEnabled Offset: 0x134
					constexpr auto b_flicker = 0x135; // Name: m_bFlicker Offset: 0x135
					constexpr auto b_precomputed_fields_valid = 0x136; // Name: m_bPrecomputedFieldsValid Offset: 0x136
					constexpr auto v_precomputed_bounds_mins = 0x138; // Name: m_vPrecomputedBoundsMins Offset: 0x138
					constexpr auto v_precomputed_bounds_maxs = 0x144; // Name: m_vPrecomputedBoundsMaxs Offset: 0x144
					constexpr auto v_precomputed_obborigin = 0x150; // Name: m_vPrecomputedOBBOrigin Offset: 0x150
					constexpr auto v_precomputed_obbangles = 0x15C; // Name: m_vPrecomputedOBBAngles Offset: 0x15C
					constexpr auto v_precomputed_obbextent = 0x168; // Name: m_vPrecomputedOBBExtent Offset: 0x168
					constexpr auto fl_precomputed_max_range = 0x174; // Name: m_flPrecomputedMaxRange Offset: 0x174
					constexpr auto n_fog_lighting_mode = 0x178; // Name: m_nFogLightingMode Offset: 0x178
					constexpr auto fl_fog_contribution_stength = 0x17C; // Name: m_flFogContributionStength Offset: 0x17C
					constexpr auto fl_near_clip_plane = 0x180; // Name: m_flNearClipPlane Offset: 0x180
					constexpr auto sky_color = 0x184; // Name: m_SkyColor Offset: 0x184
					constexpr auto fl_sky_intensity = 0x188; // Name: m_flSkyIntensity Offset: 0x188
					constexpr auto sky_ambient_bounce = 0x18C; // Name: m_SkyAmbientBounce Offset: 0x18C
					constexpr auto b_use_secondary_color = 0x190; // Name: m_bUseSecondaryColor Offset: 0x190
					constexpr auto b_mixed_shadows = 0x191; // Name: m_bMixedShadows Offset: 0x191
					constexpr auto fl_light_style_start_time = 0x194; // Name: m_flLightStyleStartTime Offset: 0x194
					constexpr auto fl_capsule_length = 0x198; // Name: m_flCapsuleLength Offset: 0x198
					constexpr auto fl_min_roughness = 0x19C; // Name: m_flMinRoughness Offset: 0x19C
					constexpr auto b_pvs_modify_entity = 0x1B0; // Name: m_bPvsModifyEntity Offset: 0x1B0
				} // namespace CLightComponent

				namespace CCSPlayerPawn {
					constexpr auto p_bullet_services = 0xDD0; // Name: m_pBulletServices Offset: 0xDD0
					constexpr auto p_hostage_services = 0xDD8; // Name: m_pHostageServices Offset: 0xDD8
					constexpr auto p_buy_services = 0xDE0; // Name: m_pBuyServices Offset: 0xDE0
					constexpr auto p_action_tracking_services = 0xDE8; // Name: m_pActionTrackingServices Offset: 0xDE8
					constexpr auto p_radio_services = 0xDF0; // Name: m_pRadioServices Offset: 0xDF0
					constexpr auto p_damage_react_services = 0xDF8; // Name: m_pDamageReactServices Offset: 0xDF8
					constexpr auto n_character_def_index = 0xE00; // Name: m_nCharacterDefIndex Offset: 0xE00
					constexpr auto b_has_female_voice = 0xE02; // Name: m_bHasFemaleVoice Offset: 0xE02
					constexpr auto str_voprefix = 0xE08; // Name: m_strVOPrefix Offset: 0xE08
					constexpr auto sz_last_place_name = 0xE10; // Name: m_szLastPlaceName Offset: 0xE10
					constexpr auto b_in_hostage_reset_zone = 0xED0; // Name: m_bInHostageResetZone Offset: 0xED0
					constexpr auto b_in_buy_zone = 0xED1; // Name: m_bInBuyZone Offset: 0xED1
					constexpr auto touching_buy_zones = 0xED8; // Name: m_TouchingBuyZones Offset: 0xED8
					constexpr auto b_was_in_buy_zone = 0xEF0; // Name: m_bWasInBuyZone Offset: 0xEF0
					constexpr auto b_in_hostage_rescue_zone = 0xEF1; // Name: m_bInHostageRescueZone Offset: 0xEF1
					constexpr auto b_in_bomb_zone = 0xEF2; // Name: m_bInBombZone Offset: 0xEF2
					constexpr auto b_was_in_hostage_rescue_zone = 0xEF3; // Name: m_bWasInHostageRescueZone Offset: 0xEF3
					constexpr auto i_retakes_offering = 0xEF4; // Name: m_iRetakesOffering Offset: 0xEF4
					constexpr auto i_retakes_offering_card = 0xEF8; // Name: m_iRetakesOfferingCard Offset: 0xEF8
					constexpr auto b_retakes_has_defuse_kit = 0xEFC; // Name: m_bRetakesHasDefuseKit Offset: 0xEFC
					constexpr auto b_retakes_mvplast_round = 0xEFD; // Name: m_bRetakesMVPLastRound Offset: 0xEFD
					constexpr auto i_retakes_mvpboost_item = 0xF00; // Name: m_iRetakesMVPBoostItem Offset: 0xF00
					constexpr auto retakes_mvpboost_extra_utility = 0xF04; // Name: m_RetakesMVPBoostExtraUtility Offset: 0xF04
					constexpr auto fl_health_shot_boost_expiration_time = 0xF08; // Name: m_flHealthShotBoostExpirationTime Offset: 0xF08
					constexpr auto fl_landing_time_seconds = 0xF0C; // Name: m_flLandingTimeSeconds Offset: 0xF0C
					constexpr auto aim_punch_angle = 0xF10; // Name: m_aimPunchAngle Offset: 0xF10
					constexpr auto aim_punch_angle_vel = 0xF1C; // Name: m_aimPunchAngleVel Offset: 0xF1C
					constexpr auto aim_punch_tick_base = 0xF28; // Name: m_aimPunchTickBase Offset: 0xF28
					constexpr auto aim_punch_tick_fraction = 0xF2C; // Name: m_aimPunchTickFraction Offset: 0xF2C
					constexpr auto aim_punch_cache = 0xF30; // Name: m_aimPunchCache Offset: 0xF30
					constexpr auto b_is_buy_menu_open = 0xF48; // Name: m_bIsBuyMenuOpen Offset: 0xF48
					constexpr auto x_last_head_bone_transform = 0x15F0; // Name: m_xLastHeadBoneTransform Offset: 0x15F0
					constexpr auto b_last_head_bone_transform_is_valid = 0x1610; // Name: m_bLastHeadBoneTransformIsValid Offset: 0x1610
					constexpr auto last_land_time = 0x1614; // Name: m_lastLandTime Offset: 0x1614
					constexpr auto b_on_ground_last_tick = 0x1618; // Name: m_bOnGroundLastTick Offset: 0x1618
					constexpr auto i_player_locked = 0x161C; // Name: m_iPlayerLocked Offset: 0x161C
					constexpr auto fl_time_of_last_injury = 0x1624; // Name: m_flTimeOfLastInjury Offset: 0x1624
					constexpr auto fl_next_spray_decal_time = 0x1628; // Name: m_flNextSprayDecalTime Offset: 0x1628
					constexpr auto b_next_spray_decal_time_expedited = 0x162C; // Name: m_bNextSprayDecalTimeExpedited Offset: 0x162C
					constexpr auto n_ragdoll_damage_bone = 0x1630; // Name: m_nRagdollDamageBone Offset: 0x1630
					constexpr auto v_ragdoll_damage_force = 0x1634; // Name: m_vRagdollDamageForce Offset: 0x1634
					constexpr auto v_ragdoll_damage_position = 0x1640; // Name: m_vRagdollDamagePosition Offset: 0x1640
					constexpr auto sz_ragdoll_damage_weapon_name = 0x164C; // Name: m_szRagdollDamageWeaponName Offset: 0x164C
					constexpr auto b_ragdoll_damage_headshot = 0x168C; // Name: m_bRagdollDamageHeadshot Offset: 0x168C
					constexpr auto v_ragdoll_server_origin = 0x1690; // Name: m_vRagdollServerOrigin Offset: 0x1690
					constexpr auto econ_gloves = 0x16A0; // Name: m_EconGloves Offset: 0x16A0
					constexpr auto n_econ_gloves_changed = 0x1918; // Name: m_nEconGlovesChanged Offset: 0x1918
					constexpr auto q_death_eye_angles = 0x191C; // Name: m_qDeathEyeAngles Offset: 0x191C
					constexpr auto b_skip_one_head_constraint_update = 0x1928; // Name: m_bSkipOneHeadConstraintUpdate Offset: 0x1928
					constexpr auto b_left_handed = 0x1929; // Name: m_bLeftHanded Offset: 0x1929
					constexpr auto f_switched_handedness_time = 0x192C; // Name: m_fSwitchedHandednessTime Offset: 0x192C
					constexpr auto fl_viewmodel_offset_x = 0x1930; // Name: m_flViewmodelOffsetX Offset: 0x1930
					constexpr auto fl_viewmodel_offset_y = 0x1934; // Name: m_flViewmodelOffsetY Offset: 0x1934
					constexpr auto fl_viewmodel_offset_z = 0x1938; // Name: m_flViewmodelOffsetZ Offset: 0x1938
					constexpr auto fl_viewmodel_fov = 0x193C; // Name: m_flViewmodelFOV Offset: 0x193C
					constexpr auto b_is_walking = 0x1940; // Name: m_bIsWalking Offset: 0x1940
					constexpr auto f_last_given_defuser_time = 0x1944; // Name: m_fLastGivenDefuserTime Offset: 0x1944
					constexpr auto f_last_given_bomb_time = 0x1948; // Name: m_fLastGivenBombTime Offset: 0x1948
					constexpr auto fl_dealt_damage_to_enemy_most_recent_timestamp = 0x194C; // Name: m_flDealtDamageToEnemyMostRecentTimestamp Offset: 0x194C
					constexpr auto i_display_history_bits = 0x1950; // Name: m_iDisplayHistoryBits Offset: 0x1950
					constexpr auto fl_last_attacked_teammate = 0x1954; // Name: m_flLastAttackedTeammate Offset: 0x1954
					constexpr auto allow_auto_follow_time = 0x1958; // Name: m_allowAutoFollowTime Offset: 0x1958
					constexpr auto b_reset_armor_next_spawn = 0x195C; // Name: m_bResetArmorNextSpawn Offset: 0x195C
					constexpr auto n_last_killer_index = 0x1960; // Name: m_nLastKillerIndex Offset: 0x1960
					constexpr auto entity_spotted_state = 0x1968; // Name: m_entitySpottedState Offset: 0x1968
					constexpr auto n_spot_rules = 0x1980; // Name: m_nSpotRules Offset: 0x1980
					constexpr auto b_is_scoped = 0x1984; // Name: m_bIsScoped Offset: 0x1984
					constexpr auto b_resume_zoom = 0x1985; // Name: m_bResumeZoom Offset: 0x1985
					constexpr auto b_is_defusing = 0x1986; // Name: m_bIsDefusing Offset: 0x1986
					constexpr auto b_is_grabbing_hostage = 0x1987; // Name: m_bIsGrabbingHostage Offset: 0x1987
					constexpr auto i_blocking_use_action_in_progress = 0x1988; // Name: m_iBlockingUseActionInProgress Offset: 0x1988
					constexpr auto fl_emit_sound_time = 0x198C; // Name: m_flEmitSoundTime Offset: 0x198C
					constexpr auto b_in_no_defuse_area = 0x1990; // Name: m_bInNoDefuseArea Offset: 0x1990
					constexpr auto i_bomb_site_index = 0x1994; // Name: m_iBombSiteIndex Offset: 0x1994
					constexpr auto n_which_bomb_zone = 0x1998; // Name: m_nWhichBombZone Offset: 0x1998
					constexpr auto b_in_bomb_zone_trigger = 0x199C; // Name: m_bInBombZoneTrigger Offset: 0x199C
					constexpr auto b_was_in_bomb_zone_trigger = 0x199D; // Name: m_bWasInBombZoneTrigger Offset: 0x199D
					constexpr auto i_shots_fired = 0x19A0; // Name: m_iShotsFired Offset: 0x19A0
					constexpr auto fl_flinch_stack = 0x19A4; // Name: m_flFlinchStack Offset: 0x19A4
					constexpr auto fl_velocity_modifier = 0x19A8; // Name: m_flVelocityModifier Offset: 0x19A8
					constexpr auto fl_hit_heading = 0x19AC; // Name: m_flHitHeading Offset: 0x19AC
					constexpr auto n_hit_body_part = 0x19B0; // Name: m_nHitBodyPart Offset: 0x19B0
					constexpr auto vec_total_bullet_force = 0x19B4; // Name: m_vecTotalBulletForce Offset: 0x19B4
					constexpr auto b_wait_for_no_attack = 0x19C0; // Name: m_bWaitForNoAttack Offset: 0x19C0
					constexpr auto ignore_ladder_jump_time = 0x19C4; // Name: m_ignoreLadderJumpTime Offset: 0x19C4
					constexpr auto b_killed_by_headshot = 0x19C8; // Name: m_bKilledByHeadshot Offset: 0x19C8
					constexpr auto last_hit_box = 0x19CC; // Name: m_LastHitBox Offset: 0x19CC
					constexpr auto last_health = 0x19D0; // Name: m_LastHealth Offset: 0x19D0
					constexpr auto p_bot = 0x19D8; // Name: m_pBot Offset: 0x19D8
					constexpr auto b_bot_allow_active = 0x19E0; // Name: m_bBotAllowActive Offset: 0x19E0
					constexpr auto third_person_heading = 0x19E4; // Name: m_thirdPersonHeading Offset: 0x19E4
					constexpr auto fl_slope_drop_offset = 0x19F0; // Name: m_flSlopeDropOffset Offset: 0x19F0
					constexpr auto fl_slope_drop_height = 0x19F4; // Name: m_flSlopeDropHeight Offset: 0x19F4
					constexpr auto v_head_constraint_offset = 0x19F8; // Name: m_vHeadConstraintOffset Offset: 0x19F8
					constexpr auto n_last_pickup_priority = 0x1A04; // Name: m_nLastPickupPriority Offset: 0x1A04
					constexpr auto fl_last_pickup_priority_time = 0x1A08; // Name: m_flLastPickupPriorityTime Offset: 0x1A08
					constexpr auto armor_value = 0x1A0C; // Name: m_ArmorValue Offset: 0x1A0C
					constexpr auto un_current_equipment_value = 0x1A10; // Name: m_unCurrentEquipmentValue Offset: 0x1A10
					constexpr auto un_round_start_equipment_value = 0x1A12; // Name: m_unRoundStartEquipmentValue Offset: 0x1A12
					constexpr auto un_freezetime_end_equipment_value = 0x1A14; // Name: m_unFreezetimeEndEquipmentValue Offset: 0x1A14
					constexpr auto i_last_weapon_fire_usercmd = 0x1A18; // Name: m_iLastWeaponFireUsercmd Offset: 0x1A18
					constexpr auto b_is_spawning = 0x1A1C; // Name: m_bIsSpawning Offset: 0x1A1C
					constexpr auto i_death_flags = 0x1A28; // Name: m_iDeathFlags Offset: 0x1A28
					constexpr auto b_has_death_info = 0x1A2C; // Name: m_bHasDeathInfo Offset: 0x1A2C
					constexpr auto fl_death_info_time = 0x1A30; // Name: m_flDeathInfoTime Offset: 0x1A30
					constexpr auto vec_death_info_origin = 0x1A34; // Name: m_vecDeathInfoOrigin Offset: 0x1A34
					constexpr auto vec_player_patch_econ_indices = 0x1A40; // Name: m_vecPlayerPatchEconIndices Offset: 0x1A40
					constexpr auto gun_game_immunity_color = 0x1A54; // Name: m_GunGameImmunityColor Offset: 0x1A54
					constexpr auto grenade_parameter_stash_time = 0x1A58; // Name: m_grenadeParameterStashTime Offset: 0x1A58
					constexpr auto b_grenade_parameters_stashed = 0x1A5C; // Name: m_bGrenadeParametersStashed Offset: 0x1A5C
					constexpr auto ang_stashed_shoot_angles = 0x1A60; // Name: m_angStashedShootAngles Offset: 0x1A60
					constexpr auto vec_stashed_grenade_throw_position = 0x1A6C; // Name: m_vecStashedGrenadeThrowPosition Offset: 0x1A6C
					constexpr auto vec_stashed_velocity = 0x1A78; // Name: m_vecStashedVelocity Offset: 0x1A78
					constexpr auto ang_shoot_angle_history = 0x1A84; // Name: m_angShootAngleHistory Offset: 0x1A84
					constexpr auto vec_throw_position_history = 0x1A9C; // Name: m_vecThrowPositionHistory Offset: 0x1A9C
					constexpr auto vec_velocity_history = 0x1AB4; // Name: m_vecVelocityHistory Offset: 0x1AB4
					constexpr auto predicted_damage_tags = 0x1AD0; // Name: m_PredictedDamageTags Offset: 0x1AD0
					constexpr auto n_highest_applied_damage_tag_tick = 0x1B20; // Name: m_nHighestAppliedDamageTagTick Offset: 0x1B20
				} // namespace CCSPlayerPawn

				namespace CPointHurt {
					constexpr auto n_damage = 0x4E0; // Name: m_nDamage Offset: 0x4E0
					constexpr auto bits_damage_type = 0x4E4; // Name: m_bitsDamageType Offset: 0x4E4
					constexpr auto fl_radius = 0x4E8; // Name: m_flRadius Offset: 0x4E8
					constexpr auto fl_delay = 0x4EC; // Name: m_flDelay Offset: 0x4EC
					constexpr auto str_target = 0x4F0; // Name: m_strTarget Offset: 0x4F0
					constexpr auto p_activator = 0x4F8; // Name: m_pActivator Offset: 0x4F8
				} // namespace CPointHurt

				namespace CHandleDummy {
				} // namespace CHandleDummy

				namespace CEnvSoundscapeTriggerableAlias_snd_soundscape_triggerable {
				} // namespace CEnvSoundscapeTriggerableAlias_snd_soundscape_triggerable

				namespace CLightOrthoEntity {
				} // namespace CLightOrthoEntity

				namespace CSkyCamera {
					constexpr auto skybox_data = 0x4E0; // Name: m_skyboxData Offset: 0x4E0
					constexpr auto skybox_slot_token = 0x570; // Name: m_skyboxSlotToken Offset: 0x570
					constexpr auto b_use_angles = 0x574; // Name: m_bUseAngles Offset: 0x574
					constexpr auto p_next = 0x578; // Name: m_pNext Offset: 0x578
				} // namespace CSkyCamera

				namespace CGameMoney {
					constexpr auto on_money_spent = 0x7A0; // Name: m_OnMoneySpent Offset: 0x7A0
					constexpr auto on_money_spent_fail = 0x7C8; // Name: m_OnMoneySpentFail Offset: 0x7C8
					constexpr auto n_money = 0x7F0; // Name: m_nMoney Offset: 0x7F0
					constexpr auto str_award_text = 0x7F8; // Name: m_strAwardText Offset: 0x7F8
				} // namespace CGameMoney

				namespace CPlayer_ObserverServices {
					constexpr auto i_observer_mode = 0x40; // Name: m_iObserverMode Offset: 0x40
					constexpr auto h_observer_target = 0x44; // Name: m_hObserverTarget Offset: 0x44
					constexpr auto i_observer_last_mode = 0x48; // Name: m_iObserverLastMode Offset: 0x48
					constexpr auto b_forced_observer_mode = 0x4C; // Name: m_bForcedObserverMode Offset: 0x4C
				} // namespace CPlayer_ObserverServices

				namespace CWeaponZoneRepulsor {
				} // namespace CWeaponZoneRepulsor

				namespace CInfoTargetServerOnly {
				} // namespace CInfoTargetServerOnly

				namespace CPhysImpact {
					constexpr auto damage = 0x4E0; // Name: m_damage Offset: 0x4E0
					constexpr auto distance = 0x4E4; // Name: m_distance Offset: 0x4E4
					constexpr auto direction_entity_name = 0x4E8; // Name: m_directionEntityName Offset: 0x4E8
				} // namespace CPhysImpact

				namespace CEnvGlobal {
					constexpr auto out_counter = 0x4E0; // Name: m_outCounter Offset: 0x4E0
					constexpr auto globalstate = 0x508; // Name: m_globalstate Offset: 0x508
					constexpr auto triggermode = 0x510; // Name: m_triggermode Offset: 0x510
					constexpr auto initialstate = 0x514; // Name: m_initialstate Offset: 0x514
					constexpr auto counter = 0x518; // Name: m_counter Offset: 0x518
				} // namespace CEnvGlobal

				namespace CEnvCombinedLightProbeVolume {
					constexpr auto entity__color = 0x1540; // Name: m_Entity_Color Offset: 0x1540
					constexpr auto entity_fl_brightness = 0x1544; // Name: m_Entity_flBrightness Offset: 0x1544
					constexpr auto entity_h_cubemap_texture = 0x1548; // Name: m_Entity_hCubemapTexture Offset: 0x1548
					constexpr auto entity_b_custom_cubemap_texture = 0x1550; // Name: m_Entity_bCustomCubemapTexture Offset: 0x1550
					constexpr auto entity_h_light_probe_texture = 0x1558; // Name: m_Entity_hLightProbeTexture Offset: 0x1558
					constexpr auto entity_h_light_probe_direct_light_indices_texture = 0x1560; // Name: m_Entity_hLightProbeDirectLightIndicesTexture Offset: 0x1560
					constexpr auto entity_h_light_probe_direct_light_scalars_texture = 0x1568; // Name: m_Entity_hLightProbeDirectLightScalarsTexture Offset: 0x1568
					constexpr auto entity_h_light_probe_direct_light_shadows_texture = 0x1570; // Name: m_Entity_hLightProbeDirectLightShadowsTexture Offset: 0x1570
					constexpr auto entity_v_box_mins = 0x1578; // Name: m_Entity_vBoxMins Offset: 0x1578
					constexpr auto entity_v_box_maxs = 0x1584; // Name: m_Entity_vBoxMaxs Offset: 0x1584
					constexpr auto entity_b_moveable = 0x1590; // Name: m_Entity_bMoveable Offset: 0x1590
					constexpr auto entity_n_handshake = 0x1594; // Name: m_Entity_nHandshake Offset: 0x1594
					constexpr auto entity_n_env_cube_map_array_index = 0x1598; // Name: m_Entity_nEnvCubeMapArrayIndex Offset: 0x1598
					constexpr auto entity_n_priority = 0x159C; // Name: m_Entity_nPriority Offset: 0x159C
					constexpr auto entity_b_start_disabled = 0x15A0; // Name: m_Entity_bStartDisabled Offset: 0x15A0
					constexpr auto entity_fl_edge_fade_dist = 0x15A4; // Name: m_Entity_flEdgeFadeDist Offset: 0x15A4
					constexpr auto entity_v_edge_fade_dists = 0x15A8; // Name: m_Entity_vEdgeFadeDists Offset: 0x15A8
					constexpr auto entity_n_light_probe_size_x = 0x15B4; // Name: m_Entity_nLightProbeSizeX Offset: 0x15B4
					constexpr auto entity_n_light_probe_size_y = 0x15B8; // Name: m_Entity_nLightProbeSizeY Offset: 0x15B8
					constexpr auto entity_n_light_probe_size_z = 0x15BC; // Name: m_Entity_nLightProbeSizeZ Offset: 0x15BC
					constexpr auto entity_n_light_probe_atlas_x = 0x15C0; // Name: m_Entity_nLightProbeAtlasX Offset: 0x15C0
					constexpr auto entity_n_light_probe_atlas_y = 0x15C4; // Name: m_Entity_nLightProbeAtlasY Offset: 0x15C4
					constexpr auto entity_n_light_probe_atlas_z = 0x15C8; // Name: m_Entity_nLightProbeAtlasZ Offset: 0x15C8
					constexpr auto entity_b_enabled = 0x15E1; // Name: m_Entity_bEnabled Offset: 0x15E1
				} // namespace CEnvCombinedLightProbeVolume

				namespace CWeaponM249 {
				} // namespace CWeaponM249

				namespace CFuncVehicleClip {
				} // namespace CFuncVehicleClip

				namespace CSoundAreaEntitySphere {
					constexpr auto fl_radius = 0x500; // Name: m_flRadius Offset: 0x500
				} // namespace CSoundAreaEntitySphere

				namespace CCommentaryViewPosition {
				} // namespace CCommentaryViewPosition

				namespace SequenceHistory_t {
					constexpr auto h_sequence = 0x0; // Name: m_hSequence Offset: 0x0
					constexpr auto fl_seq_start_time = 0x4; // Name: m_flSeqStartTime Offset: 0x4
					constexpr auto fl_seq_fixed_cycle = 0x8; // Name: m_flSeqFixedCycle Offset: 0x8
					constexpr auto n_seq_loop_mode = 0xC; // Name: m_nSeqLoopMode Offset: 0xC
					constexpr auto fl_playback_rate = 0x10; // Name: m_flPlaybackRate Offset: 0x10
					constexpr auto fl_cycles_per_second = 0x14; // Name: m_flCyclesPerSecond Offset: 0x14
				} // namespace SequenceHistory_t

				namespace CPointAngularVelocitySensor {
					constexpr auto h_target_entity = 0x4E0; // Name: m_hTargetEntity Offset: 0x4E0
					constexpr auto fl_threshold = 0x4E4; // Name: m_flThreshold Offset: 0x4E4
					constexpr auto n_last_compare_result = 0x4E8; // Name: m_nLastCompareResult Offset: 0x4E8
					constexpr auto n_last_fire_result = 0x4EC; // Name: m_nLastFireResult Offset: 0x4EC
					constexpr auto fl_fire_time = 0x4F0; // Name: m_flFireTime Offset: 0x4F0
					constexpr auto fl_fire_interval = 0x4F4; // Name: m_flFireInterval Offset: 0x4F4
					constexpr auto fl_last_ang_velocity = 0x4F8; // Name: m_flLastAngVelocity Offset: 0x4F8
					constexpr auto last_orientation = 0x4FC; // Name: m_lastOrientation Offset: 0x4FC
					constexpr auto vec_axis = 0x508; // Name: m_vecAxis Offset: 0x508
					constexpr auto b_use_helper = 0x514; // Name: m_bUseHelper Offset: 0x514
					constexpr auto angular_velocity = 0x518; // Name: m_AngularVelocity Offset: 0x518
					constexpr auto on_less_than = 0x540; // Name: m_OnLessThan Offset: 0x540
					constexpr auto on_less_than_or_equal_to = 0x568; // Name: m_OnLessThanOrEqualTo Offset: 0x568
					constexpr auto on_greater_than = 0x590; // Name: m_OnGreaterThan Offset: 0x590
					constexpr auto on_greater_than_or_equal_to = 0x5B8; // Name: m_OnGreaterThanOrEqualTo Offset: 0x5B8
					constexpr auto on_equal_to = 0x5E0; // Name: m_OnEqualTo Offset: 0x5E0
				} // namespace CPointAngularVelocitySensor

				namespace CMomentaryRotButton {
					constexpr auto position = 0x960; // Name: m_Position Offset: 0x960
					constexpr auto on_unpressed = 0x988; // Name: m_OnUnpressed Offset: 0x988
					constexpr auto on_fully_open = 0x9B0; // Name: m_OnFullyOpen Offset: 0x9B0
					constexpr auto on_fully_closed = 0x9D8; // Name: m_OnFullyClosed Offset: 0x9D8
					constexpr auto on_reached_position = 0xA00; // Name: m_OnReachedPosition Offset: 0xA00
					constexpr auto last_used = 0xA28; // Name: m_lastUsed Offset: 0xA28
					constexpr auto start = 0xA2C; // Name: m_start Offset: 0xA2C
					constexpr auto end = 0xA38; // Name: m_end Offset: 0xA38
					constexpr auto ideal_yaw = 0xA44; // Name: m_IdealYaw Offset: 0xA44
					constexpr auto s_noise = 0xA48; // Name: m_sNoise Offset: 0xA48
					constexpr auto b_update_target = 0xA50; // Name: m_bUpdateTarget Offset: 0xA50
					constexpr auto direction = 0xA54; // Name: m_direction Offset: 0xA54
					constexpr auto return_speed = 0xA58; // Name: m_returnSpeed Offset: 0xA58
					constexpr auto fl_start_position = 0xA5C; // Name: m_flStartPosition Offset: 0xA5C
				} // namespace CMomentaryRotButton

				namespace CMolotovProjectile {
					constexpr auto b_is_inc_grenade = 0xB50; // Name: m_bIsIncGrenade Offset: 0xB50
					constexpr auto b_detonated = 0xB5C; // Name: m_bDetonated Offset: 0xB5C
					constexpr auto still_timer = 0xB60; // Name: m_stillTimer Offset: 0xB60
					constexpr auto b_has_bounced_off_player = 0xC40; // Name: m_bHasBouncedOffPlayer Offset: 0xC40
				} // namespace CMolotovProjectile

				namespace CHostageRescueZoneShim {
				} // namespace CHostageRescueZoneShim

				namespace CPointPulse {
				} // namespace CPointPulse

				namespace CFuncBrush {
					constexpr auto i_solidity = 0x790; // Name: m_iSolidity Offset: 0x790
					constexpr auto i_disabled = 0x794; // Name: m_iDisabled Offset: 0x794
					constexpr auto b_solid_bsp = 0x798; // Name: m_bSolidBsp Offset: 0x798
					constexpr auto isz_excluded_class = 0x7A0; // Name: m_iszExcludedClass Offset: 0x7A0
					constexpr auto b_invert_exclusion = 0x7A8; // Name: m_bInvertExclusion Offset: 0x7A8
					constexpr auto b_scripted_movement = 0x7A9; // Name: m_bScriptedMovement Offset: 0x7A9
				} // namespace CFuncBrush

				namespace CEnvInstructorHint {
					constexpr auto isz_name = 0x4E0; // Name: m_iszName Offset: 0x4E0
					constexpr auto isz_replace__key = 0x4E8; // Name: m_iszReplace_Key Offset: 0x4E8
					constexpr auto isz_hint_target_entity = 0x4F0; // Name: m_iszHintTargetEntity Offset: 0x4F0
					constexpr auto i_timeout = 0x4F8; // Name: m_iTimeout Offset: 0x4F8
					constexpr auto i_display_limit = 0x4FC; // Name: m_iDisplayLimit Offset: 0x4FC
					constexpr auto isz_icon__onscreen = 0x500; // Name: m_iszIcon_Onscreen Offset: 0x500
					constexpr auto isz_icon__offscreen = 0x508; // Name: m_iszIcon_Offscreen Offset: 0x508
					constexpr auto isz_caption = 0x510; // Name: m_iszCaption Offset: 0x510
					constexpr auto isz_activator_caption = 0x518; // Name: m_iszActivatorCaption Offset: 0x518
					constexpr auto color = 0x520; // Name: m_Color Offset: 0x520
					constexpr auto f_icon_offset = 0x524; // Name: m_fIconOffset Offset: 0x524
					constexpr auto f_range = 0x528; // Name: m_fRange Offset: 0x528
					constexpr auto i_pulse_option = 0x52C; // Name: m_iPulseOption Offset: 0x52C
					constexpr auto i_alpha_option = 0x52D; // Name: m_iAlphaOption Offset: 0x52D
					constexpr auto i_shake_option = 0x52E; // Name: m_iShakeOption Offset: 0x52E
					constexpr auto b_static = 0x52F; // Name: m_bStatic Offset: 0x52F
					constexpr auto b_no_offscreen = 0x530; // Name: m_bNoOffscreen Offset: 0x530
					constexpr auto b_force_caption = 0x531; // Name: m_bForceCaption Offset: 0x531
					constexpr auto i_instance_type = 0x534; // Name: m_iInstanceType Offset: 0x534
					constexpr auto b_suppress_rest = 0x538; // Name: m_bSuppressRest Offset: 0x538
					constexpr auto isz_binding = 0x540; // Name: m_iszBinding Offset: 0x540
					constexpr auto b_allow_no_draw_target = 0x548; // Name: m_bAllowNoDrawTarget Offset: 0x548
					constexpr auto b_auto_start = 0x549; // Name: m_bAutoStart Offset: 0x549
					constexpr auto b_local_player_only = 0x54A; // Name: m_bLocalPlayerOnly Offset: 0x54A
				} // namespace CEnvInstructorHint

				namespace CInfoGameEventProxy {
					constexpr auto isz_event_name = 0x4E0; // Name: m_iszEventName Offset: 0x4E0
					constexpr auto fl_range = 0x4E8; // Name: m_flRange Offset: 0x4E8
				} // namespace CInfoGameEventProxy

				namespace CPointCamera {
					constexpr auto fov = 0x4E0; // Name: m_FOV Offset: 0x4E0
					constexpr auto resolution = 0x4E4; // Name: m_Resolution Offset: 0x4E4
					constexpr auto b_fog_enable = 0x4E8; // Name: m_bFogEnable Offset: 0x4E8
					constexpr auto fog_color = 0x4E9; // Name: m_FogColor Offset: 0x4E9
					constexpr auto fl_fog_start = 0x4F0; // Name: m_flFogStart Offset: 0x4F0
					constexpr auto fl_fog_end = 0x4F4; // Name: m_flFogEnd Offset: 0x4F4
					constexpr auto fl_fog_max_density = 0x4F8; // Name: m_flFogMaxDensity Offset: 0x4F8
					constexpr auto b_active = 0x4FC; // Name: m_bActive Offset: 0x4FC
					constexpr auto b_use_screen_aspect_ratio = 0x4FD; // Name: m_bUseScreenAspectRatio Offset: 0x4FD
					constexpr auto fl_aspect_ratio = 0x500; // Name: m_flAspectRatio Offset: 0x500
					constexpr auto b_no_sky = 0x504; // Name: m_bNoSky Offset: 0x504
					constexpr auto f_brightness = 0x508; // Name: m_fBrightness Offset: 0x508
					constexpr auto fl_zfar = 0x50C; // Name: m_flZFar Offset: 0x50C
					constexpr auto fl_znear = 0x510; // Name: m_flZNear Offset: 0x510
					constexpr auto b_can_hltvuse = 0x514; // Name: m_bCanHLTVUse Offset: 0x514
					constexpr auto b_align_with_parent = 0x515; // Name: m_bAlignWithParent Offset: 0x515
					constexpr auto b_dof_enabled = 0x516; // Name: m_bDofEnabled Offset: 0x516
					constexpr auto fl_dof_near_blurry = 0x518; // Name: m_flDofNearBlurry Offset: 0x518
					constexpr auto fl_dof_near_crisp = 0x51C; // Name: m_flDofNearCrisp Offset: 0x51C
					constexpr auto fl_dof_far_crisp = 0x520; // Name: m_flDofFarCrisp Offset: 0x520
					constexpr auto fl_dof_far_blurry = 0x524; // Name: m_flDofFarBlurry Offset: 0x524
					constexpr auto fl_dof_tilt_to_ground = 0x528; // Name: m_flDofTiltToGround Offset: 0x528
					constexpr auto target_fov = 0x52C; // Name: m_TargetFOV Offset: 0x52C
					constexpr auto degrees_per_second = 0x530; // Name: m_DegreesPerSecond Offset: 0x530
					constexpr auto b_is_on = 0x534; // Name: m_bIsOn Offset: 0x534
					constexpr auto p_next = 0x538; // Name: m_pNext Offset: 0x538
				} // namespace CPointCamera

				namespace CCSObserver_ObserverServices {
				} // namespace CCSObserver_ObserverServices

				namespace CPathKeyFrame {
					constexpr auto origin = 0x4E0; // Name: m_Origin Offset: 0x4E0
					constexpr auto angles = 0x4EC; // Name: m_Angles Offset: 0x4EC
					constexpr auto q_angle = 0x500; // Name: m_qAngle Offset: 0x500
					constexpr auto i_next_key = 0x510; // Name: m_iNextKey Offset: 0x510
					constexpr auto fl_next_time = 0x518; // Name: m_flNextTime Offset: 0x518
					constexpr auto p_next_key = 0x520; // Name: m_pNextKey Offset: 0x520
					constexpr auto p_prev_key = 0x528; // Name: m_pPrevKey Offset: 0x528
					constexpr auto fl_move_speed = 0x530; // Name: m_flMoveSpeed Offset: 0x530
				} // namespace CPathKeyFrame

				namespace CCSWeaponBase {
					constexpr auto b_removeable = 0xDA0; // Name: m_bRemoveable Offset: 0xDA0
					constexpr auto fl_fire_sequence_start_time = 0xDA8; // Name: m_flFireSequenceStartTime Offset: 0xDA8
					constexpr auto n_fire_sequence_start_time_change = 0xDAC; // Name: m_nFireSequenceStartTimeChange Offset: 0xDAC
					constexpr auto n_fire_sequence_start_time_ack = 0xDB0; // Name: m_nFireSequenceStartTimeAck Offset: 0xDB0
					constexpr auto e_player_fire_event = 0xDB4; // Name: m_ePlayerFireEvent Offset: 0xDB4
					constexpr auto e_player_fire_event_attack_type = 0xDB8; // Name: m_ePlayerFireEventAttackType Offset: 0xDB8
					constexpr auto seq_idle = 0xDBC; // Name: m_seqIdle Offset: 0xDBC
					constexpr auto seq_fire_primary = 0xDC0; // Name: m_seqFirePrimary Offset: 0xDC0
					constexpr auto seq_fire_secondary = 0xDC4; // Name: m_seqFireSecondary Offset: 0xDC4
					constexpr auto third_person_fire_sequences = 0xDC8; // Name: m_thirdPersonFireSequences Offset: 0xDC8
					constexpr auto h_current_third_person_sequence = 0xDE0; // Name: m_hCurrentThirdPersonSequence Offset: 0xDE0
					constexpr auto n_silencer_bone_index = 0xDE4; // Name: m_nSilencerBoneIndex Offset: 0xDE4
					constexpr auto third_person_sequences = 0xDE8; // Name: m_thirdPersonSequences Offset: 0xDE8
					constexpr auto b_player_ammo_stock_on_pickup = 0xE10; // Name: m_bPlayerAmmoStockOnPickup Offset: 0xE10
					constexpr auto b_require_use_to_touch = 0xE11; // Name: m_bRequireUseToTouch Offset: 0xE11
					constexpr auto i_state = 0xE14; // Name: m_iState Offset: 0xE14
					constexpr auto fl_last_time_in_air = 0xE18; // Name: m_flLastTimeInAir Offset: 0xE18
					constexpr auto fl_last_deploy_time = 0xE1C; // Name: m_flLastDeployTime Offset: 0xE1C
					constexpr auto n_last_empty_sound_cmd_num = 0xE20; // Name: m_nLastEmptySoundCmdNum Offset: 0xE20
					constexpr auto n_view_model_index = 0xE24; // Name: m_nViewModelIndex Offset: 0xE24
					constexpr auto b_reloads_with_clips = 0xE28; // Name: m_bReloadsWithClips Offset: 0xE28
					constexpr auto fl_time_weapon_idle = 0xE48; // Name: m_flTimeWeaponIdle Offset: 0xE48
					constexpr auto b_fire_on_empty = 0xE4C; // Name: m_bFireOnEmpty Offset: 0xE4C
					constexpr auto on_player_pickup = 0xE50; // Name: m_OnPlayerPickup Offset: 0xE50
					constexpr auto weapon_mode = 0xE78; // Name: m_weaponMode Offset: 0xE78
					constexpr auto fl_turning_inaccuracy_delta = 0xE7C; // Name: m_flTurningInaccuracyDelta Offset: 0xE7C
					constexpr auto vec_turning_inaccuracy_eye_dir_last = 0xE80; // Name: m_vecTurningInaccuracyEyeDirLast Offset: 0xE80
					constexpr auto fl_turning_inaccuracy = 0xE8C; // Name: m_flTurningInaccuracy Offset: 0xE8C
					constexpr auto f_accuracy_penalty = 0xE90; // Name: m_fAccuracyPenalty Offset: 0xE90
					constexpr auto fl_last_accuracy_update_time = 0xE94; // Name: m_flLastAccuracyUpdateTime Offset: 0xE94
					constexpr auto f_accuracy_smoothed_for_zoom = 0xE98; // Name: m_fAccuracySmoothedForZoom Offset: 0xE98
					constexpr auto f_scope_zoom_end_time = 0xE9C; // Name: m_fScopeZoomEndTime Offset: 0xE9C
					constexpr auto i_recoil_index = 0xEA0; // Name: m_iRecoilIndex Offset: 0xEA0
					constexpr auto fl_recoil_index = 0xEA4; // Name: m_flRecoilIndex Offset: 0xEA4
					constexpr auto b_burst_mode = 0xEA8; // Name: m_bBurstMode Offset: 0xEA8
					constexpr auto n_postpone_fire_ready_ticks = 0xEAC; // Name: m_nPostponeFireReadyTicks Offset: 0xEAC
					constexpr auto fl_postpone_fire_ready_frac = 0xEB0; // Name: m_flPostponeFireReadyFrac Offset: 0xEB0
					constexpr auto b_in_reload = 0xEB4; // Name: m_bInReload Offset: 0xEB4
					constexpr auto b_reload_visually_complete = 0xEB5; // Name: m_bReloadVisuallyComplete Offset: 0xEB5
					constexpr auto fl_dropped_at_time = 0xEB8; // Name: m_flDroppedAtTime Offset: 0xEB8
					constexpr auto b_is_hauled_back = 0xEBC; // Name: m_bIsHauledBack Offset: 0xEBC
					constexpr auto b_silencer_on = 0xEBD; // Name: m_bSilencerOn Offset: 0xEBD
					constexpr auto fl_time_silencer_switch_complete = 0xEC0; // Name: m_flTimeSilencerSwitchComplete Offset: 0xEC0
					constexpr auto i_original_team_number = 0xEC4; // Name: m_iOriginalTeamNumber Offset: 0xEC4
					constexpr auto i_most_recent_team_number = 0xEC8; // Name: m_iMostRecentTeamNumber Offset: 0xEC8
					constexpr auto b_dropped_near_buy_zone = 0xECC; // Name: m_bDroppedNearBuyZone Offset: 0xECC
					constexpr auto fl_next_attack_render_time_offset = 0xED0; // Name: m_flNextAttackRenderTimeOffset Offset: 0xED0
					constexpr auto b_can_be_picked_up = 0xEE8; // Name: m_bCanBePickedUp Offset: 0xEE8
					constexpr auto b_use_can_override_next_owner_touch_time = 0xEE9; // Name: m_bUseCanOverrideNextOwnerTouchTime Offset: 0xEE9
					constexpr auto next_owner_touch_time = 0xEEC; // Name: m_nextOwnerTouchTime Offset: 0xEEC
					constexpr auto next_prev_owner_touch_time = 0xEF0; // Name: m_nextPrevOwnerTouchTime Offset: 0xEF0
					constexpr auto next_prev_owner_use_time = 0xEF8; // Name: m_nextPrevOwnerUseTime Offset: 0xEF8
					constexpr auto h_prev_owner = 0xEFC; // Name: m_hPrevOwner Offset: 0xEFC
					constexpr auto n_drop_tick = 0xF00; // Name: m_nDropTick Offset: 0xF00
					constexpr auto donated = 0xF24; // Name: m_donated Offset: 0xF24
					constexpr auto f_last_shot_time = 0xF28; // Name: m_fLastShotTime Offset: 0xF28
					constexpr auto b_was_owned_by_ct = 0xF2C; // Name: m_bWasOwnedByCT Offset: 0xF2C
					constexpr auto b_was_owned_by_terrorist = 0xF2D; // Name: m_bWasOwnedByTerrorist Offset: 0xF2D
					constexpr auto b_fired_out_of_ammo_event = 0xF2E; // Name: m_bFiredOutOfAmmoEvent Offset: 0xF2E
					constexpr auto num_remove_unowned_weapon_think = 0xF30; // Name: m_numRemoveUnownedWeaponThink Offset: 0xF30
					constexpr auto iron_sight_controller = 0xF38; // Name: m_IronSightController Offset: 0xF38
					constexpr auto i_iron_sight_mode = 0xF50; // Name: m_iIronSightMode Offset: 0xF50
					constexpr auto fl_last_lostrace_failure_time = 0xF54; // Name: m_flLastLOSTraceFailureTime Offset: 0xF54
					constexpr auto i_num_empty_attacks = 0xF58; // Name: m_iNumEmptyAttacks Offset: 0xF58
					constexpr auto fl_wat_tick_offset = 0xF5C; // Name: m_flWatTickOffset Offset: 0xF5C
				} // namespace CCSWeaponBase

				namespace CAttributeList {
					constexpr auto attributes = 0x8; // Name: m_Attributes Offset: 0x8
					constexpr auto p_manager = 0x58; // Name: m_pManager Offset: 0x58
				} // namespace CAttributeList

				namespace CRetakeGameRules {
					constexpr auto n_match_seed = 0xF8; // Name: m_nMatchSeed Offset: 0xF8
					constexpr auto b_blockers_present = 0xFC; // Name: m_bBlockersPresent Offset: 0xFC
					constexpr auto b_round_in_progress = 0xFD; // Name: m_bRoundInProgress Offset: 0xFD
					constexpr auto i_first_second_half_round = 0x100; // Name: m_iFirstSecondHalfRound Offset: 0x100
					constexpr auto i_bomb_site = 0x104; // Name: m_iBombSite Offset: 0x104
				} // namespace CRetakeGameRules

				namespace CMultiplayRules {
				} // namespace CMultiplayRules

				namespace CWeaponRevolver {
				} // namespace CWeaponRevolver

				namespace CEnvSoundscape {
					constexpr auto on_play = 0x4E0; // Name: m_OnPlay Offset: 0x4E0
					constexpr auto fl_radius = 0x508; // Name: m_flRadius Offset: 0x508
					constexpr auto sound_event_name = 0x510; // Name: m_soundEventName Offset: 0x510
					constexpr auto b_override_with_event = 0x518; // Name: m_bOverrideWithEvent Offset: 0x518
					constexpr auto soundscape_index = 0x51C; // Name: m_soundscapeIndex Offset: 0x51C
					constexpr auto soundscape_entity_list_id = 0x520; // Name: m_soundscapeEntityListId Offset: 0x520
					constexpr auto position_names = 0x528; // Name: m_positionNames Offset: 0x528
					constexpr auto h_proxy_soundscape = 0x568; // Name: m_hProxySoundscape Offset: 0x568
					constexpr auto b_disabled = 0x56C; // Name: m_bDisabled Offset: 0x56C
					constexpr auto soundscape_name = 0x570; // Name: m_soundscapeName Offset: 0x570
					constexpr auto sound_event_hash = 0x578; // Name: m_soundEventHash Offset: 0x578
				} // namespace CEnvSoundscape

				namespace COrnamentProp {
					constexpr auto initial_owner = 0xC58; // Name: m_initialOwner Offset: 0xC58
				} // namespace COrnamentProp

				namespace CFuncPropRespawnZone {
				} // namespace CFuncPropRespawnZone

				namespace CLogicGameEvent {
					constexpr auto isz_event_name = 0x4E0; // Name: m_iszEventName Offset: 0x4E0
				} // namespace CLogicGameEvent

				namespace CEnvMuzzleFlash {
					constexpr auto fl_scale = 0x4E0; // Name: m_flScale Offset: 0x4E0
					constexpr auto isz_parent_attachment = 0x4E8; // Name: m_iszParentAttachment Offset: 0x4E8
				} // namespace CEnvMuzzleFlash

				namespace CMapVetoPickController {
					constexpr auto b_played_intro_vcd = 0x4E0; // Name: m_bPlayedIntroVcd Offset: 0x4E0
					constexpr auto b_need_to_play_five_seconds_remaining = 0x4E1; // Name: m_bNeedToPlayFiveSecondsRemaining Offset: 0x4E1
					constexpr auto dbl_pre_match_draft_sequence_time = 0x500; // Name: m_dblPreMatchDraftSequenceTime Offset: 0x500
					constexpr auto b_pre_match_draft_state_changed = 0x508; // Name: m_bPreMatchDraftStateChanged Offset: 0x508
					constexpr auto n_draft_type = 0x50C; // Name: m_nDraftType Offset: 0x50C
					constexpr auto n_team_winning_coin_toss = 0x510; // Name: m_nTeamWinningCoinToss Offset: 0x510
					constexpr auto n_team_with_first_choice = 0x514; // Name: m_nTeamWithFirstChoice Offset: 0x514
					constexpr auto n_vote_map_ids_list = 0x614; // Name: m_nVoteMapIdsList Offset: 0x614
					constexpr auto n_account_ids = 0x630; // Name: m_nAccountIDs Offset: 0x630
					constexpr auto n_map_id0 = 0x730; // Name: m_nMapId0 Offset: 0x730
					constexpr auto n_map_id1 = 0x830; // Name: m_nMapId1 Offset: 0x830
					constexpr auto n_map_id2 = 0x930; // Name: m_nMapId2 Offset: 0x930
					constexpr auto n_map_id3 = 0xA30; // Name: m_nMapId3 Offset: 0xA30
					constexpr auto n_map_id4 = 0xB30; // Name: m_nMapId4 Offset: 0xB30
					constexpr auto n_map_id5 = 0xC30; // Name: m_nMapId5 Offset: 0xC30
					constexpr auto n_starting_side0 = 0xD30; // Name: m_nStartingSide0 Offset: 0xD30
					constexpr auto n_current_phase = 0xE30; // Name: m_nCurrentPhase Offset: 0xE30
					constexpr auto n_phase_start_tick = 0xE34; // Name: m_nPhaseStartTick Offset: 0xE34
					constexpr auto n_phase_duration_ticks = 0xE38; // Name: m_nPhaseDurationTicks Offset: 0xE38
					constexpr auto on_map_vetoed = 0xE40; // Name: m_OnMapVetoed Offset: 0xE40
					constexpr auto on_map_picked = 0xE68; // Name: m_OnMapPicked Offset: 0xE68
					constexpr auto on_sides_picked = 0xE90; // Name: m_OnSidesPicked Offset: 0xE90
					constexpr auto on_new_phase_started = 0xEB8; // Name: m_OnNewPhaseStarted Offset: 0xEB8
					constexpr auto on_level_transition = 0xEE0; // Name: m_OnLevelTransition Offset: 0xEE0
				} // namespace CMapVetoPickController

				namespace CGameRulesProxy {
				} // namespace CGameRulesProxy

				namespace CBombTarget {
					constexpr auto on_bomb_explode = 0x960; // Name: m_OnBombExplode Offset: 0x960
					constexpr auto on_bomb_planted = 0x988; // Name: m_OnBombPlanted Offset: 0x988
					constexpr auto on_bomb_defused = 0x9B0; // Name: m_OnBombDefused Offset: 0x9B0
					constexpr auto b_is_bomb_site_b = 0x9D8; // Name: m_bIsBombSiteB Offset: 0x9D8
					constexpr auto b_is_heist_bomb_target = 0x9D9; // Name: m_bIsHeistBombTarget Offset: 0x9D9
					constexpr auto b_bomb_planted_here = 0x9DA; // Name: m_bBombPlantedHere Offset: 0x9DA
					constexpr auto sz_mount_target = 0x9E0; // Name: m_szMountTarget Offset: 0x9E0
					constexpr auto h_instructor_hint = 0x9E8; // Name: m_hInstructorHint Offset: 0x9E8
					constexpr auto n_bomb_site_designation = 0x9EC; // Name: m_nBombSiteDesignation Offset: 0x9EC
				} // namespace CBombTarget

				namespace CPhysicsSpring {
					constexpr auto fl_frequency = 0x4E8; // Name: m_flFrequency Offset: 0x4E8
					constexpr auto fl_damping_ratio = 0x4EC; // Name: m_flDampingRatio Offset: 0x4EC
					constexpr auto fl_rest_length = 0x4F0; // Name: m_flRestLength Offset: 0x4F0
					constexpr auto name_attach_start = 0x4F8; // Name: m_nameAttachStart Offset: 0x4F8
					constexpr auto name_attach_end = 0x500; // Name: m_nameAttachEnd Offset: 0x500
					constexpr auto start = 0x508; // Name: m_start Offset: 0x508
					constexpr auto end = 0x514; // Name: m_end Offset: 0x514
					constexpr auto teleport_tick = 0x520; // Name: m_teleportTick Offset: 0x520
				} // namespace CPhysicsSpring

				namespace CEnvLightProbeVolume {
					constexpr auto entity_h_light_probe_texture = 0x14C0; // Name: m_Entity_hLightProbeTexture Offset: 0x14C0
					constexpr auto entity_h_light_probe_direct_light_indices_texture = 0x14C8; // Name: m_Entity_hLightProbeDirectLightIndicesTexture Offset: 0x14C8
					constexpr auto entity_h_light_probe_direct_light_scalars_texture = 0x14D0; // Name: m_Entity_hLightProbeDirectLightScalarsTexture Offset: 0x14D0
					constexpr auto entity_h_light_probe_direct_light_shadows_texture = 0x14D8; // Name: m_Entity_hLightProbeDirectLightShadowsTexture Offset: 0x14D8
					constexpr auto entity_v_box_mins = 0x14E0; // Name: m_Entity_vBoxMins Offset: 0x14E0
					constexpr auto entity_v_box_maxs = 0x14EC; // Name: m_Entity_vBoxMaxs Offset: 0x14EC
					constexpr auto entity_b_moveable = 0x14F8; // Name: m_Entity_bMoveable Offset: 0x14F8
					constexpr auto entity_n_handshake = 0x14FC; // Name: m_Entity_nHandshake Offset: 0x14FC
					constexpr auto entity_n_priority = 0x1500; // Name: m_Entity_nPriority Offset: 0x1500
					constexpr auto entity_b_start_disabled = 0x1504; // Name: m_Entity_bStartDisabled Offset: 0x1504
					constexpr auto entity_n_light_probe_size_x = 0x1508; // Name: m_Entity_nLightProbeSizeX Offset: 0x1508
					constexpr auto entity_n_light_probe_size_y = 0x150C; // Name: m_Entity_nLightProbeSizeY Offset: 0x150C
					constexpr auto entity_n_light_probe_size_z = 0x1510; // Name: m_Entity_nLightProbeSizeZ Offset: 0x1510
					constexpr auto entity_n_light_probe_atlas_x = 0x1514; // Name: m_Entity_nLightProbeAtlasX Offset: 0x1514
					constexpr auto entity_n_light_probe_atlas_y = 0x1518; // Name: m_Entity_nLightProbeAtlasY Offset: 0x1518
					constexpr auto entity_n_light_probe_atlas_z = 0x151C; // Name: m_Entity_nLightProbeAtlasZ Offset: 0x151C
					constexpr auto entity_b_enabled = 0x1529; // Name: m_Entity_bEnabled Offset: 0x1529
				} // namespace CEnvLightProbeVolume

				namespace CFuncWall {
					constexpr auto n_state = 0x790; // Name: m_nState Offset: 0x790
				} // namespace CFuncWall

				namespace CLogicAutosave {
					constexpr auto b_force_new_level_unit = 0x4E0; // Name: m_bForceNewLevelUnit Offset: 0x4E0
					constexpr auto min_hit_points = 0x4E4; // Name: m_minHitPoints Offset: 0x4E4
					constexpr auto min_hit_points_to_commit = 0x4E8; // Name: m_minHitPointsToCommit Offset: 0x4E8
				} // namespace CLogicAutosave

				namespace CHEGrenade {
				} // namespace CHEGrenade

				namespace CLogicGameEventListener {
					constexpr auto on_event_fired = 0x4F0; // Name: m_OnEventFired Offset: 0x4F0
					constexpr auto isz_game_event_name = 0x518; // Name: m_iszGameEventName Offset: 0x518
					constexpr auto isz_game_event_item = 0x520; // Name: m_iszGameEventItem Offset: 0x520
					constexpr auto b_enabled = 0x528; // Name: m_bEnabled Offset: 0x528
					constexpr auto b_start_disabled = 0x529; // Name: m_bStartDisabled Offset: 0x529
				} // namespace CLogicGameEventListener

				namespace CCSPlayerController_DamageServices {
					constexpr auto n_send_update = 0x40; // Name: m_nSendUpdate Offset: 0x40
					constexpr auto damage_list = 0x48; // Name: m_DamageList Offset: 0x48
				} // namespace CCSPlayerController_DamageServices

				namespace CCSTeam {
					constexpr auto n_last_recieved_shorthanded_round_bonus = 0x598; // Name: m_nLastRecievedShorthandedRoundBonus Offset: 0x598
					constexpr auto n_shorthanded_round_bonus_start_round = 0x59C; // Name: m_nShorthandedRoundBonusStartRound Offset: 0x59C
					constexpr auto b_surrendered = 0x5A0; // Name: m_bSurrendered Offset: 0x5A0
					constexpr auto sz_team_match_stat = 0x5A1; // Name: m_szTeamMatchStat Offset: 0x5A1
					constexpr auto num_map_victories = 0x7A4; // Name: m_numMapVictories Offset: 0x7A4
					constexpr auto score_first_half = 0x7A8; // Name: m_scoreFirstHalf Offset: 0x7A8
					constexpr auto score_second_half = 0x7AC; // Name: m_scoreSecondHalf Offset: 0x7AC
					constexpr auto score_overtime = 0x7B0; // Name: m_scoreOvertime Offset: 0x7B0
					constexpr auto sz_clan_teamname = 0x7B4; // Name: m_szClanTeamname Offset: 0x7B4
					constexpr auto i_clan_id = 0x838; // Name: m_iClanID Offset: 0x838
					constexpr auto sz_team_flag_image = 0x83C; // Name: m_szTeamFlagImage Offset: 0x83C
					constexpr auto sz_team_logo_image = 0x844; // Name: m_szTeamLogoImage Offset: 0x844
					constexpr auto fl_next_resource_time = 0x84C; // Name: m_flNextResourceTime Offset: 0x84C
					constexpr auto i_last_update_sent_at = 0x850; // Name: m_iLastUpdateSentAt Offset: 0x850
				} // namespace CCSTeam

				namespace CEnvSoundscapeProxy {
					constexpr auto main_soundscape_name = 0x580; // Name: m_MainSoundscapeName Offset: 0x580
				} // namespace CEnvSoundscapeProxy

				namespace CSprite {
					constexpr auto h_sprite_material = 0x790; // Name: m_hSpriteMaterial Offset: 0x790
					constexpr auto h_attached_to_entity = 0x798; // Name: m_hAttachedToEntity Offset: 0x798
					constexpr auto n_attachment = 0x79C; // Name: m_nAttachment Offset: 0x79C
					constexpr auto fl_sprite_framerate = 0x7A0; // Name: m_flSpriteFramerate Offset: 0x7A0
					constexpr auto fl_frame = 0x7A4; // Name: m_flFrame Offset: 0x7A4
					constexpr auto fl_die_time = 0x7A8; // Name: m_flDieTime Offset: 0x7A8
					constexpr auto n_brightness = 0x7B8; // Name: m_nBrightness Offset: 0x7B8
					constexpr auto fl_brightness_duration = 0x7BC; // Name: m_flBrightnessDuration Offset: 0x7BC
					constexpr auto fl_sprite_scale = 0x7C0; // Name: m_flSpriteScale Offset: 0x7C0
					constexpr auto fl_scale_duration = 0x7C4; // Name: m_flScaleDuration Offset: 0x7C4
					constexpr auto b_world_space_scale = 0x7C8; // Name: m_bWorldSpaceScale Offset: 0x7C8
					constexpr auto fl_glow_proxy_size = 0x7CC; // Name: m_flGlowProxySize Offset: 0x7CC
					constexpr auto fl_hdrcolor_scale = 0x7D0; // Name: m_flHDRColorScale Offset: 0x7D0
					constexpr auto fl_last_time = 0x7D4; // Name: m_flLastTime Offset: 0x7D4
					constexpr auto fl_max_frame = 0x7D8; // Name: m_flMaxFrame Offset: 0x7D8
					constexpr auto fl_start_scale = 0x7DC; // Name: m_flStartScale Offset: 0x7DC
					constexpr auto fl_dest_scale = 0x7E0; // Name: m_flDestScale Offset: 0x7E0
					constexpr auto fl_scale_time_start = 0x7E4; // Name: m_flScaleTimeStart Offset: 0x7E4
					constexpr auto n_start_brightness = 0x7E8; // Name: m_nStartBrightness Offset: 0x7E8
					constexpr auto n_dest_brightness = 0x7EC; // Name: m_nDestBrightness Offset: 0x7EC
					constexpr auto fl_brightness_time_start = 0x7F0; // Name: m_flBrightnessTimeStart Offset: 0x7F0
					constexpr auto n_sprite_width = 0x7F4; // Name: m_nSpriteWidth Offset: 0x7F4
					constexpr auto n_sprite_height = 0x7F8; // Name: m_nSpriteHeight Offset: 0x7F8
				} // namespace CSprite

				namespace CSoundEventPathCornerEntity {
					constexpr auto isz_path_corner = 0x598; // Name: m_iszPathCorner Offset: 0x598
					constexpr auto i_count_max = 0x5A0; // Name: m_iCountMax Offset: 0x5A0
					constexpr auto fl_distance_max = 0x5A4; // Name: m_flDistanceMax Offset: 0x5A4
					constexpr auto fl_dist_max_sqr = 0x5A8; // Name: m_flDistMaxSqr Offset: 0x5A8
					constexpr auto fl_dot_product_max = 0x5AC; // Name: m_flDotProductMax Offset: 0x5AC
					constexpr auto b_playing = 0x5B0; // Name: m_bPlaying Offset: 0x5B0
					constexpr auto vec_corner_pairs_networked = 0x5D8; // Name: m_vecCornerPairsNetworked Offset: 0x5D8
				} // namespace CSoundEventPathCornerEntity

				namespace CHitboxComponent {
					constexpr auto bv_disabled_hit_groups = 0x24; // Name: m_bvDisabledHitGroups Offset: 0x24
				} // namespace CHitboxComponent

				namespace CPhysicsShake {
					constexpr auto force = 0x8; // Name: m_force Offset: 0x8
				} // namespace CPhysicsShake

				namespace CScriptTriggerMultiple {
					constexpr auto v_extent = 0x988; // Name: m_vExtent Offset: 0x988
				} // namespace CScriptTriggerMultiple

				namespace CSoundOpvarSetAutoRoomEntity {
					constexpr auto trace_results = 0x688; // Name: m_traceResults Offset: 0x688
					constexpr auto doorway_pairs = 0x6A0; // Name: m_doorwayPairs Offset: 0x6A0
					constexpr auto fl_size = 0x6B8; // Name: m_flSize Offset: 0x6B8
					constexpr auto fl_height_tolerance = 0x6BC; // Name: m_flHeightTolerance Offset: 0x6BC
					constexpr auto fl_size_sqr = 0x6C0; // Name: m_flSizeSqr Offset: 0x6C0
				} // namespace CSoundOpvarSetAutoRoomEntity

				namespace CShatterGlassShard {
					constexpr auto h_shard_handle = 0x8; // Name: m_hShardHandle Offset: 0x8
					constexpr auto vec_panel_vertices = 0x10; // Name: m_vecPanelVertices Offset: 0x10
					constexpr auto v_local_panel_space_origin = 0x28; // Name: m_vLocalPanelSpaceOrigin Offset: 0x28
					constexpr auto h_model = 0x30; // Name: m_hModel Offset: 0x30
					constexpr auto h_physics_entity = 0x38; // Name: m_hPhysicsEntity Offset: 0x38
					constexpr auto h_parent_panel = 0x3C; // Name: m_hParentPanel Offset: 0x3C
					constexpr auto h_parent_shard = 0x40; // Name: m_hParentShard Offset: 0x40
					constexpr auto shatter_stress_type = 0x44; // Name: m_ShatterStressType Offset: 0x44
					constexpr auto vec_stress_velocity = 0x48; // Name: m_vecStressVelocity Offset: 0x48
					constexpr auto b_created_model = 0x54; // Name: m_bCreatedModel Offset: 0x54
					constexpr auto fl_longest_edge = 0x58; // Name: m_flLongestEdge Offset: 0x58
					constexpr auto fl_shortest_edge = 0x5C; // Name: m_flShortestEdge Offset: 0x5C
					constexpr auto fl_longest_across = 0x60; // Name: m_flLongestAcross Offset: 0x60
					constexpr auto fl_shortest_across = 0x64; // Name: m_flShortestAcross Offset: 0x64
					constexpr auto fl_sum_of_all_edges = 0x68; // Name: m_flSumOfAllEdges Offset: 0x68
					constexpr auto fl_area = 0x6C; // Name: m_flArea Offset: 0x6C
					constexpr auto n_on_frame_edge = 0x70; // Name: m_nOnFrameEdge Offset: 0x70
					constexpr auto n_sub_shard_generation = 0x74; // Name: m_nSubShardGeneration Offset: 0x74
					constexpr auto vec_average_vert_position = 0x78; // Name: m_vecAverageVertPosition Offset: 0x78
					constexpr auto b_average_vert_position_is_valid = 0x80; // Name: m_bAverageVertPositionIsValid Offset: 0x80
					constexpr auto vec_panel_space_stress_position_a = 0x84; // Name: m_vecPanelSpaceStressPositionA Offset: 0x84
					constexpr auto vec_panel_space_stress_position_b = 0x8C; // Name: m_vecPanelSpaceStressPositionB Offset: 0x8C
					constexpr auto b_stress_position_ais_valid = 0x94; // Name: m_bStressPositionAIsValid Offset: 0x94
					constexpr auto b_stress_position_bis_valid = 0x95; // Name: m_bStressPositionBIsValid Offset: 0x95
					constexpr auto b_flagged_for_removal = 0x96; // Name: m_bFlaggedForRemoval Offset: 0x96
					constexpr auto fl_physics_entity_spawned_at_time = 0x98; // Name: m_flPhysicsEntitySpawnedAtTime Offset: 0x98
					constexpr auto h_entity_hitting_me = 0x9C; // Name: m_hEntityHittingMe Offset: 0x9C
					constexpr auto vec_neighbors = 0xA0; // Name: m_vecNeighbors Offset: 0xA0
				} // namespace CShatterGlassShard

				namespace CPulseGraphInstance_GameBlackboard {
				} // namespace CPulseGraphInstance_GameBlackboard

				namespace CTimerEntity {
					constexpr auto on_timer = 0x4E0; // Name: m_OnTimer Offset: 0x4E0
					constexpr auto on_timer_high = 0x508; // Name: m_OnTimerHigh Offset: 0x508
					constexpr auto on_timer_low = 0x530; // Name: m_OnTimerLow Offset: 0x530
					constexpr auto i_disabled = 0x558; // Name: m_iDisabled Offset: 0x558
					constexpr auto fl_initial_delay = 0x55C; // Name: m_flInitialDelay Offset: 0x55C
					constexpr auto fl_refire_time = 0x560; // Name: m_flRefireTime Offset: 0x560
					constexpr auto b_up_down_state = 0x564; // Name: m_bUpDownState Offset: 0x564
					constexpr auto i_use_random_time = 0x568; // Name: m_iUseRandomTime Offset: 0x568
					constexpr auto b_pause_after_firing = 0x56C; // Name: m_bPauseAfterFiring Offset: 0x56C
					constexpr auto fl_lower_random_bound = 0x570; // Name: m_flLowerRandomBound Offset: 0x570
					constexpr auto fl_upper_random_bound = 0x574; // Name: m_flUpperRandomBound Offset: 0x574
					constexpr auto fl_remaining_time = 0x578; // Name: m_flRemainingTime Offset: 0x578
					constexpr auto b_paused = 0x57C; // Name: m_bPaused Offset: 0x57C
				} // namespace CTimerEntity

				namespace FilterDamageType {
					constexpr auto i_damage_type = 0x538; // Name: m_iDamageType Offset: 0x538
				} // namespace FilterDamageType

				namespace CCSBot {
					constexpr auto eye_position = 0x108; // Name: m_eyePosition Offset: 0x108
					constexpr auto name = 0x114; // Name: m_name Offset: 0x114
					constexpr auto combat_range = 0x154; // Name: m_combatRange Offset: 0x154
					constexpr auto is_rogue = 0x158; // Name: m_isRogue Offset: 0x158
					constexpr auto rogue_timer = 0x160; // Name: m_rogueTimer Offset: 0x160
					constexpr auto died_last_round = 0x17C; // Name: m_diedLastRound Offset: 0x17C
					constexpr auto safe_time = 0x180; // Name: m_safeTime Offset: 0x180
					constexpr auto was_safe = 0x184; // Name: m_wasSafe Offset: 0x184
					constexpr auto blind_fire = 0x18C; // Name: m_blindFire Offset: 0x18C
					constexpr auto surprise_timer = 0x190; // Name: m_surpriseTimer Offset: 0x190
					constexpr auto b_allow_active = 0x1A8; // Name: m_bAllowActive Offset: 0x1A8
					constexpr auto is_following = 0x1A9; // Name: m_isFollowing Offset: 0x1A9
					constexpr auto leader = 0x1AC; // Name: m_leader Offset: 0x1AC
					constexpr auto follow_timestamp = 0x1B0; // Name: m_followTimestamp Offset: 0x1B0
					constexpr auto allow_auto_follow_time = 0x1B4; // Name: m_allowAutoFollowTime Offset: 0x1B4
					constexpr auto hurry_timer = 0x1B8; // Name: m_hurryTimer Offset: 0x1B8
					constexpr auto alert_timer = 0x1D0; // Name: m_alertTimer Offset: 0x1D0
					constexpr auto sneak_timer = 0x1E8; // Name: m_sneakTimer Offset: 0x1E8
					constexpr auto panic_timer = 0x200; // Name: m_panicTimer Offset: 0x200
					constexpr auto state_timestamp = 0x4D0; // Name: m_stateTimestamp Offset: 0x4D0
					constexpr auto is_attacking = 0x4D4; // Name: m_isAttacking Offset: 0x4D4
					constexpr auto is_opening_door = 0x4D5; // Name: m_isOpeningDoor Offset: 0x4D5
					constexpr auto task_entity = 0x4DC; // Name: m_taskEntity Offset: 0x4DC
					constexpr auto goal_position = 0x4EC; // Name: m_goalPosition Offset: 0x4EC
					constexpr auto goal_entity = 0x4F8; // Name: m_goalEntity Offset: 0x4F8
					constexpr auto avoid = 0x4FC; // Name: m_avoid Offset: 0x4FC
					constexpr auto avoid_timestamp = 0x500; // Name: m_avoidTimestamp Offset: 0x500
					constexpr auto is_stopping = 0x504; // Name: m_isStopping Offset: 0x504
					constexpr auto has_visited_enemy_spawn = 0x505; // Name: m_hasVisitedEnemySpawn Offset: 0x505
					constexpr auto still_timer = 0x508; // Name: m_stillTimer Offset: 0x508
					constexpr auto b_eye_angles_under_path_finder_control = 0x518; // Name: m_bEyeAnglesUnderPathFinderControl Offset: 0x518
					constexpr auto path_index = 0x5610; // Name: m_pathIndex Offset: 0x5610
					constexpr auto area_entered_timestamp = 0x5614; // Name: m_areaEnteredTimestamp Offset: 0x5614
					constexpr auto repath_timer = 0x5618; // Name: m_repathTimer Offset: 0x5618
					constexpr auto avoid_friend_timer = 0x5630; // Name: m_avoidFriendTimer Offset: 0x5630
					constexpr auto is_friend_in_the_way = 0x5648; // Name: m_isFriendInTheWay Offset: 0x5648
					constexpr auto polite_timer = 0x5650; // Name: m_politeTimer Offset: 0x5650
					constexpr auto is_waiting_behind_friend = 0x5668; // Name: m_isWaitingBehindFriend Offset: 0x5668
					constexpr auto path_ladder_end = 0x5694; // Name: m_pathLadderEnd Offset: 0x5694
					constexpr auto must_run_timer = 0x56E0; // Name: m_mustRunTimer Offset: 0x56E0
					constexpr auto wait_timer = 0x56F8; // Name: m_waitTimer Offset: 0x56F8
					constexpr auto update_travel_distance_timer = 0x5710; // Name: m_updateTravelDistanceTimer Offset: 0x5710
					constexpr auto player_travel_distance = 0x5728; // Name: m_playerTravelDistance Offset: 0x5728
					constexpr auto travel_distance_phase = 0x5828; // Name: m_travelDistancePhase Offset: 0x5828
					constexpr auto hostage_escort_count = 0x59C0; // Name: m_hostageEscortCount Offset: 0x59C0
					constexpr auto hostage_escort_count_timestamp = 0x59C4; // Name: m_hostageEscortCountTimestamp Offset: 0x59C4
					constexpr auto desired_team = 0x59C8; // Name: m_desiredTeam Offset: 0x59C8
					constexpr auto has_joined = 0x59CC; // Name: m_hasJoined Offset: 0x59CC
					constexpr auto is_waiting_for_hostage = 0x59CD; // Name: m_isWaitingForHostage Offset: 0x59CD
					constexpr auto inhibit_waiting_for_hostage_timer = 0x59D0; // Name: m_inhibitWaitingForHostageTimer Offset: 0x59D0
					constexpr auto wait_for_hostage_timer = 0x59E8; // Name: m_waitForHostageTimer Offset: 0x59E8
					constexpr auto noise_position = 0x5A00; // Name: m_noisePosition Offset: 0x5A00
					constexpr auto noise_travel_distance = 0x5A0C; // Name: m_noiseTravelDistance Offset: 0x5A0C
					constexpr auto noise_timestamp = 0x5A10; // Name: m_noiseTimestamp Offset: 0x5A10
					constexpr auto noise_source = 0x5A18; // Name: m_noiseSource Offset: 0x5A18
					constexpr auto noise_bend_timer = 0x5A30; // Name: m_noiseBendTimer Offset: 0x5A30
					constexpr auto bent_noise_position = 0x5A48; // Name: m_bentNoisePosition Offset: 0x5A48
					constexpr auto bend_noise_position_valid = 0x5A54; // Name: m_bendNoisePositionValid Offset: 0x5A54
					constexpr auto look_around_state_timestamp = 0x5A58; // Name: m_lookAroundStateTimestamp Offset: 0x5A58
					constexpr auto look_ahead_angle = 0x5A5C; // Name: m_lookAheadAngle Offset: 0x5A5C
					constexpr auto forward_angle = 0x5A60; // Name: m_forwardAngle Offset: 0x5A60
					constexpr auto inhibit_look_around_timestamp = 0x5A64; // Name: m_inhibitLookAroundTimestamp Offset: 0x5A64
					constexpr auto look_at_spot = 0x5A6C; // Name: m_lookAtSpot Offset: 0x5A6C
					constexpr auto look_at_spot_duration = 0x5A7C; // Name: m_lookAtSpotDuration Offset: 0x5A7C
					constexpr auto look_at_spot_timestamp = 0x5A80; // Name: m_lookAtSpotTimestamp Offset: 0x5A80
					constexpr auto look_at_spot_angle_tolerance = 0x5A84; // Name: m_lookAtSpotAngleTolerance Offset: 0x5A84
					constexpr auto look_at_spot_clear_if_close = 0x5A88; // Name: m_lookAtSpotClearIfClose Offset: 0x5A88
					constexpr auto look_at_spot_attack = 0x5A89; // Name: m_lookAtSpotAttack Offset: 0x5A89
					constexpr auto look_at_desc = 0x5A90; // Name: m_lookAtDesc Offset: 0x5A90
					constexpr auto peripheral_timestamp = 0x5A98; // Name: m_peripheralTimestamp Offset: 0x5A98
					constexpr auto approach_point_count = 0x5C20; // Name: m_approachPointCount Offset: 0x5C20
					constexpr auto approach_point_view_position = 0x5C24; // Name: m_approachPointViewPosition Offset: 0x5C24
					constexpr auto view_steady_timer = 0x5C30; // Name: m_viewSteadyTimer Offset: 0x5C30
					constexpr auto toss_grenade_timer = 0x5C48; // Name: m_tossGrenadeTimer Offset: 0x5C48
					constexpr auto is_avoiding_grenade = 0x5C68; // Name: m_isAvoidingGrenade Offset: 0x5C68
					constexpr auto spot_check_timestamp = 0x5C88; // Name: m_spotCheckTimestamp Offset: 0x5C88
					constexpr auto checked_hiding_spot_count = 0x6090; // Name: m_checkedHidingSpotCount Offset: 0x6090
					constexpr auto look_pitch = 0x6094; // Name: m_lookPitch Offset: 0x6094
					constexpr auto look_pitch_vel = 0x6098; // Name: m_lookPitchVel Offset: 0x6098
					constexpr auto look_yaw = 0x609C; // Name: m_lookYaw Offset: 0x609C
					constexpr auto look_yaw_vel = 0x60A0; // Name: m_lookYawVel Offset: 0x60A0
					constexpr auto target_spot = 0x60A4; // Name: m_targetSpot Offset: 0x60A4
					constexpr auto target_spot_velocity = 0x60B0; // Name: m_targetSpotVelocity Offset: 0x60B0
					constexpr auto target_spot_predicted = 0x60BC; // Name: m_targetSpotPredicted Offset: 0x60BC
					constexpr auto aim_error = 0x60C8; // Name: m_aimError Offset: 0x60C8
					constexpr auto aim_goal = 0x60D4; // Name: m_aimGoal Offset: 0x60D4
					constexpr auto target_spot_time = 0x60E0; // Name: m_targetSpotTime Offset: 0x60E0
					constexpr auto aim_focus = 0x60E4; // Name: m_aimFocus Offset: 0x60E4
					constexpr auto aim_focus_interval = 0x60E8; // Name: m_aimFocusInterval Offset: 0x60E8
					constexpr auto aim_focus_next_update = 0x60EC; // Name: m_aimFocusNextUpdate Offset: 0x60EC
					constexpr auto ignore_enemies_timer = 0x60F8; // Name: m_ignoreEnemiesTimer Offset: 0x60F8
					constexpr auto enemy = 0x6110; // Name: m_enemy Offset: 0x6110
					constexpr auto is_enemy_visible = 0x6114; // Name: m_isEnemyVisible Offset: 0x6114
					constexpr auto visible_enemy_parts = 0x6115; // Name: m_visibleEnemyParts Offset: 0x6115
					constexpr auto last_enemy_position = 0x6118; // Name: m_lastEnemyPosition Offset: 0x6118
					constexpr auto last_saw_enemy_timestamp = 0x6124; // Name: m_lastSawEnemyTimestamp Offset: 0x6124
					constexpr auto first_saw_enemy_timestamp = 0x6128; // Name: m_firstSawEnemyTimestamp Offset: 0x6128
					constexpr auto current_enemy_acquire_timestamp = 0x612C; // Name: m_currentEnemyAcquireTimestamp Offset: 0x612C
					constexpr auto enemy_death_timestamp = 0x6130; // Name: m_enemyDeathTimestamp Offset: 0x6130
					constexpr auto friend_death_timestamp = 0x6134; // Name: m_friendDeathTimestamp Offset: 0x6134
					constexpr auto is_last_enemy_dead = 0x6138; // Name: m_isLastEnemyDead Offset: 0x6138
					constexpr auto nearby_enemy_count = 0x613C; // Name: m_nearbyEnemyCount Offset: 0x613C
					constexpr auto bomber = 0x6348; // Name: m_bomber Offset: 0x6348
					constexpr auto nearby_friend_count = 0x634C; // Name: m_nearbyFriendCount Offset: 0x634C
					constexpr auto closest_visible_friend = 0x6350; // Name: m_closestVisibleFriend Offset: 0x6350
					constexpr auto closest_visible_human_friend = 0x6354; // Name: m_closestVisibleHumanFriend Offset: 0x6354
					constexpr auto attention_interval = 0x6358; // Name: m_attentionInterval Offset: 0x6358
					constexpr auto attacker = 0x6368; // Name: m_attacker Offset: 0x6368
					constexpr auto attacked_timestamp = 0x636C; // Name: m_attackedTimestamp Offset: 0x636C
					constexpr auto burned_by_flames_timer = 0x6370; // Name: m_burnedByFlamesTimer Offset: 0x6370
					constexpr auto last_victim_id = 0x6380; // Name: m_lastVictimID Offset: 0x6380
					constexpr auto is_aiming_at_enemy = 0x6384; // Name: m_isAimingAtEnemy Offset: 0x6384
					constexpr auto is_rapid_firing = 0x6385; // Name: m_isRapidFiring Offset: 0x6385
					constexpr auto equip_timer = 0x6388; // Name: m_equipTimer Offset: 0x6388
					constexpr auto zoom_timer = 0x6398; // Name: m_zoomTimer Offset: 0x6398
					constexpr auto fire_weapon_timestamp = 0x63B0; // Name: m_fireWeaponTimestamp Offset: 0x63B0
					constexpr auto look_for_weapons_on_ground_timer = 0x63B8; // Name: m_lookForWeaponsOnGroundTimer Offset: 0x63B8
					constexpr auto b_is_sleeping = 0x63D0; // Name: m_bIsSleeping Offset: 0x63D0
					constexpr auto is_enemy_sniper_visible = 0x63D1; // Name: m_isEnemySniperVisible Offset: 0x63D1
					constexpr auto saw_enemy_sniper_timer = 0x63D8; // Name: m_sawEnemySniperTimer Offset: 0x63D8
					constexpr auto enemy_queue_index = 0x6490; // Name: m_enemyQueueIndex Offset: 0x6490
					constexpr auto enemy_queue_count = 0x6491; // Name: m_enemyQueueCount Offset: 0x6491
					constexpr auto enemy_queue_attend_index = 0x6492; // Name: m_enemyQueueAttendIndex Offset: 0x6492
					constexpr auto is_stuck = 0x6493; // Name: m_isStuck Offset: 0x6493
					constexpr auto stuck_timestamp = 0x6494; // Name: m_stuckTimestamp Offset: 0x6494
					constexpr auto stuck_spot = 0x6498; // Name: m_stuckSpot Offset: 0x6498
					constexpr auto wiggle_timer = 0x64A8; // Name: m_wiggleTimer Offset: 0x64A8
					constexpr auto stuck_jump_timer = 0x64C0; // Name: m_stuckJumpTimer Offset: 0x64C0
					constexpr auto next_cleanup_check_timestamp = 0x64D8; // Name: m_nextCleanupCheckTimestamp Offset: 0x64D8
					constexpr auto avg_vel = 0x64DC; // Name: m_avgVel Offset: 0x64DC
					constexpr auto avg_vel_index = 0x6504; // Name: m_avgVelIndex Offset: 0x6504
					constexpr auto avg_vel_count = 0x6508; // Name: m_avgVelCount Offset: 0x6508
					constexpr auto last_origin = 0x650C; // Name: m_lastOrigin Offset: 0x650C
					constexpr auto last_radio_recieved_timestamp = 0x651C; // Name: m_lastRadioRecievedTimestamp Offset: 0x651C
					constexpr auto last_radio_sent_timestamp = 0x6520; // Name: m_lastRadioSentTimestamp Offset: 0x6520
					constexpr auto radio_subject = 0x6524; // Name: m_radioSubject Offset: 0x6524
					constexpr auto radio_position = 0x6528; // Name: m_radioPosition Offset: 0x6528
					constexpr auto voice_end_timestamp = 0x6534; // Name: m_voiceEndTimestamp Offset: 0x6534
					constexpr auto last_valid_reaction_queue_frame = 0x6540; // Name: m_lastValidReactionQueueFrame Offset: 0x6540
				} // namespace CCSBot

				namespace CCSPlayer_WeaponServices {
					constexpr auto fl_next_attack = 0xA8; // Name: m_flNextAttack Offset: 0xA8
					constexpr auto b_is_looking_at_weapon = 0xAC; // Name: m_bIsLookingAtWeapon Offset: 0xAC
					constexpr auto b_is_holding_look_at_weapon = 0xAD; // Name: m_bIsHoldingLookAtWeapon Offset: 0xAD
					constexpr auto h_saved_weapon = 0xB0; // Name: m_hSavedWeapon Offset: 0xB0
					constexpr auto n_time_to_melee = 0xB4; // Name: m_nTimeToMelee Offset: 0xB4
					constexpr auto n_time_to_secondary = 0xB8; // Name: m_nTimeToSecondary Offset: 0xB8
					constexpr auto n_time_to_primary = 0xBC; // Name: m_nTimeToPrimary Offset: 0xBC
					constexpr auto n_time_to_sniper_rifle = 0xC0; // Name: m_nTimeToSniperRifle Offset: 0xC0
					constexpr auto b_is_being_given_item = 0xC4; // Name: m_bIsBeingGivenItem Offset: 0xC4
					constexpr auto b_is_picking_up_item_with_use = 0xC5; // Name: m_bIsPickingUpItemWithUse Offset: 0xC5
					constexpr auto b_picked_up_weapon = 0xC6; // Name: m_bPickedUpWeapon Offset: 0xC6
					constexpr auto b_disable_auto_deploy = 0xC7; // Name: m_bDisableAutoDeploy Offset: 0xC7
					constexpr auto b_is_picking_up_ground_weapon = 0xC8; // Name: m_bIsPickingUpGroundWeapon Offset: 0xC8
					constexpr auto n_old_shoot_position_history_count = 0xCC; // Name: m_nOldShootPositionHistoryCount Offset: 0xCC
					constexpr auto n_old_input_history_count = 0x468; // Name: m_nOldInputHistoryCount Offset: 0x468
				} // namespace CCSPlayer_WeaponServices

				namespace CSoundAreaEntityBase {
					constexpr auto b_disabled = 0x4E0; // Name: m_bDisabled Offset: 0x4E0
					constexpr auto isz_sound_area_type = 0x4E8; // Name: m_iszSoundAreaType Offset: 0x4E8
					constexpr auto v_pos = 0x4F0; // Name: m_vPos Offset: 0x4F0
				} // namespace CSoundAreaEntityBase

				namespace CCSPlayer_UseServices {
					constexpr auto h_last_known_use_entity = 0x40; // Name: m_hLastKnownUseEntity Offset: 0x40
					constexpr auto fl_last_use_time_stamp = 0x44; // Name: m_flLastUseTimeStamp Offset: 0x44
					constexpr auto fl_time_last_used_window = 0x48; // Name: m_flTimeLastUsedWindow Offset: 0x48
				} // namespace CCSPlayer_UseServices

				namespace CCSGO_TeamSelectCharacterPosition {
				} // namespace CCSGO_TeamSelectCharacterPosition

				namespace CPhysThruster {
					constexpr auto local_origin = 0x540; // Name: m_localOrigin Offset: 0x540
				} // namespace CPhysThruster

				namespace CItemKevlar {
				} // namespace CItemKevlar

				namespace CPhysPulley {
					constexpr auto position2 = 0x558; // Name: m_position2 Offset: 0x558
					constexpr auto offset = 0x564; // Name: m_offset Offset: 0x564
					constexpr auto add_length = 0x57C; // Name: m_addLength Offset: 0x57C
					constexpr auto gear_ratio = 0x580; // Name: m_gearRatio Offset: 0x580
				} // namespace CPhysPulley

				namespace CBuoyancyHelper {
					constexpr auto n_fluid_type = 0x18; // Name: m_nFluidType Offset: 0x18
					constexpr auto fl_fluid_density = 0x1C; // Name: m_flFluidDensity Offset: 0x1C
					constexpr auto vec_fraction_of_wheel_submerged_for_wheel_friction = 0x20; // Name: m_vecFractionOfWheelSubmergedForWheelFriction Offset: 0x20
					constexpr auto vec_wheel_friction_scales = 0x38; // Name: m_vecWheelFrictionScales Offset: 0x38
					constexpr auto vec_fraction_of_wheel_submerged_for_wheel_drag = 0x50; // Name: m_vecFractionOfWheelSubmergedForWheelDrag Offset: 0x50
					constexpr auto vec_wheel_drag = 0x68; // Name: m_vecWheelDrag Offset: 0x68
				} // namespace CBuoyancyHelper

				namespace CPhysSlideConstraint {
					constexpr auto axis_end = 0x560; // Name: m_axisEnd Offset: 0x560
					constexpr auto slide_friction = 0x56C; // Name: m_slideFriction Offset: 0x56C
					constexpr auto system_load_scale = 0x570; // Name: m_systemLoadScale Offset: 0x570
					constexpr auto initial_offset = 0x574; // Name: m_initialOffset Offset: 0x574
					constexpr auto b_enable_linear_constraint = 0x578; // Name: m_bEnableLinearConstraint Offset: 0x578
					constexpr auto b_enable_angular_constraint = 0x579; // Name: m_bEnableAngularConstraint Offset: 0x579
					constexpr auto fl_motor_frequency = 0x57C; // Name: m_flMotorFrequency Offset: 0x57C
					constexpr auto fl_motor_damping_ratio = 0x580; // Name: m_flMotorDampingRatio Offset: 0x580
					constexpr auto b_use_entity_pivot = 0x584; // Name: m_bUseEntityPivot Offset: 0x584
					constexpr auto sound_info = 0x588; // Name: m_soundInfo Offset: 0x588
				} // namespace CPhysSlideConstraint

				namespace CSoundEventAABBEntity {
					constexpr auto v_mins = 0x598; // Name: m_vMins Offset: 0x598
					constexpr auto v_maxs = 0x5A4; // Name: m_vMaxs Offset: 0x5A4
				} // namespace CSoundEventAABBEntity

				namespace CNavVolumeCalculatedVector {
				} // namespace CNavVolumeCalculatedVector

				namespace CTriggerHurt {
					constexpr auto fl_original_damage = 0x960; // Name: m_flOriginalDamage Offset: 0x960
					constexpr auto fl_damage = 0x964; // Name: m_flDamage Offset: 0x964
					constexpr auto fl_damage_cap = 0x968; // Name: m_flDamageCap Offset: 0x968
					constexpr auto fl_last_dmg_time = 0x96C; // Name: m_flLastDmgTime Offset: 0x96C
					constexpr auto fl_forgiveness_delay = 0x970; // Name: m_flForgivenessDelay Offset: 0x970
					constexpr auto bits_damage_inflict = 0x974; // Name: m_bitsDamageInflict Offset: 0x974
					constexpr auto damage_model = 0x978; // Name: m_damageModel Offset: 0x978
					constexpr auto b_no_dmg_force = 0x97C; // Name: m_bNoDmgForce Offset: 0x97C
					constexpr auto v_damage_force = 0x980; // Name: m_vDamageForce Offset: 0x980
					constexpr auto think_always = 0x98C; // Name: m_thinkAlways Offset: 0x98C
					constexpr auto hurt_think_period = 0x990; // Name: m_hurtThinkPeriod Offset: 0x990
					constexpr auto on_hurt = 0x998; // Name: m_OnHurt Offset: 0x998
					constexpr auto on_hurt_player = 0x9C0; // Name: m_OnHurtPlayer Offset: 0x9C0
					constexpr auto hurt_entities = 0x9E8; // Name: m_hurtEntities Offset: 0x9E8
				} // namespace CTriggerHurt

				namespace CBasePlayerVData {
					constexpr auto s_model_name = 0x28; // Name: m_sModelName Offset: 0x28
					constexpr auto fl_head_damage_multiplier = 0x108; // Name: m_flHeadDamageMultiplier Offset: 0x108
					constexpr auto fl_chest_damage_multiplier = 0x118; // Name: m_flChestDamageMultiplier Offset: 0x118
					constexpr auto fl_stomach_damage_multiplier = 0x128; // Name: m_flStomachDamageMultiplier Offset: 0x128
					constexpr auto fl_arm_damage_multiplier = 0x138; // Name: m_flArmDamageMultiplier Offset: 0x138
					constexpr auto fl_leg_damage_multiplier = 0x148; // Name: m_flLegDamageMultiplier Offset: 0x148
					constexpr auto fl_hold_breath_time = 0x158; // Name: m_flHoldBreathTime Offset: 0x158
					constexpr auto fl_drowning_damage_interval = 0x15C; // Name: m_flDrowningDamageInterval Offset: 0x15C
					constexpr auto n_drowning_damage_initial = 0x160; // Name: m_nDrowningDamageInitial Offset: 0x160
					constexpr auto n_drowning_damage_max = 0x164; // Name: m_nDrowningDamageMax Offset: 0x164
					constexpr auto n_water_speed = 0x168; // Name: m_nWaterSpeed Offset: 0x168
					constexpr auto fl_use_range = 0x16C; // Name: m_flUseRange Offset: 0x16C
					constexpr auto fl_use_angle_tolerance = 0x170; // Name: m_flUseAngleTolerance Offset: 0x170
					constexpr auto fl_crouch_time = 0x174; // Name: m_flCrouchTime Offset: 0x174
				} // namespace CBasePlayerVData

				namespace FilterTeam {
					constexpr auto i_filter_team = 0x538; // Name: m_iFilterTeam Offset: 0x538
				} // namespace FilterTeam

				namespace CPhysConstraint {
					constexpr auto name_attach1 = 0x4E8; // Name: m_nameAttach1 Offset: 0x4E8
					constexpr auto name_attach2 = 0x4F0; // Name: m_nameAttach2 Offset: 0x4F0
					constexpr auto h_attach1 = 0x4F8; // Name: m_hAttach1 Offset: 0x4F8
					constexpr auto h_attach2 = 0x4FC; // Name: m_hAttach2 Offset: 0x4FC
					constexpr auto name_attachment1 = 0x500; // Name: m_nameAttachment1 Offset: 0x500
					constexpr auto name_attachment2 = 0x508; // Name: m_nameAttachment2 Offset: 0x508
					constexpr auto break_sound = 0x510; // Name: m_breakSound Offset: 0x510
					constexpr auto force_limit = 0x518; // Name: m_forceLimit Offset: 0x518
					constexpr auto torque_limit = 0x51C; // Name: m_torqueLimit Offset: 0x51C
					constexpr auto teleport_tick = 0x520; // Name: m_teleportTick Offset: 0x520
					constexpr auto min_teleport_distance = 0x524; // Name: m_minTeleportDistance Offset: 0x524
					constexpr auto b_snap_object_positions = 0x528; // Name: m_bSnapObjectPositions Offset: 0x528
					constexpr auto on_break = 0x530; // Name: m_OnBreak Offset: 0x530
				} // namespace CPhysConstraint

				namespace CPlayer_MovementServices {
					constexpr auto n_impulse = 0x40; // Name: m_nImpulse Offset: 0x40
					constexpr auto n_buttons = 0x48; // Name: m_nButtons Offset: 0x48
					constexpr auto n_queued_button_down_mask = 0x68; // Name: m_nQueuedButtonDownMask Offset: 0x68
					constexpr auto n_queued_button_change_mask = 0x70; // Name: m_nQueuedButtonChangeMask Offset: 0x70
					constexpr auto n_button_double_pressed = 0x78; // Name: m_nButtonDoublePressed Offset: 0x78
					constexpr auto p_button_pressed_cmd_number = 0x80; // Name: m_pButtonPressedCmdNumber Offset: 0x80
					constexpr auto n_last_command_number_processed = 0x180; // Name: m_nLastCommandNumberProcessed Offset: 0x180
					constexpr auto n_toggle_button_down_mask = 0x188; // Name: m_nToggleButtonDownMask Offset: 0x188
					constexpr auto fl_maxspeed = 0x198; // Name: m_flMaxspeed Offset: 0x198
					constexpr auto arr_force_subtick_move_when = 0x19C; // Name: m_arrForceSubtickMoveWhen Offset: 0x19C
					constexpr auto fl_forward_move = 0x1AC; // Name: m_flForwardMove Offset: 0x1AC
					constexpr auto fl_left_move = 0x1B0; // Name: m_flLeftMove Offset: 0x1B0
					constexpr auto fl_up_move = 0x1B4; // Name: m_flUpMove Offset: 0x1B4
					constexpr auto vec_last_movement_impulses = 0x1B8; // Name: m_vecLastMovementImpulses Offset: 0x1B8
					constexpr auto vec_old_view_angles = 0x1C4; // Name: m_vecOldViewAngles Offset: 0x1C4
				} // namespace CPlayer_MovementServices

				namespace CPhysWheelConstraint {
					constexpr auto fl_suspension_frequency = 0x558; // Name: m_flSuspensionFrequency Offset: 0x558
					constexpr auto fl_suspension_damping_ratio = 0x55C; // Name: m_flSuspensionDampingRatio Offset: 0x55C
					constexpr auto fl_suspension_height_offset = 0x560; // Name: m_flSuspensionHeightOffset Offset: 0x560
					constexpr auto b_enable_suspension_limit = 0x564; // Name: m_bEnableSuspensionLimit Offset: 0x564
					constexpr auto fl_min_suspension_offset = 0x568; // Name: m_flMinSuspensionOffset Offset: 0x568
					constexpr auto fl_max_suspension_offset = 0x56C; // Name: m_flMaxSuspensionOffset Offset: 0x56C
					constexpr auto b_enable_steering_limit = 0x570; // Name: m_bEnableSteeringLimit Offset: 0x570
					constexpr auto fl_min_steering_angle = 0x574; // Name: m_flMinSteeringAngle Offset: 0x574
					constexpr auto fl_max_steering_angle = 0x578; // Name: m_flMaxSteeringAngle Offset: 0x578
					constexpr auto fl_steering_axis_friction = 0x57C; // Name: m_flSteeringAxisFriction Offset: 0x57C
					constexpr auto fl_spin_axis_friction = 0x580; // Name: m_flSpinAxisFriction Offset: 0x580
				} // namespace CPhysWheelConstraint

				namespace CNavVolumeBreadthFirstSearch {
					constexpr auto v_start_pos = 0xA0; // Name: m_vStartPos Offset: 0xA0
					constexpr auto fl_search_dist = 0xAC; // Name: m_flSearchDist Offset: 0xAC
				} // namespace CNavVolumeBreadthFirstSearch

				namespace CPhysFixed {
					constexpr auto fl_linear_frequency = 0x558; // Name: m_flLinearFrequency Offset: 0x558
					constexpr auto fl_linear_damping_ratio = 0x55C; // Name: m_flLinearDampingRatio Offset: 0x55C
					constexpr auto fl_angular_frequency = 0x560; // Name: m_flAngularFrequency Offset: 0x560
					constexpr auto fl_angular_damping_ratio = 0x564; // Name: m_flAngularDampingRatio Offset: 0x564
					constexpr auto b_enable_linear_constraint = 0x568; // Name: m_bEnableLinearConstraint Offset: 0x568
					constexpr auto b_enable_angular_constraint = 0x569; // Name: m_bEnableAngularConstraint Offset: 0x569
				} // namespace CPhysFixed

				namespace CCSPlayerController_InGameMoneyServices {
					constexpr auto b_receives_money_next_round = 0x40; // Name: m_bReceivesMoneyNextRound Offset: 0x40
					constexpr auto i_money_earned_for_next_round = 0x44; // Name: m_iMoneyEarnedForNextRound Offset: 0x44
					constexpr auto i_account = 0x48; // Name: m_iAccount Offset: 0x48
					constexpr auto i_start_account = 0x4C; // Name: m_iStartAccount Offset: 0x4C
					constexpr auto i_total_cash_spent = 0x50; // Name: m_iTotalCashSpent Offset: 0x50
					constexpr auto i_cash_spent_this_round = 0x54; // Name: m_iCashSpentThisRound Offset: 0x54
				} // namespace CCSPlayerController_InGameMoneyServices

				namespace CSoundOpvarSetOBBEntity {
				} // namespace CSoundOpvarSetOBBEntity

				namespace CWeaponM4A1 {
				} // namespace CWeaponM4A1

				namespace CTonemapController2Alias_env_tonemap_controller2 {
				} // namespace CTonemapController2Alias_env_tonemap_controller2

				namespace CCSPlayerController_ActionTrackingServices {
					constexpr auto per_round_stats = 0x40; // Name: m_perRoundStats Offset: 0x40
					constexpr auto match_stats = 0xB0; // Name: m_matchStats Offset: 0xB0
					constexpr auto i_num_round_kills = 0x170; // Name: m_iNumRoundKills Offset: 0x170
					constexpr auto i_num_round_kills_headshots = 0x174; // Name: m_iNumRoundKillsHeadshots Offset: 0x174
					constexpr auto un_total_round_damage_dealt = 0x178; // Name: m_unTotalRoundDamageDealt Offset: 0x178
				} // namespace CCSPlayerController_ActionTrackingServices

				namespace CFish {
					constexpr auto pool = 0x9A8; // Name: m_pool Offset: 0x9A8
					constexpr auto id = 0x9AC; // Name: m_id Offset: 0x9AC
					constexpr auto x = 0x9B0; // Name: m_x Offset: 0x9B0
					constexpr auto y = 0x9B4; // Name: m_y Offset: 0x9B4
					constexpr auto z = 0x9B8; // Name: m_z Offset: 0x9B8
					constexpr auto angle = 0x9BC; // Name: m_angle Offset: 0x9BC
					constexpr auto angle_change = 0x9C0; // Name: m_angleChange Offset: 0x9C0
					constexpr auto forward = 0x9C4; // Name: m_forward Offset: 0x9C4
					constexpr auto perp = 0x9D0; // Name: m_perp Offset: 0x9D0
					constexpr auto pool_origin = 0x9DC; // Name: m_poolOrigin Offset: 0x9DC
					constexpr auto water_level = 0x9E8; // Name: m_waterLevel Offset: 0x9E8
					constexpr auto speed = 0x9EC; // Name: m_speed Offset: 0x9EC
					constexpr auto desired_speed = 0x9F0; // Name: m_desiredSpeed Offset: 0x9F0
					constexpr auto calm_speed = 0x9F4; // Name: m_calmSpeed Offset: 0x9F4
					constexpr auto panic_speed = 0x9F8; // Name: m_panicSpeed Offset: 0x9F8
					constexpr auto avoid_range = 0x9FC; // Name: m_avoidRange Offset: 0x9FC
					constexpr auto turn_timer = 0xA00; // Name: m_turnTimer Offset: 0xA00
					constexpr auto turn_clockwise = 0xA18; // Name: m_turnClockwise Offset: 0xA18
					constexpr auto go_timer = 0xA20; // Name: m_goTimer Offset: 0xA20
					constexpr auto move_timer = 0xA38; // Name: m_moveTimer Offset: 0xA38
					constexpr auto panic_timer = 0xA50; // Name: m_panicTimer Offset: 0xA50
					constexpr auto disperse_timer = 0xA68; // Name: m_disperseTimer Offset: 0xA68
					constexpr auto proximity_timer = 0xA80; // Name: m_proximityTimer Offset: 0xA80
					constexpr auto visible = 0xA98; // Name: m_visible Offset: 0xA98
				} // namespace CFish

				namespace CPointClientUIWorldTextPanel {
					constexpr auto message_text = 0x998; // Name: m_messageText Offset: 0x998
				} // namespace CPointClientUIWorldTextPanel

				namespace CEnvFireSource {
					constexpr auto b_enabled = 0x4E0; // Name: m_bEnabled Offset: 0x4E0
					constexpr auto radius = 0x4E4; // Name: m_radius Offset: 0x4E4
					constexpr auto damage = 0x4E8; // Name: m_damage Offset: 0x4E8
				} // namespace CEnvFireSource

				namespace CBtNodeDecorator {
				} // namespace CBtNodeDecorator

				namespace CDebugHistory {
					constexpr auto n_npc_events = 0x3E8520; // Name: m_nNpcEvents Offset: 0x3E8520
				} // namespace CDebugHistory

				namespace CInfoData {
				} // namespace CInfoData

				namespace CHostageCarriableProp {
				} // namespace CHostageCarriableProp

				namespace CFuncRotating {
					constexpr auto on_stopped = 0x790; // Name: m_OnStopped Offset: 0x790
					constexpr auto on_started = 0x7B8; // Name: m_OnStarted Offset: 0x7B8
					constexpr auto on_reached_start = 0x7E0; // Name: m_OnReachedStart Offset: 0x7E0
					constexpr auto local_rotation_vector = 0x808; // Name: m_localRotationVector Offset: 0x808
					constexpr auto fl_fan_friction = 0x814; // Name: m_flFanFriction Offset: 0x814
					constexpr auto fl_attenuation = 0x818; // Name: m_flAttenuation Offset: 0x818
					constexpr auto fl_volume = 0x81C; // Name: m_flVolume Offset: 0x81C
					constexpr auto fl_target_speed = 0x820; // Name: m_flTargetSpeed Offset: 0x820
					constexpr auto fl_max_speed = 0x824; // Name: m_flMaxSpeed Offset: 0x824
					constexpr auto fl_block_damage = 0x828; // Name: m_flBlockDamage Offset: 0x828
					constexpr auto noise_running = 0x830; // Name: m_NoiseRunning Offset: 0x830
					constexpr auto b_reversed = 0x838; // Name: m_bReversed Offset: 0x838
					constexpr auto b_accel_decel = 0x839; // Name: m_bAccelDecel Offset: 0x839
					constexpr auto prev_local_angles = 0x844; // Name: m_prevLocalAngles Offset: 0x844
					constexpr auto ang_start = 0x850; // Name: m_angStart Offset: 0x850
					constexpr auto b_stop_at_start_pos = 0x85C; // Name: m_bStopAtStartPos Offset: 0x85C
					constexpr auto vec_client_origin = 0x860; // Name: m_vecClientOrigin Offset: 0x860
					constexpr auto vec_client_angles = 0x86C; // Name: m_vecClientAngles Offset: 0x86C
				} // namespace CFuncRotating

				namespace CBaseCSGrenadeProjectile {
					constexpr auto v_initial_position = 0xAE0; // Name: m_vInitialPosition Offset: 0xAE0
					constexpr auto v_initial_velocity = 0xAEC; // Name: m_vInitialVelocity Offset: 0xAEC
					constexpr auto n_bounces = 0xAF8; // Name: m_nBounces Offset: 0xAF8
					constexpr auto n_explode_effect_index = 0xB00; // Name: m_nExplodeEffectIndex Offset: 0xB00
					constexpr auto n_explode_effect_tick_begin = 0xB08; // Name: m_nExplodeEffectTickBegin Offset: 0xB08
					constexpr auto vec_explode_effect_origin = 0xB0C; // Name: m_vecExplodeEffectOrigin Offset: 0xB0C
					constexpr auto fl_spawn_time = 0xB18; // Name: m_flSpawnTime Offset: 0xB18
					constexpr auto un_ogsextra_flags = 0xB1C; // Name: m_unOGSExtraFlags Offset: 0xB1C
					constexpr auto b_detonation_recorded = 0xB1D; // Name: m_bDetonationRecorded Offset: 0xB1D
					constexpr auto n_item_index = 0xB1E; // Name: m_nItemIndex Offset: 0xB1E
					constexpr auto vec_original_spawn_location = 0xB20; // Name: m_vecOriginalSpawnLocation Offset: 0xB20
					constexpr auto fl_last_bounce_sound_time = 0xB2C; // Name: m_flLastBounceSoundTime Offset: 0xB2C
					constexpr auto vec_grenade_spin = 0xB30; // Name: m_vecGrenadeSpin Offset: 0xB30
					constexpr auto vec_last_hit_surface_normal = 0xB3C; // Name: m_vecLastHitSurfaceNormal Offset: 0xB3C
					constexpr auto n_ticks_at_zero_velocity = 0xB48; // Name: m_nTicksAtZeroVelocity Offset: 0xB48
					constexpr auto b_has_ever_hit_player = 0xB4C; // Name: m_bHasEverHitPlayer Offset: 0xB4C
					constexpr auto b_clear_from_players = 0xB4D; // Name: m_bClearFromPlayers Offset: 0xB4D
				} // namespace CBaseCSGrenadeProjectile

				namespace CCSGO_TeamIntroCounterTerroristPosition {
				} // namespace CCSGO_TeamIntroCounterTerroristPosition

				namespace CPointProximitySensor {
					constexpr auto b_disabled = 0x4E0; // Name: m_bDisabled Offset: 0x4E0
					constexpr auto h_target_entity = 0x4E4; // Name: m_hTargetEntity Offset: 0x4E4
					constexpr auto distance = 0x4E8; // Name: m_Distance Offset: 0x4E8
				} // namespace CPointProximitySensor

				namespace CAISound {
					constexpr auto i_sound_type = 0x4E0; // Name: m_iSoundType Offset: 0x4E0
					constexpr auto i_sound_flags = 0x4E2; // Name: m_iSoundFlags Offset: 0x4E2
					constexpr auto i_volume = 0x4E4; // Name: m_iVolume Offset: 0x4E4
					constexpr auto i_sound_index = 0x4E8; // Name: m_iSoundIndex Offset: 0x4E8
					constexpr auto fl_duration = 0x4EC; // Name: m_flDuration Offset: 0x4EC
					constexpr auto isz_proxy_entity_name = 0x4F0; // Name: m_iszProxyEntityName Offset: 0x4F0
				} // namespace CAISound

				namespace CEnvVolumetricFogVolume {
					constexpr auto b_active = 0x4E0; // Name: m_bActive Offset: 0x4E0
					constexpr auto v_box_mins = 0x4E4; // Name: m_vBoxMins Offset: 0x4E4
					constexpr auto v_box_maxs = 0x4F0; // Name: m_vBoxMaxs Offset: 0x4F0
					constexpr auto b_start_disabled = 0x4FC; // Name: m_bStartDisabled Offset: 0x4FC
					constexpr auto fl_strength = 0x500; // Name: m_flStrength Offset: 0x500
					constexpr auto n_falloff_shape = 0x504; // Name: m_nFalloffShape Offset: 0x504
					constexpr auto fl_falloff_exponent = 0x508; // Name: m_flFalloffExponent Offset: 0x508
					constexpr auto fl_height_fog_depth = 0x50C; // Name: m_flHeightFogDepth Offset: 0x50C
					constexpr auto f_height_fog_edge_width = 0x510; // Name: m_fHeightFogEdgeWidth Offset: 0x510
					constexpr auto f_indirect_light_strength = 0x514; // Name: m_fIndirectLightStrength Offset: 0x514
					constexpr auto f_sun_light_strength = 0x518; // Name: m_fSunLightStrength Offset: 0x518
					constexpr auto f_noise_strength = 0x51C; // Name: m_fNoiseStrength Offset: 0x51C
					constexpr auto b_override_indirect_light_strength = 0x520; // Name: m_bOverrideIndirectLightStrength Offset: 0x520
					constexpr auto b_override_sun_light_strength = 0x521; // Name: m_bOverrideSunLightStrength Offset: 0x521
					constexpr auto b_override_noise_strength = 0x522; // Name: m_bOverrideNoiseStrength Offset: 0x522
					constexpr auto b_allow_lpvindirect = 0x523; // Name: m_bAllowLPVIndirect Offset: 0x523
				} // namespace CEnvVolumetricFogVolume

				namespace CBaseModelEntity {
					constexpr auto crender_component = 0x4E0; // Name: m_CRenderComponent Offset: 0x4E0
					constexpr auto chitbox_component = 0x4E8; // Name: m_CHitboxComponent Offset: 0x4E8
					constexpr auto n_destructible_part_initial_state_destructed0 = 0x510; // Name: m_nDestructiblePartInitialStateDestructed0 Offset: 0x510
					constexpr auto n_destructible_part_initial_state_destructed1 = 0x514; // Name: m_nDestructiblePartInitialStateDestructed1 Offset: 0x514
					constexpr auto n_destructible_part_initial_state_destructed2 = 0x518; // Name: m_nDestructiblePartInitialStateDestructed2 Offset: 0x518
					constexpr auto n_destructible_part_initial_state_destructed3 = 0x51C; // Name: m_nDestructiblePartInitialStateDestructed3 Offset: 0x51C
					constexpr auto n_destructible_part_initial_state_destructed4 = 0x520; // Name: m_nDestructiblePartInitialStateDestructed4 Offset: 0x520
					constexpr auto n_last_hit_destructible_part_index = 0x524; // Name: m_nLastHitDestructiblePartIndex Offset: 0x524
					constexpr auto last_hit_group = 0x550; // Name: m_LastHitGroup Offset: 0x550
					constexpr auto fl_dissolve_start_time = 0x554; // Name: m_flDissolveStartTime Offset: 0x554
					constexpr auto on_ignite = 0x558; // Name: m_OnIgnite Offset: 0x558
					constexpr auto n_render_mode = 0x580; // Name: m_nRenderMode Offset: 0x580
					constexpr auto n_render_fx = 0x581; // Name: m_nRenderFX Offset: 0x581
					constexpr auto b_allow_fade_in_view = 0x582; // Name: m_bAllowFadeInView Offset: 0x582
					constexpr auto clr_render = 0x5A0; // Name: m_clrRender Offset: 0x5A0
					constexpr auto vec_render_attributes = 0x5A8; // Name: m_vecRenderAttributes Offset: 0x5A8
					constexpr auto b_render_to_cubemaps = 0x5F8; // Name: m_bRenderToCubemaps Offset: 0x5F8
					constexpr auto b_no_interpolate = 0x5F9; // Name: m_bNoInterpolate Offset: 0x5F9
					constexpr auto collision = 0x600; // Name: m_Collision Offset: 0x600
					constexpr auto glow = 0x6B0; // Name: m_Glow Offset: 0x6B0
					constexpr auto fl_glow_backface_mult = 0x708; // Name: m_flGlowBackfaceMult Offset: 0x708
					constexpr auto fade_min_dist = 0x70C; // Name: m_fadeMinDist Offset: 0x70C
					constexpr auto fade_max_dist = 0x710; // Name: m_fadeMaxDist Offset: 0x710
					constexpr auto fl_fade_scale = 0x714; // Name: m_flFadeScale Offset: 0x714
					constexpr auto fl_shadow_strength = 0x718; // Name: m_flShadowStrength Offset: 0x718
					constexpr auto n_object_culling = 0x71C; // Name: m_nObjectCulling Offset: 0x71C
					constexpr auto n_add_decal = 0x720; // Name: m_nAddDecal Offset: 0x720
					constexpr auto v_decal_position = 0x724; // Name: m_vDecalPosition Offset: 0x724
					constexpr auto v_decal_forward_axis = 0x730; // Name: m_vDecalForwardAxis Offset: 0x730
					constexpr auto fl_decal_heal_blood_rate = 0x73C; // Name: m_flDecalHealBloodRate Offset: 0x73C
					constexpr auto fl_decal_heal_height_rate = 0x740; // Name: m_flDecalHealHeightRate Offset: 0x740
					constexpr auto config_entities_to_propagate_material_decals_to = 0x748; // Name: m_ConfigEntitiesToPropagateMaterialDecalsTo Offset: 0x748
					constexpr auto vec_view_offset = 0x760; // Name: m_vecViewOffset Offset: 0x760
				} // namespace CBaseModelEntity

				namespace CPhysMagnet {
					constexpr auto on_magnet_attach = 0x9A8; // Name: m_OnMagnetAttach Offset: 0x9A8
					constexpr auto on_magnet_detach = 0x9D0; // Name: m_OnMagnetDetach Offset: 0x9D0
					constexpr auto mass_scale = 0x9F8; // Name: m_massScale Offset: 0x9F8
					constexpr auto force_limit = 0x9FC; // Name: m_forceLimit Offset: 0x9FC
					constexpr auto torque_limit = 0xA00; // Name: m_torqueLimit Offset: 0xA00
					constexpr auto magnetted_entities = 0xA08; // Name: m_MagnettedEntities Offset: 0xA08
					constexpr auto b_active = 0xA20; // Name: m_bActive Offset: 0xA20
					constexpr auto b_has_hit_something = 0xA21; // Name: m_bHasHitSomething Offset: 0xA21
					constexpr auto fl_total_mass = 0xA24; // Name: m_flTotalMass Offset: 0xA24
					constexpr auto fl_radius = 0xA28; // Name: m_flRadius Offset: 0xA28
					constexpr auto fl_next_suck_time = 0xA2C; // Name: m_flNextSuckTime Offset: 0xA2C
					constexpr auto i_max_objects_attached = 0xA30; // Name: m_iMaxObjectsAttached Offset: 0xA30
				} // namespace CPhysMagnet

				namespace CFuncNavBlocker {
					constexpr auto b_disabled = 0x790; // Name: m_bDisabled Offset: 0x790
					constexpr auto n_blocked_team_number = 0x794; // Name: m_nBlockedTeamNumber Offset: 0x794
				} // namespace CFuncNavBlocker

				namespace CAttributeManager_cached_attribute_float_t {
					constexpr auto fl_in = 0x0; // Name: flIn Offset: 0x0
					constexpr auto i_attrib_hook = 0x8; // Name: iAttribHook Offset: 0x8
					constexpr auto fl_out = 0x10; // Name: flOut Offset: 0x10
				} // namespace CAttributeManager_cached_attribute_float_t

				namespace CRagdollMagnet {
					constexpr auto b_disabled = 0x4E0; // Name: m_bDisabled Offset: 0x4E0
					constexpr auto radius = 0x4E4; // Name: m_radius Offset: 0x4E4
					constexpr auto force = 0x4E8; // Name: m_force Offset: 0x4E8
					constexpr auto axis = 0x4EC; // Name: m_axis Offset: 0x4EC
				} // namespace CRagdollMagnet

				namespace WeaponPurchaseTracker_t {
					constexpr auto weapon_purchases = 0x8; // Name: m_weaponPurchases Offset: 0x8
				} // namespace WeaponPurchaseTracker_t

				namespace CTeamplayRules {
				} // namespace CTeamplayRules

				namespace CPhysBox {
					constexpr auto damage_type = 0x868; // Name: m_damageType Offset: 0x868
					constexpr auto damage_to_enable_motion = 0x86C; // Name: m_damageToEnableMotion Offset: 0x86C
					constexpr auto fl_force_to_enable_motion = 0x870; // Name: m_flForceToEnableMotion Offset: 0x870
					constexpr auto ang_preferred_carry_angles = 0x874; // Name: m_angPreferredCarryAngles Offset: 0x874
					constexpr auto b_not_solid_to_world = 0x880; // Name: m_bNotSolidToWorld Offset: 0x880
					constexpr auto b_enable_use_output = 0x881; // Name: m_bEnableUseOutput Offset: 0x881
					constexpr auto i_exploitable_by_player = 0x884; // Name: m_iExploitableByPlayer Offset: 0x884
					constexpr auto fl_touch_output_per_entity_delay = 0x888; // Name: m_flTouchOutputPerEntityDelay Offset: 0x888
					constexpr auto on_damaged = 0x890; // Name: m_OnDamaged Offset: 0x890
					constexpr auto on_awakened = 0x8B8; // Name: m_OnAwakened Offset: 0x8B8
					constexpr auto on_motion_enabled = 0x8E0; // Name: m_OnMotionEnabled Offset: 0x8E0
					constexpr auto on_player_use = 0x908; // Name: m_OnPlayerUse Offset: 0x908
					constexpr auto on_start_touch = 0x930; // Name: m_OnStartTouch Offset: 0x930
					constexpr auto h_carrying_player = 0x958; // Name: m_hCarryingPlayer Offset: 0x958
				} // namespace CPhysBox

				namespace CHEGrenadeProjectile {
				} // namespace CHEGrenadeProjectile

				namespace CHintMessageQueue {
					constexpr auto tm_message_end = 0x0; // Name: m_tmMessageEnd Offset: 0x0
					constexpr auto messages = 0x8; // Name: m_messages Offset: 0x8
					constexpr auto p_player_controller = 0x20; // Name: m_pPlayerController Offset: 0x20
				} // namespace CHintMessageQueue

				namespace CPhysExplosion {
					constexpr auto b_explode_on_spawn = 0x4E0; // Name: m_bExplodeOnSpawn Offset: 0x4E0
					constexpr auto fl_magnitude = 0x4E4; // Name: m_flMagnitude Offset: 0x4E4
					constexpr auto fl_damage = 0x4E8; // Name: m_flDamage Offset: 0x4E8
					constexpr auto radius = 0x4EC; // Name: m_radius Offset: 0x4EC
					constexpr auto target_entity_name = 0x4F0; // Name: m_targetEntityName Offset: 0x4F0
					constexpr auto fl_inner_radius = 0x4F8; // Name: m_flInnerRadius Offset: 0x4F8
					constexpr auto fl_push_scale = 0x4FC; // Name: m_flPushScale Offset: 0x4FC
					constexpr auto b_convert_to_debris_when_possible = 0x500; // Name: m_bConvertToDebrisWhenPossible Offset: 0x500
					constexpr auto on_pushed_player = 0x508; // Name: m_OnPushedPlayer Offset: 0x508
				} // namespace CPhysExplosion

				namespace CCSPlayerResource {
					constexpr auto b_hostage_alive = 0x4E0; // Name: m_bHostageAlive Offset: 0x4E0
					constexpr auto is_hostage_following_someone = 0x4EC; // Name: m_isHostageFollowingSomeone Offset: 0x4EC
					constexpr auto i_hostage_entity_ids = 0x4F8; // Name: m_iHostageEntityIDs Offset: 0x4F8
					constexpr auto bombsite_center_a = 0x528; // Name: m_bombsiteCenterA Offset: 0x528
					constexpr auto bombsite_center_b = 0x534; // Name: m_bombsiteCenterB Offset: 0x534
					constexpr auto hostage_rescue_x = 0x540; // Name: m_hostageRescueX Offset: 0x540
					constexpr auto hostage_rescue_y = 0x550; // Name: m_hostageRescueY Offset: 0x550
					constexpr auto hostage_rescue_z = 0x560; // Name: m_hostageRescueZ Offset: 0x560
					constexpr auto b_end_match_next_map_all_voted = 0x570; // Name: m_bEndMatchNextMapAllVoted Offset: 0x570
					constexpr auto found_goal_positions = 0x571; // Name: m_foundGoalPositions Offset: 0x571
				} // namespace CCSPlayerResource

				namespace CWeaponUMP45 {
				} // namespace CWeaponUMP45

				namespace CPhysicalButton {
				} // namespace CPhysicalButton

				namespace CBot {
					constexpr auto p_controller = 0x10; // Name: m_pController Offset: 0x10
					constexpr auto p_player = 0x18; // Name: m_pPlayer Offset: 0x18
					constexpr auto b_has_spawned = 0x20; // Name: m_bHasSpawned Offset: 0x20
					constexpr auto id = 0x24; // Name: m_id Offset: 0x24
					constexpr auto is_running = 0xC0; // Name: m_isRunning Offset: 0xC0
					constexpr auto is_crouching = 0xC1; // Name: m_isCrouching Offset: 0xC1
					constexpr auto forward_speed = 0xC4; // Name: m_forwardSpeed Offset: 0xC4
					constexpr auto left_speed = 0xC8; // Name: m_leftSpeed Offset: 0xC8
					constexpr auto vertical_speed = 0xCC; // Name: m_verticalSpeed Offset: 0xCC
					constexpr auto button_flags = 0xD0; // Name: m_buttonFlags Offset: 0xD0
					constexpr auto jump_timestamp = 0xD8; // Name: m_jumpTimestamp Offset: 0xD8
					constexpr auto view_forward = 0xDC; // Name: m_viewForward Offset: 0xDC
					constexpr auto posture_stack_index = 0xF8; // Name: m_postureStackIndex Offset: 0xF8
				} // namespace CBot

				namespace CPlayer_WeaponServices {
					constexpr auto h_my_weapons = 0x40; // Name: m_hMyWeapons Offset: 0x40
					constexpr auto h_active_weapon = 0x58; // Name: m_hActiveWeapon Offset: 0x58
					constexpr auto h_last_weapon = 0x5C; // Name: m_hLastWeapon Offset: 0x5C
					constexpr auto i_ammo = 0x60; // Name: m_iAmmo Offset: 0x60
					constexpr auto b_prevent_weapon_pickup = 0xA0; // Name: m_bPreventWeaponPickup Offset: 0xA0
				} // namespace CPlayer_WeaponServices

				namespace CCSGameModeRules {
					constexpr auto _m_p_chain_entity = 0x8; // Name: __m_pChainEntity Offset: 0x8
				} // namespace CCSGameModeRules

				namespace VPhysicsCollisionAttribute_t {
					constexpr auto n_interacts_as = 0x8; // Name: m_nInteractsAs Offset: 0x8
					constexpr auto n_interacts_with = 0x10; // Name: m_nInteractsWith Offset: 0x10
					constexpr auto n_interacts_exclude = 0x18; // Name: m_nInteractsExclude Offset: 0x18
					constexpr auto n_entity_id = 0x20; // Name: m_nEntityId Offset: 0x20
					constexpr auto n_owner_id = 0x24; // Name: m_nOwnerId Offset: 0x24
					constexpr auto n_hierarchy_id = 0x28; // Name: m_nHierarchyId Offset: 0x28
					constexpr auto n_collision_group = 0x2A; // Name: m_nCollisionGroup Offset: 0x2A
					constexpr auto n_collision_function_mask = 0x2B; // Name: m_nCollisionFunctionMask Offset: 0x2B
				} // namespace VPhysicsCollisionAttribute_t

				namespace CShatterGlassShardPhysics {
					constexpr auto b_debris = 0xD00; // Name: m_bDebris Offset: 0xD00
					constexpr auto h_parent_shard = 0xD04; // Name: m_hParentShard Offset: 0xD04
					constexpr auto shard_desc = 0xD08; // Name: m_ShardDesc Offset: 0xD08
				} // namespace CShatterGlassShardPhysics

				namespace CCSPointScriptExtensions_observer {
				} // namespace CCSPointScriptExtensions_observer

				namespace CCSObserver_CameraServices {
				} // namespace CCSObserver_CameraServices

				namespace CTriggerImpact {
					constexpr auto fl_magnitude = 0x988; // Name: m_flMagnitude Offset: 0x988
					constexpr auto fl_noise = 0x98C; // Name: m_flNoise Offset: 0x98C
					constexpr auto fl_viewkick = 0x990; // Name: m_flViewkick Offset: 0x990
					constexpr auto p_output_force = 0x998; // Name: m_pOutputForce Offset: 0x998
				} // namespace CTriggerImpact

				namespace CMapInfo {
					constexpr auto i_buying_status = 0x4E0; // Name: m_iBuyingStatus Offset: 0x4E0
					constexpr auto fl_bomb_radius = 0x4E4; // Name: m_flBombRadius Offset: 0x4E4
					constexpr auto i_pet_population = 0x4E8; // Name: m_iPetPopulation Offset: 0x4E8
					constexpr auto b_use_normal_spawns_for_dm = 0x4EC; // Name: m_bUseNormalSpawnsForDM Offset: 0x4EC
					constexpr auto b_disable_auto_generated_dmspawns = 0x4ED; // Name: m_bDisableAutoGeneratedDMSpawns Offset: 0x4ED
					constexpr auto fl_bot_max_vision_distance = 0x4F0; // Name: m_flBotMaxVisionDistance Offset: 0x4F0
					constexpr auto i_hostage_count = 0x4F4; // Name: m_iHostageCount Offset: 0x4F4
					constexpr auto b_fade_player_visibility_far_z = 0x4F8; // Name: m_bFadePlayerVisibilityFarZ Offset: 0x4F8
					constexpr auto b_rain_trace_to_sky_enabled = 0x4F9; // Name: m_bRainTraceToSkyEnabled Offset: 0x4F9
				} // namespace CMapInfo

				namespace CPathParticleRopeAlias_path_particle_rope_clientside {
				} // namespace CPathParticleRopeAlias_path_particle_rope_clientside

				namespace CSun {
					constexpr auto v_direction = 0x790; // Name: m_vDirection Offset: 0x790
					constexpr auto clr_overlay = 0x79C; // Name: m_clrOverlay Offset: 0x79C
					constexpr auto isz_effect_name = 0x7A0; // Name: m_iszEffectName Offset: 0x7A0
					constexpr auto isz_sseffect_name = 0x7A8; // Name: m_iszSSEffectName Offset: 0x7A8
					constexpr auto b_on = 0x7B0; // Name: m_bOn Offset: 0x7B0
					constexpr auto bmax_color = 0x7B1; // Name: m_bmaxColor Offset: 0x7B1
					constexpr auto fl_size = 0x7B4; // Name: m_flSize Offset: 0x7B4
					constexpr auto fl_rotation = 0x7B8; // Name: m_flRotation Offset: 0x7B8
					constexpr auto fl_haze_scale = 0x7BC; // Name: m_flHazeScale Offset: 0x7BC
					constexpr auto fl_alpha_haze = 0x7C0; // Name: m_flAlphaHaze Offset: 0x7C0
					constexpr auto fl_alpha_hdr = 0x7C4; // Name: m_flAlphaHdr Offset: 0x7C4
					constexpr auto fl_alpha_scale = 0x7C8; // Name: m_flAlphaScale Offset: 0x7C8
					constexpr auto fl_hdrcolor_scale = 0x7CC; // Name: m_flHDRColorScale Offset: 0x7CC
					constexpr auto fl_far_zscale = 0x7D0; // Name: m_flFarZScale Offset: 0x7D0
				} // namespace CSun

				namespace CPathParticleRope {
					constexpr auto b_start_active = 0x4E8; // Name: m_bStartActive Offset: 0x4E8
					constexpr auto fl_max_simulation_time = 0x4EC; // Name: m_flMaxSimulationTime Offset: 0x4EC
					constexpr auto isz_effect_name = 0x4F0; // Name: m_iszEffectName Offset: 0x4F0
					constexpr auto path_nodes__name = 0x4F8; // Name: m_PathNodes_Name Offset: 0x4F8
					constexpr auto fl_particle_spacing = 0x510; // Name: m_flParticleSpacing Offset: 0x510
					constexpr auto fl_slack = 0x514; // Name: m_flSlack Offset: 0x514
					constexpr auto fl_radius = 0x518; // Name: m_flRadius Offset: 0x518
					constexpr auto color_tint = 0x51C; // Name: m_ColorTint Offset: 0x51C
					constexpr auto n_effect_state = 0x520; // Name: m_nEffectState Offset: 0x520
					constexpr auto i_effect_index = 0x528; // Name: m_iEffectIndex Offset: 0x528
					constexpr auto path_nodes__position = 0x530; // Name: m_PathNodes_Position Offset: 0x530
					constexpr auto path_nodes__tangent_in = 0x548; // Name: m_PathNodes_TangentIn Offset: 0x548
					constexpr auto path_nodes__tangent_out = 0x560; // Name: m_PathNodes_TangentOut Offset: 0x560
					constexpr auto path_nodes__color = 0x578; // Name: m_PathNodes_Color Offset: 0x578
					constexpr auto path_nodes__pin_enabled = 0x590; // Name: m_PathNodes_PinEnabled Offset: 0x590
					constexpr auto path_nodes__radius_scale = 0x5A8; // Name: m_PathNodes_RadiusScale Offset: 0x5A8
				} // namespace CPathParticleRope

				namespace CTriggerDetectBulletFire {
					constexpr auto b_player_fire_only = 0x960; // Name: m_bPlayerFireOnly Offset: 0x960
					constexpr auto on_detected_bullet_fire = 0x968; // Name: m_OnDetectedBulletFire Offset: 0x968
				} // namespace CTriggerDetectBulletFire

				namespace CWorld {
				} // namespace CWorld

				namespace ServerAuthoritativeWeaponSlot_t {
					constexpr auto un_class = 0x28; // Name: unClass Offset: 0x28
					constexpr auto un_slot = 0x2A; // Name: unSlot Offset: 0x2A
					constexpr auto un_item_def_idx = 0x2C; // Name: unItemDefIdx Offset: 0x2C
				} // namespace ServerAuthoritativeWeaponSlot_t

				namespace CPointGiveAmmo {
					constexpr auto p_activator = 0x4E0; // Name: m_pActivator Offset: 0x4E0
				} // namespace CPointGiveAmmo

				namespace CFuncMoveLinearAlias_momentary_door {
				} // namespace CFuncMoveLinearAlias_momentary_door

				namespace CTakeDamageInfoAPI {
				} // namespace CTakeDamageInfoAPI

				namespace CPlayerVisibility {
					constexpr auto fl_visibility_strength = 0x4E0; // Name: m_flVisibilityStrength Offset: 0x4E0
					constexpr auto fl_fog_distance_multiplier = 0x4E4; // Name: m_flFogDistanceMultiplier Offset: 0x4E4
					constexpr auto fl_fog_max_density_multiplier = 0x4E8; // Name: m_flFogMaxDensityMultiplier Offset: 0x4E8
					constexpr auto fl_fade_time = 0x4EC; // Name: m_flFadeTime Offset: 0x4EC
					constexpr auto b_start_disabled = 0x4F0; // Name: m_bStartDisabled Offset: 0x4F0
					constexpr auto b_is_enabled = 0x4F1; // Name: m_bIsEnabled Offset: 0x4F1
				} // namespace CPlayerVisibility

				namespace CEnvExplosion {
					constexpr auto i_magnitude = 0x790; // Name: m_iMagnitude Offset: 0x790
					constexpr auto fl_player_damage = 0x794; // Name: m_flPlayerDamage Offset: 0x794
					constexpr auto i_radius_override = 0x798; // Name: m_iRadiusOverride Offset: 0x798
					constexpr auto fl_inner_radius = 0x79C; // Name: m_flInnerRadius Offset: 0x79C
					constexpr auto sprite_scale = 0x7A0; // Name: m_spriteScale Offset: 0x7A0
					constexpr auto fl_damage_force = 0x7A4; // Name: m_flDamageForce Offset: 0x7A4
					constexpr auto h_inflictor = 0x7A8; // Name: m_hInflictor Offset: 0x7A8
					constexpr auto i_custom_damage_type = 0x7AC; // Name: m_iCustomDamageType Offset: 0x7AC
					constexpr auto b_create_debris = 0x7B0; // Name: m_bCreateDebris Offset: 0x7B0
					constexpr auto isz_explosion_type = 0x7B8; // Name: m_iszExplosionType Offset: 0x7B8
					constexpr auto isz_custom_effect_name = 0x7C0; // Name: m_iszCustomEffectName Offset: 0x7C0
					constexpr auto isz_custom_sound_name = 0x7C8; // Name: m_iszCustomSoundName Offset: 0x7C8
					constexpr auto i_class_ignore = 0x7D0; // Name: m_iClassIgnore Offset: 0x7D0
					constexpr auto i_class_ignore2 = 0x7D4; // Name: m_iClassIgnore2 Offset: 0x7D4
					constexpr auto isz_entity_ignore_name = 0x7D8; // Name: m_iszEntityIgnoreName Offset: 0x7D8
					constexpr auto h_entity_ignore = 0x7E0; // Name: m_hEntityIgnore Offset: 0x7E0
				} // namespace CEnvExplosion

				namespace CServerOnlyPointEntity {
				} // namespace CServerOnlyPointEntity

				namespace CFuncMover {
					constexpr auto b_create_movable_nav_mesh = 0x790; // Name: m_bCreateMovableNavMesh Offset: 0x790
					constexpr auto isz_path_name = 0x798; // Name: m_iszPathName Offset: 0x798
					constexpr auto h_path_mover = 0x7A0; // Name: m_hPathMover Offset: 0x7A0
					constexpr auto isz_path_node_start = 0x7A8; // Name: m_iszPathNodeStart Offset: 0x7A8
					constexpr auto e_move_type = 0x7B0; // Name: m_eMoveType Offset: 0x7B0
					constexpr auto b_is_reversing = 0x7B4; // Name: m_bIsReversing Offset: 0x7B4
					constexpr auto v_target = 0x7B8; // Name: m_vTarget Offset: 0x7B8
					constexpr auto fl_start_speed = 0x7C4; // Name: m_flStartSpeed Offset: 0x7C4
					constexpr auto fl_path_location = 0x7C8; // Name: m_flPathLocation Offset: 0x7C8
					constexpr auto fl_t = 0x7CC; // Name: m_flT Offset: 0x7CC
					constexpr auto n_current_node_index = 0x7D0; // Name: m_nCurrentNodeIndex Offset: 0x7D0
					constexpr auto n_previous_node_index = 0x7D4; // Name: m_nPreviousNodeIndex Offset: 0x7D4
					constexpr auto b_fixed_orientation = 0x7D8; // Name: m_bFixedOrientation Offset: 0x7D8
					constexpr auto b_fixed_pitch = 0x7D9; // Name: m_bFixedPitch Offset: 0x7D9
					constexpr auto e_solid_type = 0x7DA; // Name: m_eSolidType Offset: 0x7DA
					constexpr auto b_is_moving = 0x7DB; // Name: m_bIsMoving Offset: 0x7DB
					constexpr auto fl_time_to_reach_max_speed = 0x7DC; // Name: m_flTimeToReachMaxSpeed Offset: 0x7DC
					constexpr auto fl_distance_to_reach_max_speed = 0x7E0; // Name: m_flDistanceToReachMaxSpeed Offset: 0x7E0
					constexpr auto fl_time_to_reach_zero_speed = 0x7E4; // Name: m_flTimeToReachZeroSpeed Offset: 0x7E4
					constexpr auto fl_distance_to_reach_zero_speed = 0x7E8; // Name: m_flDistanceToReachZeroSpeed Offset: 0x7E8
					constexpr auto fl_time_movement_start = 0x7EC; // Name: m_flTimeMovementStart Offset: 0x7EC
					constexpr auto fl_time_movement_stop = 0x7F0; // Name: m_flTimeMovementStop Offset: 0x7F0
					constexpr auto h_stop_at_node = 0x7F4; // Name: m_hStopAtNode Offset: 0x7F4
					constexpr auto fl_path_location_to_begin_stop = 0x7F8; // Name: m_flPathLocationToBeginStop Offset: 0x7F8
					constexpr auto isz_start_forward_sound = 0x800; // Name: m_iszStartForwardSound Offset: 0x800
					constexpr auto isz_loop_forward_sound = 0x808; // Name: m_iszLoopForwardSound Offset: 0x808
					constexpr auto isz_stop_forward_sound = 0x810; // Name: m_iszStopForwardSound Offset: 0x810
					constexpr auto isz_start_reverse_sound = 0x818; // Name: m_iszStartReverseSound Offset: 0x818
					constexpr auto isz_loop_reverse_sound = 0x820; // Name: m_iszLoopReverseSound Offset: 0x820
					constexpr auto isz_stop_reverse_sound = 0x828; // Name: m_iszStopReverseSound Offset: 0x828
					constexpr auto isz_arrive_at_destination_sound = 0x830; // Name: m_iszArriveAtDestinationSound Offset: 0x830
					constexpr auto on_movement_end = 0x840; // Name: m_OnMovementEnd Offset: 0x840
					constexpr auto b_start_at_end = 0x868; // Name: m_bStartAtEnd Offset: 0x868
					constexpr auto e_orientation_update = 0x86C; // Name: m_eOrientationUpdate Offset: 0x86C
					constexpr auto fl_time_start_orientation_change = 0x870; // Name: m_flTimeStartOrientationChange Offset: 0x870
					constexpr auto fl_time_to_blend_to_new_orientation = 0x874; // Name: m_flTimeToBlendToNewOrientation Offset: 0x874
					constexpr auto fl_duration_blend_to_new_orientation_ran = 0x878; // Name: m_flDurationBlendToNewOrientationRan Offset: 0x878
					constexpr auto q_original_orientation = 0x880; // Name: m_qOriginalOrientation Offset: 0x880
				} // namespace CFuncMover

				namespace audioparams_t {
					constexpr auto local_sound = 0x8; // Name: localSound Offset: 0x8
					constexpr auto soundscape_index = 0x68; // Name: soundscapeIndex Offset: 0x68
					constexpr auto local_bits = 0x6C; // Name: localBits Offset: 0x6C
					constexpr auto soundscape_entity_list_index = 0x70; // Name: soundscapeEntityListIndex Offset: 0x70
					constexpr auto sound_event_hash = 0x74; // Name: soundEventHash Offset: 0x74
				} // namespace audioparams_t

				namespace CFlashbangProjectile {
					constexpr auto fl_time_to_detonate = 0xB50; // Name: m_flTimeToDetonate Offset: 0xB50
					constexpr auto num_opponents_hit = 0xB54; // Name: m_numOpponentsHit Offset: 0xB54
					constexpr auto num_teammates_hit = 0xB55; // Name: m_numTeammatesHit Offset: 0xB55
				} // namespace CFlashbangProjectile

				namespace ResponseContext_t {
					constexpr auto isz_name = 0x0; // Name: m_iszName Offset: 0x0
					constexpr auto isz_value = 0x8; // Name: m_iszValue Offset: 0x8
					constexpr auto f_expiration_time = 0x10; // Name: m_fExpirationTime Offset: 0x10
				} // namespace ResponseContext_t

				namespace CGameEnd {
				} // namespace CGameEnd

				namespace CTriggerCallback {
				} // namespace CTriggerCallback

				namespace CBubbling {
					constexpr auto density = 0x790; // Name: m_density Offset: 0x790
					constexpr auto frequency = 0x794; // Name: m_frequency Offset: 0x794
					constexpr auto state = 0x798; // Name: m_state Offset: 0x798
				} // namespace CBubbling

				namespace CCSGameRules {
					constexpr auto b_freeze_period = 0xC8; // Name: m_bFreezePeriod Offset: 0xC8
					constexpr auto b_warmup_period = 0xC9; // Name: m_bWarmupPeriod Offset: 0xC9
					constexpr auto f_warmup_period_end = 0xCC; // Name: m_fWarmupPeriodEnd Offset: 0xCC
					constexpr auto f_warmup_period_start = 0xD0; // Name: m_fWarmupPeriodStart Offset: 0xD0
					constexpr auto b_server_paused = 0xD4; // Name: m_bServerPaused Offset: 0xD4
					constexpr auto b_terrorist_time_out_active = 0xD5; // Name: m_bTerroristTimeOutActive Offset: 0xD5
					constexpr auto b_cttime_out_active = 0xD6; // Name: m_bCTTimeOutActive Offset: 0xD6
					constexpr auto fl_terrorist_time_out_remaining = 0xD8; // Name: m_flTerroristTimeOutRemaining Offset: 0xD8
					constexpr auto fl_cttime_out_remaining = 0xDC; // Name: m_flCTTimeOutRemaining Offset: 0xDC
					constexpr auto n_terrorist_time_outs = 0xE0; // Name: m_nTerroristTimeOuts Offset: 0xE0
					constexpr auto n_cttime_outs = 0xE4; // Name: m_nCTTimeOuts Offset: 0xE4
					constexpr auto b_technical_time_out = 0xE8; // Name: m_bTechnicalTimeOut Offset: 0xE8
					constexpr auto b_match_waiting_for_resume = 0xE9; // Name: m_bMatchWaitingForResume Offset: 0xE9
					constexpr auto i_round_time = 0xEC; // Name: m_iRoundTime Offset: 0xEC
					constexpr auto f_match_start_time = 0xF0; // Name: m_fMatchStartTime Offset: 0xF0
					constexpr auto f_round_start_time = 0xF4; // Name: m_fRoundStartTime Offset: 0xF4
					constexpr auto fl_restart_round_time = 0xF8; // Name: m_flRestartRoundTime Offset: 0xF8
					constexpr auto b_game_restart = 0xFC; // Name: m_bGameRestart Offset: 0xFC
					constexpr auto fl_game_start_time = 0x100; // Name: m_flGameStartTime Offset: 0x100
					constexpr auto time_until_next_phase_starts = 0x104; // Name: m_timeUntilNextPhaseStarts Offset: 0x104
					constexpr auto game_phase = 0x108; // Name: m_gamePhase Offset: 0x108
					constexpr auto total_rounds_played = 0x10C; // Name: m_totalRoundsPlayed Offset: 0x10C
					constexpr auto n_rounds_played_this_phase = 0x110; // Name: m_nRoundsPlayedThisPhase Offset: 0x110
					constexpr auto n_overtime_playing = 0x114; // Name: m_nOvertimePlaying Offset: 0x114
					constexpr auto i_hostages_remaining = 0x118; // Name: m_iHostagesRemaining Offset: 0x118
					constexpr auto b_any_hostage_reached = 0x11C; // Name: m_bAnyHostageReached Offset: 0x11C
					constexpr auto b_map_has_bomb_target = 0x11D; // Name: m_bMapHasBombTarget Offset: 0x11D
					constexpr auto b_map_has_rescue_zone = 0x11E; // Name: m_bMapHasRescueZone Offset: 0x11E
					constexpr auto b_map_has_buy_zone = 0x11F; // Name: m_bMapHasBuyZone Offset: 0x11F
					constexpr auto b_is_queued_matchmaking = 0x120; // Name: m_bIsQueuedMatchmaking Offset: 0x120
					constexpr auto n_queued_matchmaking_mode = 0x124; // Name: m_nQueuedMatchmakingMode Offset: 0x124
					constexpr auto b_is_valve_ds = 0x128; // Name: m_bIsValveDS Offset: 0x128
					constexpr auto b_logo_map = 0x129; // Name: m_bLogoMap Offset: 0x129
					constexpr auto b_play_all_step_sounds_on_server = 0x12A; // Name: m_bPlayAllStepSoundsOnServer Offset: 0x12A
					constexpr auto i_spectator_slot_count = 0x12C; // Name: m_iSpectatorSlotCount Offset: 0x12C
					constexpr auto match_device = 0x130; // Name: m_MatchDevice Offset: 0x130
					constexpr auto b_has_match_started = 0x134; // Name: m_bHasMatchStarted Offset: 0x134
					constexpr auto n_next_map_in_mapgroup = 0x138; // Name: m_nNextMapInMapgroup Offset: 0x138
					constexpr auto sz_tournament_event_name = 0x13C; // Name: m_szTournamentEventName Offset: 0x13C
					constexpr auto sz_tournament_event_stage = 0x33C; // Name: m_szTournamentEventStage Offset: 0x33C
					constexpr auto sz_match_stat_txt = 0x53C; // Name: m_szMatchStatTxt Offset: 0x53C
					constexpr auto sz_tournament_predictions_txt = 0x73C; // Name: m_szTournamentPredictionsTxt Offset: 0x73C
					constexpr auto n_tournament_predictions_pct = 0x93C; // Name: m_nTournamentPredictionsPct Offset: 0x93C
					constexpr auto fl_cmmitem_drop_reveal_start_time = 0x940; // Name: m_flCMMItemDropRevealStartTime Offset: 0x940
					constexpr auto fl_cmmitem_drop_reveal_end_time = 0x944; // Name: m_flCMMItemDropRevealEndTime Offset: 0x944
					constexpr auto b_is_dropping_items = 0x948; // Name: m_bIsDroppingItems Offset: 0x948
					constexpr auto b_is_quest_eligible = 0x949; // Name: m_bIsQuestEligible Offset: 0x949
					constexpr auto b_is_hltv_active = 0x94A; // Name: m_bIsHltvActive Offset: 0x94A
					constexpr auto arr_prohibited_item_indices = 0x94C; // Name: m_arrProhibitedItemIndices Offset: 0x94C
					constexpr auto arr_tournament_active_caster_accounts = 0xA14; // Name: m_arrTournamentActiveCasterAccounts Offset: 0xA14
					constexpr auto num_best_of_maps = 0xA24; // Name: m_numBestOfMaps Offset: 0xA24
					constexpr auto n_halloween_mask_list_seed = 0xA28; // Name: m_nHalloweenMaskListSeed Offset: 0xA28
					constexpr auto b_bomb_dropped = 0xA2C; // Name: m_bBombDropped Offset: 0xA2C
					constexpr auto b_bomb_planted = 0xA2D; // Name: m_bBombPlanted Offset: 0xA2D
					constexpr auto i_round_win_status = 0xA30; // Name: m_iRoundWinStatus Offset: 0xA30
					constexpr auto e_round_win_reason = 0xA34; // Name: m_eRoundWinReason Offset: 0xA34
					constexpr auto b_tcant_buy = 0xA38; // Name: m_bTCantBuy Offset: 0xA38
					constexpr auto b_ctcant_buy = 0xA39; // Name: m_bCTCantBuy Offset: 0xA39
					constexpr auto i_match_stats__round_results = 0xA3C; // Name: m_iMatchStats_RoundResults Offset: 0xA3C
					constexpr auto i_match_stats__players_alive__ct = 0xAB4; // Name: m_iMatchStats_PlayersAlive_CT Offset: 0xAB4
					constexpr auto i_match_stats__players_alive__t = 0xB2C; // Name: m_iMatchStats_PlayersAlive_T Offset: 0xB2C
					constexpr auto team_respawn_wave_times = 0xBA4; // Name: m_TeamRespawnWaveTimes Offset: 0xBA4
					constexpr auto fl_next_respawn_wave = 0xC24; // Name: m_flNextRespawnWave Offset: 0xC24
					constexpr auto n_server_quest_id = 0xCA4; // Name: m_nServerQuestID Offset: 0xCA4
					constexpr auto v_minimap_mins = 0xCA8; // Name: m_vMinimapMins Offset: 0xCA8
					constexpr auto v_minimap_maxs = 0xCB4; // Name: m_vMinimapMaxs Offset: 0xCB4
					constexpr auto minimap_vertical_section_heights = 0xCC0; // Name: m_MinimapVerticalSectionHeights Offset: 0xCC0
					constexpr auto b_spawned_terror_hunt_heavy = 0xCE0; // Name: m_bSpawnedTerrorHuntHeavy Offset: 0xCE0
					constexpr auto n_end_match_map_group_vote_types = 0xCE4; // Name: m_nEndMatchMapGroupVoteTypes Offset: 0xCE4
					constexpr auto n_end_match_map_group_vote_options = 0xD0C; // Name: m_nEndMatchMapGroupVoteOptions Offset: 0xD0C
					constexpr auto n_end_match_map_vote_winner = 0xD34; // Name: m_nEndMatchMapVoteWinner Offset: 0xD34
					constexpr auto i_num_consecutive_ctloses = 0xD38; // Name: m_iNumConsecutiveCTLoses Offset: 0xD38
					constexpr auto i_num_consecutive_terrorist_loses = 0xD3C; // Name: m_iNumConsecutiveTerroristLoses Offset: 0xD3C
					constexpr auto b_has_hostage_been_touched = 0xD58; // Name: m_bHasHostageBeenTouched Offset: 0xD58
					constexpr auto fl_intermission_start_time = 0xD5C; // Name: m_flIntermissionStartTime Offset: 0xD5C
					constexpr auto fl_intermission_end_time = 0xD60; // Name: m_flIntermissionEndTime Offset: 0xD60
					constexpr auto b_level_initialized = 0xD64; // Name: m_bLevelInitialized Offset: 0xD64
					constexpr auto i_total_rounds_played = 0xD68; // Name: m_iTotalRoundsPlayed Offset: 0xD68
					constexpr auto i_un_balanced_rounds = 0xD6C; // Name: m_iUnBalancedRounds Offset: 0xD6C
					constexpr auto end_match_on_round_reset = 0xD70; // Name: m_endMatchOnRoundReset Offset: 0xD70
					constexpr auto end_match_on_think = 0xD71; // Name: m_endMatchOnThink Offset: 0xD71
					constexpr auto i_freeze_time = 0xD74; // Name: m_iFreezeTime Offset: 0xD74
					constexpr auto i_num_terrorist = 0xD78; // Name: m_iNumTerrorist Offset: 0xD78
					constexpr auto i_num_ct = 0xD7C; // Name: m_iNumCT Offset: 0xD7C
					constexpr auto i_num_spawnable_terrorist = 0xD80; // Name: m_iNumSpawnableTerrorist Offset: 0xD80
					constexpr auto i_num_spawnable_ct = 0xD84; // Name: m_iNumSpawnableCT Offset: 0xD84
					constexpr auto arr_selected_hostage_spawn_indices = 0xD88; // Name: m_arrSelectedHostageSpawnIndices Offset: 0xD88
					constexpr auto n_spawn_points_random_seed = 0xDA0; // Name: m_nSpawnPointsRandomSeed Offset: 0xDA0
					constexpr auto b_first_connected = 0xDA4; // Name: m_bFirstConnected Offset: 0xDA4
					constexpr auto b_complete_reset = 0xDA5; // Name: m_bCompleteReset Offset: 0xDA5
					constexpr auto b_pick_new_teams_on_reset = 0xDA6; // Name: m_bPickNewTeamsOnReset Offset: 0xDA6
					constexpr auto b_scramble_teams_on_restart = 0xDA7; // Name: m_bScrambleTeamsOnRestart Offset: 0xDA7
					constexpr auto b_swap_teams_on_restart = 0xDA8; // Name: m_bSwapTeamsOnRestart Offset: 0xDA8
					constexpr auto n_end_match_tied_votes = 0xDB0; // Name: m_nEndMatchTiedVotes Offset: 0xDB0
					constexpr auto b_need_to_ask_players_for_continue_vote = 0xDCC; // Name: m_bNeedToAskPlayersForContinueVote Offset: 0xDCC
					constexpr auto num_queued_matchmaking_accounts = 0xDD0; // Name: m_numQueuedMatchmakingAccounts Offset: 0xDD0
					constexpr auto f_avg_player_rank = 0xDD4; // Name: m_fAvgPlayerRank Offset: 0xDD4
					constexpr auto p_queued_matchmaking_reservation_string = 0xDD8; // Name: m_pQueuedMatchmakingReservationString Offset: 0xDD8
					constexpr auto num_total_tournament_drops = 0xDE0; // Name: m_numTotalTournamentDrops Offset: 0xDE0
					constexpr auto num_spectators_count_max = 0xDE4; // Name: m_numSpectatorsCountMax Offset: 0xDE4
					constexpr auto num_spectators_count_max_tv = 0xDE8; // Name: m_numSpectatorsCountMaxTV Offset: 0xDE8
					constexpr auto num_spectators_count_max_lnk = 0xDEC; // Name: m_numSpectatorsCountMaxLnk Offset: 0xDEC
					constexpr auto b_force_team_change_silent = 0xDF8; // Name: m_bForceTeamChangeSilent Offset: 0xDF8
					constexpr auto b_loading_round_backup_data = 0xDF9; // Name: m_bLoadingRoundBackupData Offset: 0xDF9
					constexpr auto n_match_info_show_type = 0xE30; // Name: m_nMatchInfoShowType Offset: 0xE30
					constexpr auto fl_match_info_decided_time = 0xE34; // Name: m_flMatchInfoDecidedTime Offset: 0xE34
					constexpr auto m_team_dmlast_winning_team_number = 0xE50; // Name: mTeamDMLastWinningTeamNumber Offset: 0xE50
					constexpr auto m_team_dmlast_think_time = 0xE54; // Name: mTeamDMLastThinkTime Offset: 0xE54
					constexpr auto fl_team_dmlast_announcement_time = 0xE58; // Name: m_flTeamDMLastAnnouncementTime Offset: 0xE58
					constexpr auto i_account_terrorist = 0xE5C; // Name: m_iAccountTerrorist Offset: 0xE5C
					constexpr auto i_account_ct = 0xE60; // Name: m_iAccountCT Offset: 0xE60
					constexpr auto i_spawn_point_count__terrorist = 0xE64; // Name: m_iSpawnPointCount_Terrorist Offset: 0xE64
					constexpr auto i_spawn_point_count__ct = 0xE68; // Name: m_iSpawnPointCount_CT Offset: 0xE68
					constexpr auto i_max_num_terrorists = 0xE6C; // Name: m_iMaxNumTerrorists Offset: 0xE6C
					constexpr auto i_max_num_cts = 0xE70; // Name: m_iMaxNumCTs Offset: 0xE70
					constexpr auto i_loser_bonus_most_recent_team = 0xE74; // Name: m_iLoserBonusMostRecentTeam Offset: 0xE74
					constexpr auto tm_next_periodic_think = 0xE78; // Name: m_tmNextPeriodicThink Offset: 0xE78
					constexpr auto b_voice_won_match_brag_fired = 0xE7C; // Name: m_bVoiceWonMatchBragFired Offset: 0xE7C
					constexpr auto f_warmup_next_chat_notice_time = 0xE80; // Name: m_fWarmupNextChatNoticeTime Offset: 0xE80
					constexpr auto i_hostages_rescued = 0xE88; // Name: m_iHostagesRescued Offset: 0xE88
					constexpr auto i_hostages_touched = 0xE8C; // Name: m_iHostagesTouched Offset: 0xE8C
					constexpr auto fl_next_hostage_announcement = 0xE90; // Name: m_flNextHostageAnnouncement Offset: 0xE90
					constexpr auto b_no_terrorists_killed = 0xE94; // Name: m_bNoTerroristsKilled Offset: 0xE94
					constexpr auto b_no_cts_killed = 0xE95; // Name: m_bNoCTsKilled Offset: 0xE95
					constexpr auto b_no_enemies_killed = 0xE96; // Name: m_bNoEnemiesKilled Offset: 0xE96
					constexpr auto b_can_donate_weapons = 0xE97; // Name: m_bCanDonateWeapons Offset: 0xE97
					constexpr auto first_kill_time = 0xE9C; // Name: m_firstKillTime Offset: 0xE9C
					constexpr auto first_blood_time = 0xEA4; // Name: m_firstBloodTime Offset: 0xEA4
					constexpr auto hostage_was_injured = 0xEC0; // Name: m_hostageWasInjured Offset: 0xEC0
					constexpr auto hostage_was_killed = 0xEC1; // Name: m_hostageWasKilled Offset: 0xEC1
					constexpr auto b_vote_called = 0xED0; // Name: m_bVoteCalled Offset: 0xED0
					constexpr auto b_server_vote_on_reset = 0xED1; // Name: m_bServerVoteOnReset Offset: 0xED1
					constexpr auto fl_vote_check_throttle = 0xED4; // Name: m_flVoteCheckThrottle Offset: 0xED4
					constexpr auto b_buy_time_ended = 0xED8; // Name: m_bBuyTimeEnded Offset: 0xED8
					constexpr auto n_last_freeze_end_beep = 0xEDC; // Name: m_nLastFreezeEndBeep Offset: 0xEDC
					constexpr auto b_target_bombed = 0xEE0; // Name: m_bTargetBombed Offset: 0xEE0
					constexpr auto b_bomb_defused = 0xEE1; // Name: m_bBombDefused Offset: 0xEE1
					constexpr auto b_map_has_bomb_zone = 0xEE2; // Name: m_bMapHasBombZone Offset: 0xEE2
					constexpr auto vec_main_ctspawn_pos = 0xF30; // Name: m_vecMainCTSpawnPos Offset: 0xF30
					constexpr auto ctspawn_points_master_list = 0xF40; // Name: m_CTSpawnPointsMasterList Offset: 0xF40
					constexpr auto terrorist_spawn_points_master_list = 0xF58; // Name: m_TerroristSpawnPointsMasterList Offset: 0xF58
					constexpr auto b_respawning_all_respawnable_players = 0xF70; // Name: m_bRespawningAllRespawnablePlayers Offset: 0xF70
					constexpr auto i_next_ctspawn_point = 0xF74; // Name: m_iNextCTSpawnPoint Offset: 0xF74
					constexpr auto fl_ctspawn_point_used_time = 0xF78; // Name: m_flCTSpawnPointUsedTime Offset: 0xF78
					constexpr auto i_next_terrorist_spawn_point = 0xF7C; // Name: m_iNextTerroristSpawnPoint Offset: 0xF7C
					constexpr auto fl_terrorist_spawn_point_used_time = 0xF80; // Name: m_flTerroristSpawnPointUsedTime Offset: 0xF80
					constexpr auto ctspawn_points = 0xF88; // Name: m_CTSpawnPoints Offset: 0xF88
					constexpr auto terrorist_spawn_points = 0xFA0; // Name: m_TerroristSpawnPoints Offset: 0xFA0
					constexpr auto b_is_unreserved_game_server = 0xFB8; // Name: m_bIsUnreservedGameServer Offset: 0xFB8
					constexpr auto f_autobalance_display_time = 0xFBC; // Name: m_fAutobalanceDisplayTime Offset: 0xFBC
					constexpr auto b_allow_weapon_switch = 0x1228; // Name: m_bAllowWeaponSwitch Offset: 0x1228
					constexpr auto b_round_time_warning_triggered = 0x1229; // Name: m_bRoundTimeWarningTriggered Offset: 0x1229
					constexpr auto phase_change_announcement_time = 0x122C; // Name: m_phaseChangeAnnouncementTime Offset: 0x122C
					constexpr auto f_next_update_team_clan_names_time = 0x1230; // Name: m_fNextUpdateTeamClanNamesTime Offset: 0x1230
					constexpr auto fl_last_think_time = 0x1234; // Name: m_flLastThinkTime Offset: 0x1234
					constexpr auto f_accumulated_round_off_damage = 0x1238; // Name: m_fAccumulatedRoundOffDamage Offset: 0x1238
					constexpr auto n_shorthanded_bonus_last_eval_round = 0x123C; // Name: m_nShorthandedBonusLastEvalRound Offset: 0x123C
					constexpr auto n_match_aborted_early_reason = 0x14B8; // Name: m_nMatchAbortedEarlyReason Offset: 0x14B8
					constexpr auto b_has_triggered_round_start_music = 0x14BC; // Name: m_bHasTriggeredRoundStartMusic Offset: 0x14BC
					constexpr auto b_switching_teams_at_round_reset = 0x14BD; // Name: m_bSwitchingTeamsAtRoundReset Offset: 0x14BD
					constexpr auto p_game_mode_rules = 0x14D8; // Name: m_pGameModeRules Offset: 0x14D8
					constexpr auto bt_global_blackboard = 0x14E0; // Name: m_BtGlobalBlackboard Offset: 0x14E0
					constexpr auto h_player_resource = 0x1570; // Name: m_hPlayerResource Offset: 0x1570
					constexpr auto retake_rules = 0x1578; // Name: m_RetakeRules Offset: 0x1578
					constexpr auto arr_team_unique_kill_weapons_match = 0x1710; // Name: m_arrTeamUniqueKillWeaponsMatch Offset: 0x1710
					constexpr auto b_team_last_kill_used_unique_weapon_match = 0x1770; // Name: m_bTeamLastKillUsedUniqueWeaponMatch Offset: 0x1770
					constexpr auto n_match_end_count = 0x1798; // Name: m_nMatchEndCount Offset: 0x1798
					constexpr auto n_tteam_intro_variant = 0x179C; // Name: m_nTTeamIntroVariant Offset: 0x179C
					constexpr auto n_ctteam_intro_variant = 0x17A0; // Name: m_nCTTeamIntroVariant Offset: 0x17A0
					constexpr auto b_team_intro_period = 0x17A4; // Name: m_bTeamIntroPeriod Offset: 0x17A4
					constexpr auto f_team_intro_period_end = 0x17A8; // Name: m_fTeamIntroPeriodEnd Offset: 0x17A8
					constexpr auto b_played_team_intro_vo = 0x17AC; // Name: m_bPlayedTeamIntroVO Offset: 0x17AC
					constexpr auto i_round_end_winner_team = 0x17B0; // Name: m_iRoundEndWinnerTeam Offset: 0x17B0
					constexpr auto e_round_end_reason = 0x17B4; // Name: m_eRoundEndReason Offset: 0x17B4
					constexpr auto b_round_end_show_timer_defend = 0x17B8; // Name: m_bRoundEndShowTimerDefend Offset: 0x17B8
					constexpr auto i_round_end_timer_time = 0x17BC; // Name: m_iRoundEndTimerTime Offset: 0x17BC
					constexpr auto s_round_end_fun_fact_token = 0x17C0; // Name: m_sRoundEndFunFactToken Offset: 0x17C0
					constexpr auto i_round_end_fun_fact_player_slot = 0x17C8; // Name: m_iRoundEndFunFactPlayerSlot Offset: 0x17C8
					constexpr auto i_round_end_fun_fact_data1 = 0x17CC; // Name: m_iRoundEndFunFactData1 Offset: 0x17CC
					constexpr auto i_round_end_fun_fact_data2 = 0x17D0; // Name: m_iRoundEndFunFactData2 Offset: 0x17D0
					constexpr auto i_round_end_fun_fact_data3 = 0x17D4; // Name: m_iRoundEndFunFactData3 Offset: 0x17D4
					constexpr auto s_round_end_message = 0x17D8; // Name: m_sRoundEndMessage Offset: 0x17D8
					constexpr auto i_round_end_player_count = 0x17E0; // Name: m_iRoundEndPlayerCount Offset: 0x17E0
					constexpr auto b_round_end_no_music = 0x17E4; // Name: m_bRoundEndNoMusic Offset: 0x17E4
					constexpr auto i_round_end_legacy = 0x17E8; // Name: m_iRoundEndLegacy Offset: 0x17E8
					constexpr auto n_round_end_count = 0x17EC; // Name: m_nRoundEndCount Offset: 0x17EC
					constexpr auto i_round_start_round_number = 0x17F0; // Name: m_iRoundStartRoundNumber Offset: 0x17F0
					constexpr auto n_round_start_count = 0x17F4; // Name: m_nRoundStartCount Offset: 0x17F4
					constexpr auto fl_last_perf_sample_time = 0x5800; // Name: m_flLastPerfSampleTime Offset: 0x5800
				} // namespace CCSGameRules

				namespace CColorCorrectionVolume {
					constexpr auto b_enabled = 0x960; // Name: m_bEnabled Offset: 0x960
					constexpr auto max_weight = 0x964; // Name: m_MaxWeight Offset: 0x964
					constexpr auto fade_duration = 0x968; // Name: m_FadeDuration Offset: 0x968
					constexpr auto b_start_disabled = 0x96C; // Name: m_bStartDisabled Offset: 0x96C
					constexpr auto weight = 0x970; // Name: m_Weight Offset: 0x970
					constexpr auto lookup_filename = 0x974; // Name: m_lookupFilename Offset: 0x974
					constexpr auto last_enter_weight = 0xB74; // Name: m_LastEnterWeight Offset: 0xB74
					constexpr auto last_enter_time = 0xB78; // Name: m_LastEnterTime Offset: 0xB78
					constexpr auto last_exit_weight = 0xB7C; // Name: m_LastExitWeight Offset: 0xB7C
					constexpr auto last_exit_time = 0xB80; // Name: m_LastExitTime Offset: 0xB80
				} // namespace CColorCorrectionVolume

				namespace CFilterEnemy {
					constexpr auto isz_enemy_name = 0x538; // Name: m_iszEnemyName Offset: 0x538
					constexpr auto fl_radius = 0x540; // Name: m_flRadius Offset: 0x540
					constexpr auto fl_outer_radius = 0x544; // Name: m_flOuterRadius Offset: 0x544
					constexpr auto n_max_squadmates_per_enemy = 0x548; // Name: m_nMaxSquadmatesPerEnemy Offset: 0x548
					constexpr auto isz_player_name = 0x550; // Name: m_iszPlayerName Offset: 0x550
				} // namespace CFilterEnemy

				namespace CShower {
				} // namespace CShower

				namespace CWeaponTec9 {
				} // namespace CWeaponTec9

				namespace CEnvCubemapFog {
					constexpr auto fl_end_distance = 0x4E0; // Name: m_flEndDistance Offset: 0x4E0
					constexpr auto fl_start_distance = 0x4E4; // Name: m_flStartDistance Offset: 0x4E4
					constexpr auto fl_fog_falloff_exponent = 0x4E8; // Name: m_flFogFalloffExponent Offset: 0x4E8
					constexpr auto b_height_fog_enabled = 0x4EC; // Name: m_bHeightFogEnabled Offset: 0x4EC
					constexpr auto fl_fog_height_width = 0x4F0; // Name: m_flFogHeightWidth Offset: 0x4F0
					constexpr auto fl_fog_height_end = 0x4F4; // Name: m_flFogHeightEnd Offset: 0x4F4
					constexpr auto fl_fog_height_start = 0x4F8; // Name: m_flFogHeightStart Offset: 0x4F8
					constexpr auto fl_fog_height_exponent = 0x4FC; // Name: m_flFogHeightExponent Offset: 0x4FC
					constexpr auto fl_lodbias = 0x500; // Name: m_flLODBias Offset: 0x500
					constexpr auto b_active = 0x504; // Name: m_bActive Offset: 0x504
					constexpr auto b_start_disabled = 0x505; // Name: m_bStartDisabled Offset: 0x505
					constexpr auto fl_fog_max_opacity = 0x508; // Name: m_flFogMaxOpacity Offset: 0x508
					constexpr auto n_cubemap_source_type = 0x50C; // Name: m_nCubemapSourceType Offset: 0x50C
					constexpr auto h_sky_material = 0x510; // Name: m_hSkyMaterial Offset: 0x510
					constexpr auto isz_sky_entity = 0x518; // Name: m_iszSkyEntity Offset: 0x518
					constexpr auto h_fog_cubemap_texture = 0x520; // Name: m_hFogCubemapTexture Offset: 0x520
					constexpr auto b_has_height_fog_end = 0x528; // Name: m_bHasHeightFogEnd Offset: 0x528
					constexpr auto b_first_time = 0x529; // Name: m_bFirstTime Offset: 0x529
				} // namespace CEnvCubemapFog

				namespace CLogicProximity {
				} // namespace CLogicProximity

				namespace CCSPlayerController {
					constexpr auto p_in_game_money_services = 0x788; // Name: m_pInGameMoneyServices Offset: 0x788
					constexpr auto p_inventory_services = 0x790; // Name: m_pInventoryServices Offset: 0x790
					constexpr auto p_action_tracking_services = 0x798; // Name: m_pActionTrackingServices Offset: 0x798
					constexpr auto p_damage_services = 0x7A0; // Name: m_pDamageServices Offset: 0x7A0
					constexpr auto i_ping = 0x7A8; // Name: m_iPing Offset: 0x7A8
					constexpr auto b_has_communication_abuse_mute = 0x7AC; // Name: m_bHasCommunicationAbuseMute Offset: 0x7AC
					constexpr auto sz_crosshair_codes = 0x7B0; // Name: m_szCrosshairCodes Offset: 0x7B0
					constexpr auto i_pending_team_num = 0x7B8; // Name: m_iPendingTeamNum Offset: 0x7B8
					constexpr auto fl_force_team_time = 0x7BC; // Name: m_flForceTeamTime Offset: 0x7BC
					constexpr auto i_comp_teammate_color = 0x7C0; // Name: m_iCompTeammateColor Offset: 0x7C0
					constexpr auto b_ever_played_on_team = 0x7C4; // Name: m_bEverPlayedOnTeam Offset: 0x7C4
					constexpr auto b_attempted_to_get_color = 0x7C5; // Name: m_bAttemptedToGetColor Offset: 0x7C5
					constexpr auto i_teammate_preferred_color = 0x7C8; // Name: m_iTeammatePreferredColor Offset: 0x7C8
					constexpr auto b_team_changed = 0x7CC; // Name: m_bTeamChanged Offset: 0x7CC
					constexpr auto b_in_switch_team = 0x7CD; // Name: m_bInSwitchTeam Offset: 0x7CD
					constexpr auto b_has_seen_join_game = 0x7CE; // Name: m_bHasSeenJoinGame Offset: 0x7CE
					constexpr auto b_just_became_spectator = 0x7CF; // Name: m_bJustBecameSpectator Offset: 0x7CF
					constexpr auto b_switch_teams_on_next_round_reset = 0x7D0; // Name: m_bSwitchTeamsOnNextRoundReset Offset: 0x7D0
					constexpr auto b_remove_all_items_on_next_round_reset = 0x7D1; // Name: m_bRemoveAllItemsOnNextRoundReset Offset: 0x7D1
					constexpr auto sz_clan = 0x7D8; // Name: m_szClan Offset: 0x7D8
					constexpr auto sz_clan_name = 0x7E0; // Name: m_szClanName Offset: 0x7E0
					constexpr auto i_coaching_team = 0x800; // Name: m_iCoachingTeam Offset: 0x800
					constexpr auto n_player_dominated = 0x808; // Name: m_nPlayerDominated Offset: 0x808
					constexpr auto n_player_dominating_me = 0x810; // Name: m_nPlayerDominatingMe Offset: 0x810
					constexpr auto i_competitive_ranking = 0x818; // Name: m_iCompetitiveRanking Offset: 0x818
					constexpr auto i_competitive_wins = 0x81C; // Name: m_iCompetitiveWins Offset: 0x81C
					constexpr auto i_competitive_rank_type = 0x820; // Name: m_iCompetitiveRankType Offset: 0x820
					constexpr auto i_competitive_ranking_predicted__win = 0x824; // Name: m_iCompetitiveRankingPredicted_Win Offset: 0x824
					constexpr auto i_competitive_ranking_predicted__loss = 0x828; // Name: m_iCompetitiveRankingPredicted_Loss Offset: 0x828
					constexpr auto i_competitive_ranking_predicted__tie = 0x82C; // Name: m_iCompetitiveRankingPredicted_Tie Offset: 0x82C
					constexpr auto n_end_match_next_map_vote = 0x830; // Name: m_nEndMatchNextMapVote Offset: 0x830
					constexpr auto un_active_quest_id = 0x834; // Name: m_unActiveQuestId Offset: 0x834
					constexpr auto n_quest_progress_reason = 0x838; // Name: m_nQuestProgressReason Offset: 0x838
					constexpr auto un_player_tv_control_flags = 0x83C; // Name: m_unPlayerTvControlFlags Offset: 0x83C
					constexpr auto i_draft_index = 0x868; // Name: m_iDraftIndex Offset: 0x868
					constexpr auto ms_queued_mode_disconnection_timestamp = 0x86C; // Name: m_msQueuedModeDisconnectionTimestamp Offset: 0x86C
					constexpr auto ui_abandon_recorded_reason = 0x870; // Name: m_uiAbandonRecordedReason Offset: 0x870
					constexpr auto b_cannot_be_kicked = 0x874; // Name: m_bCannotBeKicked Offset: 0x874
					constexpr auto b_ever_fully_connected = 0x875; // Name: m_bEverFullyConnected Offset: 0x875
					constexpr auto b_abandon_allows_surrender = 0x876; // Name: m_bAbandonAllowsSurrender Offset: 0x876
					constexpr auto b_abandon_offers_instant_surrender = 0x877; // Name: m_bAbandonOffersInstantSurrender Offset: 0x877
					constexpr auto b_disconnection1_min_warning_printed = 0x878; // Name: m_bDisconnection1MinWarningPrinted Offset: 0x878
					constexpr auto b_score_reported = 0x879; // Name: m_bScoreReported Offset: 0x879
					constexpr auto n_disconnection_tick = 0x87C; // Name: m_nDisconnectionTick Offset: 0x87C
					constexpr auto b_controlling_bot = 0x888; // Name: m_bControllingBot Offset: 0x888
					constexpr auto b_has_controlled_bot_this_round = 0x889; // Name: m_bHasControlledBotThisRound Offset: 0x889
					constexpr auto b_has_been_controlled_by_player_this_round = 0x88A; // Name: m_bHasBeenControlledByPlayerThisRound Offset: 0x88A
					constexpr auto n_bots_controlled_this_round = 0x88C; // Name: m_nBotsControlledThisRound Offset: 0x88C
					constexpr auto b_can_control_observed_bot = 0x890; // Name: m_bCanControlObservedBot Offset: 0x890
					constexpr auto h_player_pawn = 0x894; // Name: m_hPlayerPawn Offset: 0x894
					constexpr auto h_observer_pawn = 0x898; // Name: m_hObserverPawn Offset: 0x898
					constexpr auto desired_observer_mode = 0x89C; // Name: m_DesiredObserverMode Offset: 0x89C
					constexpr auto h_desired_observer_target = 0x8A0; // Name: m_hDesiredObserverTarget Offset: 0x8A0
					constexpr auto b_pawn_is_alive = 0x8A4; // Name: m_bPawnIsAlive Offset: 0x8A4
					constexpr auto i_pawn_health = 0x8A8; // Name: m_iPawnHealth Offset: 0x8A8
					constexpr auto i_pawn_armor = 0x8AC; // Name: m_iPawnArmor Offset: 0x8AC
					constexpr auto b_pawn_has_defuser = 0x8B0; // Name: m_bPawnHasDefuser Offset: 0x8B0
					constexpr auto b_pawn_has_helmet = 0x8B1; // Name: m_bPawnHasHelmet Offset: 0x8B1
					constexpr auto n_pawn_character_def_index = 0x8B2; // Name: m_nPawnCharacterDefIndex Offset: 0x8B2
					constexpr auto i_pawn_lifetime_start = 0x8B4; // Name: m_iPawnLifetimeStart Offset: 0x8B4
					constexpr auto i_pawn_lifetime_end = 0x8B8; // Name: m_iPawnLifetimeEnd Offset: 0x8B8
					constexpr auto i_pawn_bot_difficulty = 0x8BC; // Name: m_iPawnBotDifficulty Offset: 0x8BC
					constexpr auto h_original_controller_of_current_pawn = 0x8C0; // Name: m_hOriginalControllerOfCurrentPawn Offset: 0x8C0
					constexpr auto i_score = 0x8C4; // Name: m_iScore Offset: 0x8C4
					constexpr auto i_round_score = 0x8C8; // Name: m_iRoundScore Offset: 0x8C8
					constexpr auto i_rounds_won = 0x8CC; // Name: m_iRoundsWon Offset: 0x8CC
					constexpr auto recent_kill_queue = 0x8D0; // Name: m_recentKillQueue Offset: 0x8D0
					constexpr auto n_first_kill = 0x8D8; // Name: m_nFirstKill Offset: 0x8D8
					constexpr auto n_kill_count = 0x8D9; // Name: m_nKillCount Offset: 0x8D9
					constexpr auto b_mvp_no_music = 0x8DA; // Name: m_bMvpNoMusic Offset: 0x8DA
					constexpr auto e_mvp_reason = 0x8DC; // Name: m_eMvpReason Offset: 0x8DC
					constexpr auto i_music_kit_id = 0x8E0; // Name: m_iMusicKitID Offset: 0x8E0
					constexpr auto i_music_kit_mvps = 0x8E4; // Name: m_iMusicKitMVPs Offset: 0x8E4
					constexpr auto i_mvps = 0x8E8; // Name: m_iMVPs Offset: 0x8E8
					constexpr auto n_update_counter = 0x8EC; // Name: m_nUpdateCounter Offset: 0x8EC
					constexpr auto fl_smoothed_ping = 0x8F0; // Name: m_flSmoothedPing Offset: 0x8F0
					constexpr auto last_held_vote_timer = 0xF998; // Name: m_lastHeldVoteTimer Offset: 0xF998
					constexpr auto b_show_hints = 0xF9B0; // Name: m_bShowHints Offset: 0xF9B0
					constexpr auto i_next_time_check = 0xF9B4; // Name: m_iNextTimeCheck Offset: 0xF9B4
					constexpr auto b_just_did_team_kill = 0xF9B8; // Name: m_bJustDidTeamKill Offset: 0xF9B8
					constexpr auto b_punish_for_team_kill = 0xF9B9; // Name: m_bPunishForTeamKill Offset: 0xF9B9
					constexpr auto b_gave_team_damage_warning = 0xF9BA; // Name: m_bGaveTeamDamageWarning Offset: 0xF9BA
					constexpr auto b_gave_team_damage_warning_this_round = 0xF9BB; // Name: m_bGaveTeamDamageWarningThisRound Offset: 0xF9BB
					constexpr auto dbl_last_received_packet_plat_float_time = 0xF9C0; // Name: m_dblLastReceivedPacketPlatFloatTime Offset: 0xF9C0
					constexpr auto last_team_damage_warning_time = 0xF9C8; // Name: m_LastTeamDamageWarningTime Offset: 0xF9C8
					constexpr auto last_time_player_was_disconnected_for_pawns_remove = 0xF9CC; // Name: m_LastTimePlayerWasDisconnectedForPawnsRemove Offset: 0xF9CC
					constexpr auto n_suspicious_hit_count = 0xF9D0; // Name: m_nSuspiciousHitCount Offset: 0xF9D0
					constexpr auto n_non_suspicious_hit_streak = 0xF9D4; // Name: m_nNonSuspiciousHitStreak Offset: 0xF9D4
					constexpr auto b_fire_bullets_seed_synchronized = 0xFA79; // Name: m_bFireBulletsSeedSynchronized Offset: 0xFA79
				} // namespace CCSPlayerController

				namespace CPointCommentaryNode {
					constexpr auto isz_pre_commands = 0x9A8; // Name: m_iszPreCommands Offset: 0x9A8
					constexpr auto isz_post_commands = 0x9B0; // Name: m_iszPostCommands Offset: 0x9B0
					constexpr auto isz_commentary_file = 0x9B8; // Name: m_iszCommentaryFile Offset: 0x9B8
					constexpr auto isz_view_target = 0x9C0; // Name: m_iszViewTarget Offset: 0x9C0
					constexpr auto h_view_target = 0x9C8; // Name: m_hViewTarget Offset: 0x9C8
					constexpr auto h_view_target_angles = 0x9CC; // Name: m_hViewTargetAngles Offset: 0x9CC
					constexpr auto isz_view_position = 0x9D0; // Name: m_iszViewPosition Offset: 0x9D0
					constexpr auto h_view_position = 0x9D8; // Name: m_hViewPosition Offset: 0x9D8
					constexpr auto h_view_position_mover = 0x9DC; // Name: m_hViewPositionMover Offset: 0x9DC
					constexpr auto b_prevent_movement = 0x9E0; // Name: m_bPreventMovement Offset: 0x9E0
					constexpr auto b_under_crosshair = 0x9E1; // Name: m_bUnderCrosshair Offset: 0x9E1
					constexpr auto b_unstoppable = 0x9E2; // Name: m_bUnstoppable Offset: 0x9E2
					constexpr auto fl_finished_time = 0x9E4; // Name: m_flFinishedTime Offset: 0x9E4
					constexpr auto vec_finish_origin = 0x9E8; // Name: m_vecFinishOrigin Offset: 0x9E8
					constexpr auto vec_original_angles = 0x9F4; // Name: m_vecOriginalAngles Offset: 0x9F4
					constexpr auto vec_finish_angles = 0xA00; // Name: m_vecFinishAngles Offset: 0xA00
					constexpr auto b_prevent_changes_while_moving = 0xA0C; // Name: m_bPreventChangesWhileMoving Offset: 0xA0C
					constexpr auto b_disabled = 0xA0D; // Name: m_bDisabled Offset: 0xA0D
					constexpr auto vec_teleport_origin = 0xA10; // Name: m_vecTeleportOrigin Offset: 0xA10
					constexpr auto fl_aborted_playback_at = 0xA1C; // Name: m_flAbortedPlaybackAt Offset: 0xA1C
					constexpr auto p_on_commentary_started = 0xA20; // Name: m_pOnCommentaryStarted Offset: 0xA20
					constexpr auto p_on_commentary_stopped = 0xA48; // Name: m_pOnCommentaryStopped Offset: 0xA48
					constexpr auto b_active = 0xA70; // Name: m_bActive Offset: 0xA70
					constexpr auto fl_start_time = 0xA74; // Name: m_flStartTime Offset: 0xA74
					constexpr auto fl_start_time_in_commentary = 0xA78; // Name: m_flStartTimeInCommentary Offset: 0xA78
					constexpr auto isz_title = 0xA80; // Name: m_iszTitle Offset: 0xA80
					constexpr auto isz_speakers = 0xA88; // Name: m_iszSpeakers Offset: 0xA88
					constexpr auto i_node_number = 0xA90; // Name: m_iNodeNumber Offset: 0xA90
					constexpr auto i_node_number_max = 0xA94; // Name: m_iNodeNumberMax Offset: 0xA94
					constexpr auto b_listened_to = 0xA98; // Name: m_bListenedTo Offset: 0xA98
				} // namespace CPointCommentaryNode

				namespace CPointClientUIWorldPanel {
					constexpr auto b_ignore_input = 0x940; // Name: m_bIgnoreInput Offset: 0x940
					constexpr auto b_lit = 0x941; // Name: m_bLit Offset: 0x941
					constexpr auto b_follow_player_across_teleport = 0x942; // Name: m_bFollowPlayerAcrossTeleport Offset: 0x942
					constexpr auto fl_width = 0x944; // Name: m_flWidth Offset: 0x944
					constexpr auto fl_height = 0x948; // Name: m_flHeight Offset: 0x948
					constexpr auto fl_dpi = 0x94C; // Name: m_flDPI Offset: 0x94C
					constexpr auto fl_interact_distance = 0x950; // Name: m_flInteractDistance Offset: 0x950
					constexpr auto fl_depth_offset = 0x954; // Name: m_flDepthOffset Offset: 0x954
					constexpr auto un_owner_context = 0x958; // Name: m_unOwnerContext Offset: 0x958
					constexpr auto un_horizontal_align = 0x95C; // Name: m_unHorizontalAlign Offset: 0x95C
					constexpr auto un_vertical_align = 0x960; // Name: m_unVerticalAlign Offset: 0x960
					constexpr auto un_orientation = 0x964; // Name: m_unOrientation Offset: 0x964
					constexpr auto b_allow_interaction_from_all_scene_worlds = 0x968; // Name: m_bAllowInteractionFromAllSceneWorlds Offset: 0x968
					constexpr auto vec_cssclasses = 0x970; // Name: m_vecCSSClasses Offset: 0x970
					constexpr auto b_opaque = 0x988; // Name: m_bOpaque Offset: 0x988
					constexpr auto b_no_depth = 0x989; // Name: m_bNoDepth Offset: 0x989
					constexpr auto b_render_backface = 0x98A; // Name: m_bRenderBackface Offset: 0x98A
					constexpr auto b_use_off_screen_indicator = 0x98B; // Name: m_bUseOffScreenIndicator Offset: 0x98B
					constexpr auto b_exclude_from_save_games = 0x98C; // Name: m_bExcludeFromSaveGames Offset: 0x98C
					constexpr auto b_grabbable = 0x98D; // Name: m_bGrabbable Offset: 0x98D
					constexpr auto b_only_render_to_texture = 0x98E; // Name: m_bOnlyRenderToTexture Offset: 0x98E
					constexpr auto b_disable_mip_gen = 0x98F; // Name: m_bDisableMipGen Offset: 0x98F
					constexpr auto n_explicit_image_layout = 0x990; // Name: m_nExplicitImageLayout Offset: 0x990
				} // namespace CPointClientUIWorldPanel

				namespace CFilterAttributeInt {
					constexpr auto s_attribute_name = 0x538; // Name: m_sAttributeName Offset: 0x538
				} // namespace CFilterAttributeInt

				namespace CBasePlayerPawn {
					constexpr auto p_weapon_services = 0xAC0; // Name: m_pWeaponServices Offset: 0xAC0
					constexpr auto p_item_services = 0xAC8; // Name: m_pItemServices Offset: 0xAC8
					constexpr auto p_autoaim_services = 0xAD0; // Name: m_pAutoaimServices Offset: 0xAD0
					constexpr auto p_observer_services = 0xAD8; // Name: m_pObserverServices Offset: 0xAD8
					constexpr auto p_water_services = 0xAE0; // Name: m_pWaterServices Offset: 0xAE0
					constexpr auto p_use_services = 0xAE8; // Name: m_pUseServices Offset: 0xAE8
					constexpr auto p_flashlight_services = 0xAF0; // Name: m_pFlashlightServices Offset: 0xAF0
					constexpr auto p_camera_services = 0xAF8; // Name: m_pCameraServices Offset: 0xAF8
					constexpr auto p_movement_services = 0xB00; // Name: m_pMovementServices Offset: 0xB00
					constexpr auto server_view_angle_changes = 0xB10; // Name: m_ServerViewAngleChanges Offset: 0xB10
					constexpr auto n_highest_generated_server_view_angle_change_index = 0xB60; // Name: m_nHighestGeneratedServerViewAngleChangeIndex Offset: 0xB60
					constexpr auto v_angle = 0xB64; // Name: v_angle Offset: 0xB64
					constexpr auto v_angle_previous = 0xB70; // Name: v_anglePrevious Offset: 0xB70
					constexpr auto i_hide_hud = 0xB7C; // Name: m_iHideHUD Offset: 0xB7C
					constexpr auto skybox3d = 0xB80; // Name: m_skybox3d Offset: 0xB80
					constexpr auto f_time_last_hurt = 0xC10; // Name: m_fTimeLastHurt Offset: 0xC10
					constexpr auto fl_death_time = 0xC14; // Name: m_flDeathTime Offset: 0xC14
					constexpr auto f_next_suicide_time = 0xC18; // Name: m_fNextSuicideTime Offset: 0xC18
					constexpr auto f_init_hud = 0xC1C; // Name: m_fInitHUD Offset: 0xC1C
					constexpr auto p_expresser = 0xC20; // Name: m_pExpresser Offset: 0xC20
					constexpr auto h_controller = 0xC28; // Name: m_hController Offset: 0xC28
					constexpr auto f_hltv_replay_delay = 0xC30; // Name: m_fHltvReplayDelay Offset: 0xC30
					constexpr auto f_hltv_replay_end = 0xC34; // Name: m_fHltvReplayEnd Offset: 0xC34
					constexpr auto i_hltv_replay_entity = 0xC38; // Name: m_iHltvReplayEntity Offset: 0xC38
					constexpr auto snd_opvar_latch_data = 0xC40; // Name: m_sndOpvarLatchData Offset: 0xC40
				} // namespace CBasePlayerPawn

				namespace CCSPlayer_ActionTrackingServices {
					constexpr auto h_last_weapon_before_c4_auto_switch = 0x200; // Name: m_hLastWeaponBeforeC4AutoSwitch Offset: 0x200
					constexpr auto b_is_rescuing = 0x22C; // Name: m_bIsRescuing Offset: 0x22C
					constexpr auto weapon_purchases_this_match = 0x230; // Name: m_weaponPurchasesThisMatch Offset: 0x230
					constexpr auto weapon_purchases_this_round = 0x288; // Name: m_weaponPurchasesThisRound Offset: 0x288
				} // namespace CCSPlayer_ActionTrackingServices

				namespace CPointEntityFinder {
					constexpr auto h_entity = 0x4E0; // Name: m_hEntity Offset: 0x4E0
					constexpr auto i_filter_name = 0x4E8; // Name: m_iFilterName Offset: 0x4E8
					constexpr auto h_filter = 0x4F0; // Name: m_hFilter Offset: 0x4F0
					constexpr auto i_ref_name = 0x4F8; // Name: m_iRefName Offset: 0x4F8
					constexpr auto h_reference = 0x500; // Name: m_hReference Offset: 0x500
					constexpr auto find_method = 0x504; // Name: m_FindMethod Offset: 0x504
					constexpr auto on_found_entity = 0x508; // Name: m_OnFoundEntity Offset: 0x508
				} // namespace CPointEntityFinder

				namespace CPointVelocitySensor {
					constexpr auto h_target_entity = 0x4E0; // Name: m_hTargetEntity Offset: 0x4E0
					constexpr auto vec_axis = 0x4E4; // Name: m_vecAxis Offset: 0x4E4
					constexpr auto b_enabled = 0x4F0; // Name: m_bEnabled Offset: 0x4F0
					constexpr auto f_prev_velocity = 0x4F4; // Name: m_fPrevVelocity Offset: 0x4F4
					constexpr auto fl_avg_interval = 0x4F8; // Name: m_flAvgInterval Offset: 0x4F8
					constexpr auto velocity = 0x500; // Name: m_Velocity Offset: 0x500
				} // namespace CPointVelocitySensor

				namespace CChicken {
					constexpr auto attribute_manager = 0xC78; // Name: m_AttributeManager Offset: 0xC78
					constexpr auto update_timer = 0xF40; // Name: m_updateTimer Offset: 0xF40
					constexpr auto stuck_anchor = 0xF58; // Name: m_stuckAnchor Offset: 0xF58
					constexpr auto stuck_timer = 0xF68; // Name: m_stuckTimer Offset: 0xF68
					constexpr auto collision_stuck_timer = 0xF80; // Name: m_collisionStuckTimer Offset: 0xF80
					constexpr auto is_on_ground = 0xF98; // Name: m_isOnGround Offset: 0xF98
					constexpr auto v_fall_velocity = 0xF9C; // Name: m_vFallVelocity Offset: 0xF9C
					constexpr auto desired_activity = 0xFA8; // Name: m_desiredActivity Offset: 0xFA8
					constexpr auto current_activity = 0xFAC; // Name: m_currentActivity Offset: 0xFAC
					constexpr auto activity_timer = 0xFB0; // Name: m_activityTimer Offset: 0xFB0
					constexpr auto turn_rate = 0xFC8; // Name: m_turnRate Offset: 0xFC8
					constexpr auto flee_from = 0xFCC; // Name: m_fleeFrom Offset: 0xFCC
					constexpr auto move_rate_throttle_timer = 0xFD0; // Name: m_moveRateThrottleTimer Offset: 0xFD0
					constexpr auto startle_timer = 0xFE8; // Name: m_startleTimer Offset: 0xFE8
					constexpr auto vocalize_timer = 0x1000; // Name: m_vocalizeTimer Offset: 0x1000
					constexpr auto fl_when_zombified = 0x1018; // Name: m_flWhenZombified Offset: 0x1018
					constexpr auto jumped_this_frame = 0x101C; // Name: m_jumpedThisFrame Offset: 0x101C
					constexpr auto leader = 0x1020; // Name: m_leader Offset: 0x1020
					constexpr auto reuse_timer = 0x1038; // Name: m_reuseTimer Offset: 0x1038
					constexpr auto has_been_used = 0x1050; // Name: m_hasBeenUsed Offset: 0x1050
					constexpr auto jump_timer = 0x1058; // Name: m_jumpTimer Offset: 0x1058
					constexpr auto fl_last_jump_time = 0x1070; // Name: m_flLastJumpTime Offset: 0x1070
					constexpr auto b_in_jump = 0x1074; // Name: m_bInJump Offset: 0x1074
					constexpr auto repath_timer = 0x3080; // Name: m_repathTimer Offset: 0x3080
					constexpr auto vec_path_goal = 0x3118; // Name: m_vecPathGoal Offset: 0x3118
					constexpr auto fl_active_follow_start_time = 0x3124; // Name: m_flActiveFollowStartTime Offset: 0x3124
					constexpr auto follow_minute_timer = 0x3128; // Name: m_followMinuteTimer Offset: 0x3128
					constexpr auto block_direction_timer = 0x3148; // Name: m_BlockDirectionTimer Offset: 0x3148
				} // namespace CChicken

				namespace CIronSightController {
					constexpr auto b_iron_sight_available = 0x8; // Name: m_bIronSightAvailable Offset: 0x8
					constexpr auto fl_iron_sight_amount = 0xC; // Name: m_flIronSightAmount Offset: 0xC
					constexpr auto fl_iron_sight_amount_gained = 0x10; // Name: m_flIronSightAmountGained Offset: 0x10
					constexpr auto fl_iron_sight_amount_biased = 0x14; // Name: m_flIronSightAmountBiased Offset: 0x14
				} // namespace CIronSightController

				namespace CFuncTankTrain {
					constexpr auto on_death = 0x8E0; // Name: m_OnDeath Offset: 0x8E0
				} // namespace CFuncTankTrain

				namespace CPulseCell_Outflow_ListenForEntityOutput_CursorState_t {
					constexpr auto entity = 0x0; // Name: m_entity Offset: 0x0
				} // namespace CPulseCell_Outflow_ListenForEntityOutput_CursorState_t

				namespace CNetworkedSequenceOperation {
					constexpr auto h_sequence = 0x8; // Name: m_hSequence Offset: 0x8
					constexpr auto fl_prev_cycle = 0xC; // Name: m_flPrevCycle Offset: 0xC
					constexpr auto fl_cycle = 0x10; // Name: m_flCycle Offset: 0x10
					constexpr auto fl_weight = 0x14; // Name: m_flWeight Offset: 0x14
					constexpr auto b_sequence_change_networked = 0x1C; // Name: m_bSequenceChangeNetworked Offset: 0x1C
					constexpr auto b_discontinuity = 0x1D; // Name: m_bDiscontinuity Offset: 0x1D
					constexpr auto fl_prev_cycle_from_discontinuity = 0x20; // Name: m_flPrevCycleFromDiscontinuity Offset: 0x20
					constexpr auto fl_prev_cycle_for_anim_event_detection = 0x24; // Name: m_flPrevCycleForAnimEventDetection Offset: 0x24
				} // namespace CNetworkedSequenceOperation

				namespace CPointTemplate {
					constexpr auto isz_world_name = 0x4E0; // Name: m_iszWorldName Offset: 0x4E0
					constexpr auto isz_source2_entity_lump_name = 0x4E8; // Name: m_iszSource2EntityLumpName Offset: 0x4E8
					constexpr auto isz_entity_filter_name = 0x4F0; // Name: m_iszEntityFilterName Offset: 0x4F0
					constexpr auto fl_timeout_interval = 0x4F8; // Name: m_flTimeoutInterval Offset: 0x4F8
					constexpr auto b_asynchronously_spawn_entities = 0x4FC; // Name: m_bAsynchronouslySpawnEntities Offset: 0x4FC
					constexpr auto p_output_on_spawned = 0x500; // Name: m_pOutputOnSpawned Offset: 0x500
					constexpr auto client_only_entity_behavior = 0x528; // Name: m_clientOnlyEntityBehavior Offset: 0x528
					constexpr auto owner_spawn_group_type = 0x52C; // Name: m_ownerSpawnGroupType Offset: 0x52C
					constexpr auto created_spawn_group_handles = 0x530; // Name: m_createdSpawnGroupHandles Offset: 0x530
					constexpr auto spawned_entity_handles = 0x548; // Name: m_SpawnedEntityHandles Offset: 0x548
					constexpr auto script_spawn_callback = 0x560; // Name: m_ScriptSpawnCallback Offset: 0x560
					constexpr auto script_callback_scope = 0x568; // Name: m_ScriptCallbackScope Offset: 0x568
				} // namespace CPointTemplate

				namespace CBlood {
					constexpr auto vec_spray_angles = 0x4E0; // Name: m_vecSprayAngles Offset: 0x4E0
					constexpr auto vec_spray_dir = 0x4EC; // Name: m_vecSprayDir Offset: 0x4EC
					constexpr auto fl_amount = 0x4F8; // Name: m_flAmount Offset: 0x4F8
					constexpr auto color = 0x4FC; // Name: m_Color Offset: 0x4FC
				} // namespace CBlood

				namespace CInfoDynamicShadowHint {
					constexpr auto b_disabled = 0x4E0; // Name: m_bDisabled Offset: 0x4E0
					constexpr auto fl_range = 0x4E4; // Name: m_flRange Offset: 0x4E4
					constexpr auto n_importance = 0x4E8; // Name: m_nImportance Offset: 0x4E8
					constexpr auto n_light_choice = 0x4EC; // Name: m_nLightChoice Offset: 0x4EC
					constexpr auto h_light = 0x4F0; // Name: m_hLight Offset: 0x4F0
				} // namespace CInfoDynamicShadowHint

				namespace CSoundOpvarSetAABBEntity {
					constexpr auto v_distance_inner_mins = 0x688; // Name: m_vDistanceInnerMins Offset: 0x688
					constexpr auto v_distance_inner_maxs = 0x694; // Name: m_vDistanceInnerMaxs Offset: 0x694
					constexpr auto v_distance_outer_mins = 0x6A0; // Name: m_vDistanceOuterMins Offset: 0x6A0
					constexpr auto v_distance_outer_maxs = 0x6AC; // Name: m_vDistanceOuterMaxs Offset: 0x6AC
					constexpr auto n_aabbdirection = 0x6B8; // Name: m_nAABBDirection Offset: 0x6B8
					constexpr auto v_inner_mins = 0x6BC; // Name: m_vInnerMins Offset: 0x6BC
					constexpr auto v_inner_maxs = 0x6C8; // Name: m_vInnerMaxs Offset: 0x6C8
					constexpr auto v_outer_mins = 0x6D4; // Name: m_vOuterMins Offset: 0x6D4
					constexpr auto v_outer_maxs = 0x6E0; // Name: m_vOuterMaxs Offset: 0x6E0
				} // namespace CSoundOpvarSetAABBEntity

				namespace CNavWalkable {
				} // namespace CNavWalkable

				namespace CBreachCharge {
				} // namespace CBreachCharge

				namespace CLogicBranch {
					constexpr auto b_in_value = 0x4E0; // Name: m_bInValue Offset: 0x4E0
					constexpr auto listeners = 0x4E8; // Name: m_Listeners Offset: 0x4E8
					constexpr auto on_true = 0x500; // Name: m_OnTrue Offset: 0x500
					constexpr auto on_false = 0x528; // Name: m_OnFalse Offset: 0x528
				} // namespace CLogicBranch

				namespace CEnvCubemap {
					constexpr auto entity_h_cubemap_texture = 0x560; // Name: m_Entity_hCubemapTexture Offset: 0x560
					constexpr auto entity_b_custom_cubemap_texture = 0x568; // Name: m_Entity_bCustomCubemapTexture Offset: 0x568
					constexpr auto entity_fl_influence_radius = 0x56C; // Name: m_Entity_flInfluenceRadius Offset: 0x56C
					constexpr auto entity_v_box_project_mins = 0x570; // Name: m_Entity_vBoxProjectMins Offset: 0x570
					constexpr auto entity_v_box_project_maxs = 0x57C; // Name: m_Entity_vBoxProjectMaxs Offset: 0x57C
					constexpr auto entity_b_moveable = 0x588; // Name: m_Entity_bMoveable Offset: 0x588
					constexpr auto entity_n_handshake = 0x58C; // Name: m_Entity_nHandshake Offset: 0x58C
					constexpr auto entity_n_env_cube_map_array_index = 0x590; // Name: m_Entity_nEnvCubeMapArrayIndex Offset: 0x590
					constexpr auto entity_n_priority = 0x594; // Name: m_Entity_nPriority Offset: 0x594
					constexpr auto entity_fl_edge_fade_dist = 0x598; // Name: m_Entity_flEdgeFadeDist Offset: 0x598
					constexpr auto entity_v_edge_fade_dists = 0x59C; // Name: m_Entity_vEdgeFadeDists Offset: 0x59C
					constexpr auto entity_fl_diffuse_scale = 0x5A8; // Name: m_Entity_flDiffuseScale Offset: 0x5A8
					constexpr auto entity_b_start_disabled = 0x5AC; // Name: m_Entity_bStartDisabled Offset: 0x5AC
					constexpr auto entity_b_default_env_map = 0x5AD; // Name: m_Entity_bDefaultEnvMap Offset: 0x5AD
					constexpr auto entity_b_default_spec_env_map = 0x5AE; // Name: m_Entity_bDefaultSpecEnvMap Offset: 0x5AE
					constexpr auto entity_b_indoor_cube_map = 0x5AF; // Name: m_Entity_bIndoorCubeMap Offset: 0x5AF
					constexpr auto entity_b_copy_diffuse_from_default_cubemap = 0x5B0; // Name: m_Entity_bCopyDiffuseFromDefaultCubemap Offset: 0x5B0
					constexpr auto entity_b_enabled = 0x5C0; // Name: m_Entity_bEnabled Offset: 0x5C0
				} // namespace CEnvCubemap

				namespace CSpriteAlias_env_glow {
				} // namespace CSpriteAlias_env_glow

				namespace CPulseCell_Step_FollowEntity {
					constexpr auto param_bone_or_attach_name = 0x48; // Name: m_ParamBoneOrAttachName Offset: 0x48
					constexpr auto param_bone_or_attach_name_child = 0x50; // Name: m_ParamBoneOrAttachNameChild Offset: 0x50
				} // namespace CPulseCell_Step_FollowEntity

				namespace CPhysLength {
					constexpr auto offset = 0x558; // Name: m_offset Offset: 0x558
					constexpr auto vec_attach = 0x570; // Name: m_vecAttach Offset: 0x570
					constexpr auto add_length = 0x57C; // Name: m_addLength Offset: 0x57C
					constexpr auto min_length = 0x580; // Name: m_minLength Offset: 0x580
					constexpr auto total_length = 0x584; // Name: m_totalLength Offset: 0x584
					constexpr auto b_enable_collision = 0x588; // Name: m_bEnableCollision Offset: 0x588
				} // namespace CPhysLength

				namespace CInfoOffscreenPanoramaTexture {
					constexpr auto b_disabled = 0x4E0; // Name: m_bDisabled Offset: 0x4E0
					constexpr auto n_resolution_x = 0x4E4; // Name: m_nResolutionX Offset: 0x4E4
					constexpr auto n_resolution_y = 0x4E8; // Name: m_nResolutionY Offset: 0x4E8
					constexpr auto sz_layout_file_name = 0x4F0; // Name: m_szLayoutFileName Offset: 0x4F0
					constexpr auto render_attr_name = 0x4F8; // Name: m_RenderAttrName Offset: 0x4F8
					constexpr auto target_entities = 0x500; // Name: m_TargetEntities Offset: 0x500
					constexpr auto n_target_change_count = 0x518; // Name: m_nTargetChangeCount Offset: 0x518
					constexpr auto vec_cssclasses = 0x520; // Name: m_vecCSSClasses Offset: 0x520
					constexpr auto sz_targets_name = 0x538; // Name: m_szTargetsName Offset: 0x538
					constexpr auto additional_target_entities = 0x540; // Name: m_AdditionalTargetEntities Offset: 0x540
				} // namespace CInfoOffscreenPanoramaTexture

				namespace CCSGOViewModel {
					constexpr auto b_should_ignore_offset_and_accuracy = 0x9F0; // Name: m_bShouldIgnoreOffsetAndAccuracy Offset: 0x9F0
				} // namespace CCSGOViewModel

				namespace CEnvFade {
					constexpr auto fade_color = 0x4E0; // Name: m_fadeColor Offset: 0x4E0
					constexpr auto duration = 0x4E4; // Name: m_Duration Offset: 0x4E4
					constexpr auto hold_duration = 0x4E8; // Name: m_HoldDuration Offset: 0x4E8
					constexpr auto on_begin_fade = 0x4F0; // Name: m_OnBeginFade Offset: 0x4F0
				} // namespace CEnvFade

				namespace CPathSimpleAPI {
				} // namespace CPathSimpleAPI

				namespace CInferno {
					constexpr auto fire_positions = 0x7A0; // Name: m_firePositions Offset: 0x7A0
					constexpr auto fire_parent_positions = 0xAA0; // Name: m_fireParentPositions Offset: 0xAA0
					constexpr auto b_fire_is_burning = 0xDA0; // Name: m_bFireIsBurning Offset: 0xDA0
					constexpr auto burn_normal = 0xDE0; // Name: m_BurnNormal Offset: 0xDE0
					constexpr auto fire_count = 0x10E0; // Name: m_fireCount Offset: 0x10E0
					constexpr auto n_inferno_type = 0x10E4; // Name: m_nInfernoType Offset: 0x10E4
					constexpr auto n_fire_effect_tick_begin = 0x10E8; // Name: m_nFireEffectTickBegin Offset: 0x10E8
					constexpr auto n_fire_lifetime = 0x10EC; // Name: m_nFireLifetime Offset: 0x10EC
					constexpr auto b_in_post_effect_time = 0x10F0; // Name: m_bInPostEffectTime Offset: 0x10F0
					constexpr auto n_fires_extinguish_count = 0x10F4; // Name: m_nFiresExtinguishCount Offset: 0x10F4
					constexpr auto b_was_created_in_smoke = 0x10F8; // Name: m_bWasCreatedInSmoke Offset: 0x10F8
					constexpr auto extent = 0x1300; // Name: m_extent Offset: 0x1300
					constexpr auto damage_timer = 0x1318; // Name: m_damageTimer Offset: 0x1318
					constexpr auto damage_ramp_timer = 0x1330; // Name: m_damageRampTimer Offset: 0x1330
					constexpr auto splash_velocity = 0x1348; // Name: m_splashVelocity Offset: 0x1348
					constexpr auto initial_splash_velocity = 0x1354; // Name: m_InitialSplashVelocity Offset: 0x1354
					constexpr auto start_pos = 0x1360; // Name: m_startPos Offset: 0x1360
					constexpr auto vec_original_spawn_location = 0x136C; // Name: m_vecOriginalSpawnLocation Offset: 0x136C
					constexpr auto active_timer = 0x1378; // Name: m_activeTimer Offset: 0x1378
					constexpr auto fire_spawn_offset = 0x1388; // Name: m_fireSpawnOffset Offset: 0x1388
					constexpr auto n_max_flames = 0x138C; // Name: m_nMaxFlames Offset: 0x138C
					constexpr auto n_spread_count = 0x1390; // Name: m_nSpreadCount Offset: 0x1390
					constexpr auto bookkeeping_timer = 0x1398; // Name: m_BookkeepingTimer Offset: 0x1398
					constexpr auto next_spread_timer = 0x13B0; // Name: m_NextSpreadTimer Offset: 0x13B0
					constexpr auto n_source_item_def_index = 0x13C8; // Name: m_nSourceItemDefIndex Offset: 0x13C8
				} // namespace CInferno

				namespace CWeaponUSPSilencer {
				} // namespace CWeaponUSPSilencer

				namespace CTriggerGravity {
				} // namespace CTriggerGravity

				namespace CServerRagdollTrigger {
				} // namespace CServerRagdollTrigger

				namespace CWeaponAug {
				} // namespace CWeaponAug

				namespace CEconEntity {
					constexpr auto attribute_manager = 0xA48; // Name: m_AttributeManager Offset: 0xA48
					constexpr auto original_owner_xuid_low = 0xD10; // Name: m_OriginalOwnerXuidLow Offset: 0xD10
					constexpr auto original_owner_xuid_high = 0xD14; // Name: m_OriginalOwnerXuidHigh Offset: 0xD14
					constexpr auto n_fallback_paint_kit = 0xD18; // Name: m_nFallbackPaintKit Offset: 0xD18
					constexpr auto n_fallback_seed = 0xD1C; // Name: m_nFallbackSeed Offset: 0xD1C
					constexpr auto fl_fallback_wear = 0xD20; // Name: m_flFallbackWear Offset: 0xD20
					constexpr auto n_fallback_stat_trak = 0xD24; // Name: m_nFallbackStatTrak Offset: 0xD24
					constexpr auto h_old_providee = 0xD28; // Name: m_hOldProvidee Offset: 0xD28
					constexpr auto i_old_owner_class = 0xD2C; // Name: m_iOldOwnerClass Offset: 0xD2C
				} // namespace CEconEntity

				namespace CPointWorldText {
					constexpr auto message_text = 0x790; // Name: m_messageText Offset: 0x790
					constexpr auto font_name = 0x990; // Name: m_FontName Offset: 0x990
					constexpr auto background_material_name = 0x9D0; // Name: m_BackgroundMaterialName Offset: 0x9D0
					constexpr auto b_enabled = 0xA10; // Name: m_bEnabled Offset: 0xA10
					constexpr auto b_fullbright = 0xA11; // Name: m_bFullbright Offset: 0xA11
					constexpr auto fl_world_units_per_px = 0xA14; // Name: m_flWorldUnitsPerPx Offset: 0xA14
					constexpr auto fl_font_size = 0xA18; // Name: m_flFontSize Offset: 0xA18
					constexpr auto fl_depth_offset = 0xA1C; // Name: m_flDepthOffset Offset: 0xA1C
					constexpr auto b_draw_background = 0xA20; // Name: m_bDrawBackground Offset: 0xA20
					constexpr auto fl_background_border_width = 0xA24; // Name: m_flBackgroundBorderWidth Offset: 0xA24
					constexpr auto fl_background_border_height = 0xA28; // Name: m_flBackgroundBorderHeight Offset: 0xA28
					constexpr auto fl_background_world_to_uv = 0xA2C; // Name: m_flBackgroundWorldToUV Offset: 0xA2C
					constexpr auto color = 0xA30; // Name: m_Color Offset: 0xA30
					constexpr auto n_justify_horizontal = 0xA34; // Name: m_nJustifyHorizontal Offset: 0xA34
					constexpr auto n_justify_vertical = 0xA38; // Name: m_nJustifyVertical Offset: 0xA38
					constexpr auto n_reorient_mode = 0xA3C; // Name: m_nReorientMode Offset: 0xA3C
				} // namespace CPointWorldText

				namespace CSoundAreaEntityOrientedBox {
					constexpr auto v_min = 0x500; // Name: m_vMin Offset: 0x500
					constexpr auto v_max = 0x50C; // Name: m_vMax Offset: 0x50C
				} // namespace CSoundAreaEntityOrientedBox

				namespace CTriggerPhysics {
					constexpr auto gravity_scale = 0x970; // Name: m_gravityScale Offset: 0x970
					constexpr auto linear_limit = 0x974; // Name: m_linearLimit Offset: 0x974
					constexpr auto linear_damping = 0x978; // Name: m_linearDamping Offset: 0x978
					constexpr auto angular_limit = 0x97C; // Name: m_angularLimit Offset: 0x97C
					constexpr auto angular_damping = 0x980; // Name: m_angularDamping Offset: 0x980
					constexpr auto linear_force = 0x984; // Name: m_linearForce Offset: 0x984
					constexpr auto fl_frequency = 0x988; // Name: m_flFrequency Offset: 0x988
					constexpr auto fl_damping_ratio = 0x98C; // Name: m_flDampingRatio Offset: 0x98C
					constexpr auto vec_linear_force_point_at = 0x990; // Name: m_vecLinearForcePointAt Offset: 0x990
					constexpr auto b_collapse_to_force_point = 0x99C; // Name: m_bCollapseToForcePoint Offset: 0x99C
					constexpr auto vec_linear_force_point_at_world = 0x9A0; // Name: m_vecLinearForcePointAtWorld Offset: 0x9A0
					constexpr auto vec_linear_force_direction = 0x9AC; // Name: m_vecLinearForceDirection Offset: 0x9AC
					constexpr auto b_convert_to_debris_when_possible = 0x9B8; // Name: m_bConvertToDebrisWhenPossible Offset: 0x9B8
				} // namespace CTriggerPhysics

				namespace CFuncShatterglass {
					constexpr auto mat_panel_transform = 0x790; // Name: m_matPanelTransform Offset: 0x790
					constexpr auto mat_panel_transform_ws_temp = 0x7C0; // Name: m_matPanelTransformWsTemp Offset: 0x7C0
					constexpr auto vec_shatter_glass_shards = 0x7F0; // Name: m_vecShatterGlassShards Offset: 0x7F0
					constexpr auto panel_size = 0x808; // Name: m_PanelSize Offset: 0x808
					constexpr auto fl_last_shatter_sound_emit_time = 0x810; // Name: m_flLastShatterSoundEmitTime Offset: 0x810
					constexpr auto fl_last_cleanup_time = 0x814; // Name: m_flLastCleanupTime Offset: 0x814
					constexpr auto fl_init_at_time = 0x818; // Name: m_flInitAtTime Offset: 0x818
					constexpr auto fl_glass_thickness = 0x81C; // Name: m_flGlassThickness Offset: 0x81C
					constexpr auto fl_spawn_invulnerability = 0x820; // Name: m_flSpawnInvulnerability Offset: 0x820
					constexpr auto b_break_silent = 0x824; // Name: m_bBreakSilent Offset: 0x824
					constexpr auto b_break_shardless = 0x825; // Name: m_bBreakShardless Offset: 0x825
					constexpr auto b_broken = 0x826; // Name: m_bBroken Offset: 0x826
					constexpr auto b_glass_nav_ignore = 0x827; // Name: m_bGlassNavIgnore Offset: 0x827
					constexpr auto b_glass_in_frame = 0x828; // Name: m_bGlassInFrame Offset: 0x828
					constexpr auto b_start_broken = 0x829; // Name: m_bStartBroken Offset: 0x829
					constexpr auto i_initial_damage_type = 0x82A; // Name: m_iInitialDamageType Offset: 0x82A
					constexpr auto sz_damage_positioning_entity_name01 = 0x830; // Name: m_szDamagePositioningEntityName01 Offset: 0x830
					constexpr auto sz_damage_positioning_entity_name02 = 0x838; // Name: m_szDamagePositioningEntityName02 Offset: 0x838
					constexpr auto sz_damage_positioning_entity_name03 = 0x840; // Name: m_szDamagePositioningEntityName03 Offset: 0x840
					constexpr auto sz_damage_positioning_entity_name04 = 0x848; // Name: m_szDamagePositioningEntityName04 Offset: 0x848
					constexpr auto v_initial_damage_positions = 0x850; // Name: m_vInitialDamagePositions Offset: 0x850
					constexpr auto v_extra_damage_positions = 0x868; // Name: m_vExtraDamagePositions Offset: 0x868
					constexpr auto v_initial_panel_vertices = 0x880; // Name: m_vInitialPanelVertices Offset: 0x880
					constexpr auto on_broken = 0x898; // Name: m_OnBroken Offset: 0x898
					constexpr auto i_surface_type = 0x8C0; // Name: m_iSurfaceType Offset: 0x8C0
					constexpr auto h_material_damage_base = 0x8C8; // Name: m_hMaterialDamageBase Offset: 0x8C8
				} // namespace CFuncShatterglass

				namespace CCSPointPulseAPI {
				} // namespace CCSPointPulseAPI

				namespace CRotButton {
				} // namespace CRotButton

				namespace CMarkupVolumeWithRef {
					constexpr auto b_use_ref = 0x7D0; // Name: m_bUseRef Offset: 0x7D0
					constexpr auto v_ref_pos = 0x7D4; // Name: m_vRefPos Offset: 0x7D4
					constexpr auto fl_ref_dot = 0x7E0; // Name: m_flRefDot Offset: 0x7E0
				} // namespace CMarkupVolumeWithRef

				namespace CSoundEventSphereEntity {
					constexpr auto fl_radius = 0x598; // Name: m_flRadius Offset: 0x598
				} // namespace CSoundEventSphereEntity

				namespace CWeaponHKP2000 {
				} // namespace CWeaponHKP2000

				namespace CEnvSplash {
					constexpr auto fl_scale = 0x4E0; // Name: m_flScale Offset: 0x4E0
				} // namespace CEnvSplash

				namespace fogparams_t {
					constexpr auto dir_primary = 0x8; // Name: dirPrimary Offset: 0x8
					constexpr auto color_primary = 0x14; // Name: colorPrimary Offset: 0x14
					constexpr auto color_secondary = 0x18; // Name: colorSecondary Offset: 0x18
					constexpr auto color_primary_lerp_to = 0x1C; // Name: colorPrimaryLerpTo Offset: 0x1C
					constexpr auto color_secondary_lerp_to = 0x20; // Name: colorSecondaryLerpTo Offset: 0x20
					constexpr auto start = 0x24; // Name: start Offset: 0x24
					constexpr auto end = 0x28; // Name: end Offset: 0x28
					constexpr auto farz = 0x2C; // Name: farz Offset: 0x2C
					constexpr auto maxdensity = 0x30; // Name: maxdensity Offset: 0x30
					constexpr auto exponent = 0x34; // Name: exponent Offset: 0x34
					constexpr auto hdrcolor_scale = 0x38; // Name: HDRColorScale Offset: 0x38
					constexpr auto skybox_fog_factor = 0x3C; // Name: skyboxFogFactor Offset: 0x3C
					constexpr auto skybox_fog_factor_lerp_to = 0x40; // Name: skyboxFogFactorLerpTo Offset: 0x40
					constexpr auto start_lerp_to = 0x44; // Name: startLerpTo Offset: 0x44
					constexpr auto end_lerp_to = 0x48; // Name: endLerpTo Offset: 0x48
					constexpr auto maxdensity_lerp_to = 0x4C; // Name: maxdensityLerpTo Offset: 0x4C
					constexpr auto lerptime = 0x50; // Name: lerptime Offset: 0x50
					constexpr auto duration = 0x54; // Name: duration Offset: 0x54
					constexpr auto blendtobackground = 0x58; // Name: blendtobackground Offset: 0x58
					constexpr auto scattering = 0x5C; // Name: scattering Offset: 0x5C
					constexpr auto locallightscale = 0x60; // Name: locallightscale Offset: 0x60
					constexpr auto enable = 0x64; // Name: enable Offset: 0x64
					constexpr auto blend = 0x65; // Name: blend Offset: 0x65
					constexpr auto b_no_reflection_fog = 0x66; // Name: m_bNoReflectionFog Offset: 0x66
					constexpr auto b_padding = 0x67; // Name: m_bPadding Offset: 0x67
				} // namespace fogparams_t

				namespace CWeaponTaser {
					constexpr auto f_fire_time = 0xF90; // Name: m_fFireTime Offset: 0xF90
					constexpr auto n_last_attack_tick = 0xF94; // Name: m_nLastAttackTick Offset: 0xF94
				} // namespace CWeaponTaser

				namespace CCSGO_TeamSelectTerroristPosition {
				} // namespace CCSGO_TeamSelectTerroristPosition

				namespace CWaterBullet {
				} // namespace CWaterBullet

				namespace CMarkupVolume {
					constexpr auto b_disabled = 0x790; // Name: m_bDisabled Offset: 0x790
				} // namespace CMarkupVolume

				namespace CMessage {
					constexpr auto isz_message = 0x4E0; // Name: m_iszMessage Offset: 0x4E0
					constexpr auto message_volume = 0x4E8; // Name: m_MessageVolume Offset: 0x4E8
					constexpr auto message_attenuation = 0x4EC; // Name: m_MessageAttenuation Offset: 0x4EC
					constexpr auto radius = 0x4F0; // Name: m_Radius Offset: 0x4F0
					constexpr auto s_noise = 0x4F8; // Name: m_sNoise Offset: 0x4F8
					constexpr auto on_show_message = 0x500; // Name: m_OnShowMessage Offset: 0x500
				} // namespace CMessage

				namespace CBreakable {
					constexpr auto cprop_data_component = 0x798; // Name: m_CPropDataComponent Offset: 0x798
					constexpr auto material = 0x7D8; // Name: m_Material Offset: 0x7D8
					constexpr auto h_breaker = 0x7DC; // Name: m_hBreaker Offset: 0x7DC
					constexpr auto explosion = 0x7E0; // Name: m_Explosion Offset: 0x7E0
					constexpr auto isz_spawn_object = 0x7E8; // Name: m_iszSpawnObject Offset: 0x7E8
					constexpr auto fl_pressure_delay = 0x7F0; // Name: m_flPressureDelay Offset: 0x7F0
					constexpr auto i_min_health_dmg = 0x7F4; // Name: m_iMinHealthDmg Offset: 0x7F4
					constexpr auto isz_prop_data = 0x7F8; // Name: m_iszPropData Offset: 0x7F8
					constexpr auto impact_energy_scale = 0x800; // Name: m_impactEnergyScale Offset: 0x800
					constexpr auto n_override_block_los = 0x804; // Name: m_nOverrideBlockLOS Offset: 0x804
					constexpr auto on_break = 0x808; // Name: m_OnBreak Offset: 0x808
					constexpr auto on_health_changed = 0x830; // Name: m_OnHealthChanged Offset: 0x830
					constexpr auto performance_mode = 0x858; // Name: m_PerformanceMode Offset: 0x858
					constexpr auto h_physics_attacker = 0x85C; // Name: m_hPhysicsAttacker Offset: 0x85C
					constexpr auto fl_last_physics_influence_time = 0x860; // Name: m_flLastPhysicsInfluenceTime Offset: 0x860
				} // namespace CBreakable

				namespace CInfoTarget {
				} // namespace CInfoTarget

				namespace CPropDataComponent {
					constexpr auto fl_dmg_mod_bullet = 0x10; // Name: m_flDmgModBullet Offset: 0x10
					constexpr auto fl_dmg_mod_club = 0x14; // Name: m_flDmgModClub Offset: 0x14
					constexpr auto fl_dmg_mod_explosive = 0x18; // Name: m_flDmgModExplosive Offset: 0x18
					constexpr auto fl_dmg_mod_fire = 0x1C; // Name: m_flDmgModFire Offset: 0x1C
					constexpr auto isz_physics_damage_table_name = 0x20; // Name: m_iszPhysicsDamageTableName Offset: 0x20
					constexpr auto isz_base_prop_data = 0x28; // Name: m_iszBasePropData Offset: 0x28
					constexpr auto n_interactions = 0x30; // Name: m_nInteractions Offset: 0x30
					constexpr auto b_spawn_motion_disabled = 0x34; // Name: m_bSpawnMotionDisabled Offset: 0x34
					constexpr auto n_disable_take_physics_damage_spawn_flag = 0x38; // Name: m_nDisableTakePhysicsDamageSpawnFlag Offset: 0x38
					constexpr auto n_motion_disabled_spawn_flag = 0x3C; // Name: m_nMotionDisabledSpawnFlag Offset: 0x3C
				} // namespace CPropDataComponent

				namespace CGameText {
					constexpr auto isz_message = 0x7A0; // Name: m_iszMessage Offset: 0x7A0
					constexpr auto text_parms = 0x7A8; // Name: m_textParms Offset: 0x7A8
				} // namespace CGameText

				namespace CTextureBasedAnimatable {
					constexpr auto b_loop = 0x790; // Name: m_bLoop Offset: 0x790
					constexpr auto fl_fps = 0x794; // Name: m_flFPS Offset: 0x794
					constexpr auto h_position_keys = 0x798; // Name: m_hPositionKeys Offset: 0x798
					constexpr auto h_rotation_keys = 0x7A0; // Name: m_hRotationKeys Offset: 0x7A0
					constexpr auto v_animation_bounds_min = 0x7A8; // Name: m_vAnimationBoundsMin Offset: 0x7A8
					constexpr auto v_animation_bounds_max = 0x7B4; // Name: m_vAnimationBoundsMax Offset: 0x7B4
					constexpr auto fl_start_time = 0x7C0; // Name: m_flStartTime Offset: 0x7C0
					constexpr auto fl_start_frame = 0x7C4; // Name: m_flStartFrame Offset: 0x7C4
				} // namespace CTextureBasedAnimatable

				namespace CCSPointScriptExtensions_player {
				} // namespace CCSPointScriptExtensions_player

				namespace SellbackPurchaseEntry_t {
					constexpr auto un_def_idx = 0x30; // Name: m_unDefIdx Offset: 0x30
					constexpr auto n_cost = 0x34; // Name: m_nCost Offset: 0x34
					constexpr auto n_prev_armor = 0x38; // Name: m_nPrevArmor Offset: 0x38
					constexpr auto b_prev_helmet = 0x3C; // Name: m_bPrevHelmet Offset: 0x3C
					constexpr auto h_item = 0x40; // Name: m_hItem Offset: 0x40
				} // namespace SellbackPurchaseEntry_t

				namespace CWeaponFamas {
				} // namespace CWeaponFamas

				namespace CFilterModel {
					constexpr auto i_filter_model = 0x538; // Name: m_iFilterModel Offset: 0x538
				} // namespace CFilterModel

				namespace CCSPlayerPawnBase {
					constexpr auto ctouch_expansion_component = 0xC68; // Name: m_CTouchExpansionComponent Offset: 0xC68
					constexpr auto p_ping_services = 0xCB8; // Name: m_pPingServices Offset: 0xCB8
					constexpr auto p_view_model_services = 0xCC0; // Name: m_pViewModelServices Offset: 0xCC0
					constexpr auto blind_until_time = 0xCC8; // Name: m_blindUntilTime Offset: 0xCC8
					constexpr auto blind_start_time = 0xCCC; // Name: m_blindStartTime Offset: 0xCCC
					constexpr auto i_player_state = 0xCD0; // Name: m_iPlayerState Offset: 0xCD0
					constexpr auto b_respawning = 0xD80; // Name: m_bRespawning Offset: 0xD80
					constexpr auto f_immune_to_gun_game_damage_time = 0xD84; // Name: m_fImmuneToGunGameDamageTime Offset: 0xD84
					constexpr auto b_gun_game_immunity = 0xD88; // Name: m_bGunGameImmunity Offset: 0xD88
					constexpr auto f_molotov_damage_time = 0xD8C; // Name: m_fMolotovDamageTime Offset: 0xD8C
					constexpr auto b_has_moved_since_spawn = 0xD90; // Name: m_bHasMovedSinceSpawn Offset: 0xD90
					constexpr auto i_num_spawns = 0xD94; // Name: m_iNumSpawns Offset: 0xD94
					constexpr auto fl_idle_time_since_last_action = 0xD9C; // Name: m_flIdleTimeSinceLastAction Offset: 0xD9C
					constexpr auto f_next_radar_update_time = 0xDA0; // Name: m_fNextRadarUpdateTime Offset: 0xDA0
					constexpr auto fl_flash_duration = 0xDA4; // Name: m_flFlashDuration Offset: 0xDA4
					constexpr auto fl_flash_max_alpha = 0xDA8; // Name: m_flFlashMaxAlpha Offset: 0xDA8
					constexpr auto fl_progress_bar_start_time = 0xDAC; // Name: m_flProgressBarStartTime Offset: 0xDAC
					constexpr auto i_progress_bar_duration = 0xDB0; // Name: m_iProgressBarDuration Offset: 0xDB0
					constexpr auto ang_eye_angles = 0xDB4; // Name: m_angEyeAngles Offset: 0xDB4
					constexpr auto was_not_killed_naturally = 0xDC0; // Name: m_wasNotKilledNaturally Offset: 0xDC0
					constexpr auto b_committing_suicide_on_team_change = 0xDC1; // Name: m_bCommittingSuicideOnTeamChange Offset: 0xDC1
					constexpr auto h_original_controller = 0xDC4; // Name: m_hOriginalController Offset: 0xDC4
				} // namespace CCSPlayerPawnBase

				namespace CPathTrack {
					constexpr auto pnext = 0x4E0; // Name: m_pnext Offset: 0x4E0
					constexpr auto pprevious = 0x4E8; // Name: m_pprevious Offset: 0x4E8
					constexpr auto paltpath = 0x4F0; // Name: m_paltpath Offset: 0x4F0
					constexpr auto fl_radius = 0x4F8; // Name: m_flRadius Offset: 0x4F8
					constexpr auto length = 0x4FC; // Name: m_length Offset: 0x4FC
					constexpr auto alt_name = 0x500; // Name: m_altName Offset: 0x500
					constexpr auto n_iter_val = 0x508; // Name: m_nIterVal Offset: 0x508
					constexpr auto e_orientation_type = 0x50C; // Name: m_eOrientationType Offset: 0x50C
					constexpr auto on_pass = 0x510; // Name: m_OnPass Offset: 0x510
				} // namespace CPathTrack

				namespace CLogicDistanceCheck {
					constexpr auto isz_entity_a = 0x4E0; // Name: m_iszEntityA Offset: 0x4E0
					constexpr auto isz_entity_b = 0x4E8; // Name: m_iszEntityB Offset: 0x4E8
					constexpr auto fl_zone1_distance = 0x4F0; // Name: m_flZone1Distance Offset: 0x4F0
					constexpr auto fl_zone2_distance = 0x4F4; // Name: m_flZone2Distance Offset: 0x4F4
					constexpr auto in_zone1 = 0x4F8; // Name: m_InZone1 Offset: 0x4F8
					constexpr auto in_zone2 = 0x520; // Name: m_InZone2 Offset: 0x520
					constexpr auto in_zone3 = 0x548; // Name: m_InZone3 Offset: 0x548
				} // namespace CLogicDistanceCheck

				namespace COmniLight {
					constexpr auto fl_inner_angle = 0xAB0; // Name: m_flInnerAngle Offset: 0xAB0
					constexpr auto fl_outer_angle = 0xAB4; // Name: m_flOuterAngle Offset: 0xAB4
					constexpr auto b_show_light = 0xAB8; // Name: m_bShowLight Offset: 0xAB8
				} // namespace COmniLight

				namespace CWeaponP250 {
				} // namespace CWeaponP250

				namespace CGamePlayerEquip {
				} // namespace CGamePlayerEquip

				namespace CGameScriptedMoveDef_t {
					constexpr auto n_type = 0x0; // Name: m_nType Offset: 0x0
					constexpr auto v_dest_offset = 0x4; // Name: m_vDestOffset Offset: 0x4
					constexpr auto h_dest_entity = 0x10; // Name: m_hDestEntity Offset: 0x10
					constexpr auto ang_dest = 0x14; // Name: m_angDest Offset: 0x14
					constexpr auto fl_duration = 0x20; // Name: m_flDuration Offset: 0x20
					constexpr auto fl_ang_rate = 0x24; // Name: m_flAngRate Offset: 0x24
				} // namespace CGameScriptedMoveDef_t

				namespace CEntityFlame {
					constexpr auto h_ent_attached = 0x4E0; // Name: m_hEntAttached Offset: 0x4E0
					constexpr auto b_cheap_effect = 0x4E4; // Name: m_bCheapEffect Offset: 0x4E4
					constexpr auto fl_size = 0x4E8; // Name: m_flSize Offset: 0x4E8
					constexpr auto b_use_hitboxes = 0x4EC; // Name: m_bUseHitboxes Offset: 0x4EC
					constexpr auto i_num_hitbox_fires = 0x4F0; // Name: m_iNumHitboxFires Offset: 0x4F0
					constexpr auto fl_hitbox_fire_scale = 0x4F4; // Name: m_flHitboxFireScale Offset: 0x4F4
					constexpr auto fl_lifetime = 0x4F8; // Name: m_flLifetime Offset: 0x4F8
					constexpr auto h_attacker = 0x4FC; // Name: m_hAttacker Offset: 0x4FC
					constexpr auto i_danger_sound = 0x500; // Name: m_iDangerSound Offset: 0x500
					constexpr auto fl_direct_damage_per_second = 0x504; // Name: m_flDirectDamagePerSecond Offset: 0x504
					constexpr auto i_custom_damage_type = 0x508; // Name: m_iCustomDamageType Offset: 0x508
				} // namespace CEntityFlame

				namespace CCSWeaponBaseGun {
					constexpr auto zoom_level = 0xF70; // Name: m_zoomLevel Offset: 0xF70
					constexpr auto i_burst_shots_remaining = 0xF74; // Name: m_iBurstShotsRemaining Offset: 0xF74
					constexpr auto silenced_model_index = 0xF80; // Name: m_silencedModelIndex Offset: 0xF80
					constexpr auto in_precache = 0xF84; // Name: m_inPrecache Offset: 0xF84
					constexpr auto b_needs_bolt_action = 0xF85; // Name: m_bNeedsBoltAction Offset: 0xF85
					constexpr auto b_skill_reload_available = 0xF86; // Name: m_bSkillReloadAvailable Offset: 0xF86
					constexpr auto b_skill_reload_lifted_reload_key = 0xF87; // Name: m_bSkillReloadLiftedReloadKey Offset: 0xF87
					constexpr auto b_skill_bolt_interrupt_available = 0xF88; // Name: m_bSkillBoltInterruptAvailable Offset: 0xF88
					constexpr auto b_skill_bolt_lifted_fire_key = 0xF89; // Name: m_bSkillBoltLiftedFireKey Offset: 0xF89
				} // namespace CCSWeaponBaseGun

				namespace CGunTarget {
					constexpr auto on = 0x810; // Name: m_on Offset: 0x810
					constexpr auto h_target_ent = 0x814; // Name: m_hTargetEnt Offset: 0x814
					constexpr auto on_death = 0x818; // Name: m_OnDeath Offset: 0x818
				} // namespace CGunTarget

				namespace CSoundEventParameter {
					constexpr auto isz_param_name = 0x4E8; // Name: m_iszParamName Offset: 0x4E8
					constexpr auto fl_float_value = 0x4F0; // Name: m_flFloatValue Offset: 0x4F0
				} // namespace CSoundEventParameter

				namespace CTestEffect {
					constexpr auto i_loop = 0x4E0; // Name: m_iLoop Offset: 0x4E0
					constexpr auto i_beam = 0x4E4; // Name: m_iBeam Offset: 0x4E4
					constexpr auto p_beam = 0x4E8; // Name: m_pBeam Offset: 0x4E8
					constexpr auto fl_beam_time = 0x5A8; // Name: m_flBeamTime Offset: 0x5A8
					constexpr auto fl_start_time = 0x608; // Name: m_flStartTime Offset: 0x608
				} // namespace CTestEffect

				namespace CWeaponM4A1Silencer {
				} // namespace CWeaponM4A1Silencer

				namespace CConstraintAnchor {
					constexpr auto mass_scale = 0x9A8; // Name: m_massScale Offset: 0x9A8
				} // namespace CConstraintAnchor

				namespace CSceneEntity {
					constexpr auto isz_scene_file = 0x4E8; // Name: m_iszSceneFile Offset: 0x4E8
					constexpr auto isz_resume_scene_file = 0x4F0; // Name: m_iszResumeSceneFile Offset: 0x4F0
					constexpr auto isz_target1 = 0x4F8; // Name: m_iszTarget1 Offset: 0x4F8
					constexpr auto isz_target2 = 0x500; // Name: m_iszTarget2 Offset: 0x500
					constexpr auto isz_target3 = 0x508; // Name: m_iszTarget3 Offset: 0x508
					constexpr auto isz_target4 = 0x510; // Name: m_iszTarget4 Offset: 0x510
					constexpr auto isz_target5 = 0x518; // Name: m_iszTarget5 Offset: 0x518
					constexpr auto isz_target6 = 0x520; // Name: m_iszTarget6 Offset: 0x520
					constexpr auto isz_target7 = 0x528; // Name: m_iszTarget7 Offset: 0x528
					constexpr auto isz_target8 = 0x530; // Name: m_iszTarget8 Offset: 0x530
					constexpr auto h_target1 = 0x538; // Name: m_hTarget1 Offset: 0x538
					constexpr auto h_target2 = 0x53C; // Name: m_hTarget2 Offset: 0x53C
					constexpr auto h_target3 = 0x540; // Name: m_hTarget3 Offset: 0x540
					constexpr auto h_target4 = 0x544; // Name: m_hTarget4 Offset: 0x544
					constexpr auto h_target5 = 0x548; // Name: m_hTarget5 Offset: 0x548
					constexpr auto h_target6 = 0x54C; // Name: m_hTarget6 Offset: 0x54C
					constexpr auto h_target7 = 0x550; // Name: m_hTarget7 Offset: 0x550
					constexpr auto h_target8 = 0x554; // Name: m_hTarget8 Offset: 0x554
					constexpr auto s_target_attachment = 0x558; // Name: m_sTargetAttachment Offset: 0x558
					constexpr auto b_is_playing_back = 0x560; // Name: m_bIsPlayingBack Offset: 0x560
					constexpr auto b_paused = 0x561; // Name: m_bPaused Offset: 0x561
					constexpr auto b_multiplayer = 0x562; // Name: m_bMultiplayer Offset: 0x562
					constexpr auto b_autogenerated = 0x563; // Name: m_bAutogenerated Offset: 0x563
					constexpr auto fl_force_client_time = 0x564; // Name: m_flForceClientTime Offset: 0x564
					constexpr auto fl_current_time = 0x568; // Name: m_flCurrentTime Offset: 0x568
					constexpr auto fl_frame_time = 0x56C; // Name: m_flFrameTime Offset: 0x56C
					constexpr auto b_cancel_at_next_interrupt = 0x570; // Name: m_bCancelAtNextInterrupt Offset: 0x570
					constexpr auto f_pitch = 0x574; // Name: m_fPitch Offset: 0x574
					constexpr auto b_automated = 0x578; // Name: m_bAutomated Offset: 0x578
					constexpr auto n_automated_action = 0x57C; // Name: m_nAutomatedAction Offset: 0x57C
					constexpr auto fl_automation_delay = 0x580; // Name: m_flAutomationDelay Offset: 0x580
					constexpr auto fl_automation_time = 0x584; // Name: m_flAutomationTime Offset: 0x584
					constexpr auto h_waiting_for_this_resume_scene = 0x588; // Name: m_hWaitingForThisResumeScene Offset: 0x588
					constexpr auto b_waiting_for_resume_scene = 0x58C; // Name: m_bWaitingForResumeScene Offset: 0x58C
					constexpr auto b_paused_via_input = 0x58D; // Name: m_bPausedViaInput Offset: 0x58D
					constexpr auto b_pause_at_next_interrupt = 0x58E; // Name: m_bPauseAtNextInterrupt Offset: 0x58E
					constexpr auto b_waiting_for_actor = 0x58F; // Name: m_bWaitingForActor Offset: 0x58F
					constexpr auto b_waiting_for_interrupt = 0x590; // Name: m_bWaitingForInterrupt Offset: 0x590
					constexpr auto b_interrupted_actors_scenes = 0x591; // Name: m_bInterruptedActorsScenes Offset: 0x591
					constexpr auto b_break_on_non_idle = 0x592; // Name: m_bBreakOnNonIdle Offset: 0x592
					constexpr auto b_scene_finished = 0x593; // Name: m_bSceneFinished Offset: 0x593
					constexpr auto h_actor_list = 0x598; // Name: m_hActorList Offset: 0x598
					constexpr auto h_remove_actor_list = 0x5B0; // Name: m_hRemoveActorList Offset: 0x5B0
					constexpr auto n_scene_flush_counter = 0x5F8; // Name: m_nSceneFlushCounter Offset: 0x5F8
					constexpr auto n_scene_string_index = 0x5FC; // Name: m_nSceneStringIndex Offset: 0x5FC
					constexpr auto on_start = 0x600; // Name: m_OnStart Offset: 0x600
					constexpr auto on_completion = 0x628; // Name: m_OnCompletion Offset: 0x628
					constexpr auto on_canceled = 0x650; // Name: m_OnCanceled Offset: 0x650
					constexpr auto on_paused = 0x678; // Name: m_OnPaused Offset: 0x678
					constexpr auto on_resumed = 0x6A0; // Name: m_OnResumed Offset: 0x6A0
					constexpr auto on_trigger = 0x6C8; // Name: m_OnTrigger Offset: 0x6C8
					constexpr auto h_interrupt_scene = 0x9D8; // Name: m_hInterruptScene Offset: 0x9D8
					constexpr auto n_interrupt_count = 0x9DC; // Name: m_nInterruptCount Offset: 0x9DC
					constexpr auto b_scene_missing = 0x9E0; // Name: m_bSceneMissing Offset: 0x9E0
					constexpr auto b_interrupted = 0x9E1; // Name: m_bInterrupted Offset: 0x9E1
					constexpr auto b_completed_early = 0x9E2; // Name: m_bCompletedEarly Offset: 0x9E2
					constexpr auto b_interrupt_scene_finished = 0x9E3; // Name: m_bInterruptSceneFinished Offset: 0x9E3
					constexpr auto b_restoring = 0x9E4; // Name: m_bRestoring Offset: 0x9E4
					constexpr auto h_notify_scene_completion = 0x9E8; // Name: m_hNotifySceneCompletion Offset: 0x9E8
					constexpr auto h_list_managers = 0xA00; // Name: m_hListManagers Offset: 0xA00
					constexpr auto isz_sound_name = 0xA18; // Name: m_iszSoundName Offset: 0xA18
					constexpr auto isz_sequence_name = 0xA20; // Name: m_iszSequenceName Offset: 0xA20
					constexpr auto h_actor = 0xA28; // Name: m_hActor Offset: 0xA28
					constexpr auto h_activator = 0xA2C; // Name: m_hActivator Offset: 0xA2C
					constexpr auto busy_actor = 0xA30; // Name: m_BusyActor Offset: 0xA30
					constexpr auto i_player_death_behavior = 0xA34; // Name: m_iPlayerDeathBehavior Offset: 0xA34
				} // namespace CSceneEntity

				namespace CLogicActiveAutosave {
					constexpr auto trigger_hit_points = 0x4F0; // Name: m_TriggerHitPoints Offset: 0x4F0
					constexpr auto fl_time_to_trigger = 0x4F4; // Name: m_flTimeToTrigger Offset: 0x4F4
					constexpr auto fl_start_time = 0x4F8; // Name: m_flStartTime Offset: 0x4F8
					constexpr auto fl_dangerous_time = 0x4FC; // Name: m_flDangerousTime Offset: 0x4FC
				} // namespace CLogicActiveAutosave

				namespace CMathColorBlend {
					constexpr auto fl_in_min = 0x4E0; // Name: m_flInMin Offset: 0x4E0
					constexpr auto fl_in_max = 0x4E4; // Name: m_flInMax Offset: 0x4E4
					constexpr auto out_color1 = 0x4E8; // Name: m_OutColor1 Offset: 0x4E8
					constexpr auto out_color2 = 0x4EC; // Name: m_OutColor2 Offset: 0x4EC
					constexpr auto out_value = 0x4F0; // Name: m_OutValue Offset: 0x4F0
				} // namespace CMathColorBlend

				namespace CVoteController {
					constexpr auto i_active_issue_index = 0x4E0; // Name: m_iActiveIssueIndex Offset: 0x4E0
					constexpr auto i_only_team_to_vote = 0x4E4; // Name: m_iOnlyTeamToVote Offset: 0x4E4
					constexpr auto n_vote_option_count = 0x4E8; // Name: m_nVoteOptionCount Offset: 0x4E8
					constexpr auto n_potential_votes = 0x4FC; // Name: m_nPotentialVotes Offset: 0x4FC
					constexpr auto b_is_yes_no_vote = 0x500; // Name: m_bIsYesNoVote Offset: 0x500
					constexpr auto accepting_votes_timer = 0x508; // Name: m_acceptingVotesTimer Offset: 0x508
					constexpr auto execute_command_timer = 0x520; // Name: m_executeCommandTimer Offset: 0x520
					constexpr auto reset_vote_timer = 0x538; // Name: m_resetVoteTimer Offset: 0x538
					constexpr auto n_votes_cast = 0x550; // Name: m_nVotesCast Offset: 0x550
					constexpr auto player_holding_vote = 0x650; // Name: m_playerHoldingVote Offset: 0x650
					constexpr auto player_override_for_vote = 0x654; // Name: m_playerOverrideForVote Offset: 0x654
					constexpr auto n_highest_count_index = 0x658; // Name: m_nHighestCountIndex Offset: 0x658
					constexpr auto potential_issues = 0x660; // Name: m_potentialIssues Offset: 0x660
					constexpr auto vote_options = 0x678; // Name: m_VoteOptions Offset: 0x678
				} // namespace CVoteController

				namespace CWeaponCZ75a {
				} // namespace CWeaponCZ75a

				namespace CBaseFlex {
					constexpr auto flex_weight = 0x9A8; // Name: m_flexWeight Offset: 0x9A8
					constexpr auto v_look_target_position = 0x9C0; // Name: m_vLookTargetPosition Offset: 0x9C0
					constexpr auto blinktoggle = 0x9CC; // Name: m_blinktoggle Offset: 0x9CC
					constexpr auto fl_allow_responses_end_time = 0xA20; // Name: m_flAllowResponsesEndTime Offset: 0xA20
					constexpr auto fl_last_flex_animation_time = 0xA24; // Name: m_flLastFlexAnimationTime Offset: 0xA24
					constexpr auto n_next_scene_event_id = 0xA28; // Name: m_nNextSceneEventId Offset: 0xA28
					constexpr auto b_update_layer_priorities = 0xA2C; // Name: m_bUpdateLayerPriorities Offset: 0xA2C
				} // namespace CBaseFlex

				namespace CEnvScreenOverlay {
					constexpr auto isz_overlay_names = 0x4E0; // Name: m_iszOverlayNames Offset: 0x4E0
					constexpr auto fl_overlay_times = 0x530; // Name: m_flOverlayTimes Offset: 0x530
					constexpr auto fl_start_time = 0x558; // Name: m_flStartTime Offset: 0x558
					constexpr auto i_desired_overlay = 0x55C; // Name: m_iDesiredOverlay Offset: 0x55C
					constexpr auto b_is_active = 0x560; // Name: m_bIsActive Offset: 0x560
				} // namespace CEnvScreenOverlay

				namespace CBumpMineProjectile {
				} // namespace CBumpMineProjectile

				namespace CEconItemView {
					constexpr auto i_item_definition_index = 0x38; // Name: m_iItemDefinitionIndex Offset: 0x38
					constexpr auto i_entity_quality = 0x3C; // Name: m_iEntityQuality Offset: 0x3C
					constexpr auto i_entity_level = 0x40; // Name: m_iEntityLevel Offset: 0x40
					constexpr auto i_item_id = 0x48; // Name: m_iItemID Offset: 0x48
					constexpr auto i_item_idhigh = 0x50; // Name: m_iItemIDHigh Offset: 0x50
					constexpr auto i_item_idlow = 0x54; // Name: m_iItemIDLow Offset: 0x54
					constexpr auto i_account_id = 0x58; // Name: m_iAccountID Offset: 0x58
					constexpr auto i_inventory_position = 0x5C; // Name: m_iInventoryPosition Offset: 0x5C
					constexpr auto b_initialized = 0x68; // Name: m_bInitialized Offset: 0x68
					constexpr auto attribute_list = 0x70; // Name: m_AttributeList Offset: 0x70
					constexpr auto networked_dynamic_attributes = 0xD0; // Name: m_NetworkedDynamicAttributes Offset: 0xD0
					constexpr auto sz_custom_name = 0x130; // Name: m_szCustomName Offset: 0x130
					constexpr auto sz_custom_name_override = 0x1D1; // Name: m_szCustomNameOverride Offset: 0x1D1
				} // namespace CEconItemView

				namespace CInfoInstructorHintBombTargetA {
				} // namespace CInfoInstructorHintBombTargetA

				namespace CWeaponMag7 {
				} // namespace CWeaponMag7

				namespace CWeaponAWP {
				} // namespace CWeaponAWP

				namespace CPostProcessingVolume {
					constexpr auto h_post_settings = 0x970; // Name: m_hPostSettings Offset: 0x970
					constexpr auto fl_fade_duration = 0x978; // Name: m_flFadeDuration Offset: 0x978
					constexpr auto fl_min_log_exposure = 0x97C; // Name: m_flMinLogExposure Offset: 0x97C
					constexpr auto fl_max_log_exposure = 0x980; // Name: m_flMaxLogExposure Offset: 0x980
					constexpr auto fl_min_exposure = 0x984; // Name: m_flMinExposure Offset: 0x984
					constexpr auto fl_max_exposure = 0x988; // Name: m_flMaxExposure Offset: 0x988
					constexpr auto fl_exposure_compensation = 0x98C; // Name: m_flExposureCompensation Offset: 0x98C
					constexpr auto fl_exposure_fade_speed_up = 0x990; // Name: m_flExposureFadeSpeedUp Offset: 0x990
					constexpr auto fl_exposure_fade_speed_down = 0x994; // Name: m_flExposureFadeSpeedDown Offset: 0x994
					constexpr auto fl_tonemap_evsmoothing_range = 0x998; // Name: m_flTonemapEVSmoothingRange Offset: 0x998
					constexpr auto b_master = 0x99C; // Name: m_bMaster Offset: 0x99C
					constexpr auto b_exposure_control = 0x99D; // Name: m_bExposureControl Offset: 0x99D
					constexpr auto fl_rate = 0x9A0; // Name: m_flRate Offset: 0x9A0
					constexpr auto fl_tonemap_percent_target = 0x9A4; // Name: m_flTonemapPercentTarget Offset: 0x9A4
					constexpr auto fl_tonemap_percent_bright_pixels = 0x9A8; // Name: m_flTonemapPercentBrightPixels Offset: 0x9A8
					constexpr auto fl_tonemap_min_avg_lum = 0x9AC; // Name: m_flTonemapMinAvgLum Offset: 0x9AC
				} // namespace CPostProcessingVolume

				namespace CSpotlightEnd {
					constexpr auto fl_light_scale = 0x790; // Name: m_flLightScale Offset: 0x790
					constexpr auto radius = 0x794; // Name: m_Radius Offset: 0x794
					constexpr auto v_spotlight_dir = 0x798; // Name: m_vSpotlightDir Offset: 0x798
					constexpr auto v_spotlight_org = 0x7A4; // Name: m_vSpotlightOrg Offset: 0x7A4
				} // namespace CSpotlightEnd

				namespace CRuleEntity {
					constexpr auto isz_master = 0x790; // Name: m_iszMaster Offset: 0x790
				} // namespace CRuleEntity

				namespace CCSGO_TeamPreviewCharacterPosition {
					constexpr auto n_variant = 0x4E0; // Name: m_nVariant Offset: 0x4E0
					constexpr auto n_random = 0x4E4; // Name: m_nRandom Offset: 0x4E4
					constexpr auto n_ordinal = 0x4E8; // Name: m_nOrdinal Offset: 0x4E8
					constexpr auto s_weapon_name = 0x4F0; // Name: m_sWeaponName Offset: 0x4F0
					constexpr auto xuid = 0x4F8; // Name: m_xuid Offset: 0x4F8
					constexpr auto agent_item = 0x500; // Name: m_agentItem Offset: 0x500
					constexpr auto gloves_item = 0x778; // Name: m_glovesItem Offset: 0x778
					constexpr auto weapon_item = 0x9F0; // Name: m_weaponItem Offset: 0x9F0
				} // namespace CCSGO_TeamPreviewCharacterPosition

				namespace RelationshipOverride_t {
					constexpr auto entity = 0x8; // Name: entity Offset: 0x8
					constexpr auto class_type = 0xC; // Name: classType Offset: 0xC
				} // namespace RelationshipOverride_t

				namespace CTriggerDetectExplosion {
					constexpr auto on_detected_explosion = 0x988; // Name: m_OnDetectedExplosion Offset: 0x988
				} // namespace CTriggerDetectExplosion

				namespace CFuncConveyor {
					constexpr auto sz_conveyor_models = 0x790; // Name: m_szConveyorModels Offset: 0x790
					constexpr auto fl_transition_duration_seconds = 0x798; // Name: m_flTransitionDurationSeconds Offset: 0x798
					constexpr auto ang_move_entity_space = 0x79C; // Name: m_angMoveEntitySpace Offset: 0x79C
					constexpr auto vec_move_dir_entity_space = 0x7A8; // Name: m_vecMoveDirEntitySpace Offset: 0x7A8
					constexpr auto fl_target_speed = 0x7B4; // Name: m_flTargetSpeed Offset: 0x7B4
					constexpr auto n_transition_start_tick = 0x7B8; // Name: m_nTransitionStartTick Offset: 0x7B8
					constexpr auto n_transition_duration_ticks = 0x7BC; // Name: m_nTransitionDurationTicks Offset: 0x7BC
					constexpr auto fl_transition_start_speed = 0x7C0; // Name: m_flTransitionStartSpeed Offset: 0x7C0
					constexpr auto h_conveyor_models = 0x7C8; // Name: m_hConveyorModels Offset: 0x7C8
				} // namespace CFuncConveyor

				namespace CSoundStackSave {
					constexpr auto isz_stack_name = 0x4E0; // Name: m_iszStackName Offset: 0x4E0
				} // namespace CSoundStackSave

				namespace CPhysHinge {
					constexpr auto sound_info = 0x560; // Name: m_soundInfo Offset: 0x560
					constexpr auto notify_min_limit_reached = 0x5E8; // Name: m_NotifyMinLimitReached Offset: 0x5E8
					constexpr auto notify_max_limit_reached = 0x610; // Name: m_NotifyMaxLimitReached Offset: 0x610
					constexpr auto b_at_min_limit = 0x638; // Name: m_bAtMinLimit Offset: 0x638
					constexpr auto b_at_max_limit = 0x639; // Name: m_bAtMaxLimit Offset: 0x639
					constexpr auto hinge = 0x63C; // Name: m_hinge Offset: 0x63C
					constexpr auto hinge_friction = 0x67C; // Name: m_hingeFriction Offset: 0x67C
					constexpr auto system_load_scale = 0x680; // Name: m_systemLoadScale Offset: 0x680
					constexpr auto b_is_axis_local = 0x684; // Name: m_bIsAxisLocal Offset: 0x684
					constexpr auto fl_min_rotation = 0x688; // Name: m_flMinRotation Offset: 0x688
					constexpr auto fl_max_rotation = 0x68C; // Name: m_flMaxRotation Offset: 0x68C
					constexpr auto fl_initial_rotation = 0x690; // Name: m_flInitialRotation Offset: 0x690
					constexpr auto fl_motor_frequency = 0x694; // Name: m_flMotorFrequency Offset: 0x694
					constexpr auto fl_motor_damping_ratio = 0x698; // Name: m_flMotorDampingRatio Offset: 0x698
					constexpr auto fl_angle_speed = 0x69C; // Name: m_flAngleSpeed Offset: 0x69C
					constexpr auto fl_angle_speed_threshold = 0x6A0; // Name: m_flAngleSpeedThreshold Offset: 0x6A0
					constexpr auto on_start_moving = 0x6A8; // Name: m_OnStartMoving Offset: 0x6A8
					constexpr auto on_stop_moving = 0x6D0; // Name: m_OnStopMoving Offset: 0x6D0
				} // namespace CPhysHinge

				namespace CSingleplayRules {
					constexpr auto b_single_player_game_ending = 0xC0; // Name: m_bSinglePlayerGameEnding Offset: 0xC0
				} // namespace CSingleplayRules

				namespace CFilterProximity {
					constexpr auto fl_radius = 0x538; // Name: m_flRadius Offset: 0x538
				} // namespace CFilterProximity

				namespace CMathCounter {
					constexpr auto fl_min = 0x4E0; // Name: m_flMin Offset: 0x4E0
					constexpr auto fl_max = 0x4E4; // Name: m_flMax Offset: 0x4E4
					constexpr auto b_hit_min = 0x4E8; // Name: m_bHitMin Offset: 0x4E8
					constexpr auto b_hit_max = 0x4E9; // Name: m_bHitMax Offset: 0x4E9
					constexpr auto b_disabled = 0x4EA; // Name: m_bDisabled Offset: 0x4EA
					constexpr auto out_value = 0x4F0; // Name: m_OutValue Offset: 0x4F0
					constexpr auto on_get_value = 0x518; // Name: m_OnGetValue Offset: 0x518
					constexpr auto on_hit_min = 0x540; // Name: m_OnHitMin Offset: 0x540
					constexpr auto on_hit_max = 0x568; // Name: m_OnHitMax Offset: 0x568
					constexpr auto on_changed_from_min = 0x590; // Name: m_OnChangedFromMin Offset: 0x590
					constexpr auto on_changed_from_max = 0x5B8; // Name: m_OnChangedFromMax Offset: 0x5B8
				} // namespace CMathCounter

				namespace CInfoWorldLayer {
					constexpr auto p_output_on_entities_spawned = 0x4E0; // Name: m_pOutputOnEntitiesSpawned Offset: 0x4E0
					constexpr auto world_name = 0x508; // Name: m_worldName Offset: 0x508
					constexpr auto layer_name = 0x510; // Name: m_layerName Offset: 0x510
					constexpr auto b_world_layer_visible = 0x518; // Name: m_bWorldLayerVisible Offset: 0x518
					constexpr auto b_entities_spawned = 0x519; // Name: m_bEntitiesSpawned Offset: 0x519
					constexpr auto b_create_as_child_spawn_group = 0x51A; // Name: m_bCreateAsChildSpawnGroup Offset: 0x51A
					constexpr auto h_layer_spawn_group = 0x51C; // Name: m_hLayerSpawnGroup Offset: 0x51C
				} // namespace CInfoWorldLayer

				namespace IPulseComponentEntity {
				} // namespace IPulseComponentEntity

				namespace CLogicLineToEntity {
					constexpr auto line = 0x4E0; // Name: m_Line Offset: 0x4E0
					constexpr auto source_name = 0x508; // Name: m_SourceName Offset: 0x508
					constexpr auto start_entity = 0x510; // Name: m_StartEntity Offset: 0x510
					constexpr auto end_entity = 0x514; // Name: m_EndEntity Offset: 0x514
				} // namespace CLogicLineToEntity

				namespace CColorCorrection {
					constexpr auto fl_fade_in_duration = 0x4E0; // Name: m_flFadeInDuration Offset: 0x4E0
					constexpr auto fl_fade_out_duration = 0x4E4; // Name: m_flFadeOutDuration Offset: 0x4E4
					constexpr auto fl_start_fade_in_weight = 0x4E8; // Name: m_flStartFadeInWeight Offset: 0x4E8
					constexpr auto fl_start_fade_out_weight = 0x4EC; // Name: m_flStartFadeOutWeight Offset: 0x4EC
					constexpr auto fl_time_start_fade_in = 0x4F0; // Name: m_flTimeStartFadeIn Offset: 0x4F0
					constexpr auto fl_time_start_fade_out = 0x4F4; // Name: m_flTimeStartFadeOut Offset: 0x4F4
					constexpr auto fl_max_weight = 0x4F8; // Name: m_flMaxWeight Offset: 0x4F8
					constexpr auto b_start_disabled = 0x4FC; // Name: m_bStartDisabled Offset: 0x4FC
					constexpr auto b_enabled = 0x4FD; // Name: m_bEnabled Offset: 0x4FD
					constexpr auto b_master = 0x4FE; // Name: m_bMaster Offset: 0x4FE
					constexpr auto b_client_side = 0x4FF; // Name: m_bClientSide Offset: 0x4FF
					constexpr auto b_exclusive = 0x500; // Name: m_bExclusive Offset: 0x500
					constexpr auto min_falloff = 0x504; // Name: m_MinFalloff Offset: 0x504
					constexpr auto max_falloff = 0x508; // Name: m_MaxFalloff Offset: 0x508
					constexpr auto fl_cur_weight = 0x50C; // Name: m_flCurWeight Offset: 0x50C
					constexpr auto netlookup_filename = 0x510; // Name: m_netlookupFilename Offset: 0x510
					constexpr auto lookup_filename = 0x710; // Name: m_lookupFilename Offset: 0x710
				} // namespace CColorCorrection

				namespace CWeaponElite {
				} // namespace CWeaponElite

				namespace CC4 {
					constexpr auto vec_last_valid_player_held_position = 0xFA0; // Name: m_vecLastValidPlayerHeldPosition Offset: 0xFA0
					constexpr auto vec_last_valid_dropped_position = 0xFAC; // Name: m_vecLastValidDroppedPosition Offset: 0xFAC
					constexpr auto b_do_valid_dropped_position_check = 0xFB8; // Name: m_bDoValidDroppedPositionCheck Offset: 0xFB8
					constexpr auto b_started_arming = 0xFB9; // Name: m_bStartedArming Offset: 0xFB9
					constexpr auto f_armed_time = 0xFBC; // Name: m_fArmedTime Offset: 0xFBC
					constexpr auto b_bomb_placed_animation = 0xFC0; // Name: m_bBombPlacedAnimation Offset: 0xFC0
					constexpr auto b_is_planting_via_use = 0xFC1; // Name: m_bIsPlantingViaUse Offset: 0xFC1
					constexpr auto entity_spotted_state = 0xFC8; // Name: m_entitySpottedState Offset: 0xFC8
					constexpr auto n_spot_rules = 0xFE0; // Name: m_nSpotRules Offset: 0xFE0
					constexpr auto b_played_arming_beeps = 0xFE4; // Name: m_bPlayedArmingBeeps Offset: 0xFE4
					constexpr auto b_bomb_planted = 0xFEB; // Name: m_bBombPlanted Offset: 0xFEB
				} // namespace CC4

				namespace CHostageRescueZone {
				} // namespace CHostageRescueZone

				namespace CPointPrefab {
					constexpr auto target_map_name = 0x4E0; // Name: m_targetMapName Offset: 0x4E0
					constexpr auto force_world_group_id = 0x4E8; // Name: m_forceWorldGroupID Offset: 0x4E8
					constexpr auto associated_relay_target_name = 0x4F0; // Name: m_associatedRelayTargetName Offset: 0x4F0
					constexpr auto fixup_names = 0x4F8; // Name: m_fixupNames Offset: 0x4F8
					constexpr auto b_load_dynamic = 0x4F9; // Name: m_bLoadDynamic Offset: 0x4F9
					constexpr auto associated_relay_entity = 0x4FC; // Name: m_associatedRelayEntity Offset: 0x4FC
				} // namespace CPointPrefab

				namespace CTankTrainAI {
					constexpr auto h_train = 0x4E0; // Name: m_hTrain Offset: 0x4E0
					constexpr auto h_target_entity = 0x4E4; // Name: m_hTargetEntity Offset: 0x4E4
					constexpr auto sound_playing = 0x4E8; // Name: m_soundPlaying Offset: 0x4E8
					constexpr auto start_sound_name = 0x500; // Name: m_startSoundName Offset: 0x500
					constexpr auto engine_sound_name = 0x508; // Name: m_engineSoundName Offset: 0x508
					constexpr auto movement_sound_name = 0x510; // Name: m_movementSoundName Offset: 0x510
					constexpr auto target_entity_name = 0x518; // Name: m_targetEntityName Offset: 0x518
				} // namespace CTankTrainAI

				namespace CGameGibManager {
					constexpr auto b_allow_new_gibs = 0x500; // Name: m_bAllowNewGibs Offset: 0x500
					constexpr auto i_current_max_pieces = 0x504; // Name: m_iCurrentMaxPieces Offset: 0x504
					constexpr auto i_max_pieces = 0x508; // Name: m_iMaxPieces Offset: 0x508
					constexpr auto i_last_frame = 0x50C; // Name: m_iLastFrame Offset: 0x50C
				} // namespace CGameGibManager

				namespace CCSPointScript {
					constexpr auto p_parent = 0xF8; // Name: m_pParent Offset: 0xF8
				} // namespace CCSPointScript

				namespace CCSSprite {
				} // namespace CCSSprite

				namespace SpawnPoint {
					constexpr auto i_priority = 0x4E0; // Name: m_iPriority Offset: 0x4E0
					constexpr auto b_enabled = 0x4E4; // Name: m_bEnabled Offset: 0x4E4
					constexpr auto n_type = 0x4E8; // Name: m_nType Offset: 0x4E8
				} // namespace SpawnPoint

				namespace CTripWireFireProjectile {
				} // namespace CTripWireFireProjectile

				namespace CEnvSpark {
					constexpr auto fl_delay = 0x4E0; // Name: m_flDelay Offset: 0x4E0
					constexpr auto n_magnitude = 0x4E4; // Name: m_nMagnitude Offset: 0x4E4
					constexpr auto n_trail_length = 0x4E8; // Name: m_nTrailLength Offset: 0x4E8
					constexpr auto n_type = 0x4EC; // Name: m_nType Offset: 0x4EC
					constexpr auto on_spark = 0x4F0; // Name: m_OnSpark Offset: 0x4F0
				} // namespace CEnvSpark

				namespace CPlayer_AutoaimServices {
				} // namespace CPlayer_AutoaimServices

				namespace CNavLinkAreaEntity {
					constexpr auto fl_width = 0x4E0; // Name: m_flWidth Offset: 0x4E0
					constexpr auto v_locator_offset = 0x4E4; // Name: m_vLocatorOffset Offset: 0x4E4
					constexpr auto q_locator_angles_offset = 0x4F0; // Name: m_qLocatorAnglesOffset Offset: 0x4F0
					constexpr auto str_movement_forward = 0x500; // Name: m_strMovementForward Offset: 0x500
					constexpr auto str_movement_reverse = 0x508; // Name: m_strMovementReverse Offset: 0x508
					constexpr auto n_nav_link_id_forward = 0x510; // Name: m_nNavLinkIdForward Offset: 0x510
					constexpr auto n_nav_link_id_reverse = 0x514; // Name: m_nNavLinkIdReverse Offset: 0x514
					constexpr auto b_enabled = 0x518; // Name: m_bEnabled Offset: 0x518
					constexpr auto str_filter_name = 0x520; // Name: m_strFilterName Offset: 0x520
					constexpr auto h_filter = 0x528; // Name: m_hFilter Offset: 0x528
					constexpr auto on_nav_link_start = 0x530; // Name: m_OnNavLinkStart Offset: 0x530
					constexpr auto on_nav_link_finish = 0x558; // Name: m_OnNavLinkFinish Offset: 0x558
					constexpr auto b_is_terminus = 0x580; // Name: m_bIsTerminus Offset: 0x580
				} // namespace CNavLinkAreaEntity

				namespace CFuncMoveLinear {
					constexpr auto authored_position = 0x810; // Name: m_authoredPosition Offset: 0x810
					constexpr auto ang_move_entity_space = 0x814; // Name: m_angMoveEntitySpace Offset: 0x814
					constexpr auto vec_move_dir_parent_space = 0x820; // Name: m_vecMoveDirParentSpace Offset: 0x820
					constexpr auto sound_start = 0x830; // Name: m_soundStart Offset: 0x830
					constexpr auto sound_stop = 0x838; // Name: m_soundStop Offset: 0x838
					constexpr auto current_sound = 0x840; // Name: m_currentSound Offset: 0x840
					constexpr auto fl_block_damage = 0x848; // Name: m_flBlockDamage Offset: 0x848
					constexpr auto fl_start_position = 0x84C; // Name: m_flStartPosition Offset: 0x84C
					constexpr auto on_fully_open = 0x858; // Name: m_OnFullyOpen Offset: 0x858
					constexpr auto on_fully_closed = 0x880; // Name: m_OnFullyClosed Offset: 0x880
					constexpr auto b_create_movable_nav_mesh = 0x8A8; // Name: m_bCreateMovableNavMesh Offset: 0x8A8
					constexpr auto b_create_nav_obstacle = 0x8A9; // Name: m_bCreateNavObstacle Offset: 0x8A9
				} // namespace CFuncMoveLinear

				namespace CCommentaryAuto {
					constexpr auto on_commentary_new_game = 0x4E0; // Name: m_OnCommentaryNewGame Offset: 0x4E0
					constexpr auto on_commentary_mid_game = 0x508; // Name: m_OnCommentaryMidGame Offset: 0x508
					constexpr auto on_commentary_multiplayer_spawn = 0x530; // Name: m_OnCommentaryMultiplayerSpawn Offset: 0x530
				} // namespace CCommentaryAuto

				namespace CTriggerBombReset {
				} // namespace CTriggerBombReset

				namespace CLogicMeasureMovement {
					constexpr auto str_measure_target = 0x4E0; // Name: m_strMeasureTarget Offset: 0x4E0
					constexpr auto str_measure_reference = 0x4E8; // Name: m_strMeasureReference Offset: 0x4E8
					constexpr auto str_target_reference = 0x4F0; // Name: m_strTargetReference Offset: 0x4F0
					constexpr auto h_measure_target = 0x4F8; // Name: m_hMeasureTarget Offset: 0x4F8
					constexpr auto h_measure_reference = 0x4FC; // Name: m_hMeasureReference Offset: 0x4FC
					constexpr auto h_target = 0x500; // Name: m_hTarget Offset: 0x500
					constexpr auto h_target_reference = 0x504; // Name: m_hTargetReference Offset: 0x504
					constexpr auto fl_scale = 0x508; // Name: m_flScale Offset: 0x508
					constexpr auto n_measure_type = 0x50C; // Name: m_nMeasureType Offset: 0x50C
				} // namespace CLogicMeasureMovement

				namespace CHintMessage {
					constexpr auto hint_string = 0x0; // Name: m_hintString Offset: 0x0
					constexpr auto args = 0x8; // Name: m_args Offset: 0x8
					constexpr auto duration = 0x20; // Name: m_duration Offset: 0x20
				} // namespace CHintMessage

				namespace CPulseCell_Outflow_PlaySceneBase {
					constexpr auto on_finished = 0x48; // Name: m_OnFinished Offset: 0x48
					constexpr auto on_canceled = 0x78; // Name: m_OnCanceled Offset: 0x78
					constexpr auto triggers = 0xA8; // Name: m_Triggers Offset: 0xA8
				} // namespace CPulseCell_Outflow_PlaySceneBase

				namespace CPulseCell_Outflow_ScriptedSequence_CursorState_t {
					constexpr auto scripted_sequence = 0x0; // Name: m_scriptedSequence Offset: 0x0
				} // namespace CPulseCell_Outflow_ScriptedSequence_CursorState_t

				namespace CSound {
					constexpr auto h_owner = 0x0; // Name: m_hOwner Offset: 0x0
					constexpr auto h_target = 0x4; // Name: m_hTarget Offset: 0x4
					constexpr auto i_volume = 0x8; // Name: m_iVolume Offset: 0x8
					constexpr auto fl_occlusion_scale = 0xC; // Name: m_flOcclusionScale Offset: 0xC
					constexpr auto sound = 0x10; // Name: m_Sound Offset: 0x10
					constexpr auto i_next_audible = 0x14; // Name: m_iNextAudible Offset: 0x14
					constexpr auto fl_expire_time = 0x18; // Name: m_flExpireTime Offset: 0x18
					constexpr auto i_next = 0x1C; // Name: m_iNext Offset: 0x1C
					constexpr auto b_no_expiration_time = 0x1E; // Name: m_bNoExpirationTime Offset: 0x1E
					constexpr auto owner_channel_index = 0x20; // Name: m_ownerChannelIndex Offset: 0x20
					constexpr auto vec_origin = 0x24; // Name: m_vecOrigin Offset: 0x24
					constexpr auto b_has_owner = 0x30; // Name: m_bHasOwner Offset: 0x30
				} // namespace CSound

				namespace CResponseQueue {
					constexpr auto expresser_targets = 0x48; // Name: m_ExpresserTargets Offset: 0x48
				} // namespace CResponseQueue

				namespace CPulseCell_SoundEventStart {
					constexpr auto type = 0x48; // Name: m_Type Offset: 0x48
				} // namespace CPulseCell_SoundEventStart

				namespace lerpdata_t {
					constexpr auto h_ent = 0x0; // Name: m_hEnt Offset: 0x0
					constexpr auto move_type = 0x4; // Name: m_MoveType Offset: 0x4
					constexpr auto fl_start_time = 0x8; // Name: m_flStartTime Offset: 0x8
					constexpr auto vec_start_origin = 0xC; // Name: m_vecStartOrigin Offset: 0xC
					constexpr auto q_start_rot = 0x20; // Name: m_qStartRot Offset: 0x20
					constexpr auto n_fxindex = 0x30; // Name: m_nFXIndex Offset: 0x30
				} // namespace lerpdata_t

				namespace SimpleConstraintSoundProfile {
					constexpr auto e_keypoints = 0x8; // Name: eKeypoints Offset: 0x8
					constexpr auto key_points = 0xC; // Name: m_keyPoints Offset: 0xC
					constexpr auto reversal_sound_thresholds = 0x14; // Name: m_reversalSoundThresholds Offset: 0x14
				} // namespace SimpleConstraintSoundProfile

				namespace CGameScriptedMoveData {
					constexpr auto v_accumulated_root_motion = 0x0; // Name: m_vAccumulatedRootMotion Offset: 0x0
					constexpr auto v_dest = 0xC; // Name: m_vDest Offset: 0xC
					constexpr auto v_src = 0x18; // Name: m_vSrc Offset: 0x18
					constexpr auto ang_src = 0x24; // Name: m_angSrc Offset: 0x24
					constexpr auto ang_dst = 0x30; // Name: m_angDst Offset: 0x30
					constexpr auto ang_current = 0x3C; // Name: m_angCurrent Offset: 0x3C
					constexpr auto h_dest_entity = 0x48; // Name: m_hDestEntity Offset: 0x48
					constexpr auto fl_locked_speed = 0x4C; // Name: m_flLockedSpeed Offset: 0x4C
					constexpr auto fl_ang_rate = 0x50; // Name: m_flAngRate Offset: 0x50
					constexpr auto fl_duration = 0x54; // Name: m_flDuration Offset: 0x54
					constexpr auto fl_start_time = 0x58; // Name: m_flStartTime Offset: 0x58
					constexpr auto b_active = 0x5C; // Name: m_bActive Offset: 0x5C
					constexpr auto b_teleport_on_end = 0x5D; // Name: m_bTeleportOnEnd Offset: 0x5D
					constexpr auto b_ignore_rotation = 0x5E; // Name: m_bIgnoreRotation Offset: 0x5E
					constexpr auto n_type = 0x60; // Name: m_nType Offset: 0x60
					constexpr auto b_success = 0x64; // Name: m_bSuccess Offset: 0x64
					constexpr auto n_forced_crouch_state = 0x68; // Name: m_nForcedCrouchState Offset: 0x68
					constexpr auto b_ignore_collisions = 0x6C; // Name: m_bIgnoreCollisions Offset: 0x6C
				} // namespace CGameScriptedMoveData

				namespace CPulseCell_Outflow_PlaySequence {
					constexpr auto param_sequence_name = 0xC0; // Name: m_ParamSequenceName Offset: 0xC0
				} // namespace CPulseCell_Outflow_PlaySequence

				namespace ConstraintSoundInfo {
					constexpr auto v_sampler = 0x8; // Name: m_vSampler Offset: 0x8
					constexpr auto sound_profile = 0x20; // Name: m_soundProfile Offset: 0x20
					constexpr auto forward_axis = 0x40; // Name: m_forwardAxis Offset: 0x40
					constexpr auto isz_travel_sound_fwd = 0x50; // Name: m_iszTravelSoundFwd Offset: 0x50
					constexpr auto isz_travel_sound_back = 0x58; // Name: m_iszTravelSoundBack Offset: 0x58
					constexpr auto isz_reversal_sounds = 0x68; // Name: m_iszReversalSounds Offset: 0x68
					constexpr auto b_play_travel_sound = 0x80; // Name: m_bPlayTravelSound Offset: 0x80
					constexpr auto b_play_reversal_sound = 0x81; // Name: m_bPlayReversalSound Offset: 0x81
				} // namespace ConstraintSoundInfo

				namespace dynpitchvol_base_t {
					constexpr auto preset = 0x0; // Name: preset Offset: 0x0
					constexpr auto pitchrun = 0x4; // Name: pitchrun Offset: 0x4
					constexpr auto pitchstart = 0x8; // Name: pitchstart Offset: 0x8
					constexpr auto spinup = 0xC; // Name: spinup Offset: 0xC
					constexpr auto spindown = 0x10; // Name: spindown Offset: 0x10
					constexpr auto volrun = 0x14; // Name: volrun Offset: 0x14
					constexpr auto volstart = 0x18; // Name: volstart Offset: 0x18
					constexpr auto fadein = 0x1C; // Name: fadein Offset: 0x1C
					constexpr auto fadeout = 0x20; // Name: fadeout Offset: 0x20
					constexpr auto lfotype = 0x24; // Name: lfotype Offset: 0x24
					constexpr auto lforate = 0x28; // Name: lforate Offset: 0x28
					constexpr auto lfomodpitch = 0x2C; // Name: lfomodpitch Offset: 0x2C
					constexpr auto lfomodvol = 0x30; // Name: lfomodvol Offset: 0x30
					constexpr auto cspinup = 0x34; // Name: cspinup Offset: 0x34
					constexpr auto cspincount = 0x38; // Name: cspincount Offset: 0x38
					constexpr auto pitch = 0x3C; // Name: pitch Offset: 0x3C
					constexpr auto spinupsav = 0x40; // Name: spinupsav Offset: 0x40
					constexpr auto spindownsav = 0x44; // Name: spindownsav Offset: 0x44
					constexpr auto pitchfrac = 0x48; // Name: pitchfrac Offset: 0x48
					constexpr auto vol = 0x4C; // Name: vol Offset: 0x4C
					constexpr auto fadeinsav = 0x50; // Name: fadeinsav Offset: 0x50
					constexpr auto fadeoutsav = 0x54; // Name: fadeoutsav Offset: 0x54
					constexpr auto volfrac = 0x58; // Name: volfrac Offset: 0x58
					constexpr auto lfofrac = 0x5C; // Name: lfofrac Offset: 0x5C
					constexpr auto lfomult = 0x60; // Name: lfomult Offset: 0x60
				} // namespace dynpitchvol_base_t

				namespace CPulseCell_Outflow_ScriptedSequence {
					constexpr auto sz_sync_group = 0x48; // Name: m_szSyncGroup Offset: 0x48
					constexpr auto n_expected_num_sequences_in_sync_group = 0x50; // Name: m_nExpectedNumSequencesInSyncGroup Offset: 0x50
					constexpr auto b_ensure_on_navmesh_on_finish = 0x54; // Name: m_bEnsureOnNavmeshOnFinish Offset: 0x54
					constexpr auto b_dont_teleport_at_end = 0x55; // Name: m_bDontTeleportAtEnd Offset: 0x55
					constexpr auto scripted_sequence_data_main = 0x58; // Name: m_scriptedSequenceDataMain Offset: 0x58
					constexpr auto vec_additional_actors = 0x90; // Name: m_vecAdditionalActors Offset: 0x90
					constexpr auto on_finished = 0xA8; // Name: m_OnFinished Offset: 0xA8
					constexpr auto on_canceled = 0xD8; // Name: m_OnCanceled Offset: 0xD8
					constexpr auto triggers = 0x108; // Name: m_Triggers Offset: 0x108
				} // namespace CPulseCell_Outflow_ScriptedSequence

				namespace VelocitySampler {
					constexpr auto prev_sample = 0x0; // Name: m_prevSample Offset: 0x0
					constexpr auto f_prev_sample_time = 0xC; // Name: m_fPrevSampleTime Offset: 0xC
					constexpr auto f_ideal_sample_rate = 0x10; // Name: m_fIdealSampleRate Offset: 0x10
				} // namespace VelocitySampler

				namespace PulseScriptedSequenceData_t {
					constexpr auto n_actor_id = 0x0; // Name: m_nActorID Offset: 0x0
					constexpr auto sz_pre_idle_sequence = 0x8; // Name: m_szPreIdleSequence Offset: 0x8
					constexpr auto sz_entry_sequence = 0x10; // Name: m_szEntrySequence Offset: 0x10
					constexpr auto sz_sequence = 0x18; // Name: m_szSequence Offset: 0x18
					constexpr auto sz_exit_sequence = 0x20; // Name: m_szExitSequence Offset: 0x20
					constexpr auto n_move_to = 0x28; // Name: m_nMoveTo Offset: 0x28
					constexpr auto n_move_to_gait = 0x2C; // Name: m_nMoveToGait Offset: 0x2C
					constexpr auto n_held_weapon_behavior = 0x30; // Name: m_nHeldWeaponBehavior Offset: 0x30
					constexpr auto b_loop_pre_idle_sequence = 0x34; // Name: m_bLoopPreIdleSequence Offset: 0x34
					constexpr auto b_loop_action_sequence = 0x35; // Name: m_bLoopActionSequence Offset: 0x35
					constexpr auto b_loop_post_idle_sequence = 0x36; // Name: m_bLoopPostIdleSequence Offset: 0x36
					constexpr auto b_ignore_look_at = 0x37; // Name: m_bIgnoreLookAt Offset: 0x37
				} // namespace PulseScriptedSequenceData_t

				namespace CCommentarySystem {
					constexpr auto b_commentary_convars_changing = 0x11; // Name: m_bCommentaryConvarsChanging Offset: 0x11
					constexpr auto b_commentary_enabled_mid_game = 0x12; // Name: m_bCommentaryEnabledMidGame Offset: 0x12
					constexpr auto fl_next_teleport_time = 0x14; // Name: m_flNextTeleportTime Offset: 0x14
					constexpr auto i_teleport_stage = 0x18; // Name: m_iTeleportStage Offset: 0x18
					constexpr auto b_cheat_state = 0x1C; // Name: m_bCheatState Offset: 0x1C
					constexpr auto b_is_first_spawn_group_to_load = 0x1D; // Name: m_bIsFirstSpawnGroupToLoad Offset: 0x1D
					constexpr auto h_current_node = 0x38; // Name: m_hCurrentNode Offset: 0x38
					constexpr auto h_active_commentary_node = 0x3C; // Name: m_hActiveCommentaryNode Offset: 0x3C
					constexpr auto h_last_commentary_node = 0x40; // Name: m_hLastCommentaryNode Offset: 0x40
					constexpr auto vec_nodes = 0x48; // Name: m_vecNodes Offset: 0x48
				} // namespace CCommentarySystem

				namespace CChicken_GraphController {
					constexpr auto param_activity = 0x60; // Name: m_paramActivity Offset: 0x60
					constexpr auto param_end_activity_immediately = 0x88; // Name: m_paramEndActivityImmediately Offset: 0x88
					constexpr auto s_activity_finished = 0xA8; // Name: m_sActivityFinished Offset: 0xA8
					constexpr auto param_turn_angle = 0xC0; // Name: m_paramTurnAngle Offset: 0xC0
				} // namespace CChicken_GraphController

				namespace magnetted_objects_t {
					constexpr auto h_entity = 0x8; // Name: hEntity Offset: 0x8
				} // namespace magnetted_objects_t

				namespace CPulseGraphComponentGameBlackboard {
				} // namespace CPulseGraphComponentGameBlackboard

				namespace CPulseCell_Outflow_PlayVCD {
					constexpr auto vcd_filename = 0xC0; // Name: m_vcdFilename Offset: 0xC0
				} // namespace CPulseCell_Outflow_PlayVCD

				namespace locksound_t {
					constexpr auto s_locked_sound = 0x8; // Name: sLockedSound Offset: 0x8
					constexpr auto s_unlocked_sound = 0x10; // Name: sUnlockedSound Offset: 0x10
					constexpr auto flwait_sound = 0x18; // Name: flwaitSound Offset: 0x18
				} // namespace locksound_t

				namespace CBtNode {
				} // namespace CBtNode

				namespace CMotorController {
					constexpr auto speed = 0x8; // Name: m_speed Offset: 0x8
					constexpr auto max_torque = 0xC; // Name: m_maxTorque Offset: 0xC
					constexpr auto axis = 0x10; // Name: m_axis Offset: 0x10
					constexpr auto inertia_factor = 0x1C; // Name: m_inertiaFactor Offset: 0x1C
				} // namespace CMotorController

				namespace CPulseCell_Outflow_PlaySceneBase_CursorState_t {
					constexpr auto scene_instance = 0x0; // Name: m_sceneInstance Offset: 0x0
					constexpr auto main_actor = 0x4; // Name: m_mainActor Offset: 0x4
				} // namespace CPulseCell_Outflow_PlaySceneBase_CursorState_t

				namespace CBtNodeComposite {
				} // namespace CBtNodeComposite

				namespace CMultiplayer_Expresser {
					constexpr auto b_allow_multiple_scenes = 0x88; // Name: m_bAllowMultipleScenes Offset: 0x88
				} // namespace CMultiplayer_Expresser

				namespace CPulseCell_Value_FindEntByName {
					constexpr auto entity_type = 0x48; // Name: m_EntityType Offset: 0x48
				} // namespace CPulseCell_Value_FindEntByName

				namespace CAI_ExpresserWithFollowup {
					constexpr auto p_postponed_followup = 0x78; // Name: m_pPostponedFollowup Offset: 0x78
				} // namespace CAI_ExpresserWithFollowup

				namespace SoundOpvarTraceResult_t {
					constexpr auto v_pos = 0x0; // Name: vPos Offset: 0x0
					constexpr auto b_did_hit = 0xC; // Name: bDidHit Offset: 0xC
					constexpr auto fl_dist_sqr_to_center = 0x10; // Name: flDistSqrToCenter Offset: 0x10
				} // namespace SoundOpvarTraceResult_t

				namespace CSAdditionalPerRoundStats_t {
					constexpr auto num_chickens_killed = 0x0; // Name: m_numChickensKilled Offset: 0x0
					constexpr auto kills_while_blind = 0x4; // Name: m_killsWhileBlind Offset: 0x4
					constexpr auto bomb_carrierkills = 0x8; // Name: m_bombCarrierkills Offset: 0x8
					constexpr auto i_burn_damage_inflicted = 0xC; // Name: m_iBurnDamageInflicted Offset: 0xC
					constexpr auto i_blast_damage_inflicted = 0x10; // Name: m_iBlastDamageInflicted Offset: 0x10
					constexpr auto i_dinks = 0x14; // Name: m_iDinks Offset: 0x14
				} // namespace CSAdditionalPerRoundStats_t

				namespace dynpitchvol_t {
				} // namespace dynpitchvol_t

				namespace CSAdditionalMatchStats_t {
					constexpr auto num_rounds_survived = 0x18; // Name: m_numRoundsSurvived Offset: 0x18
					constexpr auto max_num_rounds_survived = 0x1C; // Name: m_maxNumRoundsSurvived Offset: 0x1C
					constexpr auto num_rounds_survived_total = 0x20; // Name: m_numRoundsSurvivedTotal Offset: 0x20
					constexpr auto i_rounds_won_without_purchase = 0x24; // Name: m_iRoundsWonWithoutPurchase Offset: 0x24
					constexpr auto i_rounds_won_without_purchase_total = 0x28; // Name: m_iRoundsWonWithoutPurchaseTotal Offset: 0x28
					constexpr auto num_first_kills = 0x2C; // Name: m_numFirstKills Offset: 0x2C
					constexpr auto num_clutch_kills = 0x30; // Name: m_numClutchKills Offset: 0x30
					constexpr auto num_pistol_kills = 0x34; // Name: m_numPistolKills Offset: 0x34
					constexpr auto num_sniper_kills = 0x38; // Name: m_numSniperKills Offset: 0x38
					constexpr auto i_num_suicides = 0x3C; // Name: m_iNumSuicides Offset: 0x3C
					constexpr auto i_num_team_kills = 0x40; // Name: m_iNumTeamKills Offset: 0x40
					constexpr auto i_team_damage = 0x44; // Name: m_iTeamDamage Offset: 0x44
				} // namespace CSAdditionalMatchStats_t
			}

			namespace navlib
			{

				namespace CNavVolumeSphericalShell {
					constexpr auto fl_radius_inner = 0x80; // Name: m_flRadiusInner Offset: 0x80
				} // namespace CNavVolumeSphericalShell

				namespace CNavHullPresetVData {
					constexpr auto vec_nav_hulls = 0x0; // Name: m_vecNavHulls Offset: 0x0
				} // namespace CNavHullPresetVData

				namespace CNavHullVData {
					constexpr auto b_agent_enabled = 0x0; // Name: m_bAgentEnabled Offset: 0x0
					constexpr auto agent_radius = 0x4; // Name: m_agentRadius Offset: 0x4
					constexpr auto agent_height = 0x8; // Name: m_agentHeight Offset: 0x8
					constexpr auto agent_short_height_enabled = 0xC; // Name: m_agentShortHeightEnabled Offset: 0xC
					constexpr auto agent_short_height = 0x10; // Name: m_agentShortHeight Offset: 0x10
					constexpr auto agent_max_climb = 0x14; // Name: m_agentMaxClimb Offset: 0x14
					constexpr auto agent_max_slope = 0x18; // Name: m_agentMaxSlope Offset: 0x18
					constexpr auto agent_max_jump_down_dist = 0x1C; // Name: m_agentMaxJumpDownDist Offset: 0x1C
					constexpr auto agent_max_jump_horiz_dist_base = 0x20; // Name: m_agentMaxJumpHorizDistBase Offset: 0x20
					constexpr auto agent_max_jump_up_dist = 0x24; // Name: m_agentMaxJumpUpDist Offset: 0x24
					constexpr auto agent_border_erosion = 0x28; // Name: m_agentBorderErosion Offset: 0x28
					constexpr auto flow_map_generation_enabled = 0x2C; // Name: m_flowMapGenerationEnabled Offset: 0x2C
					constexpr auto flow_map_node_max_radius = 0x30; // Name: m_flowMapNodeMaxRadius Offset: 0x30
				} // namespace CNavHullVData

				namespace CNavVolumeVector {
					constexpr auto b_has_been_pre_filtered = 0x78; // Name: m_bHasBeenPreFiltered Offset: 0x78
				} // namespace CNavVolumeVector

				namespace CNavVolume {
				} // namespace CNavVolume

				namespace NavGravity_t {
					constexpr auto v_gravity = 0x0; // Name: m_vGravity Offset: 0x0
					constexpr auto b_default = 0xC; // Name: m_bDefault Offset: 0xC
				} // namespace NavGravity_t

				namespace Extent {
					constexpr auto lo = 0x0; // Name: lo Offset: 0x0
					constexpr auto hi = 0xC; // Name: hi Offset: 0xC
				} // namespace Extent

				namespace CNavVolumeAll {
				} // namespace CNavVolumeAll

				namespace CNavVolumeSphere {
					constexpr auto v_center = 0x70; // Name: m_vCenter Offset: 0x70
					constexpr auto fl_radius = 0x7C; // Name: m_flRadius Offset: 0x7C
				} // namespace CNavVolumeSphere
			}

			namespace soundsystem
			{

				namespace CDSPPresetMixgroupModifierTable {
					constexpr auto table = 0x0; // Name: m_table Offset: 0x0
				} // namespace CDSPPresetMixgroupModifierTable

				namespace CSosGroupActionSoundeventPrioritySchema {
					constexpr auto priority_value = 0x18; // Name: m_priorityValue Offset: 0x18
					constexpr auto priority_volume_scalar = 0x20; // Name: m_priorityVolumeScalar Offset: 0x20
					constexpr auto priority_contribute_but_dont_read = 0x28; // Name: m_priorityContributeButDontRead Offset: 0x28
					constexpr auto b_priority_read_but_dont_contribute = 0x30; // Name: m_bPriorityReadButDontContribute Offset: 0x30
				} // namespace CSosGroupActionSoundeventPrioritySchema

				namespace CSosGroupActionSoundeventClusterSchema {
					constexpr auto n_min_nearby = 0x18; // Name: m_nMinNearby Offset: 0x18
					constexpr auto fl_cluster_epsilon = 0x1C; // Name: m_flClusterEpsilon Offset: 0x1C
					constexpr auto should_play_opvar = 0x20; // Name: m_shouldPlayOpvar Offset: 0x20
					constexpr auto should_play_cluster_child = 0x28; // Name: m_shouldPlayClusterChild Offset: 0x28
					constexpr auto cluster_size_opvar = 0x30; // Name: m_clusterSizeOpvar Offset: 0x30
					constexpr auto group_bounding_box_mins_opvar = 0x38; // Name: m_groupBoundingBoxMinsOpvar Offset: 0x38
					constexpr auto group_bounding_box_maxs_opvar = 0x40; // Name: m_groupBoundingBoxMaxsOpvar Offset: 0x40
				} // namespace CSosGroupActionSoundeventClusterSchema

				namespace CSosGroupActionSetSoundeventParameterSchema {
					constexpr auto n_max_count = 0x18; // Name: m_nMaxCount Offset: 0x18
					constexpr auto fl_min_value = 0x1C; // Name: m_flMinValue Offset: 0x1C
					constexpr auto fl_max_value = 0x20; // Name: m_flMaxValue Offset: 0x20
					constexpr auto opvar_name = 0x28; // Name: m_opvarName Offset: 0x28
					constexpr auto n_sort_type = 0x30; // Name: m_nSortType Offset: 0x30
				} // namespace CSosGroupActionSetSoundeventParameterSchema

				namespace CSosGroupActionSoundeventMinMaxValuesSchema {
					constexpr auto str_query_public_field_name = 0x18; // Name: m_strQueryPublicFieldName Offset: 0x18
					constexpr auto str_delay_public_field_name = 0x20; // Name: m_strDelayPublicFieldName Offset: 0x20
					constexpr auto b_exclude_stopped_sounds = 0x28; // Name: m_bExcludeStoppedSounds Offset: 0x28
					constexpr auto b_exclude_delayed_sounds = 0x29; // Name: m_bExcludeDelayedSounds Offset: 0x29
					constexpr auto b_exclude_sounds_below_threshold = 0x2A; // Name: m_bExcludeSoundsBelowThreshold Offset: 0x2A
					constexpr auto fl_exclude_sounds_min_threshold_value = 0x2C; // Name: m_flExcludeSoundsMinThresholdValue Offset: 0x2C
					constexpr auto b_exclud_sounds_above_threshold = 0x30; // Name: m_bExcludSoundsAboveThreshold Offset: 0x30
					constexpr auto fl_exclude_sounds_max_threshold_value = 0x34; // Name: m_flExcludeSoundsMaxThresholdValue Offset: 0x34
					constexpr auto str_min_value_name = 0x38; // Name: m_strMinValueName Offset: 0x38
					constexpr auto str_max_value_name = 0x40; // Name: m_strMaxValueName Offset: 0x40
				} // namespace CSosGroupActionSoundeventMinMaxValuesSchema

				namespace SelectedEditItemInfo_t {
					constexpr auto edit_items = 0x0; // Name: m_EditItems Offset: 0x0
				} // namespace SelectedEditItemInfo_t

				namespace CSosGroupActionSchema {
					constexpr auto name = 0x8; // Name: m_name Offset: 0x8
					constexpr auto action_type = 0x10; // Name: m_actionType Offset: 0x10
					constexpr auto action_instance_type = 0x14; // Name: m_actionInstanceType Offset: 0x14
				} // namespace CSosGroupActionSchema

				namespace CSosSoundEventGroupListSchema {
					constexpr auto group_list = 0x0; // Name: m_groupList Offset: 0x0
				} // namespace CSosSoundEventGroupListSchema

				namespace CSosSoundEventGroupSchema {
					constexpr auto name = 0x0; // Name: m_name Offset: 0x0
					constexpr auto n_type = 0x8; // Name: m_nType Offset: 0x8
					constexpr auto b_is_blocking = 0xC; // Name: m_bIsBlocking Offset: 0xC
					constexpr auto n_block_max_count = 0x10; // Name: m_nBlockMaxCount Offset: 0x10
					constexpr auto b_invert_match = 0x14; // Name: m_bInvertMatch Offset: 0x14
					constexpr auto match_pattern = 0x18; // Name: m_matchPattern Offset: 0x18
					constexpr auto branch_pattern = 0x48; // Name: m_branchPattern Offset: 0x48
					constexpr auto fl_life_span_time = 0x58; // Name: m_flLifeSpanTime Offset: 0x58
					constexpr auto v_actions = 0xC0; // Name: m_vActions Offset: 0xC0
				} // namespace CSosSoundEventGroupSchema

				namespace CSosGroupBranchPattern {
					constexpr auto b_match_event_name = 0x8; // Name: m_bMatchEventName Offset: 0x8
					constexpr auto b_match_event_sub_string = 0x9; // Name: m_bMatchEventSubString Offset: 0x9
					constexpr auto b_match_ent_index = 0xA; // Name: m_bMatchEntIndex Offset: 0xA
					constexpr auto b_match_opvar = 0xB; // Name: m_bMatchOpvar Offset: 0xB
					constexpr auto b_match_string = 0xC; // Name: m_bMatchString Offset: 0xC
				} // namespace CSosGroupBranchPattern

				namespace CDSPMixgroupModifier {
					constexpr auto mixgroup = 0x0; // Name: m_mixgroup Offset: 0x0
					constexpr auto fl_modifier = 0x8; // Name: m_flModifier Offset: 0x8
					constexpr auto fl_modifier_min = 0xC; // Name: m_flModifierMin Offset: 0xC
					constexpr auto fl_source_modifier = 0x10; // Name: m_flSourceModifier Offset: 0x10
					constexpr auto fl_source_modifier_min = 0x14; // Name: m_flSourceModifierMin Offset: 0x14
					constexpr auto fl_listener_reverb_modifier_when_source_reverb_is_active = 0x18; // Name: m_flListenerReverbModifierWhenSourceReverbIsActive Offset: 0x18
				} // namespace CDSPMixgroupModifier

				namespace CDspPresetModifierList {
					constexpr auto dsp_name = 0x0; // Name: m_dspName Offset: 0x0
					constexpr auto modifiers = 0x8; // Name: m_modifiers Offset: 0x8
				} // namespace CDspPresetModifierList

				namespace CSosGroupActionSoundeventCountSchema {
					constexpr auto b_exclude_stopped_sounds = 0x18; // Name: m_bExcludeStoppedSounds Offset: 0x18
					constexpr auto str_count_key_name = 0x20; // Name: m_strCountKeyName Offset: 0x20
				} // namespace CSosGroupActionSoundeventCountSchema

				namespace CSoundEventMetaData {
					constexpr auto sound_event_vmix = 0x0; // Name: m_soundEventVMix Offset: 0x0
				} // namespace CSoundEventMetaData

				namespace CSosGroupMatchPattern {
					constexpr auto match_sound_event_name = 0x10; // Name: m_matchSoundEventName Offset: 0x10
					constexpr auto match_sound_event_sub_string = 0x18; // Name: m_matchSoundEventSubString Offset: 0x18
					constexpr auto fl_ent_index = 0x20; // Name: m_flEntIndex Offset: 0x20
					constexpr auto fl_opvar = 0x24; // Name: m_flOpvar Offset: 0x24
					constexpr auto opvar_string = 0x28; // Name: m_opvarString Offset: 0x28
				} // namespace CSosGroupMatchPattern

				namespace SosEditItemInfo_t {
					constexpr auto item_type = 0x0; // Name: itemType Offset: 0x0
					constexpr auto item_name = 0x8; // Name: itemName Offset: 0x8
					constexpr auto item_type_name = 0x10; // Name: itemTypeName Offset: 0x10
					constexpr auto item_kvstring = 0x20; // Name: itemKVString Offset: 0x20
					constexpr auto item_pos = 0x28; // Name: itemPos Offset: 0x28
				} // namespace SosEditItemInfo_t

				namespace CSosGroupActionTimeBlockLimitSchema {
					constexpr auto n_max_count = 0x18; // Name: m_nMaxCount Offset: 0x18
					constexpr auto fl_max_duration = 0x1C; // Name: m_flMaxDuration Offset: 0x1C
				} // namespace CSosGroupActionTimeBlockLimitSchema

				namespace CSosGroupActionLimitSchema {
					constexpr auto n_max_count = 0x18; // Name: m_nMaxCount Offset: 0x18
					constexpr auto n_stop_type = 0x1C; // Name: m_nStopType Offset: 0x1C
					constexpr auto n_sort_type = 0x20; // Name: m_nSortType Offset: 0x20
				} // namespace CSosGroupActionLimitSchema

				namespace CTestBlendContainer {
					constexpr auto first_sound = 0xC0; // Name: m_firstSound Offset: 0xC0
					constexpr auto second_sound = 0xC8; // Name: m_secondSound Offset: 0xC8
				} // namespace CTestBlendContainer

				namespace CSosGroupActionMemberCountEnvelopeSchema {
					constexpr auto n_base_count = 0x18; // Name: m_nBaseCount Offset: 0x18
					constexpr auto n_target_count = 0x1C; // Name: m_nTargetCount Offset: 0x1C
					constexpr auto fl_base_value = 0x20; // Name: m_flBaseValue Offset: 0x20
					constexpr auto fl_target_value = 0x24; // Name: m_flTargetValue Offset: 0x24
					constexpr auto fl_attack = 0x28; // Name: m_flAttack Offset: 0x28
					constexpr auto fl_decay = 0x2C; // Name: m_flDecay Offset: 0x2C
					constexpr auto result_var_name = 0x30; // Name: m_resultVarName Offset: 0x30
					constexpr auto b_save_to_group = 0x38; // Name: m_bSaveToGroup Offset: 0x38
				} // namespace CSosGroupActionMemberCountEnvelopeSchema

				namespace CSosGroupActionTimeLimitSchema {
					constexpr auto fl_max_duration = 0x18; // Name: m_flMaxDuration Offset: 0x18
				} // namespace CSosGroupActionTimeLimitSchema
			}

			namespace soundsystem_voicecontainers
			{

				namespace CVoiceContainerBlender {
					constexpr auto first_sound = 0xC0; // Name: m_firstSound Offset: 0xC0
					constexpr auto second_sound = 0xD8; // Name: m_secondSound Offset: 0xD8
					constexpr auto fl_blend_factor = 0xF0; // Name: m_flBlendFactor Offset: 0xF0
				} // namespace CVoiceContainerBlender

				namespace CVoiceContainerStaticAdditiveSynth_CHarmonic {
					constexpr auto n_waveform = 0x0; // Name: m_nWaveform Offset: 0x0
					constexpr auto n_fundamental = 0x1; // Name: m_nFundamental Offset: 0x1
					constexpr auto n_octave = 0x4; // Name: m_nOctave Offset: 0x4
					constexpr auto fl_cents = 0x8; // Name: m_flCents Offset: 0x8
					constexpr auto fl_phase = 0xC; // Name: m_flPhase Offset: 0xC
					constexpr auto curve = 0x10; // Name: m_curve Offset: 0x10
					constexpr auto volume_scaling = 0x50; // Name: m_volumeScaling Offset: 0x50
				} // namespace CVoiceContainerStaticAdditiveSynth_CHarmonic

				namespace CSoundContainerReference {
					constexpr auto b_use_reference = 0x0; // Name: m_bUseReference Offset: 0x0
					constexpr auto sound = 0x8; // Name: m_sound Offset: 0x8
					constexpr auto p_sound = 0x10; // Name: m_pSound Offset: 0x10
				} // namespace CSoundContainerReference

				namespace CVoiceContainerStaticAdditiveSynth_CTone {
					constexpr auto harmonics = 0x0; // Name: m_harmonics Offset: 0x0
					constexpr auto curve = 0x18; // Name: m_curve Offset: 0x18
					constexpr auto b_sync_instances = 0x58; // Name: m_bSyncInstances Offset: 0x58
				} // namespace CVoiceContainerStaticAdditiveSynth_CTone

				namespace CVoiceContainerRandomSampler {
					constexpr auto fl_amplitude = 0xC0; // Name: m_flAmplitude Offset: 0xC0
					constexpr auto fl_amplitude_jitter = 0xC4; // Name: m_flAmplitudeJitter Offset: 0xC4
					constexpr auto fl_time_jitter = 0xC8; // Name: m_flTimeJitter Offset: 0xC8
					constexpr auto fl_max_length = 0xCC; // Name: m_flMaxLength Offset: 0xCC
					constexpr auto n_num_delay_variations = 0xD0; // Name: m_nNumDelayVariations Offset: 0xD0
					constexpr auto grain_resources = 0xD8; // Name: m_grainResources Offset: 0xD8
				} // namespace CVoiceContainerRandomSampler

				namespace CVoiceContainerDefault {
				} // namespace CVoiceContainerDefault

				namespace CVSound {
					constexpr auto n_rate = 0x0; // Name: m_nRate Offset: 0x0
					constexpr auto n_format = 0x4; // Name: m_nFormat Offset: 0x4
					constexpr auto n_channels = 0x8; // Name: m_nChannels Offset: 0x8
					constexpr auto n_loop_start = 0xC; // Name: m_nLoopStart Offset: 0xC
					constexpr auto n_sample_count = 0x10; // Name: m_nSampleCount Offset: 0x10
					constexpr auto fl_duration = 0x14; // Name: m_flDuration Offset: 0x14
					constexpr auto sentences = 0x18; // Name: m_Sentences Offset: 0x18
					constexpr auto n_streaming_size = 0x30; // Name: m_nStreamingSize Offset: 0x30
					constexpr auto n_seek_table = 0x38; // Name: m_nSeekTable Offset: 0x38
					constexpr auto n_loop_end = 0x50; // Name: m_nLoopEnd Offset: 0x50
					constexpr auto encoded_header = 0x58; // Name: m_encodedHeader Offset: 0x58
				} // namespace CVSound

				namespace CVoiceContainerNull {
				} // namespace CVoiceContainerNull

				namespace CVoiceContainerAnalysisBase {
					constexpr auto b_regenerate_curve_on_compile = 0x8; // Name: m_bRegenerateCurveOnCompile Offset: 0x8
					constexpr auto curve = 0x10; // Name: m_curve Offset: 0x10
				} // namespace CVoiceContainerAnalysisBase

				namespace CVoiceContainerRealtimeFMSineWave {
					constexpr auto fl_carrier_frequency = 0xC0; // Name: m_flCarrierFrequency Offset: 0xC0
					constexpr auto fl_modulator_frequency = 0xC4; // Name: m_flModulatorFrequency Offset: 0xC4
					constexpr auto fl_modulator_amount = 0xC8; // Name: m_flModulatorAmount Offset: 0xC8
				} // namespace CVoiceContainerRealtimeFMSineWave

				namespace CAudioMorphData {
					constexpr auto times = 0x0; // Name: m_times Offset: 0x0
					constexpr auto name_hash_codes = 0x18; // Name: m_nameHashCodes Offset: 0x18
					constexpr auto name_strings = 0x30; // Name: m_nameStrings Offset: 0x30
					constexpr auto samples = 0x48; // Name: m_samples Offset: 0x48
					constexpr auto fl_ease_in = 0x60; // Name: m_flEaseIn Offset: 0x60
					constexpr auto fl_ease_out = 0x64; // Name: m_flEaseOut Offset: 0x64
				} // namespace CAudioMorphData

				namespace CVoiceContainerStaticAdditiveSynth {
					constexpr auto tones = 0xC0; // Name: m_tones Offset: 0xC0
				} // namespace CVoiceContainerStaticAdditiveSynth

				namespace CVoiceContainerShapedNoise {
					constexpr auto b_use_curve_for_frequency = 0xC0; // Name: m_bUseCurveForFrequency Offset: 0xC0
					constexpr auto fl_frequency = 0xC4; // Name: m_flFrequency Offset: 0xC4
					constexpr auto frequency_sweep = 0xC8; // Name: m_frequencySweep Offset: 0xC8
					constexpr auto b_use_curve_for_resonance = 0x108; // Name: m_bUseCurveForResonance Offset: 0x108
					constexpr auto fl_resonance = 0x10C; // Name: m_flResonance Offset: 0x10C
					constexpr auto resonance_sweep = 0x110; // Name: m_resonanceSweep Offset: 0x110
					constexpr auto b_use_curve_for_amplitude = 0x150; // Name: m_bUseCurveForAmplitude Offset: 0x150
					constexpr auto fl_gain_in_decibels = 0x154; // Name: m_flGainInDecibels Offset: 0x154
					constexpr auto gain_sweep = 0x158; // Name: m_gainSweep Offset: 0x158
				} // namespace CVoiceContainerShapedNoise

				namespace CVoiceContainerBase {
					constexpr auto v_sound = 0x38; // Name: m_vSound Offset: 0x38
					constexpr auto p_envelope_analyzer = 0xB8; // Name: m_pEnvelopeAnalyzer Offset: 0xB8
				} // namespace CVoiceContainerBase

				namespace CVoiceContainerGranulator {
					constexpr auto fl_grain_length = 0xC0; // Name: m_flGrainLength Offset: 0xC0
					constexpr auto fl_grain_crossfade_amount = 0xC4; // Name: m_flGrainCrossfadeAmount Offset: 0xC4
					constexpr auto fl_start_jitter = 0xC8; // Name: m_flStartJitter Offset: 0xC8
					constexpr auto fl_playback_jitter = 0xCC; // Name: m_flPlaybackJitter Offset: 0xCC
					constexpr auto source_audio = 0xD0; // Name: m_sourceAudio Offset: 0xD0
				} // namespace CVoiceContainerGranulator

				namespace CAudioPhonemeTag {
					constexpr auto fl_start_time = 0x0; // Name: m_flStartTime Offset: 0x0
					constexpr auto fl_end_time = 0x4; // Name: m_flEndTime Offset: 0x4
					constexpr auto n_phoneme_code = 0x8; // Name: m_nPhonemeCode Offset: 0x8
				} // namespace CAudioPhonemeTag

				namespace CVoiceContainerEnvelopeAnalyzer {
					constexpr auto mode = 0x50; // Name: m_mode Offset: 0x50
					constexpr auto n_samples = 0x54; // Name: m_nSamples Offset: 0x54
					constexpr auto fl_threshold = 0x58; // Name: m_flThreshold Offset: 0x58
				} // namespace CVoiceContainerEnvelopeAnalyzer

				namespace CAudioEmphasisSample {
					constexpr auto fl_time = 0x0; // Name: m_flTime Offset: 0x0
					constexpr auto fl_value = 0x4; // Name: m_flValue Offset: 0x4
				} // namespace CAudioEmphasisSample

				namespace CVoiceContainerSelector {
					constexpr auto mode = 0xC0; // Name: m_mode Offset: 0xC0
					constexpr auto sounds_to_play = 0xC8; // Name: m_soundsToPlay Offset: 0xC8
					constexpr auto f_probability_weights = 0x100; // Name: m_fProbabilityWeights Offset: 0x100
				} // namespace CVoiceContainerSelector

				namespace CVoiceContainerSet {
					constexpr auto sounds_to_play = 0xC0; // Name: m_soundsToPlay Offset: 0xC0
				} // namespace CVoiceContainerSet

				namespace CVoiceContainerSetElement {
					constexpr auto sound = 0x0; // Name: m_sound Offset: 0x0
					constexpr auto fl_volume_db = 0x18; // Name: m_flVolumeDB Offset: 0x18
				} // namespace CVoiceContainerSetElement

				namespace CSoundInfoHeader {
				} // namespace CSoundInfoHeader

				namespace CSoundContainerReferenceArray {
					constexpr auto b_use_reference = 0x0; // Name: m_bUseReference Offset: 0x0
					constexpr auto sounds = 0x8; // Name: m_sounds Offset: 0x8
					constexpr auto p_sounds = 0x20; // Name: m_pSounds Offset: 0x20
				} // namespace CSoundContainerReferenceArray

				namespace CAudioSentence {
					constexpr auto b_should_voice_duck = 0x0; // Name: m_bShouldVoiceDuck Offset: 0x0
					constexpr auto run_time_phonemes = 0x8; // Name: m_RunTimePhonemes Offset: 0x8
					constexpr auto emphasis_samples = 0x20; // Name: m_EmphasisSamples Offset: 0x20
					constexpr auto morph_data = 0x38; // Name: m_morphData Offset: 0x38
				} // namespace CAudioSentence

				namespace CVoiceContainerAmpedDecayingSineWave {
					constexpr auto fl_gain_amount = 0xC8; // Name: m_flGainAmount Offset: 0xC8
				} // namespace CVoiceContainerAmpedDecayingSineWave

				namespace CVoiceContainerEnvelope {
					constexpr auto sound = 0xC0; // Name: m_sound Offset: 0xC0
					constexpr auto analysis_container = 0xC8; // Name: m_analysisContainer Offset: 0xC8
				} // namespace CVoiceContainerEnvelope

				namespace CVoiceContainerStaticAdditiveSynth_CGainScalePerInstance {
					constexpr auto fl_min_volume = 0x0; // Name: m_flMinVolume Offset: 0x0
					constexpr auto n_instances_at_min_volume = 0x4; // Name: m_nInstancesAtMinVolume Offset: 0x4
					constexpr auto fl_max_volume = 0x8; // Name: m_flMaxVolume Offset: 0x8
					constexpr auto n_instances_at_max_volume = 0xC; // Name: m_nInstancesAtMaxVolume Offset: 0xC
				} // namespace CVoiceContainerStaticAdditiveSynth_CGainScalePerInstance

				namespace CVoiceContainerSwitch {
					constexpr auto sounds_to_play = 0xC0; // Name: m_soundsToPlay Offset: 0xC0
				} // namespace CVoiceContainerSwitch

				namespace CVoiceContainerLoopTrigger {
					constexpr auto sound = 0xC0; // Name: m_sound Offset: 0xC0
					constexpr auto fl_retrigger_time_min = 0xD8; // Name: m_flRetriggerTimeMin Offset: 0xD8
					constexpr auto fl_retrigger_time_max = 0xDC; // Name: m_flRetriggerTimeMax Offset: 0xDC
					constexpr auto fl_fade_time = 0xE0; // Name: m_flFadeTime Offset: 0xE0
					constexpr auto b_cross_fade = 0xE4; // Name: m_bCrossFade Offset: 0xE4
				} // namespace CVoiceContainerLoopTrigger

				namespace CVoiceContainerDecayingSineWave {
					constexpr auto fl_frequency = 0xC0; // Name: m_flFrequency Offset: 0xC0
					constexpr auto fl_decay_time = 0xC4; // Name: m_flDecayTime Offset: 0xC4
				} // namespace CVoiceContainerDecayingSineWave
			}

			namespace vphysics2
			{

				namespace constraint_hingeparams_t {
					constexpr auto world_position = 0x0; // Name: worldPosition Offset: 0x0
					constexpr auto world_axis_direction = 0xC; // Name: worldAxisDirection Offset: 0xC
					constexpr auto hinge_axis = 0x18; // Name: hingeAxis Offset: 0x18
					constexpr auto constraint = 0x28; // Name: constraint Offset: 0x28
				} // namespace constraint_hingeparams_t

				namespace vphysics_save_cphysicsbody_t {
					constexpr auto n_old_pointer = 0xD0; // Name: m_nOldPointer Offset: 0xD0
				} // namespace vphysics_save_cphysicsbody_t

				namespace constraint_axislimit_t {
					constexpr auto fl_min_rotation = 0x0; // Name: flMinRotation Offset: 0x0
					constexpr auto fl_max_rotation = 0x4; // Name: flMaxRotation Offset: 0x4
					constexpr auto fl_motor_target_ang_speed = 0x8; // Name: flMotorTargetAngSpeed Offset: 0x8
					constexpr auto fl_motor_max_torque = 0xC; // Name: flMotorMaxTorque Offset: 0xC
				} // namespace constraint_axislimit_t

				namespace constraint_breakableparams_t {
					constexpr auto strength = 0x0; // Name: strength Offset: 0x0
					constexpr auto force_limit = 0x4; // Name: forceLimit Offset: 0x4
					constexpr auto torque_limit = 0x8; // Name: torqueLimit Offset: 0x8
					constexpr auto body_mass_scale = 0xC; // Name: bodyMassScale Offset: 0xC
					constexpr auto is_active = 0x14; // Name: isActive Offset: 0x14
				} // namespace constraint_breakableparams_t

				namespace IPhysicsPlayerController {
				} // namespace IPhysicsPlayerController
			}

			namespace soundsystem_lowlevel
			{

				namespace VMixFreeverbDesc_t {
					constexpr auto fl_room_size = 0x0; // Name: m_flRoomSize Offset: 0x0
					constexpr auto fl_damp = 0x4; // Name: m_flDamp Offset: 0x4
					constexpr auto fl_width = 0x8; // Name: m_flWidth Offset: 0x8
					constexpr auto fl_late_reflections = 0xC; // Name: m_flLateReflections Offset: 0xC
				} // namespace VMixFreeverbDesc_t

				namespace VMixDynamics3BandDesc_t {
					constexpr auto fldb_gain_output = 0x0; // Name: m_fldbGainOutput Offset: 0x0
					constexpr auto fl_rmstime_ms = 0x4; // Name: m_flRMSTimeMS Offset: 0x4
					constexpr auto fldb_knee_width = 0x8; // Name: m_fldbKneeWidth Offset: 0x8
					constexpr auto fl_depth = 0xC; // Name: m_flDepth Offset: 0xC
					constexpr auto fl_wet_mix = 0x10; // Name: m_flWetMix Offset: 0x10
					constexpr auto fl_time_scale = 0x14; // Name: m_flTimeScale Offset: 0x14
					constexpr auto fl_low_cutoff_freq = 0x18; // Name: m_flLowCutoffFreq Offset: 0x18
					constexpr auto fl_high_cutoff_freq = 0x1C; // Name: m_flHighCutoffFreq Offset: 0x1C
					constexpr auto b_peak_mode = 0x20; // Name: m_bPeakMode Offset: 0x20
					constexpr auto band_desc = 0x24; // Name: m_bandDesc Offset: 0x24
				} // namespace VMixDynamics3BandDesc_t

				namespace VMixSubgraphSwitchDesc_t {
					constexpr auto interpolation_mode = 0x0; // Name: m_interpolationMode Offset: 0x0
					constexpr auto b_only_tails_on_fade_out = 0x4; // Name: m_bOnlyTailsOnFadeOut Offset: 0x4
					constexpr auto fl_interpolation_time = 0x8; // Name: m_flInterpolationTime Offset: 0x8
				} // namespace VMixSubgraphSwitchDesc_t

				namespace VMixPannerDesc_t {
					constexpr auto type = 0x0; // Name: m_type Offset: 0x0
					constexpr auto fl_strength = 0x4; // Name: m_flStrength Offset: 0x4
				} // namespace VMixPannerDesc_t

				namespace VMixEQ8Desc_t {
					constexpr auto stages = 0x0; // Name: m_stages Offset: 0x0
				} // namespace VMixEQ8Desc_t

				namespace VMixModDelayDesc_t {
					constexpr auto feedback_filter = 0x0; // Name: m_feedbackFilter Offset: 0x0
					constexpr auto b_phase_invert = 0x10; // Name: m_bPhaseInvert Offset: 0x10
					constexpr auto fl_glide_time = 0x14; // Name: m_flGlideTime Offset: 0x14
					constexpr auto fl_delay = 0x18; // Name: m_flDelay Offset: 0x18
					constexpr auto fl_output_gain = 0x1C; // Name: m_flOutputGain Offset: 0x1C
					constexpr auto fl_feedback_gain = 0x20; // Name: m_flFeedbackGain Offset: 0x20
					constexpr auto fl_mod_rate = 0x24; // Name: m_flModRate Offset: 0x24
					constexpr auto fl_mod_depth = 0x28; // Name: m_flModDepth Offset: 0x28
					constexpr auto b_apply_antialiasing = 0x2C; // Name: m_bApplyAntialiasing Offset: 0x2C
				} // namespace VMixModDelayDesc_t

				namespace VMixBoxverbDesc_t {
					constexpr auto fl_size_max = 0x0; // Name: m_flSizeMax Offset: 0x0
					constexpr auto fl_size_min = 0x4; // Name: m_flSizeMin Offset: 0x4
					constexpr auto fl_complexity = 0x8; // Name: m_flComplexity Offset: 0x8
					constexpr auto fl_diffusion = 0xC; // Name: m_flDiffusion Offset: 0xC
					constexpr auto fl_mod_depth = 0x10; // Name: m_flModDepth Offset: 0x10
					constexpr auto fl_mod_rate = 0x14; // Name: m_flModRate Offset: 0x14
					constexpr auto b_parallel = 0x18; // Name: m_bParallel Offset: 0x18
					constexpr auto filter_type = 0x1C; // Name: m_filterType Offset: 0x1C
					constexpr auto fl_width = 0x2C; // Name: m_flWidth Offset: 0x2C
					constexpr auto fl_height = 0x30; // Name: m_flHeight Offset: 0x30
					constexpr auto fl_depth = 0x34; // Name: m_flDepth Offset: 0x34
					constexpr auto fl_feedback_scale = 0x38; // Name: m_flFeedbackScale Offset: 0x38
					constexpr auto fl_feedback_width = 0x3C; // Name: m_flFeedbackWidth Offset: 0x3C
					constexpr auto fl_feedback_height = 0x40; // Name: m_flFeedbackHeight Offset: 0x40
					constexpr auto fl_feedback_depth = 0x44; // Name: m_flFeedbackDepth Offset: 0x44
					constexpr auto fl_output_gain = 0x48; // Name: m_flOutputGain Offset: 0x48
					constexpr auto fl_taps = 0x4C; // Name: m_flTaps Offset: 0x4C
				} // namespace VMixBoxverbDesc_t

				namespace VMixDelayDesc_t {
					constexpr auto feedback_filter = 0x0; // Name: m_feedbackFilter Offset: 0x0
					constexpr auto b_enable_filter = 0x10; // Name: m_bEnableFilter Offset: 0x10
					constexpr auto fl_delay = 0x14; // Name: m_flDelay Offset: 0x14
					constexpr auto fl_direct_gain = 0x18; // Name: m_flDirectGain Offset: 0x18
					constexpr auto fl_delay_gain = 0x1C; // Name: m_flDelayGain Offset: 0x1C
					constexpr auto fl_feedback_gain = 0x20; // Name: m_flFeedbackGain Offset: 0x20
					constexpr auto fl_width = 0x24; // Name: m_flWidth Offset: 0x24
				} // namespace VMixDelayDesc_t

				namespace VMixPitchShiftDesc_t {
					constexpr auto n_grain_sample_count = 0x0; // Name: m_nGrainSampleCount Offset: 0x0
					constexpr auto fl_pitch_shift = 0x4; // Name: m_flPitchShift Offset: 0x4
					constexpr auto n_quality = 0x8; // Name: m_nQuality Offset: 0x8
					constexpr auto n_proc_type = 0xC; // Name: m_nProcType Offset: 0xC
				} // namespace VMixPitchShiftDesc_t

				namespace VMixAutoFilterDesc_t {
					constexpr auto fl_envelope_amount = 0x0; // Name: m_flEnvelopeAmount Offset: 0x0
					constexpr auto fl_attack_time_ms = 0x4; // Name: m_flAttackTimeMS Offset: 0x4
					constexpr auto fl_release_time_ms = 0x8; // Name: m_flReleaseTimeMS Offset: 0x8
					constexpr auto filter = 0xC; // Name: m_filter Offset: 0xC
					constexpr auto fl_lfoamount = 0x1C; // Name: m_flLFOAmount Offset: 0x1C
					constexpr auto fl_lforate = 0x20; // Name: m_flLFORate Offset: 0x20
					constexpr auto fl_phase = 0x24; // Name: m_flPhase Offset: 0x24
					constexpr auto n_lfoshape = 0x28; // Name: m_nLFOShape Offset: 0x28
				} // namespace VMixAutoFilterDesc_t

				namespace VMixConvolutionDesc_t {
					constexpr auto fldb_gain = 0x0; // Name: m_fldbGain Offset: 0x0
					constexpr auto fl_pre_delay_ms = 0x4; // Name: m_flPreDelayMS Offset: 0x4
					constexpr auto fl_wet_mix = 0x8; // Name: m_flWetMix Offset: 0x8
					constexpr auto fldb_low = 0xC; // Name: m_fldbLow Offset: 0xC
					constexpr auto fldb_mid = 0x10; // Name: m_fldbMid Offset: 0x10
					constexpr auto fldb_high = 0x14; // Name: m_fldbHigh Offset: 0x14
					constexpr auto fl_low_cutoff_freq = 0x18; // Name: m_flLowCutoffFreq Offset: 0x18
					constexpr auto fl_high_cutoff_freq = 0x1C; // Name: m_flHighCutoffFreq Offset: 0x1C
				} // namespace VMixConvolutionDesc_t

				namespace VMixPlateverbDesc_t {
					constexpr auto fl_prefilter = 0x0; // Name: m_flPrefilter Offset: 0x0
					constexpr auto fl_input_diffusion1 = 0x4; // Name: m_flInputDiffusion1 Offset: 0x4
					constexpr auto fl_input_diffusion2 = 0x8; // Name: m_flInputDiffusion2 Offset: 0x8
					constexpr auto fl_decay = 0xC; // Name: m_flDecay Offset: 0xC
					constexpr auto fl_damp = 0x10; // Name: m_flDamp Offset: 0x10
					constexpr auto fl_feedback_diffusion1 = 0x14; // Name: m_flFeedbackDiffusion1 Offset: 0x14
					constexpr auto fl_feedback_diffusion2 = 0x18; // Name: m_flFeedbackDiffusion2 Offset: 0x18
				} // namespace VMixPlateverbDesc_t

				namespace VMixDiffusorDesc_t {
					constexpr auto fl_size = 0x0; // Name: m_flSize Offset: 0x0
					constexpr auto fl_complexity = 0x4; // Name: m_flComplexity Offset: 0x4
					constexpr auto fl_feedback = 0x8; // Name: m_flFeedback Offset: 0x8
					constexpr auto fl_output_gain = 0xC; // Name: m_flOutputGain Offset: 0xC
				} // namespace VMixDiffusorDesc_t

				namespace VMixDynamicsCompressorDesc_t {
					constexpr auto fldb_output_gain = 0x0; // Name: m_fldbOutputGain Offset: 0x0
					constexpr auto fldb_compression_threshold = 0x4; // Name: m_fldbCompressionThreshold Offset: 0x4
					constexpr auto fldb_knee_width = 0x8; // Name: m_fldbKneeWidth Offset: 0x8
					constexpr auto fl_compression_ratio = 0xC; // Name: m_flCompressionRatio Offset: 0xC
					constexpr auto fl_attack_time_ms = 0x10; // Name: m_flAttackTimeMS Offset: 0x10
					constexpr auto fl_release_time_ms = 0x14; // Name: m_flReleaseTimeMS Offset: 0x14
					constexpr auto fl_rmstime_ms = 0x18; // Name: m_flRMSTimeMS Offset: 0x18
					constexpr auto fl_wet_mix = 0x1C; // Name: m_flWetMix Offset: 0x1C
					constexpr auto b_peak_mode = 0x20; // Name: m_bPeakMode Offset: 0x20
				} // namespace VMixDynamicsCompressorDesc_t

				namespace VMixShaperDesc_t {
					constexpr auto n_shape = 0x0; // Name: m_nShape Offset: 0x0
					constexpr auto fldb_drive = 0x4; // Name: m_fldbDrive Offset: 0x4
					constexpr auto fldb_output_gain = 0x8; // Name: m_fldbOutputGain Offset: 0x8
					constexpr auto fl_wet_mix = 0xC; // Name: m_flWetMix Offset: 0xC
					constexpr auto n_oversample_factor = 0x10; // Name: m_nOversampleFactor Offset: 0x10
				} // namespace VMixShaperDesc_t

				namespace VMixEnvelopeDesc_t {
					constexpr auto fl_attack_time_ms = 0x0; // Name: m_flAttackTimeMS Offset: 0x0
					constexpr auto fl_hold_time_ms = 0x4; // Name: m_flHoldTimeMS Offset: 0x4
					constexpr auto fl_release_time_ms = 0x8; // Name: m_flReleaseTimeMS Offset: 0x8
				} // namespace VMixEnvelopeDesc_t

				namespace VMixDynamicsBand_t {
					constexpr auto fldb_gain_input = 0x0; // Name: m_fldbGainInput Offset: 0x0
					constexpr auto fldb_gain_output = 0x4; // Name: m_fldbGainOutput Offset: 0x4
					constexpr auto fldb_threshold_below = 0x8; // Name: m_fldbThresholdBelow Offset: 0x8
					constexpr auto fldb_threshold_above = 0xC; // Name: m_fldbThresholdAbove Offset: 0xC
					constexpr auto fl_ratio_below = 0x10; // Name: m_flRatioBelow Offset: 0x10
					constexpr auto fl_ratio_above = 0x14; // Name: m_flRatioAbove Offset: 0x14
					constexpr auto fl_attack_time_ms = 0x18; // Name: m_flAttackTimeMS Offset: 0x18
					constexpr auto fl_release_time_ms = 0x1C; // Name: m_flReleaseTimeMS Offset: 0x1C
					constexpr auto b_enable = 0x20; // Name: m_bEnable Offset: 0x20
					constexpr auto b_solo = 0x21; // Name: m_bSolo Offset: 0x21
				} // namespace VMixDynamicsBand_t

				namespace VMixEffectChainDesc_t {
					constexpr auto fl_crossfade_time = 0x0; // Name: m_flCrossfadeTime Offset: 0x0
				} // namespace VMixEffectChainDesc_t

				namespace VMixVocoderDesc_t {
					constexpr auto n_band_count = 0x0; // Name: m_nBandCount Offset: 0x0
					constexpr auto fl_bandwidth = 0x4; // Name: m_flBandwidth Offset: 0x4
					constexpr auto fld_bmod_gain = 0x8; // Name: m_fldBModGain Offset: 0x8
					constexpr auto fl_freq_range_start = 0xC; // Name: m_flFreqRangeStart Offset: 0xC
					constexpr auto fl_freq_range_end = 0x10; // Name: m_flFreqRangeEnd Offset: 0x10
					constexpr auto fld_bunvoiced_gain = 0x14; // Name: m_fldBUnvoicedGain Offset: 0x14
					constexpr auto fl_attack_time_ms = 0x18; // Name: m_flAttackTimeMS Offset: 0x18
					constexpr auto fl_release_time_ms = 0x1C; // Name: m_flReleaseTimeMS Offset: 0x1C
					constexpr auto n_debug_band = 0x20; // Name: m_nDebugBand Offset: 0x20
					constexpr auto b_peak_mode = 0x24; // Name: m_bPeakMode Offset: 0x24
				} // namespace VMixVocoderDesc_t

				namespace VMixUtilityDesc_t {
					constexpr auto n_op = 0x0; // Name: m_nOp Offset: 0x0
					constexpr auto fl_input_pan = 0x4; // Name: m_flInputPan Offset: 0x4
					constexpr auto fl_output_balance = 0x8; // Name: m_flOutputBalance Offset: 0x8
					constexpr auto fldb_output_gain = 0xC; // Name: m_fldbOutputGain Offset: 0xC
					constexpr auto b_bass_mono = 0x10; // Name: m_bBassMono Offset: 0x10
					constexpr auto fl_bass_freq = 0x14; // Name: m_flBassFreq Offset: 0x14
				} // namespace VMixUtilityDesc_t

				namespace VMixFilterDesc_t {
					constexpr auto n_filter_type = 0x0; // Name: m_nFilterType Offset: 0x0
					constexpr auto n_filter_slope = 0x2; // Name: m_nFilterSlope Offset: 0x2
					constexpr auto b_enabled = 0x3; // Name: m_bEnabled Offset: 0x3
					constexpr auto fldb_gain = 0x4; // Name: m_fldbGain Offset: 0x4
					constexpr auto fl_cutoff_freq = 0x8; // Name: m_flCutoffFreq Offset: 0x8
					constexpr auto fl_q = 0xC; // Name: m_flQ Offset: 0xC
				} // namespace VMixFilterDesc_t

				namespace VMixOscDesc_t {
					constexpr auto osc_type = 0x0; // Name: oscType Offset: 0x0
					constexpr auto freq = 0x4; // Name: m_freq Offset: 0x4
					constexpr auto fl_phase = 0x8; // Name: m_flPhase Offset: 0x8
				} // namespace VMixOscDesc_t

				namespace VMixDynamicsDesc_t {
					constexpr auto fldb_gain = 0x0; // Name: m_fldbGain Offset: 0x0
					constexpr auto fldb_noise_gate_threshold = 0x4; // Name: m_fldbNoiseGateThreshold Offset: 0x4
					constexpr auto fldb_compression_threshold = 0x8; // Name: m_fldbCompressionThreshold Offset: 0x8
					constexpr auto fldb_limiter_threshold = 0xC; // Name: m_fldbLimiterThreshold Offset: 0xC
					constexpr auto fldb_knee_width = 0x10; // Name: m_fldbKneeWidth Offset: 0x10
					constexpr auto fl_ratio = 0x14; // Name: m_flRatio Offset: 0x14
					constexpr auto fl_limiter_ratio = 0x18; // Name: m_flLimiterRatio Offset: 0x18
					constexpr auto fl_attack_time_ms = 0x1C; // Name: m_flAttackTimeMS Offset: 0x1C
					constexpr auto fl_release_time_ms = 0x20; // Name: m_flReleaseTimeMS Offset: 0x20
					constexpr auto fl_rmstime_ms = 0x24; // Name: m_flRMSTimeMS Offset: 0x24
					constexpr auto fl_wet_mix = 0x28; // Name: m_flWetMix Offset: 0x28
					constexpr auto b_peak_mode = 0x2C; // Name: m_bPeakMode Offset: 0x2C
				} // namespace VMixDynamicsDesc_t
			}

			namespace worldrenderer
			{

				namespace SceneObject_t {
					constexpr auto n_object_id = 0x0; // Name: m_nObjectID Offset: 0x0
					constexpr auto v_transform = 0x4; // Name: m_vTransform Offset: 0x4
					constexpr auto fl_fade_start_distance = 0x34; // Name: m_flFadeStartDistance Offset: 0x34
					constexpr auto fl_fade_end_distance = 0x38; // Name: m_flFadeEndDistance Offset: 0x38
					constexpr auto v_tint_color = 0x3C; // Name: m_vTintColor Offset: 0x3C
					constexpr auto skin = 0x50; // Name: m_skin Offset: 0x50
					constexpr auto n_object_type_flags = 0x58; // Name: m_nObjectTypeFlags Offset: 0x58
					constexpr auto v_lighting_origin = 0x5C; // Name: m_vLightingOrigin Offset: 0x5C
					constexpr auto n_overlay_render_order = 0x68; // Name: m_nOverlayRenderOrder Offset: 0x68
					constexpr auto n_lodoverride = 0x6A; // Name: m_nLODOverride Offset: 0x6A
					constexpr auto n_cube_map_precomputed_handshake = 0x6C; // Name: m_nCubeMapPrecomputedHandshake Offset: 0x6C
					constexpr auto n_light_probe_volume_precomputed_handshake = 0x70; // Name: m_nLightProbeVolumePrecomputedHandshake Offset: 0x70
					constexpr auto renderable_model = 0x78; // Name: m_renderableModel Offset: 0x78
					constexpr auto renderable = 0x80; // Name: m_renderable Offset: 0x80
				} // namespace SceneObject_t

				namespace NodeData_t {
					constexpr auto n_parent = 0x0; // Name: m_nParent Offset: 0x0
					constexpr auto v_origin = 0x4; // Name: m_vOrigin Offset: 0x4
					constexpr auto v_min_bounds = 0x10; // Name: m_vMinBounds Offset: 0x10
					constexpr auto v_max_bounds = 0x1C; // Name: m_vMaxBounds Offset: 0x1C
					constexpr auto fl_minimum_distance = 0x28; // Name: m_flMinimumDistance Offset: 0x28
					constexpr auto child_node_indices = 0x30; // Name: m_ChildNodeIndices Offset: 0x30
					constexpr auto world_node_prefix = 0x48; // Name: m_worldNodePrefix Offset: 0x48
				} // namespace NodeData_t

				namespace AggregateLODSetup_t {
					constexpr auto v_lodorigin = 0x0; // Name: m_vLODOrigin Offset: 0x0
					constexpr auto f_max_object_scale = 0xC; // Name: m_fMaxObjectScale Offset: 0xC
					constexpr auto f_switch_distances = 0x10; // Name: m_fSwitchDistances Offset: 0x10
				} // namespace AggregateLODSetup_t

				namespace CVoxelVisibility {
					constexpr auto n_base_cluster_count = 0x40; // Name: m_nBaseClusterCount Offset: 0x40
					constexpr auto n_pvsbytes_per_cluster = 0x44; // Name: m_nPVSBytesPerCluster Offset: 0x44
					constexpr auto v_min_bounds = 0x48; // Name: m_vMinBounds Offset: 0x48
					constexpr auto v_max_bounds = 0x54; // Name: m_vMaxBounds Offset: 0x54
					constexpr auto fl_grid_size = 0x60; // Name: m_flGridSize Offset: 0x60
					constexpr auto n_sky_visibility_cluster = 0x64; // Name: m_nSkyVisibilityCluster Offset: 0x64
					constexpr auto n_sun_visibility_cluster = 0x68; // Name: m_nSunVisibilityCluster Offset: 0x68
					constexpr auto node_block = 0x6C; // Name: m_NodeBlock Offset: 0x6C
					constexpr auto region_block = 0x74; // Name: m_RegionBlock Offset: 0x74
					constexpr auto enclosed_cluster_list_block = 0x7C; // Name: m_EnclosedClusterListBlock Offset: 0x7C
					constexpr auto enclosed_clusters_block = 0x84; // Name: m_EnclosedClustersBlock Offset: 0x84
					constexpr auto masks_block = 0x8C; // Name: m_MasksBlock Offset: 0x8C
					constexpr auto n_vis_blocks = 0x94; // Name: m_nVisBlocks Offset: 0x94
				} // namespace CVoxelVisibility

				namespace AggregateSceneObject_t {
					constexpr auto all_flags = 0x0; // Name: m_allFlags Offset: 0x0
					constexpr auto any_flags = 0x4; // Name: m_anyFlags Offset: 0x4
					constexpr auto n_layer = 0x8; // Name: m_nLayer Offset: 0x8
					constexpr auto aggregate_meshes = 0x10; // Name: m_aggregateMeshes Offset: 0x10
					constexpr auto lod_setups = 0x28; // Name: m_lodSetups Offset: 0x28
					constexpr auto vis_cluster_membership = 0x40; // Name: m_visClusterMembership Offset: 0x40
					constexpr auto fragment_transforms = 0x58; // Name: m_fragmentTransforms Offset: 0x58
					constexpr auto renderable_model = 0x70; // Name: m_renderableModel Offset: 0x70
				} // namespace AggregateSceneObject_t

				namespace ExtraVertexStreamOverride_t {
					constexpr auto n_sub_scene_object = 0x4; // Name: m_nSubSceneObject Offset: 0x4
					constexpr auto n_draw_call_index = 0x8; // Name: m_nDrawCallIndex Offset: 0x8
					constexpr auto n_additional_mesh_draw_primitive_flags = 0xC; // Name: m_nAdditionalMeshDrawPrimitiveFlags Offset: 0xC
					constexpr auto extra_buffer_binding = 0x10; // Name: m_extraBufferBinding Offset: 0x10
				} // namespace ExtraVertexStreamOverride_t

				namespace VMapResourceData_t {
				} // namespace VMapResourceData_t

				namespace ClutterSceneObject_t {
					constexpr auto bounds = 0x0; // Name: m_Bounds Offset: 0x0
					constexpr auto flags = 0x18; // Name: m_flags Offset: 0x18
					constexpr auto n_layer = 0x1C; // Name: m_nLayer Offset: 0x1C
					constexpr auto instance_positions = 0x20; // Name: m_instancePositions Offset: 0x20
					constexpr auto instance_scales = 0x50; // Name: m_instanceScales Offset: 0x50
					constexpr auto instance_tint_srgb = 0x68; // Name: m_instanceTintSrgb Offset: 0x68
					constexpr auto tiles = 0x80; // Name: m_tiles Offset: 0x80
					constexpr auto renderable_model = 0x98; // Name: m_renderableModel Offset: 0x98
				} // namespace ClutterSceneObject_t

				namespace ClutterTile_t {
					constexpr auto n_first_instance = 0x0; // Name: m_nFirstInstance Offset: 0x0
					constexpr auto n_last_instance = 0x4; // Name: m_nLastInstance Offset: 0x4
					constexpr auto bounds_ws = 0x8; // Name: m_BoundsWs Offset: 0x8
				} // namespace ClutterTile_t

				namespace WorldBuilderParams_t {
					constexpr auto fl_min_draw_volume_size = 0x0; // Name: m_flMinDrawVolumeSize Offset: 0x0
					constexpr auto b_build_baked_lighting = 0x4; // Name: m_bBuildBakedLighting Offset: 0x4
					constexpr auto baked_lighting_info = 0x8; // Name: m_bakedLightingInfo Offset: 0x8
					constexpr auto n_compile_timestamp = 0x38; // Name: m_nCompileTimestamp Offset: 0x38
					constexpr auto n_compile_fingerprint = 0x40; // Name: m_nCompileFingerprint Offset: 0x40
				} // namespace WorldBuilderParams_t

				namespace PermEntityLumpData_t {
					constexpr auto name = 0x8; // Name: m_name Offset: 0x8
					constexpr auto child_lumps = 0x10; // Name: m_childLumps Offset: 0x10
					constexpr auto entity_key_values = 0x28; // Name: m_entityKeyValues Offset: 0x28
				} // namespace PermEntityLumpData_t

				namespace WorldNode_t {
					constexpr auto scene_objects = 0x0; // Name: m_sceneObjects Offset: 0x0
					constexpr auto info_overlays = 0x18; // Name: m_infoOverlays Offset: 0x18
					constexpr auto vis_cluster_membership = 0x30; // Name: m_visClusterMembership Offset: 0x30
					constexpr auto aggregate_scene_objects = 0x48; // Name: m_aggregateSceneObjects Offset: 0x48
					constexpr auto clutter_scene_objects = 0x60; // Name: m_clutterSceneObjects Offset: 0x60
					constexpr auto extra_vertex_stream_overrides = 0x78; // Name: m_extraVertexStreamOverrides Offset: 0x78
					constexpr auto material_overrides = 0x90; // Name: m_materialOverrides Offset: 0x90
					constexpr auto extra_vertex_streams = 0xA8; // Name: m_extraVertexStreams Offset: 0xA8
					constexpr auto layer_names = 0xC0; // Name: m_layerNames Offset: 0xC0
					constexpr auto scene_object_layer_indices = 0xD8; // Name: m_sceneObjectLayerIndices Offset: 0xD8
					constexpr auto overlay_layer_indices = 0xF0; // Name: m_overlayLayerIndices Offset: 0xF0
					constexpr auto grass_file_name = 0x108; // Name: m_grassFileName Offset: 0x108
					constexpr auto node_lighting_info = 0x110; // Name: m_nodeLightingInfo Offset: 0x110
					constexpr auto b_has_baked_geometry_flag = 0x140; // Name: m_bHasBakedGeometryFlag Offset: 0x140
				} // namespace WorldNode_t

				namespace MaterialOverride_t {
					constexpr auto n_sub_scene_object = 0x4; // Name: m_nSubSceneObject Offset: 0x4
					constexpr auto n_draw_call_index = 0x8; // Name: m_nDrawCallIndex Offset: 0x8
					constexpr auto p_material = 0x10; // Name: m_pMaterial Offset: 0x10
				} // namespace MaterialOverride_t

				namespace BaseSceneObjectOverride_t {
					constexpr auto n_scene_object_index = 0x0; // Name: m_nSceneObjectIndex Offset: 0x0
				} // namespace BaseSceneObjectOverride_t

				namespace EntityIOConnectionData_t {
					constexpr auto output_name = 0x0; // Name: m_outputName Offset: 0x0
					constexpr auto target_type = 0x8; // Name: m_targetType Offset: 0x8
					constexpr auto target_name = 0x10; // Name: m_targetName Offset: 0x10
					constexpr auto input_name = 0x18; // Name: m_inputName Offset: 0x18
					constexpr auto override_param = 0x20; // Name: m_overrideParam Offset: 0x20
					constexpr auto fl_delay = 0x28; // Name: m_flDelay Offset: 0x28
					constexpr auto n_times_to_fire = 0x2C; // Name: m_nTimesToFire Offset: 0x2C
				} // namespace EntityIOConnectionData_t

				namespace BakedLightingInfo_t {
					constexpr auto n_lightmap_version_number = 0x0; // Name: m_nLightmapVersionNumber Offset: 0x0
					constexpr auto n_lightmap_game_version_number = 0x4; // Name: m_nLightmapGameVersionNumber Offset: 0x4
					constexpr auto v_lightmap_uv_scale = 0x8; // Name: m_vLightmapUvScale Offset: 0x8
					constexpr auto b_has_lightmaps = 0x10; // Name: m_bHasLightmaps Offset: 0x10
					constexpr auto b_baked_shadows_gamma20 = 0x11; // Name: m_bBakedShadowsGamma20 Offset: 0x11
					constexpr auto b_compression_enabled = 0x12; // Name: m_bCompressionEnabled Offset: 0x12
					constexpr auto n_chart_pack_iterations = 0x13; // Name: m_nChartPackIterations Offset: 0x13
					constexpr auto n_vrad_quality = 0x14; // Name: m_nVradQuality Offset: 0x14
					constexpr auto light_maps = 0x18; // Name: m_lightMaps Offset: 0x18
				} // namespace BakedLightingInfo_t

				namespace VoxelVisBlockOffset_t {
					constexpr auto n_offset = 0x0; // Name: m_nOffset Offset: 0x0
					constexpr auto n_element_count = 0x4; // Name: m_nElementCount Offset: 0x4
				} // namespace VoxelVisBlockOffset_t

				namespace InfoForResourceTypeVMapResourceData_t {
				} // namespace InfoForResourceTypeVMapResourceData_t

				namespace WorldNodeOnDiskBufferData_t {
					constexpr auto n_element_count = 0x0; // Name: m_nElementCount Offset: 0x0
					constexpr auto n_element_size_in_bytes = 0x4; // Name: m_nElementSizeInBytes Offset: 0x4
					constexpr auto input_layout_fields = 0x8; // Name: m_inputLayoutFields Offset: 0x8
					constexpr auto p_data = 0x20; // Name: m_pData Offset: 0x20
				} // namespace WorldNodeOnDiskBufferData_t

				namespace AggregateMeshInfo_t {
					constexpr auto n_vis_cluster_member_offset = 0x0; // Name: m_nVisClusterMemberOffset Offset: 0x0
					constexpr auto n_vis_cluster_member_count = 0x4; // Name: m_nVisClusterMemberCount Offset: 0x4
					constexpr auto b_has_transform = 0x5; // Name: m_bHasTransform Offset: 0x5
					constexpr auto n_draw_call_index = 0x6; // Name: m_nDrawCallIndex Offset: 0x6
					constexpr auto n_lodsetup_index = 0x8; // Name: m_nLODSetupIndex Offset: 0x8
					constexpr auto n_lodgroup_mask = 0xA; // Name: m_nLODGroupMask Offset: 0xA
					constexpr auto v_tint_color = 0xB; // Name: m_vTintColor Offset: 0xB
					constexpr auto object_flags = 0x10; // Name: m_objectFlags Offset: 0x10
					constexpr auto n_light_probe_volume_precomputed_handshake = 0x14; // Name: m_nLightProbeVolumePrecomputedHandshake Offset: 0x14
				} // namespace AggregateMeshInfo_t

				namespace World_t {
					constexpr auto builder_params = 0x0; // Name: m_builderParams Offset: 0x0
					constexpr auto world_nodes = 0x48; // Name: m_worldNodes Offset: 0x48
					constexpr auto world_lighting_info = 0x60; // Name: m_worldLightingInfo Offset: 0x60
					constexpr auto entity_lumps = 0x90; // Name: m_entityLumps Offset: 0x90
				} // namespace World_t

				namespace InfoOverlayData_t {
					constexpr auto transform = 0x0; // Name: m_transform Offset: 0x0
					constexpr auto fl_width = 0x30; // Name: m_flWidth Offset: 0x30
					constexpr auto fl_height = 0x34; // Name: m_flHeight Offset: 0x34
					constexpr auto fl_depth = 0x38; // Name: m_flDepth Offset: 0x38
					constexpr auto v_uvstart = 0x3C; // Name: m_vUVStart Offset: 0x3C
					constexpr auto v_uvend = 0x44; // Name: m_vUVEnd Offset: 0x44
					constexpr auto p_material = 0x50; // Name: m_pMaterial Offset: 0x50
					constexpr auto n_render_order = 0x58; // Name: m_nRenderOrder Offset: 0x58
					constexpr auto v_tint_color = 0x5C; // Name: m_vTintColor Offset: 0x5C
					constexpr auto n_sequence_override = 0x6C; // Name: m_nSequenceOverride Offset: 0x6C
				} // namespace InfoOverlayData_t

				namespace EntityKeyValueData_t {
					constexpr auto connections = 0x8; // Name: m_connections Offset: 0x8
					constexpr auto key_values_data = 0x20; // Name: m_keyValuesData Offset: 0x20
				} // namespace EntityKeyValueData_t
			}

			namespace rendersystemdx11
			{

				namespace RenderInputLayoutField_t {
					constexpr auto p_semantic_name = 0x0; // Name: m_pSemanticName Offset: 0x0
					constexpr auto n_semantic_index = 0x20; // Name: m_nSemanticIndex Offset: 0x20
					constexpr auto format = 0x24; // Name: m_Format Offset: 0x24
					constexpr auto n_offset = 0x28; // Name: m_nOffset Offset: 0x28
					constexpr auto n_slot = 0x2C; // Name: m_nSlot Offset: 0x2C
					constexpr auto n_slot_type = 0x30; // Name: m_nSlotType Offset: 0x30
					constexpr auto n_instance_step_rate = 0x34; // Name: m_nInstanceStepRate Offset: 0x34
				} // namespace RenderInputLayoutField_t

				namespace VsInputSignatureElement_t {
					constexpr auto p_name = 0x0; // Name: m_pName Offset: 0x0
					constexpr auto p_semantic = 0x40; // Name: m_pSemantic Offset: 0x40
					constexpr auto p_d3_dsemantic_name = 0x80; // Name: m_pD3DSemanticName Offset: 0x80
					constexpr auto n_d3_dsemantic_index = 0xC0; // Name: m_nD3DSemanticIndex Offset: 0xC0
				} // namespace VsInputSignatureElement_t

				namespace VsInputSignature_t {
					constexpr auto elems = 0x0; // Name: m_elems Offset: 0x0
				} // namespace VsInputSignature_t
			}

		} // namespace schema
	} // namespace offsets
} // namespace sdk
#endif // SDK_SCHEMA_OFFSETS_H
